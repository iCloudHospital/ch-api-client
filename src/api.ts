// tslint:disable
/**
 * Swagger UI - Cloud Hospital
 * Cloud Hospital application with Swagger, Swashbuckle, and API versioning.
 *
 * The version of the OpenAPI document: 1
 * Contact: hyounoosung@icloudhospital.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Account
 */
export interface Account {
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    id?: string;
    /**
     * 
     * @type {VendorType}
     * @memberof Account
     */
    vendor?: VendorType;
    /**
     * 
     * @type {AuditableEntity}
     * @memberof Account
     */
    auditableEntity?: AuditableEntity;
}
/**
 * 
 * @export
 * @interface Accreditation
 */
export interface Accreditation {
    /**
     * 
     * @type {string}
     * @memberof Accreditation
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof Accreditation
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof Accreditation
     */
    normalizedName?: string;
    /**
     * 
     * @type {string}
     * @memberof Accreditation
     */
    logo?: string;
    /**
     * 
     * @type {string}
     * @memberof Accreditation
     */
    country?: string;
    /**
     * 
     * @type {Array<HospitalAccreditation>}
     * @memberof Accreditation
     */
    accreditations?: Array<HospitalAccreditation>;
}
/**
 * 
 * @export
 * @interface Article
 */
export interface Article {
    /**
     * 
     * @type {string}
     * @memberof Article
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof Article
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof Article
     */
    normalizedTitle?: string;
    /**
     * 
     * @type {string}
     * @memberof Article
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof Article
     */
    body?: string;
    /**
     * 
     * @type {ArticleStatus}
     * @memberof Article
     */
    status?: ArticleStatus;
    /**
     * 
     * @type {string}
     * @memberof Article
     */
    userId?: string;
    /**
     * 
     * @type {User}
     * @memberof Article
     */
    user?: User;
    /**
     * 
     * @type {string}
     * @memberof Article
     */
    hospitalId?: string;
    /**
     * 
     * @type {Hospital}
     * @memberof Article
     */
    hospital?: Hospital;
    /**
     * 
     * @type {Array<ArticleTag>}
     * @memberof Article
     */
    articleTags?: Array<ArticleTag>;
    /**
     * 
     * @type {Array<Media>}
     * @memberof Article
     */
    medias?: Array<Media>;
    /**
     * 
     * @type {AuditableEntity}
     * @memberof Article
     */
    auditableEntity?: AuditableEntity;
}
/**
 * 
 * @export
 * @interface ArticleItemViewModel
 */
export interface ArticleItemViewModel {
    /**
     * 
     * @type {string}
     * @memberof ArticleItemViewModel
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof ArticleItemViewModel
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof ArticleItemViewModel
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof ArticleItemViewModel
     */
    body?: string;
    /**
     * 
     * @type {ArticleStatus}
     * @memberof ArticleItemViewModel
     */
    status?: ArticleStatus;
    /**
     * 
     * @type {string}
     * @memberof ArticleItemViewModel
     */
    userId?: string;
    /**
     * 
     * @type {string}
     * @memberof ArticleItemViewModel
     */
    userName?: string;
    /**
     * 
     * @type {string}
     * @memberof ArticleItemViewModel
     */
    hospitalId?: string;
    /**
     * 
     * @type {string}
     * @memberof ArticleItemViewModel
     */
    hospitalName?: string;
    /**
     * 
     * @type {Array<ArticleTag>}
     * @memberof ArticleItemViewModel
     */
    articleTags?: Array<ArticleTag>;
    /**
     * 
     * @type {Array<MediaViewModel>}
     * @memberof ArticleItemViewModel
     */
    medias?: Array<MediaViewModel>;
    /**
     * 
     * @type {AuditableEntity}
     * @memberof ArticleItemViewModel
     */
    auditableEntity?: AuditableEntity;
}
/**
 * 
 * @export
 * @enum {string}
 */
export enum ArticleStatus {
    Draft = 'Draft',
    Active = 'Active',
    Archived = 'Archived'
}

/**
 * 
 * @export
 * @interface ArticleTag
 */
export interface ArticleTag {
    /**
     * 
     * @type {string}
     * @memberof ArticleTag
     */
    articleId?: string;
    /**
     * 
     * @type {Article}
     * @memberof ArticleTag
     */
    article?: Article;
    /**
     * 
     * @type {string}
     * @memberof ArticleTag
     */
    tagId?: string;
    /**
     * 
     * @type {Tag}
     * @memberof ArticleTag
     */
    tag?: Tag;
    /**
     * 
     * @type {number}
     * @memberof ArticleTag
     */
    order?: number;
}
/**
 * 
 * @export
 * @interface ArticleViewModel
 */
export interface ArticleViewModel {
    /**
     * 
     * @type {string}
     * @memberof ArticleViewModel
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof ArticleViewModel
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof ArticleViewModel
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof ArticleViewModel
     */
    body?: string;
    /**
     * 
     * @type {ArticleStatus}
     * @memberof ArticleViewModel
     */
    status?: ArticleStatus;
    /**
     * 
     * @type {string}
     * @memberof ArticleViewModel
     */
    userId?: string;
    /**
     * 
     * @type {string}
     * @memberof ArticleViewModel
     */
    userName?: string;
    /**
     * 
     * @type {string}
     * @memberof ArticleViewModel
     */
    hospitalId?: string;
    /**
     * 
     * @type {string}
     * @memberof ArticleViewModel
     */
    hospitalName?: string;
    /**
     * 
     * @type {Array<ArticleTag>}
     * @memberof ArticleViewModel
     */
    articleTags?: Array<ArticleTag>;
    /**
     * 
     * @type {Array<MediaViewModel>}
     * @memberof ArticleViewModel
     */
    medias?: Array<MediaViewModel>;
    /**
     * 
     * @type {AuditableEntity}
     * @memberof ArticleViewModel
     */
    auditableEntity?: AuditableEntity;
}
/**
 * 
 * @export
 * @interface ArticlesViewModel
 */
export interface ArticlesViewModel {
    /**
     * 
     * @type {Array<ArticleItemViewModel>}
     * @memberof ArticlesViewModel
     */
    items?: Array<ArticleItemViewModel>;
    /**
     * 
     * @type {PagedListMetaData}
     * @memberof ArticlesViewModel
     */
    metaData?: PagedListMetaData;
}
/**
 * 
 * @export
 * @interface Assessment
 */
export interface Assessment {
    /**
     * 
     * @type {string}
     * @memberof Assessment
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof Assessment
     */
    serviceId?: string;
    /**
     * 
     * @type {Service}
     * @memberof Assessment
     */
    service?: Service;
    /**
     * 
     * @type {string}
     * @memberof Assessment
     */
    question?: string;
    /**
     * 
     * @type {string}
     * @memberof Assessment
     */
    normalizedQuestion?: string;
    /**
     * 
     * @type {AssessmentType}
     * @memberof Assessment
     */
    answerType?: AssessmentType;
    /**
     * 
     * @type {boolean}
     * @memberof Assessment
     */
    isRequired?: boolean;
    /**
     * 
     * @type {number}
     * @memberof Assessment
     */
    order?: number;
    /**
     * 
     * @type {Array<AssessmentAnswer>}
     * @memberof Assessment
     */
    assessmentAnswers?: Array<AssessmentAnswer>;
}
/**
 * 
 * @export
 * @interface AssessmentAnswer
 */
export interface AssessmentAnswer {
    /**
     * 
     * @type {string}
     * @memberof AssessmentAnswer
     */
    assessmentId?: string;
    /**
     * 
     * @type {Assessment}
     * @memberof AssessmentAnswer
     */
    assessment?: Assessment;
    /**
     * 
     * @type {string}
     * @memberof AssessmentAnswer
     */
    bookingId?: string;
    /**
     * 
     * @type {Booking}
     * @memberof AssessmentAnswer
     */
    booking?: Booking;
    /**
     * 
     * @type {string}
     * @memberof AssessmentAnswer
     */
    textAnswer?: string;
    /**
     * 
     * @type {boolean}
     * @memberof AssessmentAnswer
     */
    booleanAnswer?: boolean;
}
/**
 * 
 * @export
 * @enum {string}
 */
export enum AssessmentType {
    Boolean = 'Boolean',
    Text = 'Text'
}

/**
 * 
 * @export
 * @interface AuditableEntity
 */
export interface AuditableEntity {
    /**
     * 
     * @type {string}
     * @memberof AuditableEntity
     */
    createdBy?: string;
    /**
     * 
     * @type {string}
     * @memberof AuditableEntity
     */
    updatedBy?: string;
    /**
     * 
     * @type {string}
     * @memberof AuditableEntity
     */
    deletedBy?: string;
    /**
     * 
     * @type {Date}
     * @memberof AuditableEntity
     */
    createdDate?: Date;
    /**
     * 
     * @type {Date}
     * @memberof AuditableEntity
     */
    updatedDate?: Date;
    /**
     * 
     * @type {Date}
     * @memberof AuditableEntity
     */
    deletedDate?: Date;
    /**
     * 
     * @type {boolean}
     * @memberof AuditableEntity
     */
    isHidden?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof AuditableEntity
     */
    isDeleted?: boolean;
}
/**
 * 
 * @export
 * @interface Award
 */
export interface Award {
    /**
     * 
     * @type {string}
     * @memberof Award
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof Award
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof Award
     */
    image?: string;
    /**
     * 
     * @type {Date}
     * @memberof Award
     */
    date?: Date;
}
/**
 * 
 * @export
 * @interface AwardViewModel
 */
export interface AwardViewModel {
    /**
     * 
     * @type {string}
     * @memberof AwardViewModel
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof AwardViewModel
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof AwardViewModel
     */
    image?: string;
    /**
     * 
     * @type {Date}
     * @memberof AwardViewModel
     */
    date?: Date;
}
/**
 * 
 * @export
 * @interface Booking
 */
export interface Booking {
    /**
     * 
     * @type {string}
     * @memberof Booking
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof Booking
     */
    patientId?: string;
    /**
     * 
     * @type {Patient}
     * @memberof Booking
     */
    patient?: Patient;
    /**
     * 
     * @type {string}
     * @memberof Booking
     */
    packageId?: string;
    /**
     * 
     * @type {Package}
     * @memberof Booking
     */
    _package?: Package;
    /**
     * 
     * @type {number}
     * @memberof Booking
     */
    fee?: number;
    /**
     * 
     * @type {number}
     * @memberof Booking
     */
    applicationFee?: number;
    /**
     * 
     * @type {Date}
     * @memberof Booking
     */
    approximateDateStart?: Date;
    /**
     * 
     * @type {Date}
     * @memberof Booking
     */
    approximateDateEnd?: Date;
    /**
     * 
     * @type {Date}
     * @memberof Booking
     */
    confirmedDateStart?: Date;
    /**
     * 
     * @type {Date}
     * @memberof Booking
     */
    confirmedDateEnd?: Date;
    /**
     * 
     * @type {BookingStatus}
     * @memberof Booking
     */
    bookingStatus?: BookingStatus;
    /**
     * 
     * @type {RejectReason}
     * @memberof Booking
     */
    rejectReason?: RejectReason;
    /**
     * 
     * @type {boolean}
     * @memberof Booking
     */
    isOpen?: boolean;
    /**
     * 
     * @type {Array<Payment>}
     * @memberof Booking
     */
    payments?: Array<Payment>;
    /**
     * 
     * @type {Array<BookingComment>}
     * @memberof Booking
     */
    bookingComments?: Array<BookingComment>;
    /**
     * 
     * @type {Array<AssessmentAnswer>}
     * @memberof Booking
     */
    assessmentAnswers?: Array<AssessmentAnswer>;
    /**
     * 
     * @type {Array<ChangeLog>}
     * @memberof Booking
     */
    bookingStatusChangeLogs?: Array<ChangeLog>;
    /**
     * 
     * @type {AuditableEntity}
     * @memberof Booking
     */
    auditableEntity?: AuditableEntity;
}
/**
 * 
 * @export
 * @interface BookingComment
 */
export interface BookingComment {
    /**
     * 
     * @type {string}
     * @memberof BookingComment
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof BookingComment
     */
    patientId?: string;
    /**
     * 
     * @type {Patient}
     * @memberof BookingComment
     */
    patient?: Patient;
    /**
     * 
     * @type {string}
     * @memberof BookingComment
     */
    bookingId?: string;
    /**
     * 
     * @type {Booking}
     * @memberof BookingComment
     */
    booking?: Booking;
    /**
     * 
     * @type {string}
     * @memberof BookingComment
     */
    body?: string;
    /**
     * 
     * @type {Array<Media>}
     * @memberof BookingComment
     */
    medias?: Array<Media>;
    /**
     * 
     * @type {AuditableEntity}
     * @memberof BookingComment
     */
    auditableEntity?: AuditableEntity;
}
/**
 * 
 * @export
 * @interface BookingItemViewModel
 */
export interface BookingItemViewModel {
    /**
     * 
     * @type {string}
     * @memberof BookingItemViewModel
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof BookingItemViewModel
     */
    patientId?: string;
    /**
     * 
     * @type {string}
     * @memberof BookingItemViewModel
     */
    packageId?: string;
    /**
     * 
     * @type {string}
     * @memberof BookingItemViewModel
     */
    managerId?: string;
    /**
     * 
     * @type {number}
     * @memberof BookingItemViewModel
     */
    fee?: number;
    /**
     * 
     * @type {number}
     * @memberof BookingItemViewModel
     */
    applicationFee?: number;
    /**
     * 
     * @type {Date}
     * @memberof BookingItemViewModel
     */
    approximateDateStart?: Date;
    /**
     * 
     * @type {Date}
     * @memberof BookingItemViewModel
     */
    approximateDateEnd?: Date;
    /**
     * 
     * @type {Date}
     * @memberof BookingItemViewModel
     */
    confirmedDateStart?: Date;
    /**
     * 
     * @type {Date}
     * @memberof BookingItemViewModel
     */
    confirmedDateEnd?: Date;
    /**
     * 
     * @type {BookingStatus}
     * @memberof BookingItemViewModel
     */
    bookingStatus?: BookingStatus;
}
/**
 * 
 * @export
 * @enum {string}
 */
export enum BookingStatus {
    New = 'New',
    Rejected = 'Rejected',
    Approved = 'Approved',
    Paid = 'Paid',
    Canceled = 'Canceled'
}

/**
 * 
 * @export
 * @interface BookingViewModel
 */
export interface BookingViewModel {
    /**
     * 
     * @type {string}
     * @memberof BookingViewModel
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof BookingViewModel
     */
    patientId?: string;
    /**
     * 
     * @type {string}
     * @memberof BookingViewModel
     */
    packageId?: string;
    /**
     * 
     * @type {string}
     * @memberof BookingViewModel
     */
    managerId?: string;
    /**
     * 
     * @type {number}
     * @memberof BookingViewModel
     */
    fee?: number;
    /**
     * 
     * @type {number}
     * @memberof BookingViewModel
     */
    applicationFee?: number;
    /**
     * 
     * @type {Date}
     * @memberof BookingViewModel
     */
    approximateDateStart?: Date;
    /**
     * 
     * @type {Date}
     * @memberof BookingViewModel
     */
    approximateDateEnd?: Date;
    /**
     * 
     * @type {Date}
     * @memberof BookingViewModel
     */
    confirmedDateStart?: Date;
    /**
     * 
     * @type {Date}
     * @memberof BookingViewModel
     */
    confirmedDateEnd?: Date;
    /**
     * 
     * @type {BookingStatus}
     * @memberof BookingViewModel
     */
    bookingStatus?: BookingStatus;
}
/**
 * 
 * @export
 * @interface BookingsViewModel
 */
export interface BookingsViewModel {
    /**
     * 
     * @type {Array<BookingItemViewModel>}
     * @memberof BookingsViewModel
     */
    items?: Array<BookingItemViewModel>;
    /**
     * 
     * @type {PagedListMetaData}
     * @memberof BookingsViewModel
     */
    metaData?: PagedListMetaData;
}
/**
 * 
 * @export
 * @interface CHAdminItemViewModel
 */
export interface CHAdminItemViewModel {
    /**
     * 
     * @type {string}
     * @memberof CHAdminItemViewModel
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof CHAdminItemViewModel
     */
    userName?: string;
    /**
     * 
     * @type {string}
     * @memberof CHAdminItemViewModel
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof CHAdminItemViewModel
     */
    lastName?: string;
    /**
     * 
     * @type {string}
     * @memberof CHAdminItemViewModel
     */
    fullname?: string;
    /**
     * 
     * @type {string}
     * @memberof CHAdminItemViewModel
     */
    phone?: string;
    /**
     * 
     * @type {string}
     * @memberof CHAdminItemViewModel
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof CHAdminItemViewModel
     */
    photo?: string;
    /**
     * 
     * @type {string}
     * @memberof CHAdminItemViewModel
     */
    photoThumbnail?: string;
    /**
     * 
     * @type {Gender}
     * @memberof CHAdminItemViewModel
     */
    gender?: Gender;
    /**
     * 
     * @type {Date}
     * @memberof CHAdminItemViewModel
     */
    dateOfBirth?: Date;
    /**
     * 
     * @type {AuditableEntity}
     * @memberof CHAdminItemViewModel
     */
    auditableEntity?: AuditableEntity;
}
/**
 * 
 * @export
 * @interface CHAdminViewModel
 */
export interface CHAdminViewModel {
    /**
     * 
     * @type {string}
     * @memberof CHAdminViewModel
     */
    userType?: string;
    /**
     * 
     * @type {Array<UserLanguageViewModel>}
     * @memberof CHAdminViewModel
     */
    languages?: Array<UserLanguageViewModel>;
    /**
     * 
     * @type {Array<UserLocationViewModel>}
     * @memberof CHAdminViewModel
     */
    locations?: Array<UserLocationViewModel>;
    /**
     * 
     * @type {string}
     * @memberof CHAdminViewModel
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof CHAdminViewModel
     */
    userName?: string;
    /**
     * 
     * @type {string}
     * @memberof CHAdminViewModel
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof CHAdminViewModel
     */
    lastName?: string;
    /**
     * 
     * @type {string}
     * @memberof CHAdminViewModel
     */
    fullname?: string;
    /**
     * 
     * @type {string}
     * @memberof CHAdminViewModel
     */
    phone?: string;
    /**
     * 
     * @type {string}
     * @memberof CHAdminViewModel
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof CHAdminViewModel
     */
    photo?: string;
    /**
     * 
     * @type {string}
     * @memberof CHAdminViewModel
     */
    photoThumbnail?: string;
    /**
     * 
     * @type {Gender}
     * @memberof CHAdminViewModel
     */
    gender?: Gender;
    /**
     * 
     * @type {Date}
     * @memberof CHAdminViewModel
     */
    dateOfBirth?: Date;
    /**
     * 
     * @type {AuditableEntity}
     * @memberof CHAdminViewModel
     */
    auditableEntity?: AuditableEntity;
}
/**
 * 
 * @export
 * @interface CHAdminsViewModel
 */
export interface CHAdminsViewModel {
    /**
     * 
     * @type {Array<CHAdminItemViewModel>}
     * @memberof CHAdminsViewModel
     */
    items?: Array<CHAdminItemViewModel>;
    /**
     * 
     * @type {PagedListMetaData}
     * @memberof CHAdminsViewModel
     */
    metaData?: PagedListMetaData;
}
/**
 * 
 * @export
 * @interface CHManagerItemViewModel
 */
export interface CHManagerItemViewModel {
    /**
     * 
     * @type {string}
     * @memberof CHManagerItemViewModel
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof CHManagerItemViewModel
     */
    userName?: string;
    /**
     * 
     * @type {string}
     * @memberof CHManagerItemViewModel
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof CHManagerItemViewModel
     */
    lastName?: string;
    /**
     * 
     * @type {string}
     * @memberof CHManagerItemViewModel
     */
    fullname?: string;
    /**
     * 
     * @type {string}
     * @memberof CHManagerItemViewModel
     */
    phone?: string;
    /**
     * 
     * @type {string}
     * @memberof CHManagerItemViewModel
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof CHManagerItemViewModel
     */
    photo?: string;
    /**
     * 
     * @type {string}
     * @memberof CHManagerItemViewModel
     */
    photoThumbnail?: string;
    /**
     * 
     * @type {Gender}
     * @memberof CHManagerItemViewModel
     */
    gender?: Gender;
    /**
     * 
     * @type {Date}
     * @memberof CHManagerItemViewModel
     */
    dateOfBirth?: Date;
    /**
     * 
     * @type {AuditableEntity}
     * @memberof CHManagerItemViewModel
     */
    auditableEntity?: AuditableEntity;
}
/**
 * 
 * @export
 * @interface CHManagerViewModel
 */
export interface CHManagerViewModel {
    /**
     * 
     * @type {string}
     * @memberof CHManagerViewModel
     */
    userType?: string;
    /**
     * 
     * @type {Array<UserLanguageViewModel>}
     * @memberof CHManagerViewModel
     */
    languages?: Array<UserLanguageViewModel>;
    /**
     * 
     * @type {Array<UserLocationViewModel>}
     * @memberof CHManagerViewModel
     */
    locations?: Array<UserLocationViewModel>;
    /**
     * 
     * @type {string}
     * @memberof CHManagerViewModel
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof CHManagerViewModel
     */
    userName?: string;
    /**
     * 
     * @type {string}
     * @memberof CHManagerViewModel
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof CHManagerViewModel
     */
    lastName?: string;
    /**
     * 
     * @type {string}
     * @memberof CHManagerViewModel
     */
    fullname?: string;
    /**
     * 
     * @type {string}
     * @memberof CHManagerViewModel
     */
    phone?: string;
    /**
     * 
     * @type {string}
     * @memberof CHManagerViewModel
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof CHManagerViewModel
     */
    photo?: string;
    /**
     * 
     * @type {string}
     * @memberof CHManagerViewModel
     */
    photoThumbnail?: string;
    /**
     * 
     * @type {Gender}
     * @memberof CHManagerViewModel
     */
    gender?: Gender;
    /**
     * 
     * @type {Date}
     * @memberof CHManagerViewModel
     */
    dateOfBirth?: Date;
    /**
     * 
     * @type {AuditableEntity}
     * @memberof CHManagerViewModel
     */
    auditableEntity?: AuditableEntity;
}
/**
 * 
 * @export
 * @interface CHManagersViewModel
 */
export interface CHManagersViewModel {
    /**
     * 
     * @type {Array<CHManagerItemViewModel>}
     * @memberof CHManagersViewModel
     */
    items?: Array<CHManagerItemViewModel>;
    /**
     * 
     * @type {PagedListMetaData}
     * @memberof CHManagersViewModel
     */
    metaData?: PagedListMetaData;
}
/**
 * 
 * @export
 * @interface ChangeEmailCommand
 */
export interface ChangeEmailCommand {
    /**
     * 
     * @type {string}
     * @memberof ChangeEmailCommand
     */
    email?: string;
}
/**
 * 
 * @export
 * @interface ChangeLog
 */
export interface ChangeLog {
    /**
     * 
     * @type {string}
     * @memberof ChangeLog
     */
    id?: string;
    /**
     * 
     * @type {number}
     * @memberof ChangeLog
     */
    status?: number;
    /**
     * 
     * @type {string}
     * @memberof ChangeLog
     */
    actorId?: string;
    /**
     * 
     * @type {Date}
     * @memberof ChangeLog
     */
    createdDate?: Date;
}
/**
 * 
 * @export
 * @enum {string}
 */
export enum ChargeStatus {
    Pending = 'Pending',
    Succeeded = 'Succeeded',
    Failed = 'Failed'
}

/**
 * 
 * @export
 * @interface CountriesViewModel
 */
export interface CountriesViewModel {
    /**
     * 
     * @type {Array<CountryItemViewModel>}
     * @memberof CountriesViewModel
     */
    items?: Array<CountryItemViewModel>;
    /**
     * 
     * @type {PagedListMetaData}
     * @memberof CountriesViewModel
     */
    metaData?: PagedListMetaData;
}
/**
 * 
 * @export
 * @interface Country
 */
export interface Country {
    /**
     * 
     * @type {string}
     * @memberof Country
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof Country
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof Country
     */
    normalizedName?: string;
    /**
     * 
     * @type {string}
     * @memberof Country
     */
    description?: string;
    /**
     * 
     * @type {Array<Hospital>}
     * @memberof Country
     */
    hospitals?: Array<Hospital>;
    /**
     * 
     * @type {Array<Media>}
     * @memberof Country
     */
    medias?: Array<Media>;
    /**
     * 
     * @type {AuditableEntity}
     * @memberof Country
     */
    auditableEntity?: AuditableEntity;
}
/**
 * 
 * @export
 * @interface CountryItemViewModel
 */
export interface CountryItemViewModel {
    /**
     * 
     * @type {string}
     * @memberof CountryItemViewModel
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof CountryItemViewModel
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof CountryItemViewModel
     */
    description?: string;
    /**
     * 
     * @type {number}
     * @memberof CountryItemViewModel
     */
    hospitalsCount?: number;
    /**
     * 
     * @type {number}
     * @memberof CountryItemViewModel
     */
    doctorsCount?: number;
    /**
     * 
     * @type {number}
     * @memberof CountryItemViewModel
     */
    specialitiesCount?: number;
    /**
     * 
     * @type {number}
     * @memberof CountryItemViewModel
     */
    packagesCount?: number;
    /**
     * 
     * @type {Array<MediaViewModel>}
     * @memberof CountryItemViewModel
     */
    medias?: Array<MediaViewModel>;
    /**
     * 
     * @type {AuditableEntity}
     * @memberof CountryItemViewModel
     */
    auditableEntity?: AuditableEntity;
}
/**
 * 
 * @export
 * @interface CountryViewModel
 */
export interface CountryViewModel {
    /**
     * 
     * @type {string}
     * @memberof CountryViewModel
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof CountryViewModel
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof CountryViewModel
     */
    description?: string;
    /**
     * 
     * @type {number}
     * @memberof CountryViewModel
     */
    hospitalsCount?: number;
    /**
     * 
     * @type {number}
     * @memberof CountryViewModel
     */
    doctorsCount?: number;
    /**
     * 
     * @type {number}
     * @memberof CountryViewModel
     */
    specialitiesCount?: number;
    /**
     * 
     * @type {number}
     * @memberof CountryViewModel
     */
    packagesCount?: number;
    /**
     * 
     * @type {Array<MediaViewModel>}
     * @memberof CountryViewModel
     */
    medias?: Array<MediaViewModel>;
    /**
     * 
     * @type {AuditableEntity}
     * @memberof CountryViewModel
     */
    auditableEntity?: AuditableEntity;
}
/**
 * 
 * @export
 * @interface CreateArticleCommand
 */
export interface CreateArticleCommand {
    /**
     * 
     * @type {string}
     * @memberof CreateArticleCommand
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateArticleCommand
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateArticleCommand
     */
    body?: string;
    /**
     * 
     * @type {ArticleStatus}
     * @memberof CreateArticleCommand
     */
    status?: ArticleStatus;
    /**
     * 
     * @type {Array<ArticleTag>}
     * @memberof CreateArticleCommand
     */
    articleTags?: Array<ArticleTag>;
    /**
     * 
     * @type {Array<MediaViewModel>}
     * @memberof CreateArticleCommand
     */
    medias?: Array<MediaViewModel>;
}
/**
 * 
 * @export
 * @interface CreateBookingCommand
 */
export interface CreateBookingCommand {
    /**
     * 
     * @type {string}
     * @memberof CreateBookingCommand
     */
    packageId?: string;
    /**
     * 
     * @type {Date}
     * @memberof CreateBookingCommand
     */
    approximateDateStart?: Date;
    /**
     * 
     * @type {Date}
     * @memberof CreateBookingCommand
     */
    approximateDateEnd?: Date;
}
/**
 * 
 * @export
 * @interface CreateCHAdminCommand
 */
export interface CreateCHAdminCommand {
    /**
     * 
     * @type {string}
     * @memberof CreateCHAdminCommand
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateCHAdminCommand
     */
    lastName?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateCHAdminCommand
     */
    phone?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateCHAdminCommand
     */
    photo?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateCHAdminCommand
     */
    photoThumbnail?: string;
    /**
     * 
     * @type {Gender}
     * @memberof CreateCHAdminCommand
     */
    gender?: Gender;
    /**
     * 
     * @type {Date}
     * @memberof CreateCHAdminCommand
     */
    dateOfBirth?: Date;
    /**
     * 
     * @type {Array<MediaViewModel>}
     * @memberof CreateCHAdminCommand
     */
    medias?: Array<MediaViewModel>;
    /**
     * 
     * @type {Array<UserLanguageViewModel>}
     * @memberof CreateCHAdminCommand
     */
    languages?: Array<UserLanguageViewModel>;
    /**
     * 
     * @type {Array<UserLocationViewModel>}
     * @memberof CreateCHAdminCommand
     */
    locations?: Array<UserLocationViewModel>;
}
/**
 * 
 * @export
 * @interface CreateCHManagerCommand
 */
export interface CreateCHManagerCommand {
    /**
     * 
     * @type {string}
     * @memberof CreateCHManagerCommand
     */
    userName?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateCHManagerCommand
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateCHManagerCommand
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateCHManagerCommand
     */
    lastName?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateCHManagerCommand
     */
    phone?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateCHManagerCommand
     */
    photo?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateCHManagerCommand
     */
    photoThumbnail?: string;
    /**
     * 
     * @type {Gender}
     * @memberof CreateCHManagerCommand
     */
    gender?: Gender;
    /**
     * 
     * @type {Date}
     * @memberof CreateCHManagerCommand
     */
    dateOfBirth?: Date;
    /**
     * 
     * @type {Array<MediaViewModel>}
     * @memberof CreateCHManagerCommand
     */
    medias?: Array<MediaViewModel>;
    /**
     * 
     * @type {Array<UserLanguageViewModel>}
     * @memberof CreateCHManagerCommand
     */
    languages?: Array<UserLanguageViewModel>;
    /**
     * 
     * @type {Array<UserLocationViewModel>}
     * @memberof CreateCHManagerCommand
     */
    locations?: Array<UserLocationViewModel>;
}
/**
 * 
 * @export
 * @interface CreateCountryCommand
 */
export interface CreateCountryCommand {
    /**
     * 
     * @type {string}
     * @memberof CreateCountryCommand
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateCountryCommand
     */
    description?: string;
    /**
     * 
     * @type {Array<MediaViewModel>}
     * @memberof CreateCountryCommand
     */
    medias?: Array<MediaViewModel>;
}
/**
 * 
 * @export
 * @interface CreateDepartmentCommand
 */
export interface CreateDepartmentCommand {
    /**
     * 
     * @type {string}
     * @memberof CreateDepartmentCommand
     */
    hospitalId?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateDepartmentCommand
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateDepartmentCommand
     */
    additionalInfo?: string;
}
/**
 * 
 * @export
 * @interface CreateDoctorCertificateCommand
 */
export interface CreateDoctorCertificateCommand {
    /**
     * 
     * @type {string}
     * @memberof CreateDoctorCertificateCommand
     */
    certificate?: string;
    /**
     * 
     * @type {Date}
     * @memberof CreateDoctorCertificateCommand
     */
    activeFrom?: Date;
    /**
     * 
     * @type {Date}
     * @memberof CreateDoctorCertificateCommand
     */
    activeTo?: Date;
}
/**
 * 
 * @export
 * @interface CreateDoctorCommand
 */
export interface CreateDoctorCommand {
    /**
     * 
     * @type {string}
     * @memberof CreateDoctorCommand
     */
    userName?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateDoctorCommand
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateDoctorCommand
     */
    hospitalId?: string;
    /**
     * 
     * @type {Array<DoctorEducationViewModel>}
     * @memberof CreateDoctorCommand
     */
    educations?: Array<DoctorEducationViewModel>;
    /**
     * 
     * @type {Array<DoctorPortfolioViewModel>}
     * @memberof CreateDoctorCommand
     */
    portfolios?: Array<DoctorPortfolioViewModel>;
    /**
     * 
     * @type {Array<DoctorSpecialtyViewModel>}
     * @memberof CreateDoctorCommand
     */
    specialties?: Array<DoctorSpecialtyViewModel>;
    /**
     * 
     * @type {Array<DoctorCertificateViewModel>}
     * @memberof CreateDoctorCommand
     */
    certificates?: Array<DoctorCertificateViewModel>;
    /**
     * 
     * @type {Array<AwardViewModel>}
     * @memberof CreateDoctorCommand
     */
    awards?: Array<AwardViewModel>;
    /**
     * 
     * @type {string}
     * @memberof CreateDoctorCommand
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateDoctorCommand
     */
    lastName?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateDoctorCommand
     */
    phone?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateDoctorCommand
     */
    photo?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateDoctorCommand
     */
    photoThumbnail?: string;
    /**
     * 
     * @type {Gender}
     * @memberof CreateDoctorCommand
     */
    gender?: Gender;
    /**
     * 
     * @type {Date}
     * @memberof CreateDoctorCommand
     */
    dateOfBirth?: Date;
    /**
     * 
     * @type {Array<MediaViewModel>}
     * @memberof CreateDoctorCommand
     */
    medias?: Array<MediaViewModel>;
    /**
     * 
     * @type {Array<UserLanguageViewModel>}
     * @memberof CreateDoctorCommand
     */
    languages?: Array<UserLanguageViewModel>;
    /**
     * 
     * @type {Array<UserLocationViewModel>}
     * @memberof CreateDoctorCommand
     */
    locations?: Array<UserLocationViewModel>;
}
/**
 * 
 * @export
 * @interface CreateDoctorReviewCommand
 */
export interface CreateDoctorReviewCommand {
    /**
     * 
     * @type {string}
     * @memberof CreateDoctorReviewCommand
     */
    body?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CreateDoctorReviewCommand
     */
    recommended?: boolean;
    /**
     * 
     * @type {ReviewCategory}
     * @memberof CreateDoctorReviewCommand
     */
    reviewCategory?: ReviewCategory;
    /**
     * 
     * @type {number}
     * @memberof CreateDoctorReviewCommand
     */
    rate?: number;
}
/**
 * 
 * @export
 * @interface CreateEquipmentCommand
 */
export interface CreateEquipmentCommand {
    /**
     * 
     * @type {string}
     * @memberof CreateEquipmentCommand
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateEquipmentCommand
     */
    description?: string;
    /**
     * 
     * @type {Array<MediaViewModel>}
     * @memberof CreateEquipmentCommand
     */
    medias?: Array<MediaViewModel>;
    /**
     * 
     * @type {AuditableEntity}
     * @memberof CreateEquipmentCommand
     */
    auditableEntity?: AuditableEntity;
}
/**
 * 
 * @export
 * @interface CreateHospitalCommand
 */
export interface CreateHospitalCommand {
    /**
     * 
     * @type {string}
     * @memberof CreateHospitalCommand
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateHospitalCommand
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateHospitalCommand
     */
    logo?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateHospitalCommand
     */
    overview?: string;
    /**
     * 
     * @type {number}
     * @memberof CreateHospitalCommand
     */
    bedsCount?: number;
    /**
     * 
     * @type {number}
     * @memberof CreateHospitalCommand
     */
    operationRoomsCount?: number;
    /**
     * 
     * @type {number}
     * @memberof CreateHospitalCommand
     */
    icuBedsCount?: number;
    /**
     * 
     * @type {number}
     * @memberof CreateHospitalCommand
     */
    departmentsCount?: number;
    /**
     * 
     * @type {number}
     * @memberof CreateHospitalCommand
     */
    medicalStaffCount?: number;
    /**
     * 
     * @type {string}
     * @memberof CreateHospitalCommand
     */
    countryId?: string;
    /**
     * 
     * @type {MarketingType}
     * @memberof CreateHospitalCommand
     */
    marketingType?: MarketingType;
    /**
     * 
     * @type {Array<AwardViewModel>}
     * @memberof CreateHospitalCommand
     */
    awards?: Array<AwardViewModel>;
    /**
     * 
     * @type {Array<MediaViewModel>}
     * @memberof CreateHospitalCommand
     */
    medias?: Array<MediaViewModel>;
    /**
     * 
     * @type {LocationViewModel}
     * @memberof CreateHospitalCommand
     */
    location?: LocationViewModel;
}
/**
 * 
 * @export
 * @interface CreateHospitalPackageCommand
 */
export interface CreateHospitalPackageCommand {
    /**
     * 
     * @type {string}
     * @memberof CreateHospitalPackageCommand
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateHospitalPackageCommand
     */
    hospitalId?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateHospitalPackageCommand
     */
    accomodation?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateHospitalPackageCommand
     */
    trnasfer?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateHospitalPackageCommand
     */
    bonus?: string;
    /**
     * 
     * @type {number}
     * @memberof CreateHospitalPackageCommand
     */
    packagePrice?: number;
    /**
     * 
     * @type {PackageStatus}
     * @memberof CreateHospitalPackageCommand
     */
    packageStatus?: PackageStatus;
    /**
     * 
     * @type {Array<ServiceViewModel>}
     * @memberof CreateHospitalPackageCommand
     */
    services?: Array<ServiceViewModel>;
}
/**
 * 
 * @export
 * @interface CreateHospitalReviewCommand
 */
export interface CreateHospitalReviewCommand {
    /**
     * 
     * @type {string}
     * @memberof CreateHospitalReviewCommand
     */
    body?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CreateHospitalReviewCommand
     */
    recommended?: boolean;
    /**
     * 
     * @type {ReviewCategory}
     * @memberof CreateHospitalReviewCommand
     */
    reviewCategory?: ReviewCategory;
    /**
     * 
     * @type {number}
     * @memberof CreateHospitalReviewCommand
     */
    rate?: number;
}
/**
 * 
 * @export
 * @interface CreateManagerCommand
 */
export interface CreateManagerCommand {
    /**
     * 
     * @type {string}
     * @memberof CreateManagerCommand
     */
    userName?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateManagerCommand
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateManagerCommand
     */
    hospitalId?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateManagerCommand
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateManagerCommand
     */
    lastName?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateManagerCommand
     */
    phone?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateManagerCommand
     */
    photo?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateManagerCommand
     */
    photoThumbnail?: string;
    /**
     * 
     * @type {Gender}
     * @memberof CreateManagerCommand
     */
    gender?: Gender;
    /**
     * 
     * @type {Date}
     * @memberof CreateManagerCommand
     */
    dateOfBirth?: Date;
    /**
     * 
     * @type {Array<MediaViewModel>}
     * @memberof CreateManagerCommand
     */
    medias?: Array<MediaViewModel>;
    /**
     * 
     * @type {Array<UserLanguageViewModel>}
     * @memberof CreateManagerCommand
     */
    languages?: Array<UserLanguageViewModel>;
    /**
     * 
     * @type {Array<UserLocationViewModel>}
     * @memberof CreateManagerCommand
     */
    locations?: Array<UserLocationViewModel>;
}
/**
 * 
 * @export
 * @interface CreatePartnerCommand
 */
export interface CreatePartnerCommand {
    /**
     * 
     * @type {string}
     * @memberof CreatePartnerCommand
     */
    userName?: string;
    /**
     * 
     * @type {string}
     * @memberof CreatePartnerCommand
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof CreatePartnerCommand
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof CreatePartnerCommand
     */
    lastName?: string;
    /**
     * 
     * @type {string}
     * @memberof CreatePartnerCommand
     */
    phone?: string;
    /**
     * 
     * @type {string}
     * @memberof CreatePartnerCommand
     */
    photo?: string;
    /**
     * 
     * @type {string}
     * @memberof CreatePartnerCommand
     */
    photoThumbnail?: string;
    /**
     * 
     * @type {Gender}
     * @memberof CreatePartnerCommand
     */
    gender?: Gender;
    /**
     * 
     * @type {Date}
     * @memberof CreatePartnerCommand
     */
    dateOfBirth?: Date;
    /**
     * 
     * @type {Array<MediaViewModel>}
     * @memberof CreatePartnerCommand
     */
    medias?: Array<MediaViewModel>;
    /**
     * 
     * @type {Array<UserLanguageViewModel>}
     * @memberof CreatePartnerCommand
     */
    languages?: Array<UserLanguageViewModel>;
    /**
     * 
     * @type {Array<UserLocationViewModel>}
     * @memberof CreatePartnerCommand
     */
    locations?: Array<UserLocationViewModel>;
}
/**
 * 
 * @export
 * @interface CreatePatientCommand
 */
export interface CreatePatientCommand {
    /**
     * 
     * @type {string}
     * @memberof CreatePatientCommand
     */
    userName?: string;
    /**
     * 
     * @type {string}
     * @memberof CreatePatientCommand
     */
    email?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CreatePatientCommand
     */
    isAdmin?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CreatePatientCommand
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof CreatePatientCommand
     */
    lastName?: string;
    /**
     * 
     * @type {string}
     * @memberof CreatePatientCommand
     */
    phone?: string;
    /**
     * 
     * @type {string}
     * @memberof CreatePatientCommand
     */
    photo?: string;
    /**
     * 
     * @type {string}
     * @memberof CreatePatientCommand
     */
    photoThumbnail?: string;
    /**
     * 
     * @type {Gender}
     * @memberof CreatePatientCommand
     */
    gender?: Gender;
    /**
     * 
     * @type {Date}
     * @memberof CreatePatientCommand
     */
    dateOfBirth?: Date;
    /**
     * 
     * @type {Array<MediaViewModel>}
     * @memberof CreatePatientCommand
     */
    medias?: Array<MediaViewModel>;
    /**
     * 
     * @type {Array<UserLanguageViewModel>}
     * @memberof CreatePatientCommand
     */
    languages?: Array<UserLanguageViewModel>;
    /**
     * 
     * @type {Array<UserLocationViewModel>}
     * @memberof CreatePatientCommand
     */
    locations?: Array<UserLocationViewModel>;
}
/**
 * 
 * @export
 * @interface CreateServiceCommand
 */
export interface CreateServiceCommand {
    /**
     * 
     * @type {string}
     * @memberof CreateServiceCommand
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateServiceCommand
     */
    description?: string;
    /**
     * 
     * @type {number}
     * @memberof CreateServiceCommand
     */
    minPrice?: number;
    /**
     * 
     * @type {number}
     * @memberof CreateServiceCommand
     */
    maxPrice?: number;
    /**
     * 
     * @type {boolean}
     * @memberof CreateServiceCommand
     */
    priceReuqest?: boolean;
    /**
     * 
     * @type {Procedure}
     * @memberof CreateServiceCommand
     */
    procedure?: Procedure;
}
/**
 * 
 * @export
 * @interface CreateSpecialtyCommand
 */
export interface CreateSpecialtyCommand {
    /**
     * 
     * @type {string}
     * @memberof CreateSpecialtyCommand
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateSpecialtyCommand
     */
    description?: string;
}
/**
 * 
 * @export
 * @interface CreateSpecialtyTypeCommand
 */
export interface CreateSpecialtyTypeCommand {
    /**
     * 
     * @type {string}
     * @memberof CreateSpecialtyTypeCommand
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateSpecialtyTypeCommand
     */
    description?: string;
    /**
     * 
     * @type {MarketingType}
     * @memberof CreateSpecialtyTypeCommand
     */
    marketingType?: MarketingType;
}
/**
 * 
 * @export
 * @interface Customer
 */
export interface Customer {
    /**
     * 
     * @type {string}
     * @memberof Customer
     */
    id?: string;
    /**
     * 
     * @type {VendorType}
     * @memberof Customer
     */
    vendor?: VendorType;
    /**
     * 
     * @type {string}
     * @memberof Customer
     */
    patientId?: string;
    /**
     * 
     * @type {Patient}
     * @memberof Customer
     */
    patient?: Patient;
    /**
     * 
     * @type {Array<Payment>}
     * @memberof Customer
     */
    payments?: Array<Payment>;
    /**
     * 
     * @type {AuditableEntity}
     * @memberof Customer
     */
    auditableEntity?: AuditableEntity;
}
/**
 * 
 * @export
 * @interface Department
 */
export interface Department {
    /**
     * 
     * @type {string}
     * @memberof Department
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof Department
     */
    hospitalId?: string;
    /**
     * 
     * @type {Hospital}
     * @memberof Department
     */
    hospital?: Hospital;
    /**
     * 
     * @type {string}
     * @memberof Department
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof Department
     */
    normalizedName?: string;
    /**
     * 
     * @type {string}
     * @memberof Department
     */
    additionalInfo?: string;
}
/**
 * 
 * @export
 * @interface DepartmentItemViewModel
 */
export interface DepartmentItemViewModel {
    /**
     * 
     * @type {string}
     * @memberof DepartmentItemViewModel
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof DepartmentItemViewModel
     */
    hospitalId?: string;
    /**
     * 
     * @type {string}
     * @memberof DepartmentItemViewModel
     */
    hospitalName?: string;
    /**
     * 
     * @type {string}
     * @memberof DepartmentItemViewModel
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof DepartmentItemViewModel
     */
    additionalInfo?: string;
}
/**
 * 
 * @export
 * @interface DepartmentViewModel
 */
export interface DepartmentViewModel {
    /**
     * 
     * @type {string}
     * @memberof DepartmentViewModel
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof DepartmentViewModel
     */
    hospitalId?: string;
    /**
     * 
     * @type {string}
     * @memberof DepartmentViewModel
     */
    hospitalName?: string;
    /**
     * 
     * @type {string}
     * @memberof DepartmentViewModel
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof DepartmentViewModel
     */
    additionalInfo?: string;
}
/**
 * 
 * @export
 * @interface DepartmentsViewModel
 */
export interface DepartmentsViewModel {
    /**
     * 
     * @type {Array<DepartmentItemViewModel>}
     * @memberof DepartmentsViewModel
     */
    items?: Array<DepartmentItemViewModel>;
    /**
     * 
     * @type {PagedListMetaData}
     * @memberof DepartmentsViewModel
     */
    metaData?: PagedListMetaData;
}
/**
 * 
 * @export
 * @interface Device
 */
export interface Device {
    /**
     * 
     * @type {string}
     * @memberof Device
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof Device
     */
    token?: string;
    /**
     * 
     * @type {Platform}
     * @memberof Device
     */
    platform?: Platform;
    /**
     * 
     * @type {boolean}
     * @memberof Device
     */
    appAlert?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Device
     */
    eventAlert?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Device
     */
    noticeAlert?: boolean;
    /**
     * 
     * @type {Array<DeviceLogin>}
     * @memberof Device
     */
    deviceLogins?: Array<DeviceLogin>;
    /**
     * 
     * @type {AuditableEntity}
     * @memberof Device
     */
    auditableEntity?: AuditableEntity;
}
/**
 * 
 * @export
 * @interface DeviceLogin
 */
export interface DeviceLogin {
    /**
     * 
     * @type {string}
     * @memberof DeviceLogin
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof DeviceLogin
     */
    deviceId?: string;
    /**
     * 
     * @type {Device}
     * @memberof DeviceLogin
     */
    device?: Device;
    /**
     * 
     * @type {string}
     * @memberof DeviceLogin
     */
    version?: string;
    /**
     * 
     * @type {Location}
     * @memberof DeviceLogin
     */
    location?: Location;
    /**
     * 
     * @type {AuditableEntity}
     * @memberof DeviceLogin
     */
    auditableEntity?: AuditableEntity;
}
/**
 * 
 * @export
 * @interface Doctor
 */
export interface Doctor {
    /**
     * 
     * @type {Date}
     * @memberof Doctor
     */
    startPracticeDate?: Date;
    /**
     * 
     * @type {string}
     * @memberof Doctor
     */
    overview?: string;
    /**
     * 
     * @type {Array<DoctorReview>}
     * @memberof Doctor
     */
    doctorReviews?: Array<DoctorReview>;
    /**
     * 
     * @type {Array<DoctorEducation>}
     * @memberof Doctor
     */
    doctorEducations?: Array<DoctorEducation>;
    /**
     * 
     * @type {Array<DoctorPortfolio>}
     * @memberof Doctor
     */
    doctorPortfolios?: Array<DoctorPortfolio>;
    /**
     * 
     * @type {Array<DoctorSpecialty>}
     * @memberof Doctor
     */
    doctorSpecialties?: Array<DoctorSpecialty>;
    /**
     * 
     * @type {Array<DoctorCertificate>}
     * @memberof Doctor
     */
    doctorCertificates?: Array<DoctorCertificate>;
    /**
     * 
     * @type {Array<DoctorAffiliation>}
     * @memberof Doctor
     */
    doctorAffiliations?: Array<DoctorAffiliation>;
    /**
     * 
     * @type {Array<Award>}
     * @memberof Doctor
     */
    awards?: Array<Award>;
    /**
     * 
     * @type {Array<Media>}
     * @memberof Doctor
     */
    medias?: Array<Media>;
    /**
     * 
     * @type {string}
     * @memberof Doctor
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof Doctor
     */
    userName?: string;
    /**
     * 
     * @type {string}
     * @memberof Doctor
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof Doctor
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof Doctor
     */
    lastName?: string;
    /**
     * 
     * @type {string}
     * @memberof Doctor
     */
    normalizedName?: string;
    /**
     * 
     * @type {string}
     * @memberof Doctor
     */
    phone?: string;
    /**
     * 
     * @type {string}
     * @memberof Doctor
     */
    photo?: string;
    /**
     * 
     * @type {string}
     * @memberof Doctor
     */
    photoThumbnail?: string;
    /**
     * 
     * @type {Gender}
     * @memberof Doctor
     */
    gender?: Gender;
    /**
     * 
     * @type {Date}
     * @memberof Doctor
     */
    dateOfBirth?: Date;
    /**
     * 
     * @type {Array<Device>}
     * @memberof Doctor
     */
    devices?: Array<Device>;
    /**
     * 
     * @type {Array<Article>}
     * @memberof Doctor
     */
    articles?: Array<Article>;
    /**
     * 
     * @type {Array<UserLocation>}
     * @memberof Doctor
     */
    locations?: Array<UserLocation>;
    /**
     * 
     * @type {Array<UserLanguage>}
     * @memberof Doctor
     */
    languages?: Array<UserLanguage>;
    /**
     * 
     * @type {AuditableEntity}
     * @memberof Doctor
     */
    auditableEntity?: AuditableEntity;
}
/**
 * 
 * @export
 * @interface DoctorAffiliation
 */
export interface DoctorAffiliation {
    /**
     * 
     * @type {string}
     * @memberof DoctorAffiliation
     */
    doctorId?: string;
    /**
     * 
     * @type {Doctor}
     * @memberof DoctorAffiliation
     */
    doctor?: Doctor;
    /**
     * 
     * @type {string}
     * @memberof DoctorAffiliation
     */
    hospitalId?: string;
    /**
     * 
     * @type {Hospital}
     * @memberof DoctorAffiliation
     */
    hospital?: Hospital;
    /**
     * 
     * @type {number}
     * @memberof DoctorAffiliation
     */
    order?: number;
}
/**
 * 
 * @export
 * @interface DoctorAffiliationViewModel
 */
export interface DoctorAffiliationViewModel {
    /**
     * 
     * @type {string}
     * @memberof DoctorAffiliationViewModel
     */
    doctorId?: string;
    /**
     * 
     * @type {string}
     * @memberof DoctorAffiliationViewModel
     */
    doctorName?: string;
    /**
     * 
     * @type {number}
     * @memberof DoctorAffiliationViewModel
     */
    order?: number;
    /**
     * 
     * @type {string}
     * @memberof DoctorAffiliationViewModel
     */
    hospitalId?: string;
    /**
     * 
     * @type {string}
     * @memberof DoctorAffiliationViewModel
     */
    hospitalName?: string;
    /**
     * 
     * @type {string}
     * @memberof DoctorAffiliationViewModel
     */
    countryId?: string;
    /**
     * 
     * @type {string}
     * @memberof DoctorAffiliationViewModel
     */
    countryName?: string;
    /**
     * 
     * @type {string}
     * @memberof DoctorAffiliationViewModel
     */
    cityName?: string;
    /**
     * 
     * @type {string}
     * @memberof DoctorAffiliationViewModel
     */
    stateName?: string;
}
/**
 * 
 * @export
 * @interface DoctorCertificate
 */
export interface DoctorCertificate {
    /**
     * 
     * @type {string}
     * @memberof DoctorCertificate
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof DoctorCertificate
     */
    doctorId?: string;
    /**
     * 
     * @type {Doctor}
     * @memberof DoctorCertificate
     */
    doctor?: Doctor;
    /**
     * 
     * @type {string}
     * @memberof DoctorCertificate
     */
    certificate?: string;
    /**
     * 
     * @type {string}
     * @memberof DoctorCertificate
     */
    normalizedCertificate?: string;
    /**
     * 
     * @type {Date}
     * @memberof DoctorCertificate
     */
    activeFrom?: Date;
    /**
     * 
     * @type {Date}
     * @memberof DoctorCertificate
     */
    activeTo?: Date;
}
/**
 * 
 * @export
 * @interface DoctorCertificateItemViewModel
 */
export interface DoctorCertificateItemViewModel {
    /**
     * 
     * @type {string}
     * @memberof DoctorCertificateItemViewModel
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof DoctorCertificateItemViewModel
     */
    doctorId?: string;
    /**
     * 
     * @type {string}
     * @memberof DoctorCertificateItemViewModel
     */
    doctorName?: string;
    /**
     * 
     * @type {string}
     * @memberof DoctorCertificateItemViewModel
     */
    certificate?: string;
    /**
     * 
     * @type {Date}
     * @memberof DoctorCertificateItemViewModel
     */
    activeFrom?: Date;
    /**
     * 
     * @type {Date}
     * @memberof DoctorCertificateItemViewModel
     */
    activeTo?: Date;
}
/**
 * 
 * @export
 * @interface DoctorCertificateViewModel
 */
export interface DoctorCertificateViewModel {
    /**
     * 
     * @type {string}
     * @memberof DoctorCertificateViewModel
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof DoctorCertificateViewModel
     */
    doctorId?: string;
    /**
     * 
     * @type {string}
     * @memberof DoctorCertificateViewModel
     */
    doctorName?: string;
    /**
     * 
     * @type {string}
     * @memberof DoctorCertificateViewModel
     */
    certificate?: string;
    /**
     * 
     * @type {Date}
     * @memberof DoctorCertificateViewModel
     */
    activeFrom?: Date;
    /**
     * 
     * @type {Date}
     * @memberof DoctorCertificateViewModel
     */
    activeTo?: Date;
}
/**
 * 
 * @export
 * @interface DoctorCertificatesViewModel
 */
export interface DoctorCertificatesViewModel {
    /**
     * 
     * @type {Array<DoctorCertificateItemViewModel>}
     * @memberof DoctorCertificatesViewModel
     */
    items?: Array<DoctorCertificateItemViewModel>;
    /**
     * 
     * @type {PagedListMetaData}
     * @memberof DoctorCertificatesViewModel
     */
    metaData?: PagedListMetaData;
}
/**
 * 
 * @export
 * @interface DoctorEducation
 */
export interface DoctorEducation {
    /**
     * 
     * @type {string}
     * @memberof DoctorEducation
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof DoctorEducation
     */
    doctorId?: string;
    /**
     * 
     * @type {Doctor}
     * @memberof DoctorEducation
     */
    doctor?: Doctor;
    /**
     * 
     * @type {string}
     * @memberof DoctorEducation
     */
    institution?: string;
    /**
     * 
     * @type {string}
     * @memberof DoctorEducation
     */
    normalizedInstitution?: string;
    /**
     * 
     * @type {string}
     * @memberof DoctorEducation
     */
    qualification?: string;
    /**
     * 
     * @type {string}
     * @memberof DoctorEducation
     */
    normalizedQualification?: string;
    /**
     * 
     * @type {Date}
     * @memberof DoctorEducation
     */
    graduationDate?: Date;
}
/**
 * 
 * @export
 * @interface DoctorEducationItemViewModel
 */
export interface DoctorEducationItemViewModel {
    /**
     * 
     * @type {string}
     * @memberof DoctorEducationItemViewModel
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof DoctorEducationItemViewModel
     */
    doctorId?: string;
    /**
     * 
     * @type {string}
     * @memberof DoctorEducationItemViewModel
     */
    doctorName?: string;
    /**
     * 
     * @type {string}
     * @memberof DoctorEducationItemViewModel
     */
    institution?: string;
    /**
     * 
     * @type {string}
     * @memberof DoctorEducationItemViewModel
     */
    qualification?: string;
    /**
     * 
     * @type {Date}
     * @memberof DoctorEducationItemViewModel
     */
    graduationDate?: Date;
    /**
     * 
     * @type {number}
     * @memberof DoctorEducationItemViewModel
     */
    graduationYear?: number;
    /**
     * 
     * @type {number}
     * @memberof DoctorEducationItemViewModel
     */
    graduationMonth?: number;
}
/**
 * 
 * @export
 * @interface DoctorEducationViewModel
 */
export interface DoctorEducationViewModel {
    /**
     * 
     * @type {string}
     * @memberof DoctorEducationViewModel
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof DoctorEducationViewModel
     */
    doctorId?: string;
    /**
     * 
     * @type {string}
     * @memberof DoctorEducationViewModel
     */
    doctorName?: string;
    /**
     * 
     * @type {string}
     * @memberof DoctorEducationViewModel
     */
    institution?: string;
    /**
     * 
     * @type {string}
     * @memberof DoctorEducationViewModel
     */
    qualification?: string;
    /**
     * 
     * @type {Date}
     * @memberof DoctorEducationViewModel
     */
    graduationDate?: Date;
    /**
     * 
     * @type {number}
     * @memberof DoctorEducationViewModel
     */
    graduationYear?: number;
    /**
     * 
     * @type {number}
     * @memberof DoctorEducationViewModel
     */
    graduationMonth?: number;
}
/**
 * 
 * @export
 * @interface DoctorItemViewModel
 */
export interface DoctorItemViewModel {
    /**
     * 
     * @type {number}
     * @memberof DoctorItemViewModel
     */
    doctorReviewsCount?: number;
    /**
     * 
     * @type {number}
     * @memberof DoctorItemViewModel
     */
    doctorEducationsCount?: number;
    /**
     * 
     * @type {number}
     * @memberof DoctorItemViewModel
     */
    doctorPortfoliosCount?: number;
    /**
     * 
     * @type {number}
     * @memberof DoctorItemViewModel
     */
    doctorSpecialtiesCount?: number;
    /**
     * 
     * @type {Array<DoctorSpecialtyItemViewModel>}
     * @memberof DoctorItemViewModel
     */
    doctorSpecialties?: Array<DoctorSpecialtyItemViewModel>;
    /**
     * 
     * @type {number}
     * @memberof DoctorItemViewModel
     */
    doctorCertificatesCount?: number;
    /**
     * 
     * @type {number}
     * @memberof DoctorItemViewModel
     */
    doctorAffiliationsCount?: number;
    /**
     * 
     * @type {Array<HospitalAffiliationViewModel>}
     * @memberof DoctorItemViewModel
     */
    doctorAffiliations?: Array<HospitalAffiliationViewModel>;
    /**
     * 
     * @type {number}
     * @memberof DoctorItemViewModel
     */
    articlesCount?: number;
    /**
     * 
     * @type {number}
     * @memberof DoctorItemViewModel
     */
    languagesCountCount?: number;
    /**
     * 
     * @type {string}
     * @memberof DoctorItemViewModel
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof DoctorItemViewModel
     */
    userName?: string;
    /**
     * 
     * @type {string}
     * @memberof DoctorItemViewModel
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof DoctorItemViewModel
     */
    lastName?: string;
    /**
     * 
     * @type {string}
     * @memberof DoctorItemViewModel
     */
    fullname?: string;
    /**
     * 
     * @type {string}
     * @memberof DoctorItemViewModel
     */
    phone?: string;
    /**
     * 
     * @type {string}
     * @memberof DoctorItemViewModel
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof DoctorItemViewModel
     */
    photo?: string;
    /**
     * 
     * @type {string}
     * @memberof DoctorItemViewModel
     */
    photoThumbnail?: string;
    /**
     * 
     * @type {Gender}
     * @memberof DoctorItemViewModel
     */
    gender?: Gender;
    /**
     * 
     * @type {Date}
     * @memberof DoctorItemViewModel
     */
    dateOfBirth?: Date;
    /**
     * 
     * @type {AuditableEntity}
     * @memberof DoctorItemViewModel
     */
    auditableEntity?: AuditableEntity;
}
/**
 * 
 * @export
 * @interface DoctorPortfolio
 */
export interface DoctorPortfolio {
    /**
     * 
     * @type {string}
     * @memberof DoctorPortfolio
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof DoctorPortfolio
     */
    doctorId?: string;
    /**
     * 
     * @type {Doctor}
     * @memberof DoctorPortfolio
     */
    doctor?: Doctor;
    /**
     * 
     * @type {string}
     * @memberof DoctorPortfolio
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof DoctorPortfolio
     */
    normalizedName?: string;
    /**
     * 
     * @type {string}
     * @memberof DoctorPortfolio
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof DoctorPortfolio
     */
    photoBefore?: string;
    /**
     * 
     * @type {string}
     * @memberof DoctorPortfolio
     */
    photoBeforeThumbnail?: string;
    /**
     * 
     * @type {string}
     * @memberof DoctorPortfolio
     */
    photoAfter?: string;
    /**
     * 
     * @type {string}
     * @memberof DoctorPortfolio
     */
    photoAfterThumbnail?: string;
}
/**
 * 
 * @export
 * @interface DoctorPortfolioItemViewModel
 */
export interface DoctorPortfolioItemViewModel {
    /**
     * 
     * @type {string}
     * @memberof DoctorPortfolioItemViewModel
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof DoctorPortfolioItemViewModel
     */
    doctorId?: string;
    /**
     * 
     * @type {string}
     * @memberof DoctorPortfolioItemViewModel
     */
    doctorName?: string;
    /**
     * 
     * @type {string}
     * @memberof DoctorPortfolioItemViewModel
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof DoctorPortfolioItemViewModel
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof DoctorPortfolioItemViewModel
     */
    photoBefore?: string;
    /**
     * 
     * @type {string}
     * @memberof DoctorPortfolioItemViewModel
     */
    photoAfter?: string;
}
/**
 * 
 * @export
 * @interface DoctorPortfolioViewModel
 */
export interface DoctorPortfolioViewModel {
    /**
     * 
     * @type {string}
     * @memberof DoctorPortfolioViewModel
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof DoctorPortfolioViewModel
     */
    doctorId?: string;
    /**
     * 
     * @type {string}
     * @memberof DoctorPortfolioViewModel
     */
    doctorName?: string;
    /**
     * 
     * @type {string}
     * @memberof DoctorPortfolioViewModel
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof DoctorPortfolioViewModel
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof DoctorPortfolioViewModel
     */
    photoBefore?: string;
    /**
     * 
     * @type {string}
     * @memberof DoctorPortfolioViewModel
     */
    photoAfter?: string;
}
/**
 * 
 * @export
 * @interface DoctorReview
 */
export interface DoctorReview {
    /**
     * 
     * @type {string}
     * @memberof DoctorReview
     */
    patientId?: string;
    /**
     * 
     * @type {Patient}
     * @memberof DoctorReview
     */
    patient?: Patient;
    /**
     * 
     * @type {string}
     * @memberof DoctorReview
     */
    doctorId?: string;
    /**
     * 
     * @type {Doctor}
     * @memberof DoctorReview
     */
    doctor?: Doctor;
    /**
     * 
     * @type {string}
     * @memberof DoctorReview
     */
    body?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DoctorReview
     */
    recommended?: boolean;
    /**
     * 
     * @type {ReviewCategory}
     * @memberof DoctorReview
     */
    reviewCategory?: ReviewCategory;
    /**
     * 
     * @type {number}
     * @memberof DoctorReview
     */
    rate?: number;
}
/**
 * 
 * @export
 * @interface DoctorReviewItemViewModel
 */
export interface DoctorReviewItemViewModel {
    /**
     * 
     * @type {string}
     * @memberof DoctorReviewItemViewModel
     */
    patientId?: string;
    /**
     * 
     * @type {string}
     * @memberof DoctorReviewItemViewModel
     */
    patientName?: string;
    /**
     * 
     * @type {string}
     * @memberof DoctorReviewItemViewModel
     */
    doctorId?: string;
    /**
     * 
     * @type {string}
     * @memberof DoctorReviewItemViewModel
     */
    doctorName?: string;
    /**
     * 
     * @type {string}
     * @memberof DoctorReviewItemViewModel
     */
    body?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DoctorReviewItemViewModel
     */
    recommended?: boolean;
    /**
     * 
     * @type {ReviewCategory}
     * @memberof DoctorReviewItemViewModel
     */
    reviewCategory?: ReviewCategory;
    /**
     * 
     * @type {number}
     * @memberof DoctorReviewItemViewModel
     */
    rate?: number;
}
/**
 * 
 * @export
 * @interface DoctorReviewViewModel
 */
export interface DoctorReviewViewModel {
    /**
     * 
     * @type {string}
     * @memberof DoctorReviewViewModel
     */
    patientId?: string;
    /**
     * 
     * @type {string}
     * @memberof DoctorReviewViewModel
     */
    patientName?: string;
    /**
     * 
     * @type {string}
     * @memberof DoctorReviewViewModel
     */
    doctorId?: string;
    /**
     * 
     * @type {string}
     * @memberof DoctorReviewViewModel
     */
    doctorName?: string;
    /**
     * 
     * @type {string}
     * @memberof DoctorReviewViewModel
     */
    body?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DoctorReviewViewModel
     */
    recommended?: boolean;
    /**
     * 
     * @type {ReviewCategory}
     * @memberof DoctorReviewViewModel
     */
    reviewCategory?: ReviewCategory;
    /**
     * 
     * @type {number}
     * @memberof DoctorReviewViewModel
     */
    rate?: number;
}
/**
 * 
 * @export
 * @interface DoctorReviewsViewModel
 */
export interface DoctorReviewsViewModel {
    /**
     * 
     * @type {Array<DoctorReviewItemViewModel>}
     * @memberof DoctorReviewsViewModel
     */
    items?: Array<DoctorReviewItemViewModel>;
    /**
     * 
     * @type {PagedListMetaData}
     * @memberof DoctorReviewsViewModel
     */
    metaData?: PagedListMetaData;
}
/**
 * 
 * @export
 * @interface DoctorSpecialty
 */
export interface DoctorSpecialty {
    /**
     * 
     * @type {string}
     * @memberof DoctorSpecialty
     */
    doctorId?: string;
    /**
     * 
     * @type {Doctor}
     * @memberof DoctorSpecialty
     */
    doctor?: Doctor;
    /**
     * 
     * @type {string}
     * @memberof DoctorSpecialty
     */
    specialtyId?: string;
    /**
     * 
     * @type {Specialty}
     * @memberof DoctorSpecialty
     */
    specialty?: Specialty;
    /**
     * 
     * @type {number}
     * @memberof DoctorSpecialty
     */
    order?: number;
}
/**
 * 
 * @export
 * @interface DoctorSpecialtyItemViewModel
 */
export interface DoctorSpecialtyItemViewModel {
    /**
     * 
     * @type {string}
     * @memberof DoctorSpecialtyItemViewModel
     */
    specialtyId?: string;
    /**
     * 
     * @type {string}
     * @memberof DoctorSpecialtyItemViewModel
     */
    specialtyName?: string;
    /**
     * 
     * @type {string}
     * @memberof DoctorSpecialtyItemViewModel
     */
    specialtyTypeId?: string;
    /**
     * 
     * @type {string}
     * @memberof DoctorSpecialtyItemViewModel
     */
    specialtyTypeName?: string;
    /**
     * 
     * @type {number}
     * @memberof DoctorSpecialtyItemViewModel
     */
    order?: number;
}
/**
 * 
 * @export
 * @interface DoctorSpecialtyViewModel
 */
export interface DoctorSpecialtyViewModel {
    /**
     * 
     * @type {string}
     * @memberof DoctorSpecialtyViewModel
     */
    doctorId?: string;
    /**
     * 
     * @type {string}
     * @memberof DoctorSpecialtyViewModel
     */
    doctorName?: string;
    /**
     * 
     * @type {string}
     * @memberof DoctorSpecialtyViewModel
     */
    specialtyId?: string;
    /**
     * 
     * @type {string}
     * @memberof DoctorSpecialtyViewModel
     */
    specialtyName?: string;
    /**
     * 
     * @type {string}
     * @memberof DoctorSpecialtyViewModel
     */
    specialtyTypeId?: string;
    /**
     * 
     * @type {string}
     * @memberof DoctorSpecialtyViewModel
     */
    specialtyTypeName?: string;
    /**
     * 
     * @type {number}
     * @memberof DoctorSpecialtyViewModel
     */
    order?: number;
}
/**
 * 
 * @export
 * @interface DoctorViewModel
 */
export interface DoctorViewModel {
    /**
     * 
     * @type {Date}
     * @memberof DoctorViewModel
     */
    startPracticeDate?: Date;
    /**
     * 
     * @type {number}
     * @memberof DoctorViewModel
     */
    yearOfExperience?: number;
    /**
     * 
     * @type {string}
     * @memberof DoctorViewModel
     */
    overview?: string;
    /**
     * 
     * @type {Array<DoctorReviewItemViewModel>}
     * @memberof DoctorViewModel
     */
    doctorReviews?: Array<DoctorReviewItemViewModel>;
    /**
     * 
     * @type {Array<DoctorEducationItemViewModel>}
     * @memberof DoctorViewModel
     */
    doctorEducations?: Array<DoctorEducationItemViewModel>;
    /**
     * 
     * @type {Array<DoctorPortfolioItemViewModel>}
     * @memberof DoctorViewModel
     */
    doctorPortfolios?: Array<DoctorPortfolioItemViewModel>;
    /**
     * 
     * @type {Array<DoctorSpecialtyItemViewModel>}
     * @memberof DoctorViewModel
     */
    doctorSpecialties?: Array<DoctorSpecialtyItemViewModel>;
    /**
     * 
     * @type {Array<DoctorCertificateItemViewModel>}
     * @memberof DoctorViewModel
     */
    doctorCertificates?: Array<DoctorCertificateItemViewModel>;
    /**
     * 
     * @type {Array<HospitalAffiliationViewModel>}
     * @memberof DoctorViewModel
     */
    doctorAffiliations?: Array<HospitalAffiliationViewModel>;
    /**
     * 
     * @type {Array<Article>}
     * @memberof DoctorViewModel
     */
    articles?: Array<Article>;
    /**
     * 
     * @type {Array<AwardViewModel>}
     * @memberof DoctorViewModel
     */
    awards?: Array<AwardViewModel>;
    /**
     * 
     * @type {Array<MediaViewModel>}
     * @memberof DoctorViewModel
     */
    medias?: Array<MediaViewModel>;
    /**
     * 
     * @type {string}
     * @memberof DoctorViewModel
     */
    userType?: string;
    /**
     * 
     * @type {Array<UserLanguageViewModel>}
     * @memberof DoctorViewModel
     */
    languages?: Array<UserLanguageViewModel>;
    /**
     * 
     * @type {Array<UserLocationViewModel>}
     * @memberof DoctorViewModel
     */
    locations?: Array<UserLocationViewModel>;
    /**
     * 
     * @type {string}
     * @memberof DoctorViewModel
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof DoctorViewModel
     */
    userName?: string;
    /**
     * 
     * @type {string}
     * @memberof DoctorViewModel
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof DoctorViewModel
     */
    lastName?: string;
    /**
     * 
     * @type {string}
     * @memberof DoctorViewModel
     */
    fullname?: string;
    /**
     * 
     * @type {string}
     * @memberof DoctorViewModel
     */
    phone?: string;
    /**
     * 
     * @type {string}
     * @memberof DoctorViewModel
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof DoctorViewModel
     */
    photo?: string;
    /**
     * 
     * @type {string}
     * @memberof DoctorViewModel
     */
    photoThumbnail?: string;
    /**
     * 
     * @type {Gender}
     * @memberof DoctorViewModel
     */
    gender?: Gender;
    /**
     * 
     * @type {Date}
     * @memberof DoctorViewModel
     */
    dateOfBirth?: Date;
    /**
     * 
     * @type {AuditableEntity}
     * @memberof DoctorViewModel
     */
    auditableEntity?: AuditableEntity;
}
/**
 * 
 * @export
 * @interface DoctorsViewModel
 */
export interface DoctorsViewModel {
    /**
     * 
     * @type {Array<DoctorItemViewModel>}
     * @memberof DoctorsViewModel
     */
    items?: Array<DoctorItemViewModel>;
    /**
     * 
     * @type {PagedListMetaData}
     * @memberof DoctorsViewModel
     */
    metaData?: PagedListMetaData;
}
/**
 * 
 * @export
 * @interface Equipment
 */
export interface Equipment {
    /**
     * 
     * @type {string}
     * @memberof Equipment
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof Equipment
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof Equipment
     */
    normalizedName?: string;
    /**
     * 
     * @type {string}
     * @memberof Equipment
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof Equipment
     */
    hospitalId?: string;
    /**
     * 
     * @type {Hospital}
     * @memberof Equipment
     */
    hospital?: Hospital;
    /**
     * 
     * @type {Array<Media>}
     * @memberof Equipment
     */
    medias?: Array<Media>;
    /**
     * 
     * @type {AuditableEntity}
     * @memberof Equipment
     */
    auditableEntity?: AuditableEntity;
}
/**
 * 
 * @export
 * @interface EquipmentItemViewModel
 */
export interface EquipmentItemViewModel {
    /**
     * 
     * @type {string}
     * @memberof EquipmentItemViewModel
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof EquipmentItemViewModel
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof EquipmentItemViewModel
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof EquipmentItemViewModel
     */
    hospitalId?: string;
    /**
     * 
     * @type {string}
     * @memberof EquipmentItemViewModel
     */
    hospitalName?: string;
    /**
     * 
     * @type {Array<MediaViewModel>}
     * @memberof EquipmentItemViewModel
     */
    medias?: Array<MediaViewModel>;
    /**
     * 
     * @type {AuditableEntity}
     * @memberof EquipmentItemViewModel
     */
    auditableEntity?: AuditableEntity;
}
/**
 * 
 * @export
 * @interface EquipmentViewModel
 */
export interface EquipmentViewModel {
    /**
     * 
     * @type {string}
     * @memberof EquipmentViewModel
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof EquipmentViewModel
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof EquipmentViewModel
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof EquipmentViewModel
     */
    hospitalId?: string;
    /**
     * 
     * @type {string}
     * @memberof EquipmentViewModel
     */
    hospitalName?: string;
    /**
     * 
     * @type {Array<MediaViewModel>}
     * @memberof EquipmentViewModel
     */
    medias?: Array<MediaViewModel>;
    /**
     * 
     * @type {AuditableEntity}
     * @memberof EquipmentViewModel
     */
    auditableEntity?: AuditableEntity;
}
/**
 * 
 * @export
 * @interface EquipmentsViewModel
 */
export interface EquipmentsViewModel {
    /**
     * 
     * @type {Array<EquipmentItemViewModel>}
     * @memberof EquipmentsViewModel
     */
    items?: Array<EquipmentItemViewModel>;
    /**
     * 
     * @type {PagedListMetaData}
     * @memberof EquipmentsViewModel
     */
    metaData?: PagedListMetaData;
}
/**
 * 
 * @export
 * @enum {string}
 */
export enum Gender {
    NotSpecified = 'NotSpecified',
    Male = 'Male',
    Female = 'Female',
    NonBinary = 'NonBinary',
    PreferNotToSay = 'PreferNotToSay'
}

/**
 * 
 * @export
 * @interface Hospital
 */
export interface Hospital {
    /**
     * 
     * @type {string}
     * @memberof Hospital
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof Hospital
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof Hospital
     */
    normalizedName?: string;
    /**
     * 
     * @type {string}
     * @memberof Hospital
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof Hospital
     */
    normalizedDescription?: string;
    /**
     * 
     * @type {string}
     * @memberof Hospital
     */
    logo?: string;
    /**
     * 
     * @type {string}
     * @memberof Hospital
     */
    overview?: string;
    /**
     * 
     * @type {number}
     * @memberof Hospital
     */
    bedsCount?: number;
    /**
     * 
     * @type {number}
     * @memberof Hospital
     */
    operationRoomsCount?: number;
    /**
     * 
     * @type {number}
     * @memberof Hospital
     */
    icuBedsCount?: number;
    /**
     * 
     * @type {number}
     * @memberof Hospital
     */
    medicalStaffCount?: number;
    /**
     * 
     * @type {string}
     * @memberof Hospital
     */
    countryId?: string;
    /**
     * 
     * @type {Country}
     * @memberof Hospital
     */
    country?: Country;
    /**
     * 
     * @type {MarketingType}
     * @memberof Hospital
     */
    marketingType?: MarketingType;
    /**
     * 
     * @type {Array<Article>}
     * @memberof Hospital
     */
    articles?: Array<Article>;
    /**
     * 
     * @type {Array<Package>}
     * @memberof Hospital
     */
    packages?: Array<Package>;
    /**
     * 
     * @type {Array<Equipment>}
     * @memberof Hospital
     */
    equipments?: Array<Equipment>;
    /**
     * 
     * @type {Array<HospitalReview>}
     * @memberof Hospital
     */
    reviews?: Array<HospitalReview>;
    /**
     * 
     * @type {Array<Department>}
     * @memberof Hospital
     */
    departments?: Array<Department>;
    /**
     * 
     * @type {Array<HospitalSpecialty>}
     * @memberof Hospital
     */
    specialties?: Array<HospitalSpecialty>;
    /**
     * 
     * @type {Array<HospitalAccreditation>}
     * @memberof Hospital
     */
    accreditations?: Array<HospitalAccreditation>;
    /**
     * 
     * @type {Array<DoctorAffiliation>}
     * @memberof Hospital
     */
    doctorAffiliations?: Array<DoctorAffiliation>;
    /**
     * 
     * @type {Array<ManagerAffiliation>}
     * @memberof Hospital
     */
    managerAffiliations?: Array<ManagerAffiliation>;
    /**
     * 
     * @type {Array<Award>}
     * @memberof Hospital
     */
    awards?: Array<Award>;
    /**
     * 
     * @type {Array<Media>}
     * @memberof Hospital
     */
    medias?: Array<Media>;
    /**
     * 
     * @type {Location}
     * @memberof Hospital
     */
    location?: Location;
    /**
     * 
     * @type {AuditableEntity}
     * @memberof Hospital
     */
    auditableEntity?: AuditableEntity;
}
/**
 * 
 * @export
 * @interface HospitalAccreditation
 */
export interface HospitalAccreditation {
    /**
     * 
     * @type {string}
     * @memberof HospitalAccreditation
     */
    hospitalId?: string;
    /**
     * 
     * @type {Hospital}
     * @memberof HospitalAccreditation
     */
    hospital?: Hospital;
    /**
     * 
     * @type {string}
     * @memberof HospitalAccreditation
     */
    accreditationId?: string;
    /**
     * 
     * @type {Accreditation}
     * @memberof HospitalAccreditation
     */
    accreditation?: Accreditation;
}
/**
 * 
 * @export
 * @interface HospitalAffiliationViewModel
 */
export interface HospitalAffiliationViewModel {
    /**
     * 
     * @type {string}
     * @memberof HospitalAffiliationViewModel
     */
    hospitalId?: string;
    /**
     * 
     * @type {string}
     * @memberof HospitalAffiliationViewModel
     */
    hospitalName?: string;
    /**
     * 
     * @type {string}
     * @memberof HospitalAffiliationViewModel
     */
    countryId?: string;
    /**
     * 
     * @type {string}
     * @memberof HospitalAffiliationViewModel
     */
    countryName?: string;
    /**
     * 
     * @type {string}
     * @memberof HospitalAffiliationViewModel
     */
    cityName?: string;
    /**
     * 
     * @type {string}
     * @memberof HospitalAffiliationViewModel
     */
    stateName?: string;
}
/**
 * 
 * @export
 * @interface HospitalItemViewModel
 */
export interface HospitalItemViewModel {
    /**
     * 
     * @type {string}
     * @memberof HospitalItemViewModel
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof HospitalItemViewModel
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof HospitalItemViewModel
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof HospitalItemViewModel
     */
    logo?: string;
    /**
     * 
     * @type {string}
     * @memberof HospitalItemViewModel
     */
    overview?: string;
    /**
     * 
     * @type {number}
     * @memberof HospitalItemViewModel
     */
    bedsCount?: number;
    /**
     * 
     * @type {number}
     * @memberof HospitalItemViewModel
     */
    operationRoomsCount?: number;
    /**
     * 
     * @type {number}
     * @memberof HospitalItemViewModel
     */
    icuBedsCount?: number;
    /**
     * 
     * @type {number}
     * @memberof HospitalItemViewModel
     */
    medicalStaffCount?: number;
    /**
     * 
     * @type {string}
     * @memberof HospitalItemViewModel
     */
    countryId?: string;
    /**
     * 
     * @type {string}
     * @memberof HospitalItemViewModel
     */
    countryName?: string;
    /**
     * 
     * @type {MarketingType}
     * @memberof HospitalItemViewModel
     */
    marketingType?: MarketingType;
    /**
     * 
     * @type {number}
     * @memberof HospitalItemViewModel
     */
    articlesCount?: number;
    /**
     * 
     * @type {number}
     * @memberof HospitalItemViewModel
     */
    packagesCount?: number;
    /**
     * 
     * @type {number}
     * @memberof HospitalItemViewModel
     */
    equipmentsCount?: number;
    /**
     * 
     * @type {number}
     * @memberof HospitalItemViewModel
     */
    reviewsCount?: number;
    /**
     * 
     * @type {number}
     * @memberof HospitalItemViewModel
     */
    departmentsCount?: number;
    /**
     * 
     * @type {number}
     * @memberof HospitalItemViewModel
     */
    specialtiesCount?: number;
    /**
     * 
     * @type {Array<HospitalSpecialtyItemViewModel>}
     * @memberof HospitalItemViewModel
     */
    specialties?: Array<HospitalSpecialtyItemViewModel>;
    /**
     * 
     * @type {number}
     * @memberof HospitalItemViewModel
     */
    accreditationsCount?: number;
    /**
     * 
     * @type {number}
     * @memberof HospitalItemViewModel
     */
    doctorAffiliationsCount?: number;
    /**
     * 
     * @type {number}
     * @memberof HospitalItemViewModel
     */
    managerAffiliationsCount?: number;
    /**
     * 
     * @type {Array<AwardViewModel>}
     * @memberof HospitalItemViewModel
     */
    awards?: Array<AwardViewModel>;
    /**
     * 
     * @type {Array<MediaViewModel>}
     * @memberof HospitalItemViewModel
     */
    medias?: Array<MediaViewModel>;
    /**
     * 
     * @type {LocationViewModel}
     * @memberof HospitalItemViewModel
     */
    location?: LocationViewModel;
    /**
     * 
     * @type {AuditableEntity}
     * @memberof HospitalItemViewModel
     */
    auditableEntity?: AuditableEntity;
}
/**
 * 
 * @export
 * @interface HospitalPackageItemViewModel
 */
export interface HospitalPackageItemViewModel {
    /**
     * 
     * @type {string}
     * @memberof HospitalPackageItemViewModel
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof HospitalPackageItemViewModel
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof HospitalPackageItemViewModel
     */
    hospitalId?: string;
    /**
     * 
     * @type {string}
     * @memberof HospitalPackageItemViewModel
     */
    hospitalName?: string;
    /**
     * 
     * @type {PackageStatus}
     * @memberof HospitalPackageItemViewModel
     */
    packageStatus?: PackageStatus;
    /**
     * 
     * @type {number}
     * @memberof HospitalPackageItemViewModel
     */
    packagePrice?: number;
    /**
     * 
     * @type {number}
     * @memberof HospitalPackageItemViewModel
     */
    managerCount?: number;
    /**
     * 
     * @type {number}
     * @memberof HospitalPackageItemViewModel
     */
    serviceCount?: number;
    /**
     * 
     * @type {number}
     * @memberof HospitalPackageItemViewModel
     */
    bookingCount?: number;
    /**
     * 
     * @type {AuditableEntity}
     * @memberof HospitalPackageItemViewModel
     */
    auditableEntity?: AuditableEntity;
}
/**
 * 
 * @export
 * @interface HospitalPackageViewModel
 */
export interface HospitalPackageViewModel {
    /**
     * 
     * @type {string}
     * @memberof HospitalPackageViewModel
     */
    accomodation?: string;
    /**
     * 
     * @type {string}
     * @memberof HospitalPackageViewModel
     */
    trnasfer?: string;
    /**
     * 
     * @type {string}
     * @memberof HospitalPackageViewModel
     */
    bonus?: string;
    /**
     * 
     * @type {string}
     * @memberof HospitalPackageViewModel
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof HospitalPackageViewModel
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof HospitalPackageViewModel
     */
    hospitalId?: string;
    /**
     * 
     * @type {string}
     * @memberof HospitalPackageViewModel
     */
    hospitalName?: string;
    /**
     * 
     * @type {PackageStatus}
     * @memberof HospitalPackageViewModel
     */
    packageStatus?: PackageStatus;
    /**
     * 
     * @type {number}
     * @memberof HospitalPackageViewModel
     */
    packagePrice?: number;
    /**
     * 
     * @type {number}
     * @memberof HospitalPackageViewModel
     */
    managerCount?: number;
    /**
     * 
     * @type {number}
     * @memberof HospitalPackageViewModel
     */
    serviceCount?: number;
    /**
     * 
     * @type {number}
     * @memberof HospitalPackageViewModel
     */
    bookingCount?: number;
    /**
     * 
     * @type {AuditableEntity}
     * @memberof HospitalPackageViewModel
     */
    auditableEntity?: AuditableEntity;
}
/**
 * 
 * @export
 * @interface HospitalPackagesViewModel
 */
export interface HospitalPackagesViewModel {
    /**
     * 
     * @type {Array<HospitalPackageItemViewModel>}
     * @memberof HospitalPackagesViewModel
     */
    items?: Array<HospitalPackageItemViewModel>;
    /**
     * 
     * @type {PagedListMetaData}
     * @memberof HospitalPackagesViewModel
     */
    metaData?: PagedListMetaData;
}
/**
 * 
 * @export
 * @interface HospitalReview
 */
export interface HospitalReview {
    /**
     * 
     * @type {string}
     * @memberof HospitalReview
     */
    patientId?: string;
    /**
     * 
     * @type {Patient}
     * @memberof HospitalReview
     */
    patient?: Patient;
    /**
     * 
     * @type {string}
     * @memberof HospitalReview
     */
    hospitalId?: string;
    /**
     * 
     * @type {Hospital}
     * @memberof HospitalReview
     */
    hospital?: Hospital;
    /**
     * 
     * @type {string}
     * @memberof HospitalReview
     */
    body?: string;
    /**
     * 
     * @type {boolean}
     * @memberof HospitalReview
     */
    recommended?: boolean;
    /**
     * 
     * @type {ReviewCategory}
     * @memberof HospitalReview
     */
    reviewCategory?: ReviewCategory;
    /**
     * 
     * @type {number}
     * @memberof HospitalReview
     */
    rate?: number;
}
/**
 * 
 * @export
 * @interface HospitalReviewItemViewModel
 */
export interface HospitalReviewItemViewModel {
    /**
     * 
     * @type {string}
     * @memberof HospitalReviewItemViewModel
     */
    patientId?: string;
    /**
     * 
     * @type {string}
     * @memberof HospitalReviewItemViewModel
     */
    patientName?: string;
    /**
     * 
     * @type {string}
     * @memberof HospitalReviewItemViewModel
     */
    hospitalId?: string;
    /**
     * 
     * @type {string}
     * @memberof HospitalReviewItemViewModel
     */
    hospitalName?: string;
    /**
     * 
     * @type {string}
     * @memberof HospitalReviewItemViewModel
     */
    body?: string;
    /**
     * 
     * @type {boolean}
     * @memberof HospitalReviewItemViewModel
     */
    recommended?: boolean;
    /**
     * 
     * @type {ReviewCategory}
     * @memberof HospitalReviewItemViewModel
     */
    reviewCategory?: ReviewCategory;
    /**
     * 
     * @type {number}
     * @memberof HospitalReviewItemViewModel
     */
    rate?: number;
}
/**
 * 
 * @export
 * @interface HospitalReviewViewModel
 */
export interface HospitalReviewViewModel {
    /**
     * 
     * @type {string}
     * @memberof HospitalReviewViewModel
     */
    patientId?: string;
    /**
     * 
     * @type {string}
     * @memberof HospitalReviewViewModel
     */
    patientName?: string;
    /**
     * 
     * @type {string}
     * @memberof HospitalReviewViewModel
     */
    hospitalId?: string;
    /**
     * 
     * @type {string}
     * @memberof HospitalReviewViewModel
     */
    hospitalName?: string;
    /**
     * 
     * @type {string}
     * @memberof HospitalReviewViewModel
     */
    body?: string;
    /**
     * 
     * @type {boolean}
     * @memberof HospitalReviewViewModel
     */
    recommended?: boolean;
    /**
     * 
     * @type {ReviewCategory}
     * @memberof HospitalReviewViewModel
     */
    reviewCategory?: ReviewCategory;
    /**
     * 
     * @type {number}
     * @memberof HospitalReviewViewModel
     */
    rate?: number;
}
/**
 * 
 * @export
 * @interface HospitalReviewsViewModel
 */
export interface HospitalReviewsViewModel {
    /**
     * 
     * @type {Array<HospitalReviewItemViewModel>}
     * @memberof HospitalReviewsViewModel
     */
    items?: Array<HospitalReviewItemViewModel>;
    /**
     * 
     * @type {PagedListMetaData}
     * @memberof HospitalReviewsViewModel
     */
    metaData?: PagedListMetaData;
}
/**
 * 
 * @export
 * @interface HospitalSpecialtiesViewModel
 */
export interface HospitalSpecialtiesViewModel {
    /**
     * 
     * @type {Array<HospitalSpecialtyItemViewModel>}
     * @memberof HospitalSpecialtiesViewModel
     */
    items?: Array<HospitalSpecialtyItemViewModel>;
    /**
     * 
     * @type {PagedListMetaData}
     * @memberof HospitalSpecialtiesViewModel
     */
    metaData?: PagedListMetaData;
}
/**
 * 
 * @export
 * @interface HospitalSpecialty
 */
export interface HospitalSpecialty {
    /**
     * 
     * @type {string}
     * @memberof HospitalSpecialty
     */
    hospitalId?: string;
    /**
     * 
     * @type {Hospital}
     * @memberof HospitalSpecialty
     */
    hospital?: Hospital;
    /**
     * 
     * @type {string}
     * @memberof HospitalSpecialty
     */
    specialtyId?: string;
    /**
     * 
     * @type {Specialty}
     * @memberof HospitalSpecialty
     */
    specialty?: Specialty;
    /**
     * 
     * @type {number}
     * @memberof HospitalSpecialty
     */
    order?: number;
    /**
     * 
     * @type {Array<Service>}
     * @memberof HospitalSpecialty
     */
    services?: Array<Service>;
    /**
     * 
     * @type {AuditableEntity}
     * @memberof HospitalSpecialty
     */
    auditableEntity?: AuditableEntity;
}
/**
 * 
 * @export
 * @interface HospitalSpecialtyItemViewModel
 */
export interface HospitalSpecialtyItemViewModel {
    /**
     * 
     * @type {string}
     * @memberof HospitalSpecialtyItemViewModel
     */
    hospitalId?: string;
    /**
     * 
     * @type {string}
     * @memberof HospitalSpecialtyItemViewModel
     */
    hospitalName?: string;
    /**
     * 
     * @type {string}
     * @memberof HospitalSpecialtyItemViewModel
     */
    specialtyId?: string;
    /**
     * 
     * @type {string}
     * @memberof HospitalSpecialtyItemViewModel
     */
    specialtyName?: string;
    /**
     * 
     * @type {string}
     * @memberof HospitalSpecialtyItemViewModel
     */
    specialtyTypeId?: string;
    /**
     * 
     * @type {string}
     * @memberof HospitalSpecialtyItemViewModel
     */
    specialtyTypeName?: string;
    /**
     * 
     * @type {number}
     * @memberof HospitalSpecialtyItemViewModel
     */
    order?: number;
    /**
     * 
     * @type {AuditableEntity}
     * @memberof HospitalSpecialtyItemViewModel
     */
    auditableEntity?: AuditableEntity;
    /**
     * 
     * @type {MarketingType}
     * @memberof HospitalSpecialtyItemViewModel
     */
    marketingType?: MarketingType;
}
/**
 * 
 * @export
 * @interface HospitalSpecialtyViewModel
 */
export interface HospitalSpecialtyViewModel {
    /**
     * 
     * @type {string}
     * @memberof HospitalSpecialtyViewModel
     */
    hospitalId?: string;
    /**
     * 
     * @type {string}
     * @memberof HospitalSpecialtyViewModel
     */
    hospitalName?: string;
    /**
     * 
     * @type {string}
     * @memberof HospitalSpecialtyViewModel
     */
    specialtyId?: string;
    /**
     * 
     * @type {string}
     * @memberof HospitalSpecialtyViewModel
     */
    specialtyName?: string;
    /**
     * 
     * @type {string}
     * @memberof HospitalSpecialtyViewModel
     */
    specialtyTypeId?: string;
    /**
     * 
     * @type {string}
     * @memberof HospitalSpecialtyViewModel
     */
    specialtyTypeName?: string;
    /**
     * 
     * @type {number}
     * @memberof HospitalSpecialtyViewModel
     */
    order?: number;
    /**
     * 
     * @type {AuditableEntity}
     * @memberof HospitalSpecialtyViewModel
     */
    auditableEntity?: AuditableEntity;
    /**
     * 
     * @type {MarketingType}
     * @memberof HospitalSpecialtyViewModel
     */
    marketingType?: MarketingType;
}
/**
 * 
 * @export
 * @interface HospitalViewModel
 */
export interface HospitalViewModel {
    /**
     * 
     * @type {string}
     * @memberof HospitalViewModel
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof HospitalViewModel
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof HospitalViewModel
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof HospitalViewModel
     */
    logo?: string;
    /**
     * 
     * @type {string}
     * @memberof HospitalViewModel
     */
    overview?: string;
    /**
     * 
     * @type {number}
     * @memberof HospitalViewModel
     */
    bedsCount?: number;
    /**
     * 
     * @type {number}
     * @memberof HospitalViewModel
     */
    operationRoomsCount?: number;
    /**
     * 
     * @type {number}
     * @memberof HospitalViewModel
     */
    icuBedsCount?: number;
    /**
     * 
     * @type {number}
     * @memberof HospitalViewModel
     */
    medicalStaffCount?: number;
    /**
     * 
     * @type {string}
     * @memberof HospitalViewModel
     */
    countryId?: string;
    /**
     * 
     * @type {string}
     * @memberof HospitalViewModel
     */
    countryName?: string;
    /**
     * 
     * @type {MarketingType}
     * @memberof HospitalViewModel
     */
    marketingType?: MarketingType;
    /**
     * 
     * @type {number}
     * @memberof HospitalViewModel
     */
    articlesCount?: number;
    /**
     * 
     * @type {number}
     * @memberof HospitalViewModel
     */
    packagesCount?: number;
    /**
     * 
     * @type {number}
     * @memberof HospitalViewModel
     */
    equipmentsCount?: number;
    /**
     * 
     * @type {number}
     * @memberof HospitalViewModel
     */
    reviewsCount?: number;
    /**
     * 
     * @type {number}
     * @memberof HospitalViewModel
     */
    departmentsCount?: number;
    /**
     * 
     * @type {number}
     * @memberof HospitalViewModel
     */
    specialtiesCount?: number;
    /**
     * 
     * @type {Array<HospitalSpecialtyItemViewModel>}
     * @memberof HospitalViewModel
     */
    specialties?: Array<HospitalSpecialtyItemViewModel>;
    /**
     * 
     * @type {number}
     * @memberof HospitalViewModel
     */
    accreditationsCount?: number;
    /**
     * 
     * @type {number}
     * @memberof HospitalViewModel
     */
    doctorAffiliationsCount?: number;
    /**
     * 
     * @type {number}
     * @memberof HospitalViewModel
     */
    managerAffiliationsCount?: number;
    /**
     * 
     * @type {Array<AwardViewModel>}
     * @memberof HospitalViewModel
     */
    awards?: Array<AwardViewModel>;
    /**
     * 
     * @type {Array<MediaViewModel>}
     * @memberof HospitalViewModel
     */
    medias?: Array<MediaViewModel>;
    /**
     * 
     * @type {LocationViewModel}
     * @memberof HospitalViewModel
     */
    location?: LocationViewModel;
    /**
     * 
     * @type {AuditableEntity}
     * @memberof HospitalViewModel
     */
    auditableEntity?: AuditableEntity;
}
/**
 * 
 * @export
 * @interface HospitalsViewModel
 */
export interface HospitalsViewModel {
    /**
     * 
     * @type {Array<HospitalItemViewModel>}
     * @memberof HospitalsViewModel
     */
    items?: Array<HospitalItemViewModel>;
    /**
     * 
     * @type {PagedListMetaData}
     * @memberof HospitalsViewModel
     */
    metaData?: PagedListMetaData;
}
/**
 * 
 * @export
 * @interface Location
 */
export interface Location {
    /**
     * 
     * @type {string}
     * @memberof Location
     */
    country?: string;
    /**
     * 
     * @type {string}
     * @memberof Location
     */
    state?: string;
    /**
     * 
     * @type {string}
     * @memberof Location
     */
    county?: string;
    /**
     * 
     * @type {string}
     * @memberof Location
     */
    city?: string;
    /**
     * 
     * @type {string}
     * @memberof Location
     */
    zipCode?: string;
    /**
     * 
     * @type {string}
     * @memberof Location
     */
    address?: string;
}
/**
 * 
 * @export
 * @interface LocationViewModel
 */
export interface LocationViewModel {
    /**
     * 
     * @type {number}
     * @memberof LocationViewModel
     */
    latitude?: number;
    /**
     * 
     * @type {number}
     * @memberof LocationViewModel
     */
    longitude?: number;
    /**
     * 
     * @type {string}
     * @memberof LocationViewModel
     */
    country?: string;
    /**
     * 
     * @type {string}
     * @memberof LocationViewModel
     */
    state?: string;
    /**
     * 
     * @type {string}
     * @memberof LocationViewModel
     */
    county?: string;
    /**
     * 
     * @type {string}
     * @memberof LocationViewModel
     */
    city?: string;
    /**
     * 
     * @type {string}
     * @memberof LocationViewModel
     */
    zipCode?: string;
    /**
     * 
     * @type {string}
     * @memberof LocationViewModel
     */
    address?: string;
}
/**
 * 
 * @export
 * @interface Manager
 */
export interface Manager {
    /**
     * 
     * @type {Array<Account>}
     * @memberof Manager
     */
    accounts?: Array<Account>;
    /**
     * 
     * @type {Array<ManagerAffiliation>}
     * @memberof Manager
     */
    affiliations?: Array<ManagerAffiliation>;
    /**
     * 
     * @type {string}
     * @memberof Manager
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof Manager
     */
    userName?: string;
    /**
     * 
     * @type {string}
     * @memberof Manager
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof Manager
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof Manager
     */
    lastName?: string;
    /**
     * 
     * @type {string}
     * @memberof Manager
     */
    normalizedName?: string;
    /**
     * 
     * @type {string}
     * @memberof Manager
     */
    phone?: string;
    /**
     * 
     * @type {string}
     * @memberof Manager
     */
    photo?: string;
    /**
     * 
     * @type {string}
     * @memberof Manager
     */
    photoThumbnail?: string;
    /**
     * 
     * @type {Gender}
     * @memberof Manager
     */
    gender?: Gender;
    /**
     * 
     * @type {Date}
     * @memberof Manager
     */
    dateOfBirth?: Date;
    /**
     * 
     * @type {Array<Device>}
     * @memberof Manager
     */
    devices?: Array<Device>;
    /**
     * 
     * @type {Array<Article>}
     * @memberof Manager
     */
    articles?: Array<Article>;
    /**
     * 
     * @type {Array<UserLocation>}
     * @memberof Manager
     */
    locations?: Array<UserLocation>;
    /**
     * 
     * @type {Array<UserLanguage>}
     * @memberof Manager
     */
    languages?: Array<UserLanguage>;
    /**
     * 
     * @type {AuditableEntity}
     * @memberof Manager
     */
    auditableEntity?: AuditableEntity;
}
/**
 * 
 * @export
 * @interface ManagerAffiliation
 */
export interface ManagerAffiliation {
    /**
     * 
     * @type {string}
     * @memberof ManagerAffiliation
     */
    managerId?: string;
    /**
     * 
     * @type {Manager}
     * @memberof ManagerAffiliation
     */
    manager?: Manager;
    /**
     * 
     * @type {string}
     * @memberof ManagerAffiliation
     */
    hospitalId?: string;
    /**
     * 
     * @type {Hospital}
     * @memberof ManagerAffiliation
     */
    hospital?: Hospital;
}
/**
 * 
 * @export
 * @interface ManagerAffiliationViewModel
 */
export interface ManagerAffiliationViewModel {
    /**
     * 
     * @type {string}
     * @memberof ManagerAffiliationViewModel
     */
    managerId?: string;
    /**
     * 
     * @type {string}
     * @memberof ManagerAffiliationViewModel
     */
    managerName?: string;
    /**
     * 
     * @type {string}
     * @memberof ManagerAffiliationViewModel
     */
    hospitalId?: string;
    /**
     * 
     * @type {string}
     * @memberof ManagerAffiliationViewModel
     */
    hospitalName?: string;
    /**
     * 
     * @type {string}
     * @memberof ManagerAffiliationViewModel
     */
    countryId?: string;
    /**
     * 
     * @type {string}
     * @memberof ManagerAffiliationViewModel
     */
    countryName?: string;
    /**
     * 
     * @type {string}
     * @memberof ManagerAffiliationViewModel
     */
    cityName?: string;
    /**
     * 
     * @type {string}
     * @memberof ManagerAffiliationViewModel
     */
    stateName?: string;
}
/**
 * 
 * @export
 * @interface ManagerViewModel
 */
export interface ManagerViewModel {
    /**
     * 
     * @type {Array<ManagerAffiliationViewModel>}
     * @memberof ManagerViewModel
     */
    managerAffiliations?: Array<ManagerAffiliationViewModel>;
    /**
     * 
     * @type {string}
     * @memberof ManagerViewModel
     */
    userType?: string;
    /**
     * 
     * @type {Array<UserLanguageViewModel>}
     * @memberof ManagerViewModel
     */
    languages?: Array<UserLanguageViewModel>;
    /**
     * 
     * @type {Array<UserLocationViewModel>}
     * @memberof ManagerViewModel
     */
    locations?: Array<UserLocationViewModel>;
    /**
     * 
     * @type {string}
     * @memberof ManagerViewModel
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof ManagerViewModel
     */
    userName?: string;
    /**
     * 
     * @type {string}
     * @memberof ManagerViewModel
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof ManagerViewModel
     */
    lastName?: string;
    /**
     * 
     * @type {string}
     * @memberof ManagerViewModel
     */
    fullname?: string;
    /**
     * 
     * @type {string}
     * @memberof ManagerViewModel
     */
    phone?: string;
    /**
     * 
     * @type {string}
     * @memberof ManagerViewModel
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof ManagerViewModel
     */
    photo?: string;
    /**
     * 
     * @type {string}
     * @memberof ManagerViewModel
     */
    photoThumbnail?: string;
    /**
     * 
     * @type {Gender}
     * @memberof ManagerViewModel
     */
    gender?: Gender;
    /**
     * 
     * @type {Date}
     * @memberof ManagerViewModel
     */
    dateOfBirth?: Date;
    /**
     * 
     * @type {AuditableEntity}
     * @memberof ManagerViewModel
     */
    auditableEntity?: AuditableEntity;
}
/**
 * 
 * @export
 * @interface ManagersViewModel
 */
export interface ManagersViewModel {
    /**
     * 
     * @type {Array<UserItemViewModel>}
     * @memberof ManagersViewModel
     */
    items?: Array<UserItemViewModel>;
    /**
     * 
     * @type {PagedListMetaData}
     * @memberof ManagersViewModel
     */
    metaData?: PagedListMetaData;
}
/**
 * 
 * @export
 * @enum {string}
 */
export enum MarketingType {
    Both = 'Both',
    GeneralHealth = 'GeneralHealth',
    Beauty = 'Beauty'
}

/**
 * 
 * @export
 * @interface Media
 */
export interface Media {
    /**
     * 
     * @type {string}
     * @memberof Media
     */
    id?: string;
    /**
     * 
     * @type {MediaType}
     * @memberof Media
     */
    mediaType?: MediaType;
    /**
     * 
     * @type {string}
     * @memberof Media
     */
    url?: string;
    /**
     * 
     * @type {string}
     * @memberof Media
     */
    thumbnailUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof Media
     */
    description?: string;
    /**
     * 
     * @type {number}
     * @memberof Media
     */
    height?: number;
    /**
     * 
     * @type {number}
     * @memberof Media
     */
    width?: number;
    /**
     * 
     * @type {number}
     * @memberof Media
     */
    order?: number;
}
/**
 * 
 * @export
 * @enum {string}
 */
export enum MediaType {
    Photo = 'Photo',
    Video = 'Video',
    Youtube = 'Youtube',
    Document = 'Document'
}

/**
 * 
 * @export
 * @interface MediaViewModel
 */
export interface MediaViewModel {
    /**
     * 
     * @type {string}
     * @memberof MediaViewModel
     */
    id?: string;
    /**
     * 
     * @type {MediaType}
     * @memberof MediaViewModel
     */
    mediaType?: MediaType;
    /**
     * 
     * @type {string}
     * @memberof MediaViewModel
     */
    url?: string;
    /**
     * 
     * @type {string}
     * @memberof MediaViewModel
     */
    thumbnailUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof MediaViewModel
     */
    description?: string;
    /**
     * 
     * @type {number}
     * @memberof MediaViewModel
     */
    order?: number;
}
/**
 * 
 * @export
 * @interface Package
 */
export interface Package {
    /**
     * 
     * @type {string}
     * @memberof Package
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof Package
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof Package
     */
    normalizedName?: string;
    /**
     * 
     * @type {string}
     * @memberof Package
     */
    hospitalId?: string;
    /**
     * 
     * @type {Hospital}
     * @memberof Package
     */
    hospital?: Hospital;
    /**
     * 
     * @type {PackageStatus}
     * @memberof Package
     */
    packageStatus?: PackageStatus;
    /**
     * 
     * @type {string}
     * @memberof Package
     */
    accomodation?: string;
    /**
     * 
     * @type {string}
     * @memberof Package
     */
    trnasfer?: string;
    /**
     * 
     * @type {string}
     * @memberof Package
     */
    bonus?: string;
    /**
     * 
     * @type {number}
     * @memberof Package
     */
    packagePrice?: number;
    /**
     * 
     * @type {Array<PackageService>}
     * @memberof Package
     */
    packageServices?: Array<PackageService>;
    /**
     * 
     * @type {Array<Manager>}
     * @memberof Package
     */
    managers?: Array<Manager>;
    /**
     * 
     * @type {Array<Booking>}
     * @memberof Package
     */
    bookings?: Array<Booking>;
    /**
     * 
     * @type {AuditableEntity}
     * @memberof Package
     */
    auditableEntity?: AuditableEntity;
}
/**
 * 
 * @export
 * @interface PackageService
 */
export interface PackageService {
    /**
     * 
     * @type {string}
     * @memberof PackageService
     */
    packageId?: string;
    /**
     * 
     * @type {Package}
     * @memberof PackageService
     */
    _package?: Package;
    /**
     * 
     * @type {string}
     * @memberof PackageService
     */
    serviceId?: string;
    /**
     * 
     * @type {Service}
     * @memberof PackageService
     */
    service?: Service;
    /**
     * 
     * @type {number}
     * @memberof PackageService
     */
    order?: number;
}
/**
 * 
 * @export
 * @enum {string}
 */
export enum PackageStatus {
    New = 'New',
    Standard = 'Standard'
}

/**
 * 
 * @export
 * @interface PagedListMetaData
 */
export interface PagedListMetaData {
    /**
     * 
     * @type {number}
     * @memberof PagedListMetaData
     */
    pageCount?: number;
    /**
     * 
     * @type {number}
     * @memberof PagedListMetaData
     */
    totalItemCount?: number;
    /**
     * 
     * @type {number}
     * @memberof PagedListMetaData
     */
    pageNumber?: number;
    /**
     * 
     * @type {number}
     * @memberof PagedListMetaData
     */
    pageSize?: number;
    /**
     * 
     * @type {boolean}
     * @memberof PagedListMetaData
     */
    hasPreviousPage?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PagedListMetaData
     */
    hasNextPage?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PagedListMetaData
     */
    isFirstPage?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PagedListMetaData
     */
    isLastPage?: boolean;
    /**
     * 
     * @type {number}
     * @memberof PagedListMetaData
     */
    firstItemOnPage?: number;
    /**
     * 
     * @type {number}
     * @memberof PagedListMetaData
     */
    lastItemOnPage?: number;
}
/**
 * 
 * @export
 * @interface PartnerItemViewModel
 */
export interface PartnerItemViewModel {
    /**
     * 
     * @type {number}
     * @memberof PartnerItemViewModel
     */
    referralCount?: number;
    /**
     * 
     * @type {string}
     * @memberof PartnerItemViewModel
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof PartnerItemViewModel
     */
    userName?: string;
    /**
     * 
     * @type {string}
     * @memberof PartnerItemViewModel
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof PartnerItemViewModel
     */
    lastName?: string;
    /**
     * 
     * @type {string}
     * @memberof PartnerItemViewModel
     */
    fullname?: string;
    /**
     * 
     * @type {string}
     * @memberof PartnerItemViewModel
     */
    phone?: string;
    /**
     * 
     * @type {string}
     * @memberof PartnerItemViewModel
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof PartnerItemViewModel
     */
    photo?: string;
    /**
     * 
     * @type {string}
     * @memberof PartnerItemViewModel
     */
    photoThumbnail?: string;
    /**
     * 
     * @type {Gender}
     * @memberof PartnerItemViewModel
     */
    gender?: Gender;
    /**
     * 
     * @type {Date}
     * @memberof PartnerItemViewModel
     */
    dateOfBirth?: Date;
    /**
     * 
     * @type {AuditableEntity}
     * @memberof PartnerItemViewModel
     */
    auditableEntity?: AuditableEntity;
}
/**
 * 
 * @export
 * @interface PartnerViewModel
 */
export interface PartnerViewModel {
    /**
     * 
     * @type {string}
     * @memberof PartnerViewModel
     */
    referralCode?: string;
    /**
     * 
     * @type {number}
     * @memberof PartnerViewModel
     */
    referralCount?: number;
    /**
     * 
     * @type {string}
     * @memberof PartnerViewModel
     */
    userType?: string;
    /**
     * 
     * @type {Array<UserLanguageViewModel>}
     * @memberof PartnerViewModel
     */
    languages?: Array<UserLanguageViewModel>;
    /**
     * 
     * @type {Array<UserLocationViewModel>}
     * @memberof PartnerViewModel
     */
    locations?: Array<UserLocationViewModel>;
    /**
     * 
     * @type {string}
     * @memberof PartnerViewModel
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof PartnerViewModel
     */
    userName?: string;
    /**
     * 
     * @type {string}
     * @memberof PartnerViewModel
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof PartnerViewModel
     */
    lastName?: string;
    /**
     * 
     * @type {string}
     * @memberof PartnerViewModel
     */
    fullname?: string;
    /**
     * 
     * @type {string}
     * @memberof PartnerViewModel
     */
    phone?: string;
    /**
     * 
     * @type {string}
     * @memberof PartnerViewModel
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof PartnerViewModel
     */
    photo?: string;
    /**
     * 
     * @type {string}
     * @memberof PartnerViewModel
     */
    photoThumbnail?: string;
    /**
     * 
     * @type {Gender}
     * @memberof PartnerViewModel
     */
    gender?: Gender;
    /**
     * 
     * @type {Date}
     * @memberof PartnerViewModel
     */
    dateOfBirth?: Date;
    /**
     * 
     * @type {AuditableEntity}
     * @memberof PartnerViewModel
     */
    auditableEntity?: AuditableEntity;
}
/**
 * 
 * @export
 * @interface PartnersViewModel
 */
export interface PartnersViewModel {
    /**
     * 
     * @type {Array<PartnerItemViewModel>}
     * @memberof PartnersViewModel
     */
    items?: Array<PartnerItemViewModel>;
    /**
     * 
     * @type {PagedListMetaData}
     * @memberof PartnersViewModel
     */
    metaData?: PagedListMetaData;
}
/**
 * 
 * @export
 * @interface Patient
 */
export interface Patient {
    /**
     * 
     * @type {string}
     * @memberof Patient
     */
    contact?: string;
    /**
     * 
     * @type {string}
     * @memberof Patient
     */
    contactNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof Patient
     */
    nationality?: string;
    /**
     * 
     * @type {Array<Booking>}
     * @memberof Patient
     */
    bookings?: Array<Booking>;
    /**
     * 
     * @type {Array<Payment>}
     * @memberof Patient
     */
    payments?: Array<Payment>;
    /**
     * 
     * @type {Array<Customer>}
     * @memberof Patient
     */
    customers?: Array<Customer>;
    /**
     * 
     * @type {Array<DoctorReview>}
     * @memberof Patient
     */
    doctorReviews?: Array<DoctorReview>;
    /**
     * 
     * @type {Array<HospitalReview>}
     * @memberof Patient
     */
    hospitalReviews?: Array<HospitalReview>;
    /**
     * 
     * @type {Array<BookingComment>}
     * @memberof Patient
     */
    bookingComments?: Array<BookingComment>;
    /**
     * 
     * @type {string}
     * @memberof Patient
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof Patient
     */
    userName?: string;
    /**
     * 
     * @type {string}
     * @memberof Patient
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof Patient
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof Patient
     */
    lastName?: string;
    /**
     * 
     * @type {string}
     * @memberof Patient
     */
    normalizedName?: string;
    /**
     * 
     * @type {string}
     * @memberof Patient
     */
    phone?: string;
    /**
     * 
     * @type {string}
     * @memberof Patient
     */
    photo?: string;
    /**
     * 
     * @type {string}
     * @memberof Patient
     */
    photoThumbnail?: string;
    /**
     * 
     * @type {Gender}
     * @memberof Patient
     */
    gender?: Gender;
    /**
     * 
     * @type {Date}
     * @memberof Patient
     */
    dateOfBirth?: Date;
    /**
     * 
     * @type {Array<Device>}
     * @memberof Patient
     */
    devices?: Array<Device>;
    /**
     * 
     * @type {Array<Article>}
     * @memberof Patient
     */
    articles?: Array<Article>;
    /**
     * 
     * @type {Array<UserLocation>}
     * @memberof Patient
     */
    locations?: Array<UserLocation>;
    /**
     * 
     * @type {Array<UserLanguage>}
     * @memberof Patient
     */
    languages?: Array<UserLanguage>;
    /**
     * 
     * @type {AuditableEntity}
     * @memberof Patient
     */
    auditableEntity?: AuditableEntity;
}
/**
 * 
 * @export
 * @interface PatientItemViewModel
 */
export interface PatientItemViewModel {
    /**
     * 
     * @type {string}
     * @memberof PatientItemViewModel
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof PatientItemViewModel
     */
    userName?: string;
    /**
     * 
     * @type {string}
     * @memberof PatientItemViewModel
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof PatientItemViewModel
     */
    lastName?: string;
    /**
     * 
     * @type {string}
     * @memberof PatientItemViewModel
     */
    fullname?: string;
    /**
     * 
     * @type {string}
     * @memberof PatientItemViewModel
     */
    phone?: string;
    /**
     * 
     * @type {string}
     * @memberof PatientItemViewModel
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof PatientItemViewModel
     */
    photo?: string;
    /**
     * 
     * @type {string}
     * @memberof PatientItemViewModel
     */
    photoThumbnail?: string;
    /**
     * 
     * @type {Gender}
     * @memberof PatientItemViewModel
     */
    gender?: Gender;
    /**
     * 
     * @type {Date}
     * @memberof PatientItemViewModel
     */
    dateOfBirth?: Date;
    /**
     * 
     * @type {AuditableEntity}
     * @memberof PatientItemViewModel
     */
    auditableEntity?: AuditableEntity;
}
/**
 * 
 * @export
 * @interface PatientViewModel
 */
export interface PatientViewModel {
    /**
     * 
     * @type {string}
     * @memberof PatientViewModel
     */
    contact?: string;
    /**
     * 
     * @type {string}
     * @memberof PatientViewModel
     */
    contactNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof PatientViewModel
     */
    nationality?: string;
    /**
     * 
     * @type {string}
     * @memberof PatientViewModel
     */
    userType?: string;
    /**
     * 
     * @type {Array<UserLanguageViewModel>}
     * @memberof PatientViewModel
     */
    languages?: Array<UserLanguageViewModel>;
    /**
     * 
     * @type {Array<UserLocationViewModel>}
     * @memberof PatientViewModel
     */
    locations?: Array<UserLocationViewModel>;
    /**
     * 
     * @type {string}
     * @memberof PatientViewModel
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof PatientViewModel
     */
    userName?: string;
    /**
     * 
     * @type {string}
     * @memberof PatientViewModel
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof PatientViewModel
     */
    lastName?: string;
    /**
     * 
     * @type {string}
     * @memberof PatientViewModel
     */
    fullname?: string;
    /**
     * 
     * @type {string}
     * @memberof PatientViewModel
     */
    phone?: string;
    /**
     * 
     * @type {string}
     * @memberof PatientViewModel
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof PatientViewModel
     */
    photo?: string;
    /**
     * 
     * @type {string}
     * @memberof PatientViewModel
     */
    photoThumbnail?: string;
    /**
     * 
     * @type {Gender}
     * @memberof PatientViewModel
     */
    gender?: Gender;
    /**
     * 
     * @type {Date}
     * @memberof PatientViewModel
     */
    dateOfBirth?: Date;
    /**
     * 
     * @type {AuditableEntity}
     * @memberof PatientViewModel
     */
    auditableEntity?: AuditableEntity;
}
/**
 * 
 * @export
 * @interface PatientsViewModel
 */
export interface PatientsViewModel {
    /**
     * 
     * @type {Array<PatientItemViewModel>}
     * @memberof PatientsViewModel
     */
    items?: Array<PatientItemViewModel>;
    /**
     * 
     * @type {PagedListMetaData}
     * @memberof PatientsViewModel
     */
    metaData?: PagedListMetaData;
}
/**
 * 
 * @export
 * @interface Payment
 */
export interface Payment {
    /**
     * 
     * @type {string}
     * @memberof Payment
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof Payment
     */
    patientId?: string;
    /**
     * 
     * @type {Patient}
     * @memberof Payment
     */
    patient?: Patient;
    /**
     * 
     * @type {string}
     * @memberof Payment
     */
    customerId?: string;
    /**
     * 
     * @type {Customer}
     * @memberof Payment
     */
    customer?: Customer;
    /**
     * 
     * @type {string}
     * @memberof Payment
     */
    bookingId?: string;
    /**
     * 
     * @type {Booking}
     * @memberof Payment
     */
    booking?: Booking;
    /**
     * 
     * @type {string}
     * @memberof Payment
     */
    chargeId?: string;
    /**
     * 
     * @type {string}
     * @memberof Payment
     */
    refundId?: string;
    /**
     * 
     * @type {ChargeStatus}
     * @memberof Payment
     */
    chargeStatus?: ChargeStatus;
    /**
     * 
     * @type {RefundStatus}
     * @memberof Payment
     */
    refundStatus?: RefundStatus;
    /**
     * 
     * @type {PaymentStatus}
     * @memberof Payment
     */
    paymentStatus?: PaymentStatus;
    /**
     * 
     * @type {string}
     * @memberof Payment
     */
    currency?: string;
    /**
     * 
     * @type {number}
     * @memberof Payment
     */
    fee?: number;
    /**
     * 
     * @type {number}
     * @memberof Payment
     */
    applicationFee?: number;
    /**
     * 
     * @type {string}
     * @memberof Payment
     */
    cardBrand?: string;
    /**
     * 
     * @type {string}
     * @memberof Payment
     */
    cardLast4Digits?: string;
    /**
     * 
     * @type {Array<ChangeLog>}
     * @memberof Payment
     */
    paymentStatusChangeLogs?: Array<ChangeLog>;
}
/**
 * 
 * @export
 * @enum {string}
 */
export enum PaymentStatus {
    Unpaid = 'Unpaid',
    Paid = 'Paid',
    RefundRequested = 'RefundRequested',
    Refunded = 'Refunded'
}

/**
 * 
 * @export
 * @enum {string}
 */
export enum Platform {
    Web = 'Web',
    IOS = 'iOS',
    Android = 'Android'
}

/**
 * 
 * @export
 * @enum {string}
 */
export enum Procedure {
    Treatment = 'Treatment',
    Diagnostic = 'Diagnostic'
}

/**
 * 
 * @export
 * @enum {string}
 */
export enum RefundStatus {
    Pending = 'Pending',
    Succeeded = 'Succeeded',
    Failed = 'Failed'
}

/**
 * 
 * @export
 * @enum {string}
 */
export enum RejectReason {
    AssessmentNotCompleted = 'AssessmentNotCompleted',
    PaymentNotCompleted = 'PaymentNotCompleted',
    ScheduleNotAvailable = 'ScheduleNotAvailable',
    OtherReason = 'OtherReason'
}

/**
 * 
 * @export
 * @enum {string}
 */
export enum ReviewCategory {
    Services = 'Services',
    Hospitality = 'Hospitality',
    Transfer = 'Transfer',
    Etc = 'Etc'
}

/**
 * 
 * @export
 * @interface Service
 */
export interface Service {
    /**
     * 
     * @type {string}
     * @memberof Service
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof Service
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof Service
     */
    normalizedName?: string;
    /**
     * 
     * @type {string}
     * @memberof Service
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof Service
     */
    hospitalId?: string;
    /**
     * 
     * @type {string}
     * @memberof Service
     */
    specialtyId?: string;
    /**
     * 
     * @type {string}
     * @memberof Service
     */
    packageServiceId?: string;
    /**
     * 
     * @type {PackageService}
     * @memberof Service
     */
    packageService?: PackageService;
    /**
     * 
     * @type {HospitalSpecialty}
     * @memberof Service
     */
    hospitalSpecialty?: HospitalSpecialty;
    /**
     * 
     * @type {Procedure}
     * @memberof Service
     */
    procedure?: Procedure;
    /**
     * 
     * @type {number}
     * @memberof Service
     */
    minPrice?: number;
    /**
     * 
     * @type {number}
     * @memberof Service
     */
    maxPrice?: number;
    /**
     * 
     * @type {boolean}
     * @memberof Service
     */
    priceReuqest?: boolean;
    /**
     * 
     * @type {number}
     * @memberof Service
     */
    order?: number;
    /**
     * 
     * @type {Array<PackageService>}
     * @memberof Service
     */
    packageServices?: Array<PackageService>;
    /**
     * 
     * @type {Array<Assessment>}
     * @memberof Service
     */
    assessments?: Array<Assessment>;
    /**
     * 
     * @type {AuditableEntity}
     * @memberof Service
     */
    auditableEntity?: AuditableEntity;
}
/**
 * 
 * @export
 * @interface ServiceCountViewModel
 */
export interface ServiceCountViewModel {
    /**
     * 
     * @type {string}
     * @memberof ServiceCountViewModel
     */
    specialtyTypeId?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceCountViewModel
     */
    specialtyTypeName?: string;
    /**
     * 
     * @type {number}
     * @memberof ServiceCountViewModel
     */
    serviceCount?: number;
}
/**
 * 
 * @export
 * @interface ServiceItemViewModel
 */
export interface ServiceItemViewModel {
    /**
     * 
     * @type {string}
     * @memberof ServiceItemViewModel
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceItemViewModel
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceItemViewModel
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceItemViewModel
     */
    specialtyType?: string;
    /**
     * 
     * @type {MarketingType}
     * @memberof ServiceItemViewModel
     */
    marketingType?: MarketingType;
    /**
     * 
     * @type {Procedure}
     * @memberof ServiceItemViewModel
     */
    procedure?: Procedure;
    /**
     * 
     * @type {number}
     * @memberof ServiceItemViewModel
     */
    minPrice?: number;
    /**
     * 
     * @type {number}
     * @memberof ServiceItemViewModel
     */
    maxPrice?: number;
    /**
     * 
     * @type {boolean}
     * @memberof ServiceItemViewModel
     */
    priceReuqest?: boolean;
    /**
     * 
     * @type {number}
     * @memberof ServiceItemViewModel
     */
    order?: number;
    /**
     * 
     * @type {AuditableEntity}
     * @memberof ServiceItemViewModel
     */
    auditableEntity?: AuditableEntity;
}
/**
 * 
 * @export
 * @interface ServiceViewModel
 */
export interface ServiceViewModel {
    /**
     * 
     * @type {string}
     * @memberof ServiceViewModel
     */
    hospitalId?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceViewModel
     */
    specialtyId?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceViewModel
     */
    specialtyTypeId?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceViewModel
     */
    specialtyTypeName?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceViewModel
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceViewModel
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceViewModel
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceViewModel
     */
    specialtyType?: string;
    /**
     * 
     * @type {MarketingType}
     * @memberof ServiceViewModel
     */
    marketingType?: MarketingType;
    /**
     * 
     * @type {Procedure}
     * @memberof ServiceViewModel
     */
    procedure?: Procedure;
    /**
     * 
     * @type {number}
     * @memberof ServiceViewModel
     */
    minPrice?: number;
    /**
     * 
     * @type {number}
     * @memberof ServiceViewModel
     */
    maxPrice?: number;
    /**
     * 
     * @type {boolean}
     * @memberof ServiceViewModel
     */
    priceReuqest?: boolean;
    /**
     * 
     * @type {number}
     * @memberof ServiceViewModel
     */
    order?: number;
    /**
     * 
     * @type {AuditableEntity}
     * @memberof ServiceViewModel
     */
    auditableEntity?: AuditableEntity;
}
/**
 * 
 * @export
 * @interface ServicesViewModel
 */
export interface ServicesViewModel {
    /**
     * 
     * @type {Array<ServiceItemViewModel>}
     * @memberof ServicesViewModel
     */
    items?: Array<ServiceItemViewModel>;
    /**
     * 
     * @type {PagedListMetaData}
     * @memberof ServicesViewModel
     */
    metaData?: PagedListMetaData;
}
/**
 * 
 * @export
 * @interface SpecialtiesViewModel
 */
export interface SpecialtiesViewModel {
    /**
     * 
     * @type {Array<SpecialtyItemViewModel>}
     * @memberof SpecialtiesViewModel
     */
    items?: Array<SpecialtyItemViewModel>;
    /**
     * 
     * @type {PagedListMetaData}
     * @memberof SpecialtiesViewModel
     */
    metaData?: PagedListMetaData;
}
/**
 * 
 * @export
 * @interface Specialty
 */
export interface Specialty {
    /**
     * 
     * @type {string}
     * @memberof Specialty
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof Specialty
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof Specialty
     */
    normalizedName?: string;
    /**
     * 
     * @type {string}
     * @memberof Specialty
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof Specialty
     */
    specialtyTypeId?: string;
    /**
     * 
     * @type {SpecialtyType}
     * @memberof Specialty
     */
    specialtyType?: SpecialtyType;
    /**
     * 
     * @type {Array<HospitalSpecialty>}
     * @memberof Specialty
     */
    hospitalSpecialties?: Array<HospitalSpecialty>;
    /**
     * 
     * @type {Array<DoctorSpecialty>}
     * @memberof Specialty
     */
    doctorSpecialties?: Array<DoctorSpecialty>;
    /**
     * 
     * @type {AuditableEntity}
     * @memberof Specialty
     */
    auditableEntity?: AuditableEntity;
}
/**
 * 
 * @export
 * @interface SpecialtyItemViewModel
 */
export interface SpecialtyItemViewModel {
    /**
     * 
     * @type {string}
     * @memberof SpecialtyItemViewModel
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof SpecialtyItemViewModel
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof SpecialtyItemViewModel
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof SpecialtyItemViewModel
     */
    specialtyTypeId?: string;
    /**
     * 
     * @type {string}
     * @memberof SpecialtyItemViewModel
     */
    specialtyTypeName?: string;
    /**
     * 
     * @type {AuditableEntity}
     * @memberof SpecialtyItemViewModel
     */
    auditableEntity?: AuditableEntity;
}
/**
 * 
 * @export
 * @interface SpecialtyType
 */
export interface SpecialtyType {
    /**
     * 
     * @type {string}
     * @memberof SpecialtyType
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof SpecialtyType
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof SpecialtyType
     */
    normalizedName?: string;
    /**
     * 
     * @type {string}
     * @memberof SpecialtyType
     */
    description?: string;
    /**
     * 
     * @type {MarketingType}
     * @memberof SpecialtyType
     */
    marketingType?: MarketingType;
    /**
     * 
     * @type {AuditableEntity}
     * @memberof SpecialtyType
     */
    auditableEntity?: AuditableEntity;
}
/**
 * 
 * @export
 * @interface SpecialtyTypeItemViewModel
 */
export interface SpecialtyTypeItemViewModel {
    /**
     * 
     * @type {string}
     * @memberof SpecialtyTypeItemViewModel
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof SpecialtyTypeItemViewModel
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof SpecialtyTypeItemViewModel
     */
    description?: string;
    /**
     * 
     * @type {MarketingType}
     * @memberof SpecialtyTypeItemViewModel
     */
    marketingType?: MarketingType;
    /**
     * 
     * @type {Date}
     * @memberof SpecialtyTypeItemViewModel
     */
    created?: Date;
}
/**
 * 
 * @export
 * @interface SpecialtyTypeViewModel
 */
export interface SpecialtyTypeViewModel {
    /**
     * 
     * @type {string}
     * @memberof SpecialtyTypeViewModel
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof SpecialtyTypeViewModel
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof SpecialtyTypeViewModel
     */
    description?: string;
    /**
     * 
     * @type {MarketingType}
     * @memberof SpecialtyTypeViewModel
     */
    marketingType?: MarketingType;
    /**
     * 
     * @type {Date}
     * @memberof SpecialtyTypeViewModel
     */
    created?: Date;
}
/**
 * 
 * @export
 * @interface SpecialtyTypesViewModel
 */
export interface SpecialtyTypesViewModel {
    /**
     * 
     * @type {Array<SpecialtyTypeItemViewModel>}
     * @memberof SpecialtyTypesViewModel
     */
    items?: Array<SpecialtyTypeItemViewModel>;
    /**
     * 
     * @type {PagedListMetaData}
     * @memberof SpecialtyTypesViewModel
     */
    metaData?: PagedListMetaData;
}
/**
 * 
 * @export
 * @interface SpecialtyViewModel
 */
export interface SpecialtyViewModel {
    /**
     * 
     * @type {string}
     * @memberof SpecialtyViewModel
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof SpecialtyViewModel
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof SpecialtyViewModel
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof SpecialtyViewModel
     */
    specialtyTypeId?: string;
    /**
     * 
     * @type {string}
     * @memberof SpecialtyViewModel
     */
    specialtyTypeName?: string;
    /**
     * 
     * @type {AuditableEntity}
     * @memberof SpecialtyViewModel
     */
    auditableEntity?: AuditableEntity;
}
/**
 * 
 * @export
 * @interface Tag
 */
export interface Tag {
    /**
     * 
     * @type {string}
     * @memberof Tag
     */
    tagId?: string;
    /**
     * 
     * @type {string}
     * @memberof Tag
     */
    normalizedTagId?: string;
    /**
     * 
     * @type {Array<ArticleTag>}
     * @memberof Tag
     */
    tags?: Array<ArticleTag>;
}
/**
 * 
 * @export
 * @interface UpdateArticleCommand
 */
export interface UpdateArticleCommand {
    /**
     * 
     * @type {string}
     * @memberof UpdateArticleCommand
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateArticleCommand
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateArticleCommand
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateArticleCommand
     */
    body?: string;
    /**
     * 
     * @type {ArticleStatus}
     * @memberof UpdateArticleCommand
     */
    status?: ArticleStatus;
    /**
     * 
     * @type {string}
     * @memberof UpdateArticleCommand
     */
    userId?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateArticleCommand
     */
    userName?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateArticleCommand
     */
    hospitalId?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateArticleCommand
     */
    hospitalName?: string;
    /**
     * 
     * @type {Array<ArticleTag>}
     * @memberof UpdateArticleCommand
     */
    articleTags?: Array<ArticleTag>;
    /**
     * 
     * @type {Array<MediaViewModel>}
     * @memberof UpdateArticleCommand
     */
    medias?: Array<MediaViewModel>;
    /**
     * 
     * @type {AuditableEntity}
     * @memberof UpdateArticleCommand
     */
    auditableEntity?: AuditableEntity;
}
/**
 * 
 * @export
 * @interface UpdateBookingCommand
 */
export interface UpdateBookingCommand {
    /**
     * 
     * @type {Date}
     * @memberof UpdateBookingCommand
     */
    approximateDateStart?: Date;
    /**
     * 
     * @type {Date}
     * @memberof UpdateBookingCommand
     */
    approximateDateEnd?: Date;
}
/**
 * 
 * @export
 * @interface UpdateCHAdminCommand
 */
export interface UpdateCHAdminCommand {
    /**
     * 
     * @type {string}
     * @memberof UpdateCHAdminCommand
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateCHAdminCommand
     */
    lastName?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateCHAdminCommand
     */
    photo?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateCHAdminCommand
     */
    photoThumbnail?: string;
    /**
     * 
     * @type {Gender}
     * @memberof UpdateCHAdminCommand
     */
    gender?: Gender;
    /**
     * 
     * @type {Date}
     * @memberof UpdateCHAdminCommand
     */
    dateOfBirth?: Date;
    /**
     * 
     * @type {Array<UserLanguageViewModel>}
     * @memberof UpdateCHAdminCommand
     */
    languages?: Array<UserLanguageViewModel>;
    /**
     * 
     * @type {Array<UserLocationViewModel>}
     * @memberof UpdateCHAdminCommand
     */
    locations?: Array<UserLocationViewModel>;
}
/**
 * 
 * @export
 * @interface UpdateCHManagerCommand
 */
export interface UpdateCHManagerCommand {
    /**
     * 
     * @type {string}
     * @memberof UpdateCHManagerCommand
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateCHManagerCommand
     */
    lastName?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateCHManagerCommand
     */
    photo?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateCHManagerCommand
     */
    photoThumbnail?: string;
    /**
     * 
     * @type {Gender}
     * @memberof UpdateCHManagerCommand
     */
    gender?: Gender;
    /**
     * 
     * @type {Date}
     * @memberof UpdateCHManagerCommand
     */
    dateOfBirth?: Date;
    /**
     * 
     * @type {Array<UserLanguageViewModel>}
     * @memberof UpdateCHManagerCommand
     */
    languages?: Array<UserLanguageViewModel>;
    /**
     * 
     * @type {Array<UserLocationViewModel>}
     * @memberof UpdateCHManagerCommand
     */
    locations?: Array<UserLocationViewModel>;
}
/**
 * 
 * @export
 * @interface UpdateCountryCommand
 */
export interface UpdateCountryCommand {
    /**
     * 
     * @type {string}
     * @memberof UpdateCountryCommand
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateCountryCommand
     */
    description?: string;
    /**
     * 
     * @type {Array<MediaViewModel>}
     * @memberof UpdateCountryCommand
     */
    medias?: Array<MediaViewModel>;
}
/**
 * 
 * @export
 * @interface UpdateDepartmentCommand
 */
export interface UpdateDepartmentCommand {
    /**
     * 
     * @type {string}
     * @memberof UpdateDepartmentCommand
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateDepartmentCommand
     */
    additionalInfo?: string;
}
/**
 * 
 * @export
 * @interface UpdateDoctorCertificateCommand
 */
export interface UpdateDoctorCertificateCommand {
    /**
     * 
     * @type {string}
     * @memberof UpdateDoctorCertificateCommand
     */
    certificate?: string;
    /**
     * 
     * @type {Date}
     * @memberof UpdateDoctorCertificateCommand
     */
    activeFrom?: Date;
    /**
     * 
     * @type {Date}
     * @memberof UpdateDoctorCertificateCommand
     */
    activeTo?: Date;
}
/**
 * 
 * @export
 * @interface UpdateDoctorCommand
 */
export interface UpdateDoctorCommand {
    /**
     * 
     * @type {Date}
     * @memberof UpdateDoctorCommand
     */
    startPracticeDate?: Date;
    /**
     * 
     * @type {string}
     * @memberof UpdateDoctorCommand
     */
    overview?: string;
    /**
     * 
     * @type {Array<DoctorEducationItemViewModel>}
     * @memberof UpdateDoctorCommand
     */
    doctorEducations?: Array<DoctorEducationItemViewModel>;
    /**
     * 
     * @type {Array<DoctorPortfolioItemViewModel>}
     * @memberof UpdateDoctorCommand
     */
    doctorPortfolios?: Array<DoctorPortfolioItemViewModel>;
    /**
     * 
     * @type {Array<DoctorSpecialtyItemViewModel>}
     * @memberof UpdateDoctorCommand
     */
    doctorSpecialties?: Array<DoctorSpecialtyItemViewModel>;
    /**
     * 
     * @type {Array<DoctorCertificateItemViewModel>}
     * @memberof UpdateDoctorCommand
     */
    doctorCertificates?: Array<DoctorCertificateItemViewModel>;
    /**
     * 
     * @type {Array<AwardViewModel>}
     * @memberof UpdateDoctorCommand
     */
    doctorAwards?: Array<AwardViewModel>;
    /**
     * 
     * @type {string}
     * @memberof UpdateDoctorCommand
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateDoctorCommand
     */
    lastName?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateDoctorCommand
     */
    photo?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateDoctorCommand
     */
    photoThumbnail?: string;
    /**
     * 
     * @type {Gender}
     * @memberof UpdateDoctorCommand
     */
    gender?: Gender;
    /**
     * 
     * @type {Date}
     * @memberof UpdateDoctorCommand
     */
    dateOfBirth?: Date;
    /**
     * 
     * @type {Array<UserLanguageViewModel>}
     * @memberof UpdateDoctorCommand
     */
    languages?: Array<UserLanguageViewModel>;
    /**
     * 
     * @type {Array<UserLocationViewModel>}
     * @memberof UpdateDoctorCommand
     */
    locations?: Array<UserLocationViewModel>;
}
/**
 * 
 * @export
 * @interface UpdateDoctorReviewCommand
 */
export interface UpdateDoctorReviewCommand {
    /**
     * 
     * @type {string}
     * @memberof UpdateDoctorReviewCommand
     */
    body?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UpdateDoctorReviewCommand
     */
    recommended?: boolean;
    /**
     * 
     * @type {ReviewCategory}
     * @memberof UpdateDoctorReviewCommand
     */
    reviewCategory?: ReviewCategory;
    /**
     * 
     * @type {number}
     * @memberof UpdateDoctorReviewCommand
     */
    rate?: number;
}
/**
 * 
 * @export
 * @interface UpdateEquipmentCommand
 */
export interface UpdateEquipmentCommand {
    /**
     * 
     * @type {string}
     * @memberof UpdateEquipmentCommand
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateEquipmentCommand
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateEquipmentCommand
     */
    hospitalName?: string;
    /**
     * 
     * @type {Array<MediaViewModel>}
     * @memberof UpdateEquipmentCommand
     */
    medias?: Array<MediaViewModel>;
    /**
     * 
     * @type {AuditableEntity}
     * @memberof UpdateEquipmentCommand
     */
    auditableEntity?: AuditableEntity;
}
/**
 * 
 * @export
 * @interface UpdateHospitalCommand
 */
export interface UpdateHospitalCommand {
    /**
     * 
     * @type {string}
     * @memberof UpdateHospitalCommand
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateHospitalCommand
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateHospitalCommand
     */
    logo?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateHospitalCommand
     */
    overview?: string;
    /**
     * 
     * @type {number}
     * @memberof UpdateHospitalCommand
     */
    bedsCount?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdateHospitalCommand
     */
    operationRoomsCount?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdateHospitalCommand
     */
    icuBedsCount?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdateHospitalCommand
     */
    medicalStaffCount?: number;
    /**
     * 
     * @type {string}
     * @memberof UpdateHospitalCommand
     */
    countryName?: string;
    /**
     * 
     * @type {MarketingType}
     * @memberof UpdateHospitalCommand
     */
    marketingType?: MarketingType;
    /**
     * 
     * @type {number}
     * @memberof UpdateHospitalCommand
     */
    articlesCount?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdateHospitalCommand
     */
    packagesCount?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdateHospitalCommand
     */
    equipmentsCount?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdateHospitalCommand
     */
    reviewsCount?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdateHospitalCommand
     */
    departmentsCount?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdateHospitalCommand
     */
    specialtiesCount?: number;
    /**
     * 
     * @type {Array<HospitalSpecialtyItemViewModel>}
     * @memberof UpdateHospitalCommand
     */
    specialties?: Array<HospitalSpecialtyItemViewModel>;
    /**
     * 
     * @type {number}
     * @memberof UpdateHospitalCommand
     */
    accreditationsCount?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdateHospitalCommand
     */
    doctorAffiliationsCount?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdateHospitalCommand
     */
    managerAffiliationsCount?: number;
    /**
     * 
     * @type {Array<AwardViewModel>}
     * @memberof UpdateHospitalCommand
     */
    awards?: Array<AwardViewModel>;
    /**
     * 
     * @type {Array<MediaViewModel>}
     * @memberof UpdateHospitalCommand
     */
    medias?: Array<MediaViewModel>;
    /**
     * 
     * @type {LocationViewModel}
     * @memberof UpdateHospitalCommand
     */
    location?: LocationViewModel;
    /**
     * 
     * @type {AuditableEntity}
     * @memberof UpdateHospitalCommand
     */
    auditableEntity?: AuditableEntity;
}
/**
 * 
 * @export
 * @interface UpdateHospitalPackageCommand
 */
export interface UpdateHospitalPackageCommand {
    /**
     * 
     * @type {PackageStatus}
     * @memberof UpdateHospitalPackageCommand
     */
    packageStatus?: PackageStatus;
    /**
     * 
     * @type {number}
     * @memberof UpdateHospitalPackageCommand
     */
    packagePrice?: number;
    /**
     * 
     * @type {string}
     * @memberof UpdateHospitalPackageCommand
     */
    accomodation?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateHospitalPackageCommand
     */
    trnasfer?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateHospitalPackageCommand
     */
    bonus?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateHospitalPackageCommand
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateHospitalPackageCommand
     */
    hospitalName?: string;
    /**
     * 
     * @type {number}
     * @memberof UpdateHospitalPackageCommand
     */
    managerCount?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdateHospitalPackageCommand
     */
    serviceCount?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdateHospitalPackageCommand
     */
    bookingCount?: number;
    /**
     * 
     * @type {AuditableEntity}
     * @memberof UpdateHospitalPackageCommand
     */
    auditableEntity?: AuditableEntity;
}
/**
 * 
 * @export
 * @interface UpdateHospitalReviewCommand
 */
export interface UpdateHospitalReviewCommand {
    /**
     * 
     * @type {string}
     * @memberof UpdateHospitalReviewCommand
     */
    body?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UpdateHospitalReviewCommand
     */
    recommended?: boolean;
    /**
     * 
     * @type {ReviewCategory}
     * @memberof UpdateHospitalReviewCommand
     */
    reviewCategory?: ReviewCategory;
    /**
     * 
     * @type {number}
     * @memberof UpdateHospitalReviewCommand
     */
    rate?: number;
}
/**
 * 
 * @export
 * @interface UpdateHospitalSpecialtySequenceCommand
 */
export interface UpdateHospitalSpecialtySequenceCommand {
    /**
     * 
     * @type {Array<string>}
     * @memberof UpdateHospitalSpecialtySequenceCommand
     */
    hospitalSpecialtySequence?: Array<string>;
}
/**
 * 
 * @export
 * @interface UpdateManagerCommand
 */
export interface UpdateManagerCommand {
    /**
     * 
     * @type {string}
     * @memberof UpdateManagerCommand
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateManagerCommand
     */
    lastName?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateManagerCommand
     */
    photo?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateManagerCommand
     */
    photoThumbnail?: string;
    /**
     * 
     * @type {Gender}
     * @memberof UpdateManagerCommand
     */
    gender?: Gender;
    /**
     * 
     * @type {Date}
     * @memberof UpdateManagerCommand
     */
    dateOfBirth?: Date;
    /**
     * 
     * @type {Array<UserLanguageViewModel>}
     * @memberof UpdateManagerCommand
     */
    languages?: Array<UserLanguageViewModel>;
    /**
     * 
     * @type {Array<UserLocationViewModel>}
     * @memberof UpdateManagerCommand
     */
    locations?: Array<UserLocationViewModel>;
}
/**
 * 
 * @export
 * @interface UpdatePartnerCommand
 */
export interface UpdatePartnerCommand {
    /**
     * 
     * @type {string}
     * @memberof UpdatePartnerCommand
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdatePartnerCommand
     */
    lastName?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdatePartnerCommand
     */
    photo?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdatePartnerCommand
     */
    photoThumbnail?: string;
    /**
     * 
     * @type {Gender}
     * @memberof UpdatePartnerCommand
     */
    gender?: Gender;
    /**
     * 
     * @type {Date}
     * @memberof UpdatePartnerCommand
     */
    dateOfBirth?: Date;
    /**
     * 
     * @type {Array<UserLanguageViewModel>}
     * @memberof UpdatePartnerCommand
     */
    languages?: Array<UserLanguageViewModel>;
    /**
     * 
     * @type {Array<UserLocationViewModel>}
     * @memberof UpdatePartnerCommand
     */
    locations?: Array<UserLocationViewModel>;
}
/**
 * 
 * @export
 * @interface UpdatePatientCommand
 */
export interface UpdatePatientCommand {
    /**
     * 
     * @type {string}
     * @memberof UpdatePatientCommand
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdatePatientCommand
     */
    lastName?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdatePatientCommand
     */
    photo?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdatePatientCommand
     */
    photoThumbnail?: string;
    /**
     * 
     * @type {Gender}
     * @memberof UpdatePatientCommand
     */
    gender?: Gender;
    /**
     * 
     * @type {Date}
     * @memberof UpdatePatientCommand
     */
    dateOfBirth?: Date;
    /**
     * 
     * @type {Array<UserLanguageViewModel>}
     * @memberof UpdatePatientCommand
     */
    languages?: Array<UserLanguageViewModel>;
    /**
     * 
     * @type {Array<UserLocationViewModel>}
     * @memberof UpdatePatientCommand
     */
    locations?: Array<UserLocationViewModel>;
}
/**
 * 
 * @export
 * @interface UpdateServiceCommand
 */
export interface UpdateServiceCommand {
    /**
     * 
     * @type {string}
     * @memberof UpdateServiceCommand
     */
    specialtyTypeId?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateServiceCommand
     */
    specialtyTypeName?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateServiceCommand
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateServiceCommand
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateServiceCommand
     */
    specialtyType?: string;
    /**
     * 
     * @type {MarketingType}
     * @memberof UpdateServiceCommand
     */
    marketingType?: MarketingType;
    /**
     * 
     * @type {Procedure}
     * @memberof UpdateServiceCommand
     */
    procedure?: Procedure;
    /**
     * 
     * @type {number}
     * @memberof UpdateServiceCommand
     */
    minPrice?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdateServiceCommand
     */
    maxPrice?: number;
    /**
     * 
     * @type {boolean}
     * @memberof UpdateServiceCommand
     */
    priceReuqest?: boolean;
    /**
     * 
     * @type {number}
     * @memberof UpdateServiceCommand
     */
    order?: number;
    /**
     * 
     * @type {AuditableEntity}
     * @memberof UpdateServiceCommand
     */
    auditableEntity?: AuditableEntity;
}
/**
 * 
 * @export
 * @interface UpdateServiceSequenceCommand
 */
export interface UpdateServiceSequenceCommand {
    /**
     * 
     * @type {Array<string>}
     * @memberof UpdateServiceSequenceCommand
     */
    serviceSequence?: Array<string>;
}
/**
 * 
 * @export
 * @interface UpdateSpecialtyCommand
 */
export interface UpdateSpecialtyCommand {
    /**
     * 
     * @type {string}
     * @memberof UpdateSpecialtyCommand
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateSpecialtyCommand
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateSpecialtyCommand
     */
    specialtyTypeName?: string;
    /**
     * 
     * @type {AuditableEntity}
     * @memberof UpdateSpecialtyCommand
     */
    auditableEntity?: AuditableEntity;
}
/**
 * 
 * @export
 * @interface UpdateSpecialtyTypeCommand
 */
export interface UpdateSpecialtyTypeCommand {
    /**
     * 
     * @type {string}
     * @memberof UpdateSpecialtyTypeCommand
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateSpecialtyTypeCommand
     */
    description?: string;
    /**
     * 
     * @type {MarketingType}
     * @memberof UpdateSpecialtyTypeCommand
     */
    marketingType?: MarketingType;
    /**
     * 
     * @type {Date}
     * @memberof UpdateSpecialtyTypeCommand
     */
    created?: Date;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {string}
     * @memberof User
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    userName?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    lastName?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    normalizedName?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    phone?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    photo?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    photoThumbnail?: string;
    /**
     * 
     * @type {Gender}
     * @memberof User
     */
    gender?: Gender;
    /**
     * 
     * @type {Date}
     * @memberof User
     */
    dateOfBirth?: Date;
    /**
     * 
     * @type {Array<Device>}
     * @memberof User
     */
    devices?: Array<Device>;
    /**
     * 
     * @type {Array<Article>}
     * @memberof User
     */
    articles?: Array<Article>;
    /**
     * 
     * @type {Array<UserLocation>}
     * @memberof User
     */
    locations?: Array<UserLocation>;
    /**
     * 
     * @type {Array<UserLanguage>}
     * @memberof User
     */
    languages?: Array<UserLanguage>;
    /**
     * 
     * @type {AuditableEntity}
     * @memberof User
     */
    auditableEntity?: AuditableEntity;
}
/**
 * 
 * @export
 * @interface UserItemViewModel
 */
export interface UserItemViewModel {
    /**
     * 
     * @type {string}
     * @memberof UserItemViewModel
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof UserItemViewModel
     */
    userName?: string;
    /**
     * 
     * @type {string}
     * @memberof UserItemViewModel
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof UserItemViewModel
     */
    lastName?: string;
    /**
     * 
     * @type {string}
     * @memberof UserItemViewModel
     */
    fullname?: string;
    /**
     * 
     * @type {string}
     * @memberof UserItemViewModel
     */
    phone?: string;
    /**
     * 
     * @type {string}
     * @memberof UserItemViewModel
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof UserItemViewModel
     */
    photo?: string;
    /**
     * 
     * @type {string}
     * @memberof UserItemViewModel
     */
    photoThumbnail?: string;
    /**
     * 
     * @type {Gender}
     * @memberof UserItemViewModel
     */
    gender?: Gender;
    /**
     * 
     * @type {Date}
     * @memberof UserItemViewModel
     */
    dateOfBirth?: Date;
    /**
     * 
     * @type {AuditableEntity}
     * @memberof UserItemViewModel
     */
    auditableEntity?: AuditableEntity;
}
/**
 * 
 * @export
 * @interface UserLanguage
 */
export interface UserLanguage {
    /**
     * 
     * @type {string}
     * @memberof UserLanguage
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof UserLanguage
     */
    language?: string;
}
/**
 * 
 * @export
 * @interface UserLanguageViewModel
 */
export interface UserLanguageViewModel {
    /**
     * 
     * @type {string}
     * @memberof UserLanguageViewModel
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof UserLanguageViewModel
     */
    language?: string;
}
/**
 * 
 * @export
 * @interface UserLocation
 */
export interface UserLocation {
    /**
     * 
     * @type {string}
     * @memberof UserLocation
     */
    country?: string;
    /**
     * 
     * @type {string}
     * @memberof UserLocation
     */
    state?: string;
    /**
     * 
     * @type {string}
     * @memberof UserLocation
     */
    county?: string;
    /**
     * 
     * @type {string}
     * @memberof UserLocation
     */
    city?: string;
    /**
     * 
     * @type {string}
     * @memberof UserLocation
     */
    zipCode?: string;
    /**
     * 
     * @type {string}
     * @memberof UserLocation
     */
    address?: string;
    /**
     * 
     * @type {UserLocationType}
     * @memberof UserLocation
     */
    locationType?: UserLocationType;
}
/**
 * 
 * @export
 * @enum {string}
 */
export enum UserLocationType {
    LivesIn = 'LivesIn',
    BirthPlace = 'BirthPlace'
}

/**
 * 
 * @export
 * @interface UserLocationViewModel
 */
export interface UserLocationViewModel {
    /**
     * 
     * @type {UserLocationType}
     * @memberof UserLocationViewModel
     */
    locationType?: UserLocationType;
    /**
     * 
     * @type {number}
     * @memberof UserLocationViewModel
     */
    latitude?: number;
    /**
     * 
     * @type {number}
     * @memberof UserLocationViewModel
     */
    longitude?: number;
    /**
     * 
     * @type {string}
     * @memberof UserLocationViewModel
     */
    country?: string;
    /**
     * 
     * @type {string}
     * @memberof UserLocationViewModel
     */
    state?: string;
    /**
     * 
     * @type {string}
     * @memberof UserLocationViewModel
     */
    county?: string;
    /**
     * 
     * @type {string}
     * @memberof UserLocationViewModel
     */
    city?: string;
    /**
     * 
     * @type {string}
     * @memberof UserLocationViewModel
     */
    zipCode?: string;
    /**
     * 
     * @type {string}
     * @memberof UserLocationViewModel
     */
    address?: string;
}
/**
 * 
 * @export
 * @interface UserViewModel
 */
export interface UserViewModel {
    /**
     * 
     * @type {string}
     * @memberof UserViewModel
     */
    userType?: string;
    /**
     * 
     * @type {Array<UserLanguageViewModel>}
     * @memberof UserViewModel
     */
    languages?: Array<UserLanguageViewModel>;
    /**
     * 
     * @type {Array<UserLocationViewModel>}
     * @memberof UserViewModel
     */
    locations?: Array<UserLocationViewModel>;
    /**
     * 
     * @type {string}
     * @memberof UserViewModel
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof UserViewModel
     */
    userName?: string;
    /**
     * 
     * @type {string}
     * @memberof UserViewModel
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof UserViewModel
     */
    lastName?: string;
    /**
     * 
     * @type {string}
     * @memberof UserViewModel
     */
    fullname?: string;
    /**
     * 
     * @type {string}
     * @memberof UserViewModel
     */
    phone?: string;
    /**
     * 
     * @type {string}
     * @memberof UserViewModel
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof UserViewModel
     */
    photo?: string;
    /**
     * 
     * @type {string}
     * @memberof UserViewModel
     */
    photoThumbnail?: string;
    /**
     * 
     * @type {Gender}
     * @memberof UserViewModel
     */
    gender?: Gender;
    /**
     * 
     * @type {Date}
     * @memberof UserViewModel
     */
    dateOfBirth?: Date;
    /**
     * 
     * @type {AuditableEntity}
     * @memberof UserViewModel
     */
    auditableEntity?: AuditableEntity;
}
/**
 * 
 * @export
 * @enum {string}
 */
export enum VendorType {
    Stripe = 'Stripe',
    WeChat = 'WeChat'
}


/**
 * AffiliationsApi - axios parameter creator
 * @export
 */
export const AffiliationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Sample request:        DELETE /api/v1/hospitals/1/doctors/1
         * @summary Remove link between the doctor and the hospital.
         * @param {string} hospitalId 
         * @param {string} doctorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdDoctorsDoctorIdDelete(hospitalId: string, doctorId: string, options: any = {}): RequestArgs {
            // verify required parameter 'hospitalId' is not null or undefined
            if (hospitalId === null || hospitalId === undefined) {
                throw new RequiredError('hospitalId','Required parameter hospitalId was null or undefined when calling apiV1HospitalsHospitalIdDoctorsDoctorIdDelete.');
            }
            // verify required parameter 'doctorId' is not null or undefined
            if (doctorId === null || doctorId === undefined) {
                throw new RequiredError('doctorId','Required parameter doctorId was null or undefined when calling apiV1HospitalsHospitalIdDoctorsDoctorIdDelete.');
            }
            const localVarPath = `/api/v1/hospitals/{hospitalId}/doctors/{doctorId}`
                .replace(`{${"hospitalId"}}`, encodeURIComponent(String(hospitalId)))
                .replace(`{${"doctorId"}}`, encodeURIComponent(String(doctorId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        POST /api/v1/hospitals/1/doctors/1
         * @summary Link a doctor to a hospital.
         * @param {string} hospitalId 
         * @param {string} doctorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdDoctorsDoctorIdPost(hospitalId: string, doctorId: string, options: any = {}): RequestArgs {
            // verify required parameter 'hospitalId' is not null or undefined
            if (hospitalId === null || hospitalId === undefined) {
                throw new RequiredError('hospitalId','Required parameter hospitalId was null or undefined when calling apiV1HospitalsHospitalIdDoctorsDoctorIdPost.');
            }
            // verify required parameter 'doctorId' is not null or undefined
            if (doctorId === null || doctorId === undefined) {
                throw new RequiredError('doctorId','Required parameter doctorId was null or undefined when calling apiV1HospitalsHospitalIdDoctorsDoctorIdPost.');
            }
            const localVarPath = `/api/v1/hospitals/{hospitalId}/doctors/{doctorId}`
                .replace(`{${"hospitalId"}}`, encodeURIComponent(String(hospitalId)))
                .replace(`{${"doctorId"}}`, encodeURIComponent(String(doctorId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        DELETE /api/v1/hospitals/1/managers/1
         * @summary Remove link between the manager and the hospital.
         * @param {string} hospitalId 
         * @param {string} managerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdManagersManagerIdDelete(hospitalId: string, managerId: string, options: any = {}): RequestArgs {
            // verify required parameter 'hospitalId' is not null or undefined
            if (hospitalId === null || hospitalId === undefined) {
                throw new RequiredError('hospitalId','Required parameter hospitalId was null or undefined when calling apiV1HospitalsHospitalIdManagersManagerIdDelete.');
            }
            // verify required parameter 'managerId' is not null or undefined
            if (managerId === null || managerId === undefined) {
                throw new RequiredError('managerId','Required parameter managerId was null or undefined when calling apiV1HospitalsHospitalIdManagersManagerIdDelete.');
            }
            const localVarPath = `/api/v1/hospitals/{hospitalId}/managers/{managerId}`
                .replace(`{${"hospitalId"}}`, encodeURIComponent(String(hospitalId)))
                .replace(`{${"managerId"}}`, encodeURIComponent(String(managerId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        POST /api/v1/hospitals/1/managers/1
         * @summary Link a manager to a hospital.
         * @param {string} hospitalId 
         * @param {string} managerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdManagersManagerIdPost(hospitalId: string, managerId: string, options: any = {}): RequestArgs {
            // verify required parameter 'hospitalId' is not null or undefined
            if (hospitalId === null || hospitalId === undefined) {
                throw new RequiredError('hospitalId','Required parameter hospitalId was null or undefined when calling apiV1HospitalsHospitalIdManagersManagerIdPost.');
            }
            // verify required parameter 'managerId' is not null or undefined
            if (managerId === null || managerId === undefined) {
                throw new RequiredError('managerId','Required parameter managerId was null or undefined when calling apiV1HospitalsHospitalIdManagersManagerIdPost.');
            }
            const localVarPath = `/api/v1/hospitals/{hospitalId}/managers/{managerId}`
                .replace(`{${"hospitalId"}}`, encodeURIComponent(String(hospitalId)))
                .replace(`{${"managerId"}}`, encodeURIComponent(String(managerId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AffiliationsApi - functional programming interface
 * @export
 */
export const AffiliationsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Sample request:        DELETE /api/v1/hospitals/1/doctors/1
         * @summary Remove link between the doctor and the hospital.
         * @param {string} hospitalId 
         * @param {string} doctorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdDoctorsDoctorIdDelete(hospitalId: string, doctorId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = AffiliationsApiAxiosParamCreator(configuration).apiV1HospitalsHospitalIdDoctorsDoctorIdDelete(hospitalId, doctorId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        POST /api/v1/hospitals/1/doctors/1
         * @summary Link a doctor to a hospital.
         * @param {string} hospitalId 
         * @param {string} doctorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdDoctorsDoctorIdPost(hospitalId: string, doctorId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<DoctorAffiliationViewModel> {
            const localVarAxiosArgs = AffiliationsApiAxiosParamCreator(configuration).apiV1HospitalsHospitalIdDoctorsDoctorIdPost(hospitalId, doctorId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        DELETE /api/v1/hospitals/1/managers/1
         * @summary Remove link between the manager and the hospital.
         * @param {string} hospitalId 
         * @param {string} managerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdManagersManagerIdDelete(hospitalId: string, managerId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = AffiliationsApiAxiosParamCreator(configuration).apiV1HospitalsHospitalIdManagersManagerIdDelete(hospitalId, managerId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        POST /api/v1/hospitals/1/managers/1
         * @summary Link a manager to a hospital.
         * @param {string} hospitalId 
         * @param {string} managerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdManagersManagerIdPost(hospitalId: string, managerId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ManagerAffiliationViewModel> {
            const localVarAxiosArgs = AffiliationsApiAxiosParamCreator(configuration).apiV1HospitalsHospitalIdManagersManagerIdPost(hospitalId, managerId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AffiliationsApi - factory interface
 * @export
 */
export const AffiliationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Sample request:        DELETE /api/v1/hospitals/1/doctors/1
         * @summary Remove link between the doctor and the hospital.
         * @param {string} hospitalId 
         * @param {string} doctorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdDoctorsDoctorIdDelete(hospitalId: string, doctorId: string, options?: any): AxiosPromise<boolean> {
            return AffiliationsApiFp(configuration).apiV1HospitalsHospitalIdDoctorsDoctorIdDelete(hospitalId, doctorId, options)(axios, basePath);
        },
        /**
         * Sample request:        POST /api/v1/hospitals/1/doctors/1
         * @summary Link a doctor to a hospital.
         * @param {string} hospitalId 
         * @param {string} doctorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdDoctorsDoctorIdPost(hospitalId: string, doctorId: string, options?: any): AxiosPromise<DoctorAffiliationViewModel> {
            return AffiliationsApiFp(configuration).apiV1HospitalsHospitalIdDoctorsDoctorIdPost(hospitalId, doctorId, options)(axios, basePath);
        },
        /**
         * Sample request:        DELETE /api/v1/hospitals/1/managers/1
         * @summary Remove link between the manager and the hospital.
         * @param {string} hospitalId 
         * @param {string} managerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdManagersManagerIdDelete(hospitalId: string, managerId: string, options?: any): AxiosPromise<boolean> {
            return AffiliationsApiFp(configuration).apiV1HospitalsHospitalIdManagersManagerIdDelete(hospitalId, managerId, options)(axios, basePath);
        },
        /**
         * Sample request:        POST /api/v1/hospitals/1/managers/1
         * @summary Link a manager to a hospital.
         * @param {string} hospitalId 
         * @param {string} managerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdManagersManagerIdPost(hospitalId: string, managerId: string, options?: any): AxiosPromise<ManagerAffiliationViewModel> {
            return AffiliationsApiFp(configuration).apiV1HospitalsHospitalIdManagersManagerIdPost(hospitalId, managerId, options)(axios, basePath);
        },
    };
};

/**
 * AffiliationsApi - object-oriented interface
 * @export
 * @class AffiliationsApi
 * @extends {BaseAPI}
 */
export class AffiliationsApi extends BaseAPI {
    /**
     * Sample request:        DELETE /api/v1/hospitals/1/doctors/1
     * @summary Remove link between the doctor and the hospital.
     * @param {string} hospitalId 
     * @param {string} doctorId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AffiliationsApi
     */
    public apiV1HospitalsHospitalIdDoctorsDoctorIdDelete(hospitalId: string, doctorId: string, options?: any) {
        return AffiliationsApiFp(this.configuration).apiV1HospitalsHospitalIdDoctorsDoctorIdDelete(hospitalId, doctorId, options)(this.axios, this.basePath);
    }

    /**
     * Sample request:        POST /api/v1/hospitals/1/doctors/1
     * @summary Link a doctor to a hospital.
     * @param {string} hospitalId 
     * @param {string} doctorId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AffiliationsApi
     */
    public apiV1HospitalsHospitalIdDoctorsDoctorIdPost(hospitalId: string, doctorId: string, options?: any) {
        return AffiliationsApiFp(this.configuration).apiV1HospitalsHospitalIdDoctorsDoctorIdPost(hospitalId, doctorId, options)(this.axios, this.basePath);
    }

    /**
     * Sample request:        DELETE /api/v1/hospitals/1/managers/1
     * @summary Remove link between the manager and the hospital.
     * @param {string} hospitalId 
     * @param {string} managerId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AffiliationsApi
     */
    public apiV1HospitalsHospitalIdManagersManagerIdDelete(hospitalId: string, managerId: string, options?: any) {
        return AffiliationsApiFp(this.configuration).apiV1HospitalsHospitalIdManagersManagerIdDelete(hospitalId, managerId, options)(this.axios, this.basePath);
    }

    /**
     * Sample request:        POST /api/v1/hospitals/1/managers/1
     * @summary Link a manager to a hospital.
     * @param {string} hospitalId 
     * @param {string} managerId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AffiliationsApi
     */
    public apiV1HospitalsHospitalIdManagersManagerIdPost(hospitalId: string, managerId: string, options?: any) {
        return AffiliationsApiFp(this.configuration).apiV1HospitalsHospitalIdManagersManagerIdPost(hospitalId, managerId, options)(this.axios, this.basePath);
    }

}


/**
 * ArticlesApi - axios parameter creator
 * @export
 */
export const ArticlesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Sample request:        GET /api/v1/hospitals/1/articles
         * @summary Get all articles.
         * @param {string} [id] 
         * @param {string} [title] 
         * @param {string} [description] 
         * @param {object} [status] 
         * @param {string} [userId] 
         * @param {string} [userName] 
         * @param {string} [hospitalId] 
         * @param {string} [hospitalName] 
         * @param {string} [tag] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {Date} [lastRetrieved] 
         * @param {boolean} [current] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsArticlesGet(id?: string, title?: string, description?: string, status?: object, userId?: string, userName?: string, hospitalId?: string, hospitalName?: string, tag?: string, page?: number, limit?: number, lastRetrieved?: Date, current?: boolean, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/hospitals/articles`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }

            if (title !== undefined) {
                localVarQueryParameter['Title'] = title;
            }

            if (description !== undefined) {
                localVarQueryParameter['Description'] = description;
            }

            if (status !== undefined) {
                localVarQueryParameter['Status'] = status;
            }

            if (userId !== undefined) {
                localVarQueryParameter['UserId'] = userId;
            }

            if (userName !== undefined) {
                localVarQueryParameter['UserName'] = userName;
            }

            if (hospitalId !== undefined) {
                localVarQueryParameter['HospitalId'] = hospitalId;
            }

            if (hospitalName !== undefined) {
                localVarQueryParameter['HospitalName'] = hospitalName;
            }

            if (tag !== undefined) {
                localVarQueryParameter['Tag'] = tag;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (lastRetrieved !== undefined) {
                localVarQueryParameter['lastRetrieved'] = (lastRetrieved as any instanceof Date) ?
                    (lastRetrieved as any).toISOString() :
                    lastRetrieved;
            }

            if (current !== undefined) {
                localVarQueryParameter['Current'] = current;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        DELETE /api/v1/hospitals/1/articles/1
         * @summary Delete article.
         * @param {string} hospitalId 
         * @param {string} articleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdArticlesArticleIdDelete(hospitalId: string, articleId: string, options: any = {}): RequestArgs {
            // verify required parameter 'hospitalId' is not null or undefined
            if (hospitalId === null || hospitalId === undefined) {
                throw new RequiredError('hospitalId','Required parameter hospitalId was null or undefined when calling apiV1HospitalsHospitalIdArticlesArticleIdDelete.');
            }
            // verify required parameter 'articleId' is not null or undefined
            if (articleId === null || articleId === undefined) {
                throw new RequiredError('articleId','Required parameter articleId was null or undefined when calling apiV1HospitalsHospitalIdArticlesArticleIdDelete.');
            }
            const localVarPath = `/api/v1/hospitals/{hospitalId}/articles/{articleId}`
                .replace(`{${"hospitalId"}}`, encodeURIComponent(String(hospitalId)))
                .replace(`{${"articleId"}}`, encodeURIComponent(String(articleId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        GET /api/v1/hospitals/1/articles/1
         * @summary Get article.
         * @param {string} hospitalId 
         * @param {string} articleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdArticlesArticleIdGet(hospitalId: string, articleId: string, options: any = {}): RequestArgs {
            // verify required parameter 'hospitalId' is not null or undefined
            if (hospitalId === null || hospitalId === undefined) {
                throw new RequiredError('hospitalId','Required parameter hospitalId was null or undefined when calling apiV1HospitalsHospitalIdArticlesArticleIdGet.');
            }
            // verify required parameter 'articleId' is not null or undefined
            if (articleId === null || articleId === undefined) {
                throw new RequiredError('articleId','Required parameter articleId was null or undefined when calling apiV1HospitalsHospitalIdArticlesArticleIdGet.');
            }
            const localVarPath = `/api/v1/hospitals/{hospitalId}/articles/{articleId}`
                .replace(`{${"hospitalId"}}`, encodeURIComponent(String(hospitalId)))
                .replace(`{${"articleId"}}`, encodeURIComponent(String(articleId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        PUT /api/v1/hospitals/1/articles/1      {          \"title\": \"Samsung Hospital Article\",          \"description\": \"This is an article.\",          \"body\": \"updated article body here\",          \"status\": \"Draft\",          \"hospitalId\": 1,          \"tags\": [            {              \"value\": \"articletag1\",              \"order\": 0            },            {              \"value\": \"articletag2\",              \"order\": 0            }          ],          \"medias\": [            {              \"mediaType\": \"Photo\",              \"url\": \"string\",              \"thumbnailUrl\": \"string\",              \"description\": \"string\",              \"order\": 0            }          ]      }
         * @summary Update article.
         * @param {string} hospitalId 
         * @param {string} articleId 
         * @param {UpdateArticleCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdArticlesArticleIdPut(hospitalId: string, articleId: string, body?: UpdateArticleCommand, options: any = {}): RequestArgs {
            // verify required parameter 'hospitalId' is not null or undefined
            if (hospitalId === null || hospitalId === undefined) {
                throw new RequiredError('hospitalId','Required parameter hospitalId was null or undefined when calling apiV1HospitalsHospitalIdArticlesArticleIdPut.');
            }
            // verify required parameter 'articleId' is not null or undefined
            if (articleId === null || articleId === undefined) {
                throw new RequiredError('articleId','Required parameter articleId was null or undefined when calling apiV1HospitalsHospitalIdArticlesArticleIdPut.');
            }
            const localVarPath = `/api/v1/hospitals/{hospitalId}/articles/{articleId}`
                .replace(`{${"hospitalId"}}`, encodeURIComponent(String(hospitalId)))
                .replace(`{${"articleId"}}`, encodeURIComponent(String(articleId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        POST /api/v1/hospitals/1/articles      {          \"title\": \"Samsung Hospital Article\",          \"description\": \"This is an article.\",          \"body\": \"article body here\",          \"status\": \"Draft\",          \"hospitalId\": 1,          \"tags\": [            {              \"value\": \"string\",              \"order\": 0              }          ],          \"medias\": [            {              \"mediaType\": \"Photo\",              \"url\": \"string\",              \"thumbnailUrl\": \"string\",              \"description\": \"string\",              \"order\": 0            }          ]      }
         * @summary Create an article.
         * @param {string} hospitalId 
         * @param {CreateArticleCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdArticlesPost(hospitalId: string, body?: CreateArticleCommand, options: any = {}): RequestArgs {
            // verify required parameter 'hospitalId' is not null or undefined
            if (hospitalId === null || hospitalId === undefined) {
                throw new RequiredError('hospitalId','Required parameter hospitalId was null or undefined when calling apiV1HospitalsHospitalIdArticlesPost.');
            }
            const localVarPath = `/api/v1/hospitals/{hospitalId}/articles`
                .replace(`{${"hospitalId"}}`, encodeURIComponent(String(hospitalId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ArticlesApi - functional programming interface
 * @export
 */
export const ArticlesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Sample request:        GET /api/v1/hospitals/1/articles
         * @summary Get all articles.
         * @param {string} [id] 
         * @param {string} [title] 
         * @param {string} [description] 
         * @param {object} [status] 
         * @param {string} [userId] 
         * @param {string} [userName] 
         * @param {string} [hospitalId] 
         * @param {string} [hospitalName] 
         * @param {string} [tag] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {Date} [lastRetrieved] 
         * @param {boolean} [current] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsArticlesGet(id?: string, title?: string, description?: string, status?: object, userId?: string, userName?: string, hospitalId?: string, hospitalName?: string, tag?: string, page?: number, limit?: number, lastRetrieved?: Date, current?: boolean, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ArticlesViewModel> {
            const localVarAxiosArgs = ArticlesApiAxiosParamCreator(configuration).apiV1HospitalsArticlesGet(id, title, description, status, userId, userName, hospitalId, hospitalName, tag, page, limit, lastRetrieved, current, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        DELETE /api/v1/hospitals/1/articles/1
         * @summary Delete article.
         * @param {string} hospitalId 
         * @param {string} articleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdArticlesArticleIdDelete(hospitalId: string, articleId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = ArticlesApiAxiosParamCreator(configuration).apiV1HospitalsHospitalIdArticlesArticleIdDelete(hospitalId, articleId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        GET /api/v1/hospitals/1/articles/1
         * @summary Get article.
         * @param {string} hospitalId 
         * @param {string} articleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdArticlesArticleIdGet(hospitalId: string, articleId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ArticleViewModel> {
            const localVarAxiosArgs = ArticlesApiAxiosParamCreator(configuration).apiV1HospitalsHospitalIdArticlesArticleIdGet(hospitalId, articleId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        PUT /api/v1/hospitals/1/articles/1      {          \"title\": \"Samsung Hospital Article\",          \"description\": \"This is an article.\",          \"body\": \"updated article body here\",          \"status\": \"Draft\",          \"hospitalId\": 1,          \"tags\": [            {              \"value\": \"articletag1\",              \"order\": 0            },            {              \"value\": \"articletag2\",              \"order\": 0            }          ],          \"medias\": [            {              \"mediaType\": \"Photo\",              \"url\": \"string\",              \"thumbnailUrl\": \"string\",              \"description\": \"string\",              \"order\": 0            }          ]      }
         * @summary Update article.
         * @param {string} hospitalId 
         * @param {string} articleId 
         * @param {UpdateArticleCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdArticlesArticleIdPut(hospitalId: string, articleId: string, body?: UpdateArticleCommand, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = ArticlesApiAxiosParamCreator(configuration).apiV1HospitalsHospitalIdArticlesArticleIdPut(hospitalId, articleId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        POST /api/v1/hospitals/1/articles      {          \"title\": \"Samsung Hospital Article\",          \"description\": \"This is an article.\",          \"body\": \"article body here\",          \"status\": \"Draft\",          \"hospitalId\": 1,          \"tags\": [            {              \"value\": \"string\",              \"order\": 0              }          ],          \"medias\": [            {              \"mediaType\": \"Photo\",              \"url\": \"string\",              \"thumbnailUrl\": \"string\",              \"description\": \"string\",              \"order\": 0            }          ]      }
         * @summary Create an article.
         * @param {string} hospitalId 
         * @param {CreateArticleCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdArticlesPost(hospitalId: string, body?: CreateArticleCommand, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string> {
            const localVarAxiosArgs = ArticlesApiAxiosParamCreator(configuration).apiV1HospitalsHospitalIdArticlesPost(hospitalId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ArticlesApi - factory interface
 * @export
 */
export const ArticlesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Sample request:        GET /api/v1/hospitals/1/articles
         * @summary Get all articles.
         * @param {string} [id] 
         * @param {string} [title] 
         * @param {string} [description] 
         * @param {object} [status] 
         * @param {string} [userId] 
         * @param {string} [userName] 
         * @param {string} [hospitalId] 
         * @param {string} [hospitalName] 
         * @param {string} [tag] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {Date} [lastRetrieved] 
         * @param {boolean} [current] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsArticlesGet(id?: string, title?: string, description?: string, status?: object, userId?: string, userName?: string, hospitalId?: string, hospitalName?: string, tag?: string, page?: number, limit?: number, lastRetrieved?: Date, current?: boolean, options?: any): AxiosPromise<ArticlesViewModel> {
            return ArticlesApiFp(configuration).apiV1HospitalsArticlesGet(id, title, description, status, userId, userName, hospitalId, hospitalName, tag, page, limit, lastRetrieved, current, options)(axios, basePath);
        },
        /**
         * Sample request:        DELETE /api/v1/hospitals/1/articles/1
         * @summary Delete article.
         * @param {string} hospitalId 
         * @param {string} articleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdArticlesArticleIdDelete(hospitalId: string, articleId: string, options?: any): AxiosPromise<boolean> {
            return ArticlesApiFp(configuration).apiV1HospitalsHospitalIdArticlesArticleIdDelete(hospitalId, articleId, options)(axios, basePath);
        },
        /**
         * Sample request:        GET /api/v1/hospitals/1/articles/1
         * @summary Get article.
         * @param {string} hospitalId 
         * @param {string} articleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdArticlesArticleIdGet(hospitalId: string, articleId: string, options?: any): AxiosPromise<ArticleViewModel> {
            return ArticlesApiFp(configuration).apiV1HospitalsHospitalIdArticlesArticleIdGet(hospitalId, articleId, options)(axios, basePath);
        },
        /**
         * Sample request:        PUT /api/v1/hospitals/1/articles/1      {          \"title\": \"Samsung Hospital Article\",          \"description\": \"This is an article.\",          \"body\": \"updated article body here\",          \"status\": \"Draft\",          \"hospitalId\": 1,          \"tags\": [            {              \"value\": \"articletag1\",              \"order\": 0            },            {              \"value\": \"articletag2\",              \"order\": 0            }          ],          \"medias\": [            {              \"mediaType\": \"Photo\",              \"url\": \"string\",              \"thumbnailUrl\": \"string\",              \"description\": \"string\",              \"order\": 0            }          ]      }
         * @summary Update article.
         * @param {string} hospitalId 
         * @param {string} articleId 
         * @param {UpdateArticleCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdArticlesArticleIdPut(hospitalId: string, articleId: string, body?: UpdateArticleCommand, options?: any): AxiosPromise<boolean> {
            return ArticlesApiFp(configuration).apiV1HospitalsHospitalIdArticlesArticleIdPut(hospitalId, articleId, body, options)(axios, basePath);
        },
        /**
         * Sample request:        POST /api/v1/hospitals/1/articles      {          \"title\": \"Samsung Hospital Article\",          \"description\": \"This is an article.\",          \"body\": \"article body here\",          \"status\": \"Draft\",          \"hospitalId\": 1,          \"tags\": [            {              \"value\": \"string\",              \"order\": 0              }          ],          \"medias\": [            {              \"mediaType\": \"Photo\",              \"url\": \"string\",              \"thumbnailUrl\": \"string\",              \"description\": \"string\",              \"order\": 0            }          ]      }
         * @summary Create an article.
         * @param {string} hospitalId 
         * @param {CreateArticleCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdArticlesPost(hospitalId: string, body?: CreateArticleCommand, options?: any): AxiosPromise<string> {
            return ArticlesApiFp(configuration).apiV1HospitalsHospitalIdArticlesPost(hospitalId, body, options)(axios, basePath);
        },
    };
};

/**
 * ArticlesApi - object-oriented interface
 * @export
 * @class ArticlesApi
 * @extends {BaseAPI}
 */
export class ArticlesApi extends BaseAPI {
    /**
     * Sample request:        GET /api/v1/hospitals/1/articles
     * @summary Get all articles.
     * @param {string} [id] 
     * @param {string} [title] 
     * @param {string} [description] 
     * @param {object} [status] 
     * @param {string} [userId] 
     * @param {string} [userName] 
     * @param {string} [hospitalId] 
     * @param {string} [hospitalName] 
     * @param {string} [tag] 
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {Date} [lastRetrieved] 
     * @param {boolean} [current] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticlesApi
     */
    public apiV1HospitalsArticlesGet(id?: string, title?: string, description?: string, status?: object, userId?: string, userName?: string, hospitalId?: string, hospitalName?: string, tag?: string, page?: number, limit?: number, lastRetrieved?: Date, current?: boolean, options?: any) {
        return ArticlesApiFp(this.configuration).apiV1HospitalsArticlesGet(id, title, description, status, userId, userName, hospitalId, hospitalName, tag, page, limit, lastRetrieved, current, options)(this.axios, this.basePath);
    }

    /**
     * Sample request:        DELETE /api/v1/hospitals/1/articles/1
     * @summary Delete article.
     * @param {string} hospitalId 
     * @param {string} articleId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticlesApi
     */
    public apiV1HospitalsHospitalIdArticlesArticleIdDelete(hospitalId: string, articleId: string, options?: any) {
        return ArticlesApiFp(this.configuration).apiV1HospitalsHospitalIdArticlesArticleIdDelete(hospitalId, articleId, options)(this.axios, this.basePath);
    }

    /**
     * Sample request:        GET /api/v1/hospitals/1/articles/1
     * @summary Get article.
     * @param {string} hospitalId 
     * @param {string} articleId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticlesApi
     */
    public apiV1HospitalsHospitalIdArticlesArticleIdGet(hospitalId: string, articleId: string, options?: any) {
        return ArticlesApiFp(this.configuration).apiV1HospitalsHospitalIdArticlesArticleIdGet(hospitalId, articleId, options)(this.axios, this.basePath);
    }

    /**
     * Sample request:        PUT /api/v1/hospitals/1/articles/1      {          \"title\": \"Samsung Hospital Article\",          \"description\": \"This is an article.\",          \"body\": \"updated article body here\",          \"status\": \"Draft\",          \"hospitalId\": 1,          \"tags\": [            {              \"value\": \"articletag1\",              \"order\": 0            },            {              \"value\": \"articletag2\",              \"order\": 0            }          ],          \"medias\": [            {              \"mediaType\": \"Photo\",              \"url\": \"string\",              \"thumbnailUrl\": \"string\",              \"description\": \"string\",              \"order\": 0            }          ]      }
     * @summary Update article.
     * @param {string} hospitalId 
     * @param {string} articleId 
     * @param {UpdateArticleCommand} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticlesApi
     */
    public apiV1HospitalsHospitalIdArticlesArticleIdPut(hospitalId: string, articleId: string, body?: UpdateArticleCommand, options?: any) {
        return ArticlesApiFp(this.configuration).apiV1HospitalsHospitalIdArticlesArticleIdPut(hospitalId, articleId, body, options)(this.axios, this.basePath);
    }

    /**
     * Sample request:        POST /api/v1/hospitals/1/articles      {          \"title\": \"Samsung Hospital Article\",          \"description\": \"This is an article.\",          \"body\": \"article body here\",          \"status\": \"Draft\",          \"hospitalId\": 1,          \"tags\": [            {              \"value\": \"string\",              \"order\": 0              }          ],          \"medias\": [            {              \"mediaType\": \"Photo\",              \"url\": \"string\",              \"thumbnailUrl\": \"string\",              \"description\": \"string\",              \"order\": 0            }          ]      }
     * @summary Create an article.
     * @param {string} hospitalId 
     * @param {CreateArticleCommand} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticlesApi
     */
    public apiV1HospitalsHospitalIdArticlesPost(hospitalId: string, body?: CreateArticleCommand, options?: any) {
        return ArticlesApiFp(this.configuration).apiV1HospitalsHospitalIdArticlesPost(hospitalId, body, options)(this.axios, this.basePath);
    }

}


/**
 * BookingsApi - axios parameter creator
 * @export
 */
export const BookingsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Sample request:        DELETE /api/v1/bookings/1
         * @summary Delete booking.
         * @param {string} bookingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1BookingsBookingIdDelete(bookingId: string, options: any = {}): RequestArgs {
            // verify required parameter 'bookingId' is not null or undefined
            if (bookingId === null || bookingId === undefined) {
                throw new RequiredError('bookingId','Required parameter bookingId was null or undefined when calling apiV1BookingsBookingIdDelete.');
            }
            const localVarPath = `/api/v1/bookings/{bookingId}`
                .replace(`{${"bookingId"}}`, encodeURIComponent(String(bookingId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        GET /api/v1/bookings/1
         * @summary Get booking.
         * @param {string} bookingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1BookingsBookingIdGet(bookingId: string, options: any = {}): RequestArgs {
            // verify required parameter 'bookingId' is not null or undefined
            if (bookingId === null || bookingId === undefined) {
                throw new RequiredError('bookingId','Required parameter bookingId was null or undefined when calling apiV1BookingsBookingIdGet.');
            }
            const localVarPath = `/api/v1/bookings/{bookingId}`
                .replace(`{${"bookingId"}}`, encodeURIComponent(String(bookingId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Smaple request:        PUT /api/v1/bookings/1      {          \"approximateDateStart\": \"2020-02-28T06:21:09.698Z\",          \"approximateDateEnd\": \"2020-02-28T06:21:09.698Z\"      }
         * @summary Update booking.
         * @param {string} bookingId 
         * @param {UpdateBookingCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1BookingsBookingIdPut(bookingId: string, body?: UpdateBookingCommand, options: any = {}): RequestArgs {
            // verify required parameter 'bookingId' is not null or undefined
            if (bookingId === null || bookingId === undefined) {
                throw new RequiredError('bookingId','Required parameter bookingId was null or undefined when calling apiV1BookingsBookingIdPut.');
            }
            const localVarPath = `/api/v1/bookings/{bookingId}`
                .replace(`{${"bookingId"}}`, encodeURIComponent(String(bookingId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Samaple request:        GET /api/v1/bookings
         * @summary Get all bookings.
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {Date} [lastRetrieved] 
         * @param {boolean} [current] 
         * @param {string} [searchString] 
         * @param {boolean} [isOpen] 
         * @param {object} [bookingStatus] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1BookingsGet(page?: number, limit?: number, lastRetrieved?: Date, current?: boolean, searchString?: string, isOpen?: boolean, bookingStatus?: object, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/bookings`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (lastRetrieved !== undefined) {
                localVarQueryParameter['lastRetrieved'] = (lastRetrieved as any instanceof Date) ?
                    (lastRetrieved as any).toISOString() :
                    lastRetrieved;
            }

            if (current !== undefined) {
                localVarQueryParameter['Current'] = current;
            }

            if (searchString !== undefined) {
                localVarQueryParameter['searchString'] = searchString;
            }

            if (isOpen !== undefined) {
                localVarQueryParameter['isOpen'] = isOpen;
            }

            if (bookingStatus !== undefined) {
                localVarQueryParameter['bookingStatus'] = bookingStatus;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        POST /api/v1/bookings      {          \"packageId\": 1,          \"approximateDateStart\": \"2020-02-28T06:21:09.698Z\",          \"approximateDateEnd\": \"2020-02-28T06:21:09.698Z\"      }
         * @summary Create a booking.
         * @param {CreateBookingCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1BookingsPost(body?: CreateBookingCommand, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/bookings`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BookingsApi - functional programming interface
 * @export
 */
export const BookingsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Sample request:        DELETE /api/v1/bookings/1
         * @summary Delete booking.
         * @param {string} bookingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1BookingsBookingIdDelete(bookingId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = BookingsApiAxiosParamCreator(configuration).apiV1BookingsBookingIdDelete(bookingId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        GET /api/v1/bookings/1
         * @summary Get booking.
         * @param {string} bookingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1BookingsBookingIdGet(bookingId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<BookingViewModel> {
            const localVarAxiosArgs = BookingsApiAxiosParamCreator(configuration).apiV1BookingsBookingIdGet(bookingId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Smaple request:        PUT /api/v1/bookings/1      {          \"approximateDateStart\": \"2020-02-28T06:21:09.698Z\",          \"approximateDateEnd\": \"2020-02-28T06:21:09.698Z\"      }
         * @summary Update booking.
         * @param {string} bookingId 
         * @param {UpdateBookingCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1BookingsBookingIdPut(bookingId: string, body?: UpdateBookingCommand, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = BookingsApiAxiosParamCreator(configuration).apiV1BookingsBookingIdPut(bookingId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Samaple request:        GET /api/v1/bookings
         * @summary Get all bookings.
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {Date} [lastRetrieved] 
         * @param {boolean} [current] 
         * @param {string} [searchString] 
         * @param {boolean} [isOpen] 
         * @param {object} [bookingStatus] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1BookingsGet(page?: number, limit?: number, lastRetrieved?: Date, current?: boolean, searchString?: string, isOpen?: boolean, bookingStatus?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<BookingsViewModel> {
            const localVarAxiosArgs = BookingsApiAxiosParamCreator(configuration).apiV1BookingsGet(page, limit, lastRetrieved, current, searchString, isOpen, bookingStatus, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        POST /api/v1/bookings      {          \"packageId\": 1,          \"approximateDateStart\": \"2020-02-28T06:21:09.698Z\",          \"approximateDateEnd\": \"2020-02-28T06:21:09.698Z\"      }
         * @summary Create a booking.
         * @param {CreateBookingCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1BookingsPost(body?: CreateBookingCommand, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string> {
            const localVarAxiosArgs = BookingsApiAxiosParamCreator(configuration).apiV1BookingsPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * BookingsApi - factory interface
 * @export
 */
export const BookingsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Sample request:        DELETE /api/v1/bookings/1
         * @summary Delete booking.
         * @param {string} bookingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1BookingsBookingIdDelete(bookingId: string, options?: any): AxiosPromise<boolean> {
            return BookingsApiFp(configuration).apiV1BookingsBookingIdDelete(bookingId, options)(axios, basePath);
        },
        /**
         * Sample request:        GET /api/v1/bookings/1
         * @summary Get booking.
         * @param {string} bookingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1BookingsBookingIdGet(bookingId: string, options?: any): AxiosPromise<BookingViewModel> {
            return BookingsApiFp(configuration).apiV1BookingsBookingIdGet(bookingId, options)(axios, basePath);
        },
        /**
         * Smaple request:        PUT /api/v1/bookings/1      {          \"approximateDateStart\": \"2020-02-28T06:21:09.698Z\",          \"approximateDateEnd\": \"2020-02-28T06:21:09.698Z\"      }
         * @summary Update booking.
         * @param {string} bookingId 
         * @param {UpdateBookingCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1BookingsBookingIdPut(bookingId: string, body?: UpdateBookingCommand, options?: any): AxiosPromise<boolean> {
            return BookingsApiFp(configuration).apiV1BookingsBookingIdPut(bookingId, body, options)(axios, basePath);
        },
        /**
         * Samaple request:        GET /api/v1/bookings
         * @summary Get all bookings.
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {Date} [lastRetrieved] 
         * @param {boolean} [current] 
         * @param {string} [searchString] 
         * @param {boolean} [isOpen] 
         * @param {object} [bookingStatus] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1BookingsGet(page?: number, limit?: number, lastRetrieved?: Date, current?: boolean, searchString?: string, isOpen?: boolean, bookingStatus?: object, options?: any): AxiosPromise<BookingsViewModel> {
            return BookingsApiFp(configuration).apiV1BookingsGet(page, limit, lastRetrieved, current, searchString, isOpen, bookingStatus, options)(axios, basePath);
        },
        /**
         * Sample request:        POST /api/v1/bookings      {          \"packageId\": 1,          \"approximateDateStart\": \"2020-02-28T06:21:09.698Z\",          \"approximateDateEnd\": \"2020-02-28T06:21:09.698Z\"      }
         * @summary Create a booking.
         * @param {CreateBookingCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1BookingsPost(body?: CreateBookingCommand, options?: any): AxiosPromise<string> {
            return BookingsApiFp(configuration).apiV1BookingsPost(body, options)(axios, basePath);
        },
    };
};

/**
 * BookingsApi - object-oriented interface
 * @export
 * @class BookingsApi
 * @extends {BaseAPI}
 */
export class BookingsApi extends BaseAPI {
    /**
     * Sample request:        DELETE /api/v1/bookings/1
     * @summary Delete booking.
     * @param {string} bookingId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookingsApi
     */
    public apiV1BookingsBookingIdDelete(bookingId: string, options?: any) {
        return BookingsApiFp(this.configuration).apiV1BookingsBookingIdDelete(bookingId, options)(this.axios, this.basePath);
    }

    /**
     * Sample request:        GET /api/v1/bookings/1
     * @summary Get booking.
     * @param {string} bookingId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookingsApi
     */
    public apiV1BookingsBookingIdGet(bookingId: string, options?: any) {
        return BookingsApiFp(this.configuration).apiV1BookingsBookingIdGet(bookingId, options)(this.axios, this.basePath);
    }

    /**
     * Smaple request:        PUT /api/v1/bookings/1      {          \"approximateDateStart\": \"2020-02-28T06:21:09.698Z\",          \"approximateDateEnd\": \"2020-02-28T06:21:09.698Z\"      }
     * @summary Update booking.
     * @param {string} bookingId 
     * @param {UpdateBookingCommand} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookingsApi
     */
    public apiV1BookingsBookingIdPut(bookingId: string, body?: UpdateBookingCommand, options?: any) {
        return BookingsApiFp(this.configuration).apiV1BookingsBookingIdPut(bookingId, body, options)(this.axios, this.basePath);
    }

    /**
     * Samaple request:        GET /api/v1/bookings
     * @summary Get all bookings.
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {Date} [lastRetrieved] 
     * @param {boolean} [current] 
     * @param {string} [searchString] 
     * @param {boolean} [isOpen] 
     * @param {object} [bookingStatus] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookingsApi
     */
    public apiV1BookingsGet(page?: number, limit?: number, lastRetrieved?: Date, current?: boolean, searchString?: string, isOpen?: boolean, bookingStatus?: object, options?: any) {
        return BookingsApiFp(this.configuration).apiV1BookingsGet(page, limit, lastRetrieved, current, searchString, isOpen, bookingStatus, options)(this.axios, this.basePath);
    }

    /**
     * Sample request:        POST /api/v1/bookings      {          \"packageId\": 1,          \"approximateDateStart\": \"2020-02-28T06:21:09.698Z\",          \"approximateDateEnd\": \"2020-02-28T06:21:09.698Z\"      }
     * @summary Create a booking.
     * @param {CreateBookingCommand} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookingsApi
     */
    public apiV1BookingsPost(body?: CreateBookingCommand, options?: any) {
        return BookingsApiFp(this.configuration).apiV1BookingsPost(body, options)(this.axios, this.basePath);
    }

}


/**
 * CHAdminsApi - axios parameter creator
 * @export
 */
export const CHAdminsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Sample request:        DELETE /api/v1/chadmins/1
         * @summary Delete cloud hospital admin user.
         * @param {string} chAdminId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChadminsChAdminIdDelete(chAdminId: string, options: any = {}): RequestArgs {
            // verify required parameter 'chAdminId' is not null or undefined
            if (chAdminId === null || chAdminId === undefined) {
                throw new RequiredError('chAdminId','Required parameter chAdminId was null or undefined when calling apiV1ChadminsChAdminIdDelete.');
            }
            const localVarPath = `/api/v1/chadmins/{chAdminId}`
                .replace(`{${"chAdminId"}}`, encodeURIComponent(String(chAdminId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        GET /api/v1/chadmins/1
         * @summary Get cloud hospital admin user by id.
         * @param {string} chAdminId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChadminsChAdminIdGet(chAdminId: string, options: any = {}): RequestArgs {
            // verify required parameter 'chAdminId' is not null or undefined
            if (chAdminId === null || chAdminId === undefined) {
                throw new RequiredError('chAdminId','Required parameter chAdminId was null or undefined when calling apiV1ChadminsChAdminIdGet.');
            }
            const localVarPath = `/api/v1/chadmins/{chAdminId}`
                .replace(`{${"chAdminId"}}`, encodeURIComponent(String(chAdminId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        PUT /api/v1/chadmins/1      {          \"email\": \"adminupdate@icloudhospital.com\",          \"firstName\": \"Cloud\",          \"lastName\": \"Hospital\",          \"photo\": \"https://cloudhospitalblob.blob.core.windows.net/assets/Cloud_Hospital_Logo_blue.png\",          \"photoThumbnail\": \"https://cloudhospitalblob.blob.core.windows.net/assets/Cloud_Hospital_Logo_blue.png\",          \"gender\": \"NotSpecified\",          \"dateOfBirth\": \"2020-02-22T09:09:19.082Z\",          \"locations\": [              {                  \"locationType\": \"LivesIn\",                  \"latitude\": 0,                  \"longitude\": 0,                  \"country\": \"string\",                  \"state\": \"string\",                  \"county\": \"string\",                  \"city\": \"string\",                  \"zipCode\": \"string\",                  \"address\": \"string\"              }          ]      }
         * @summary Update cloud hospital admin user.
         * @param {string} chAdminId 
         * @param {UpdateCHAdminCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChadminsChAdminIdPut(chAdminId: string, body?: UpdateCHAdminCommand, options: any = {}): RequestArgs {
            // verify required parameter 'chAdminId' is not null or undefined
            if (chAdminId === null || chAdminId === undefined) {
                throw new RequiredError('chAdminId','Required parameter chAdminId was null or undefined when calling apiV1ChadminsChAdminIdPut.');
            }
            const localVarPath = `/api/v1/chadmins/{chAdminId}`
                .replace(`{${"chAdminId"}}`, encodeURIComponent(String(chAdminId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        GET /api/v1/chadmin      {          \"pageQueryFilter\": {              \"page\": 1,              \"limit\": 20,              \"lastRetrived\": \"2020-02-05T08:40\"          },          \"searchString\": \"admin\"      }
         * @summary Get cloud hospital admin users.
         * @param {string} [id] 
         * @param {string} [fullname] 
         * @param {string} [email] 
         * @param {object} [gender] 
         * @param {Date} [dateOfBirth] 
         * @param {Date} [created] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {Date} [lastRetrieved] 
         * @param {boolean} [current] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChadminsGet(id?: string, fullname?: string, email?: string, gender?: object, dateOfBirth?: Date, created?: Date, page?: number, limit?: number, lastRetrieved?: Date, current?: boolean, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/chadmins`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }

            if (fullname !== undefined) {
                localVarQueryParameter['Fullname'] = fullname;
            }

            if (email !== undefined) {
                localVarQueryParameter['Email'] = email;
            }

            if (gender !== undefined) {
                localVarQueryParameter['Gender'] = gender;
            }

            if (dateOfBirth !== undefined) {
                localVarQueryParameter['DateOfBirth'] = (dateOfBirth as any instanceof Date) ?
                    (dateOfBirth as any).toISOString() :
                    dateOfBirth;
            }

            if (created !== undefined) {
                localVarQueryParameter['Created'] = (created as any instanceof Date) ?
                    (created as any).toISOString() :
                    created;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (lastRetrieved !== undefined) {
                localVarQueryParameter['lastRetrieved'] = (lastRetrieved as any instanceof Date) ?
                    (lastRetrieved as any).toISOString() :
                    lastRetrieved;
            }

            if (current !== undefined) {
                localVarQueryParameter['Current'] = current;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        POST /api/v1/chadmins      {          \"firstName\": \"Cloud\",          \"lastName\": \"Hospital\",          \"photo\": \"https://cloudhospitalblob.blob.core.windows.net/assets/Cloud_Hospital_Logo_blue.png\",          \"photoThumbnail\": \"https://cloudhospitalblob.blob.core.windows.net/assets/Cloud_Hospital_Logo_blue.png\",          \"gender\": \"NotSpecified\",          \"dateOfBirth\": \"2020-02-22T09:09:19.082Z\",          \"locations\": [              {                  \"locationType\": \"LivesIn\",                  \"latitude\": 0,                  \"longitude\": 0,                  \"country\": \"string\",                  \"state\": \"string\",                  \"county\": \"string\",                  \"city\": \"string\",                  \"zipCode\": \"string\",                  \"address\": \"string\"              }          ]      }
         * @summary Create cloud hospital admin user.
         * @param {CreateCHAdminCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChadminsPost(body?: CreateCHAdminCommand, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/chadmins`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CHAdminsApi - functional programming interface
 * @export
 */
export const CHAdminsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Sample request:        DELETE /api/v1/chadmins/1
         * @summary Delete cloud hospital admin user.
         * @param {string} chAdminId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChadminsChAdminIdDelete(chAdminId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = CHAdminsApiAxiosParamCreator(configuration).apiV1ChadminsChAdminIdDelete(chAdminId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        GET /api/v1/chadmins/1
         * @summary Get cloud hospital admin user by id.
         * @param {string} chAdminId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChadminsChAdminIdGet(chAdminId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CHAdminViewModel> {
            const localVarAxiosArgs = CHAdminsApiAxiosParamCreator(configuration).apiV1ChadminsChAdminIdGet(chAdminId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        PUT /api/v1/chadmins/1      {          \"email\": \"adminupdate@icloudhospital.com\",          \"firstName\": \"Cloud\",          \"lastName\": \"Hospital\",          \"photo\": \"https://cloudhospitalblob.blob.core.windows.net/assets/Cloud_Hospital_Logo_blue.png\",          \"photoThumbnail\": \"https://cloudhospitalblob.blob.core.windows.net/assets/Cloud_Hospital_Logo_blue.png\",          \"gender\": \"NotSpecified\",          \"dateOfBirth\": \"2020-02-22T09:09:19.082Z\",          \"locations\": [              {                  \"locationType\": \"LivesIn\",                  \"latitude\": 0,                  \"longitude\": 0,                  \"country\": \"string\",                  \"state\": \"string\",                  \"county\": \"string\",                  \"city\": \"string\",                  \"zipCode\": \"string\",                  \"address\": \"string\"              }          ]      }
         * @summary Update cloud hospital admin user.
         * @param {string} chAdminId 
         * @param {UpdateCHAdminCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChadminsChAdminIdPut(chAdminId: string, body?: UpdateCHAdminCommand, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = CHAdminsApiAxiosParamCreator(configuration).apiV1ChadminsChAdminIdPut(chAdminId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        GET /api/v1/chadmin      {          \"pageQueryFilter\": {              \"page\": 1,              \"limit\": 20,              \"lastRetrived\": \"2020-02-05T08:40\"          },          \"searchString\": \"admin\"      }
         * @summary Get cloud hospital admin users.
         * @param {string} [id] 
         * @param {string} [fullname] 
         * @param {string} [email] 
         * @param {object} [gender] 
         * @param {Date} [dateOfBirth] 
         * @param {Date} [created] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {Date} [lastRetrieved] 
         * @param {boolean} [current] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChadminsGet(id?: string, fullname?: string, email?: string, gender?: object, dateOfBirth?: Date, created?: Date, page?: number, limit?: number, lastRetrieved?: Date, current?: boolean, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CHAdminsViewModel> {
            const localVarAxiosArgs = CHAdminsApiAxiosParamCreator(configuration).apiV1ChadminsGet(id, fullname, email, gender, dateOfBirth, created, page, limit, lastRetrieved, current, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        POST /api/v1/chadmins      {          \"firstName\": \"Cloud\",          \"lastName\": \"Hospital\",          \"photo\": \"https://cloudhospitalblob.blob.core.windows.net/assets/Cloud_Hospital_Logo_blue.png\",          \"photoThumbnail\": \"https://cloudhospitalblob.blob.core.windows.net/assets/Cloud_Hospital_Logo_blue.png\",          \"gender\": \"NotSpecified\",          \"dateOfBirth\": \"2020-02-22T09:09:19.082Z\",          \"locations\": [              {                  \"locationType\": \"LivesIn\",                  \"latitude\": 0,                  \"longitude\": 0,                  \"country\": \"string\",                  \"state\": \"string\",                  \"county\": \"string\",                  \"city\": \"string\",                  \"zipCode\": \"string\",                  \"address\": \"string\"              }          ]      }
         * @summary Create cloud hospital admin user.
         * @param {CreateCHAdminCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChadminsPost(body?: CreateCHAdminCommand, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string> {
            const localVarAxiosArgs = CHAdminsApiAxiosParamCreator(configuration).apiV1ChadminsPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * CHAdminsApi - factory interface
 * @export
 */
export const CHAdminsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Sample request:        DELETE /api/v1/chadmins/1
         * @summary Delete cloud hospital admin user.
         * @param {string} chAdminId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChadminsChAdminIdDelete(chAdminId: string, options?: any): AxiosPromise<boolean> {
            return CHAdminsApiFp(configuration).apiV1ChadminsChAdminIdDelete(chAdminId, options)(axios, basePath);
        },
        /**
         * Sample request:        GET /api/v1/chadmins/1
         * @summary Get cloud hospital admin user by id.
         * @param {string} chAdminId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChadminsChAdminIdGet(chAdminId: string, options?: any): AxiosPromise<CHAdminViewModel> {
            return CHAdminsApiFp(configuration).apiV1ChadminsChAdminIdGet(chAdminId, options)(axios, basePath);
        },
        /**
         * Sample request:        PUT /api/v1/chadmins/1      {          \"email\": \"adminupdate@icloudhospital.com\",          \"firstName\": \"Cloud\",          \"lastName\": \"Hospital\",          \"photo\": \"https://cloudhospitalblob.blob.core.windows.net/assets/Cloud_Hospital_Logo_blue.png\",          \"photoThumbnail\": \"https://cloudhospitalblob.blob.core.windows.net/assets/Cloud_Hospital_Logo_blue.png\",          \"gender\": \"NotSpecified\",          \"dateOfBirth\": \"2020-02-22T09:09:19.082Z\",          \"locations\": [              {                  \"locationType\": \"LivesIn\",                  \"latitude\": 0,                  \"longitude\": 0,                  \"country\": \"string\",                  \"state\": \"string\",                  \"county\": \"string\",                  \"city\": \"string\",                  \"zipCode\": \"string\",                  \"address\": \"string\"              }          ]      }
         * @summary Update cloud hospital admin user.
         * @param {string} chAdminId 
         * @param {UpdateCHAdminCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChadminsChAdminIdPut(chAdminId: string, body?: UpdateCHAdminCommand, options?: any): AxiosPromise<boolean> {
            return CHAdminsApiFp(configuration).apiV1ChadminsChAdminIdPut(chAdminId, body, options)(axios, basePath);
        },
        /**
         * Sample request:        GET /api/v1/chadmin      {          \"pageQueryFilter\": {              \"page\": 1,              \"limit\": 20,              \"lastRetrived\": \"2020-02-05T08:40\"          },          \"searchString\": \"admin\"      }
         * @summary Get cloud hospital admin users.
         * @param {string} [id] 
         * @param {string} [fullname] 
         * @param {string} [email] 
         * @param {object} [gender] 
         * @param {Date} [dateOfBirth] 
         * @param {Date} [created] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {Date} [lastRetrieved] 
         * @param {boolean} [current] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChadminsGet(id?: string, fullname?: string, email?: string, gender?: object, dateOfBirth?: Date, created?: Date, page?: number, limit?: number, lastRetrieved?: Date, current?: boolean, options?: any): AxiosPromise<CHAdminsViewModel> {
            return CHAdminsApiFp(configuration).apiV1ChadminsGet(id, fullname, email, gender, dateOfBirth, created, page, limit, lastRetrieved, current, options)(axios, basePath);
        },
        /**
         * Sample request:        POST /api/v1/chadmins      {          \"firstName\": \"Cloud\",          \"lastName\": \"Hospital\",          \"photo\": \"https://cloudhospitalblob.blob.core.windows.net/assets/Cloud_Hospital_Logo_blue.png\",          \"photoThumbnail\": \"https://cloudhospitalblob.blob.core.windows.net/assets/Cloud_Hospital_Logo_blue.png\",          \"gender\": \"NotSpecified\",          \"dateOfBirth\": \"2020-02-22T09:09:19.082Z\",          \"locations\": [              {                  \"locationType\": \"LivesIn\",                  \"latitude\": 0,                  \"longitude\": 0,                  \"country\": \"string\",                  \"state\": \"string\",                  \"county\": \"string\",                  \"city\": \"string\",                  \"zipCode\": \"string\",                  \"address\": \"string\"              }          ]      }
         * @summary Create cloud hospital admin user.
         * @param {CreateCHAdminCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChadminsPost(body?: CreateCHAdminCommand, options?: any): AxiosPromise<string> {
            return CHAdminsApiFp(configuration).apiV1ChadminsPost(body, options)(axios, basePath);
        },
    };
};

/**
 * CHAdminsApi - object-oriented interface
 * @export
 * @class CHAdminsApi
 * @extends {BaseAPI}
 */
export class CHAdminsApi extends BaseAPI {
    /**
     * Sample request:        DELETE /api/v1/chadmins/1
     * @summary Delete cloud hospital admin user.
     * @param {string} chAdminId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CHAdminsApi
     */
    public apiV1ChadminsChAdminIdDelete(chAdminId: string, options?: any) {
        return CHAdminsApiFp(this.configuration).apiV1ChadminsChAdminIdDelete(chAdminId, options)(this.axios, this.basePath);
    }

    /**
     * Sample request:        GET /api/v1/chadmins/1
     * @summary Get cloud hospital admin user by id.
     * @param {string} chAdminId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CHAdminsApi
     */
    public apiV1ChadminsChAdminIdGet(chAdminId: string, options?: any) {
        return CHAdminsApiFp(this.configuration).apiV1ChadminsChAdminIdGet(chAdminId, options)(this.axios, this.basePath);
    }

    /**
     * Sample request:        PUT /api/v1/chadmins/1      {          \"email\": \"adminupdate@icloudhospital.com\",          \"firstName\": \"Cloud\",          \"lastName\": \"Hospital\",          \"photo\": \"https://cloudhospitalblob.blob.core.windows.net/assets/Cloud_Hospital_Logo_blue.png\",          \"photoThumbnail\": \"https://cloudhospitalblob.blob.core.windows.net/assets/Cloud_Hospital_Logo_blue.png\",          \"gender\": \"NotSpecified\",          \"dateOfBirth\": \"2020-02-22T09:09:19.082Z\",          \"locations\": [              {                  \"locationType\": \"LivesIn\",                  \"latitude\": 0,                  \"longitude\": 0,                  \"country\": \"string\",                  \"state\": \"string\",                  \"county\": \"string\",                  \"city\": \"string\",                  \"zipCode\": \"string\",                  \"address\": \"string\"              }          ]      }
     * @summary Update cloud hospital admin user.
     * @param {string} chAdminId 
     * @param {UpdateCHAdminCommand} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CHAdminsApi
     */
    public apiV1ChadminsChAdminIdPut(chAdminId: string, body?: UpdateCHAdminCommand, options?: any) {
        return CHAdminsApiFp(this.configuration).apiV1ChadminsChAdminIdPut(chAdminId, body, options)(this.axios, this.basePath);
    }

    /**
     * Sample request:        GET /api/v1/chadmin      {          \"pageQueryFilter\": {              \"page\": 1,              \"limit\": 20,              \"lastRetrived\": \"2020-02-05T08:40\"          },          \"searchString\": \"admin\"      }
     * @summary Get cloud hospital admin users.
     * @param {string} [id] 
     * @param {string} [fullname] 
     * @param {string} [email] 
     * @param {object} [gender] 
     * @param {Date} [dateOfBirth] 
     * @param {Date} [created] 
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {Date} [lastRetrieved] 
     * @param {boolean} [current] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CHAdminsApi
     */
    public apiV1ChadminsGet(id?: string, fullname?: string, email?: string, gender?: object, dateOfBirth?: Date, created?: Date, page?: number, limit?: number, lastRetrieved?: Date, current?: boolean, options?: any) {
        return CHAdminsApiFp(this.configuration).apiV1ChadminsGet(id, fullname, email, gender, dateOfBirth, created, page, limit, lastRetrieved, current, options)(this.axios, this.basePath);
    }

    /**
     * Sample request:        POST /api/v1/chadmins      {          \"firstName\": \"Cloud\",          \"lastName\": \"Hospital\",          \"photo\": \"https://cloudhospitalblob.blob.core.windows.net/assets/Cloud_Hospital_Logo_blue.png\",          \"photoThumbnail\": \"https://cloudhospitalblob.blob.core.windows.net/assets/Cloud_Hospital_Logo_blue.png\",          \"gender\": \"NotSpecified\",          \"dateOfBirth\": \"2020-02-22T09:09:19.082Z\",          \"locations\": [              {                  \"locationType\": \"LivesIn\",                  \"latitude\": 0,                  \"longitude\": 0,                  \"country\": \"string\",                  \"state\": \"string\",                  \"county\": \"string\",                  \"city\": \"string\",                  \"zipCode\": \"string\",                  \"address\": \"string\"              }          ]      }
     * @summary Create cloud hospital admin user.
     * @param {CreateCHAdminCommand} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CHAdminsApi
     */
    public apiV1ChadminsPost(body?: CreateCHAdminCommand, options?: any) {
        return CHAdminsApiFp(this.configuration).apiV1ChadminsPost(body, options)(this.axios, this.basePath);
    }

}


/**
 * CHManagersApi - axios parameter creator
 * @export
 */
export const CHManagersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Smaple request:        DELETE /api/v1/chmanagers/1
         * @summary Delete cloud hospital manager.
         * @param {string} chManagerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChmanagersChManagerIdDelete(chManagerId: string, options: any = {}): RequestArgs {
            // verify required parameter 'chManagerId' is not null or undefined
            if (chManagerId === null || chManagerId === undefined) {
                throw new RequiredError('chManagerId','Required parameter chManagerId was null or undefined when calling apiV1ChmanagersChManagerIdDelete.');
            }
            const localVarPath = `/api/v1/chmanagers/{chManagerId}`
                .replace(`{${"chManagerId"}}`, encodeURIComponent(String(chManagerId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        GET /api/v1/chmanagers/1
         * @summary Get cloud hospital manager.
         * @param {string} managerId 
         * @param {string} chManagerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChmanagersChManagerIdGet(managerId: string, chManagerId: string, options: any = {}): RequestArgs {
            // verify required parameter 'managerId' is not null or undefined
            if (managerId === null || managerId === undefined) {
                throw new RequiredError('managerId','Required parameter managerId was null or undefined when calling apiV1ChmanagersChManagerIdGet.');
            }
            // verify required parameter 'chManagerId' is not null or undefined
            if (chManagerId === null || chManagerId === undefined) {
                throw new RequiredError('chManagerId','Required parameter chManagerId was null or undefined when calling apiV1ChmanagersChManagerIdGet.');
            }
            const localVarPath = `/api/v1/chmanagers/{chManagerId}`
                .replace(`{${"managerId"}}`, encodeURIComponent(String(managerId)))
                .replace(`{${"chManagerId"}}`, encodeURIComponent(String(chManagerId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        PUT /api/v1/chmanagers/1      {          \"firstName\": \"cloud\",          \"lastName\": \"manager\",          \"photo\": \"string\",          \"locations\": [          {              \"locationType\": \"LivesIn\",              \"latitude\": 0,              \"longitude\": 0,              \"country\": \"string\",              \"state\": \"string\",              \"county\": \"string\",              \"city\": \"string\",              \"zipCode\": \"string\",              \"address\": \"string\"              }          ]      }
         * @summary Update cloud hospital manager.
         * @param {string} chManagerId 
         * @param {UpdateCHManagerCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChmanagersChManagerIdPut(chManagerId: string, body?: UpdateCHManagerCommand, options: any = {}): RequestArgs {
            // verify required parameter 'chManagerId' is not null or undefined
            if (chManagerId === null || chManagerId === undefined) {
                throw new RequiredError('chManagerId','Required parameter chManagerId was null or undefined when calling apiV1ChmanagersChManagerIdPut.');
            }
            const localVarPath = `/api/v1/chmanagers/{chManagerId}`
                .replace(`{${"chManagerId"}}`, encodeURIComponent(String(chManagerId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        GET /api/v1/chmanagers      {          \"pageQueryFilter\": {              \"page\": 1,              \"limit\": 20,              \"lastRetrived\": \"2020-02-05T08:40\"          },          \"searchString\": \"chmanager\"      }
         * @summary Get cloud hospital managers.
         * @param {string} [id] 
         * @param {string} [fullname] 
         * @param {string} [email] 
         * @param {object} [gender] 
         * @param {Date} [dateOfBirth] 
         * @param {Date} [created] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {Date} [lastRetrieved] 
         * @param {boolean} [current] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChmanagersGet(id?: string, fullname?: string, email?: string, gender?: object, dateOfBirth?: Date, created?: Date, page?: number, limit?: number, lastRetrieved?: Date, current?: boolean, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/chmanagers`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }

            if (fullname !== undefined) {
                localVarQueryParameter['Fullname'] = fullname;
            }

            if (email !== undefined) {
                localVarQueryParameter['Email'] = email;
            }

            if (gender !== undefined) {
                localVarQueryParameter['Gender'] = gender;
            }

            if (dateOfBirth !== undefined) {
                localVarQueryParameter['DateOfBirth'] = (dateOfBirth as any instanceof Date) ?
                    (dateOfBirth as any).toISOString() :
                    dateOfBirth;
            }

            if (created !== undefined) {
                localVarQueryParameter['Created'] = (created as any instanceof Date) ?
                    (created as any).toISOString() :
                    created;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (lastRetrieved !== undefined) {
                localVarQueryParameter['lastRetrieved'] = (lastRetrieved as any instanceof Date) ?
                    (lastRetrieved as any).toISOString() :
                    lastRetrieved;
            }

            if (current !== undefined) {
                localVarQueryParameter['Current'] = current;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        POST /api/v1/chmanagers      {          \"userName\": \"chmanager\",          \"email\": \"chmanger@icloudhospital.com\",          \"firstName\": \"cloud\",          \"lastName\": \"manager\",          \"photo\": \"string\",          \"photoThumbnail\": \"string\",          \"gender\": \"NotSpecified\",          \"dateOfBirth\": \"2020-02-22T15:28:09.897Z\",          \"locations\": [             {             \"locationType\": \"LivesIn\",             \"latitude\": 0,             \"longitude\": 0,             \"country\": \"string\",             \"state\": \"string\",             \"county\": \"string\",             \"city\": \"string\",             \"zipCode\": \"string\",             \"address\": \"string\"             }          ]       }
         * @summary Create cloud hospital manager.
         * @param {CreateCHManagerCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChmanagersPost(body?: CreateCHManagerCommand, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/chmanagers`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CHManagersApi - functional programming interface
 * @export
 */
export const CHManagersApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Smaple request:        DELETE /api/v1/chmanagers/1
         * @summary Delete cloud hospital manager.
         * @param {string} chManagerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChmanagersChManagerIdDelete(chManagerId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = CHManagersApiAxiosParamCreator(configuration).apiV1ChmanagersChManagerIdDelete(chManagerId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        GET /api/v1/chmanagers/1
         * @summary Get cloud hospital manager.
         * @param {string} managerId 
         * @param {string} chManagerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChmanagersChManagerIdGet(managerId: string, chManagerId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CHManagerViewModel> {
            const localVarAxiosArgs = CHManagersApiAxiosParamCreator(configuration).apiV1ChmanagersChManagerIdGet(managerId, chManagerId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        PUT /api/v1/chmanagers/1      {          \"firstName\": \"cloud\",          \"lastName\": \"manager\",          \"photo\": \"string\",          \"locations\": [          {              \"locationType\": \"LivesIn\",              \"latitude\": 0,              \"longitude\": 0,              \"country\": \"string\",              \"state\": \"string\",              \"county\": \"string\",              \"city\": \"string\",              \"zipCode\": \"string\",              \"address\": \"string\"              }          ]      }
         * @summary Update cloud hospital manager.
         * @param {string} chManagerId 
         * @param {UpdateCHManagerCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChmanagersChManagerIdPut(chManagerId: string, body?: UpdateCHManagerCommand, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = CHManagersApiAxiosParamCreator(configuration).apiV1ChmanagersChManagerIdPut(chManagerId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        GET /api/v1/chmanagers      {          \"pageQueryFilter\": {              \"page\": 1,              \"limit\": 20,              \"lastRetrived\": \"2020-02-05T08:40\"          },          \"searchString\": \"chmanager\"      }
         * @summary Get cloud hospital managers.
         * @param {string} [id] 
         * @param {string} [fullname] 
         * @param {string} [email] 
         * @param {object} [gender] 
         * @param {Date} [dateOfBirth] 
         * @param {Date} [created] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {Date} [lastRetrieved] 
         * @param {boolean} [current] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChmanagersGet(id?: string, fullname?: string, email?: string, gender?: object, dateOfBirth?: Date, created?: Date, page?: number, limit?: number, lastRetrieved?: Date, current?: boolean, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CHManagersViewModel> {
            const localVarAxiosArgs = CHManagersApiAxiosParamCreator(configuration).apiV1ChmanagersGet(id, fullname, email, gender, dateOfBirth, created, page, limit, lastRetrieved, current, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        POST /api/v1/chmanagers      {          \"userName\": \"chmanager\",          \"email\": \"chmanger@icloudhospital.com\",          \"firstName\": \"cloud\",          \"lastName\": \"manager\",          \"photo\": \"string\",          \"photoThumbnail\": \"string\",          \"gender\": \"NotSpecified\",          \"dateOfBirth\": \"2020-02-22T15:28:09.897Z\",          \"locations\": [             {             \"locationType\": \"LivesIn\",             \"latitude\": 0,             \"longitude\": 0,             \"country\": \"string\",             \"state\": \"string\",             \"county\": \"string\",             \"city\": \"string\",             \"zipCode\": \"string\",             \"address\": \"string\"             }          ]       }
         * @summary Create cloud hospital manager.
         * @param {CreateCHManagerCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChmanagersPost(body?: CreateCHManagerCommand, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string> {
            const localVarAxiosArgs = CHManagersApiAxiosParamCreator(configuration).apiV1ChmanagersPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * CHManagersApi - factory interface
 * @export
 */
export const CHManagersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Smaple request:        DELETE /api/v1/chmanagers/1
         * @summary Delete cloud hospital manager.
         * @param {string} chManagerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChmanagersChManagerIdDelete(chManagerId: string, options?: any): AxiosPromise<boolean> {
            return CHManagersApiFp(configuration).apiV1ChmanagersChManagerIdDelete(chManagerId, options)(axios, basePath);
        },
        /**
         * Sample request:        GET /api/v1/chmanagers/1
         * @summary Get cloud hospital manager.
         * @param {string} managerId 
         * @param {string} chManagerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChmanagersChManagerIdGet(managerId: string, chManagerId: string, options?: any): AxiosPromise<CHManagerViewModel> {
            return CHManagersApiFp(configuration).apiV1ChmanagersChManagerIdGet(managerId, chManagerId, options)(axios, basePath);
        },
        /**
         * Sample request:        PUT /api/v1/chmanagers/1      {          \"firstName\": \"cloud\",          \"lastName\": \"manager\",          \"photo\": \"string\",          \"locations\": [          {              \"locationType\": \"LivesIn\",              \"latitude\": 0,              \"longitude\": 0,              \"country\": \"string\",              \"state\": \"string\",              \"county\": \"string\",              \"city\": \"string\",              \"zipCode\": \"string\",              \"address\": \"string\"              }          ]      }
         * @summary Update cloud hospital manager.
         * @param {string} chManagerId 
         * @param {UpdateCHManagerCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChmanagersChManagerIdPut(chManagerId: string, body?: UpdateCHManagerCommand, options?: any): AxiosPromise<boolean> {
            return CHManagersApiFp(configuration).apiV1ChmanagersChManagerIdPut(chManagerId, body, options)(axios, basePath);
        },
        /**
         * Sample request:        GET /api/v1/chmanagers      {          \"pageQueryFilter\": {              \"page\": 1,              \"limit\": 20,              \"lastRetrived\": \"2020-02-05T08:40\"          },          \"searchString\": \"chmanager\"      }
         * @summary Get cloud hospital managers.
         * @param {string} [id] 
         * @param {string} [fullname] 
         * @param {string} [email] 
         * @param {object} [gender] 
         * @param {Date} [dateOfBirth] 
         * @param {Date} [created] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {Date} [lastRetrieved] 
         * @param {boolean} [current] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChmanagersGet(id?: string, fullname?: string, email?: string, gender?: object, dateOfBirth?: Date, created?: Date, page?: number, limit?: number, lastRetrieved?: Date, current?: boolean, options?: any): AxiosPromise<CHManagersViewModel> {
            return CHManagersApiFp(configuration).apiV1ChmanagersGet(id, fullname, email, gender, dateOfBirth, created, page, limit, lastRetrieved, current, options)(axios, basePath);
        },
        /**
         * Sample request:        POST /api/v1/chmanagers      {          \"userName\": \"chmanager\",          \"email\": \"chmanger@icloudhospital.com\",          \"firstName\": \"cloud\",          \"lastName\": \"manager\",          \"photo\": \"string\",          \"photoThumbnail\": \"string\",          \"gender\": \"NotSpecified\",          \"dateOfBirth\": \"2020-02-22T15:28:09.897Z\",          \"locations\": [             {             \"locationType\": \"LivesIn\",             \"latitude\": 0,             \"longitude\": 0,             \"country\": \"string\",             \"state\": \"string\",             \"county\": \"string\",             \"city\": \"string\",             \"zipCode\": \"string\",             \"address\": \"string\"             }          ]       }
         * @summary Create cloud hospital manager.
         * @param {CreateCHManagerCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChmanagersPost(body?: CreateCHManagerCommand, options?: any): AxiosPromise<string> {
            return CHManagersApiFp(configuration).apiV1ChmanagersPost(body, options)(axios, basePath);
        },
    };
};

/**
 * CHManagersApi - object-oriented interface
 * @export
 * @class CHManagersApi
 * @extends {BaseAPI}
 */
export class CHManagersApi extends BaseAPI {
    /**
     * Smaple request:        DELETE /api/v1/chmanagers/1
     * @summary Delete cloud hospital manager.
     * @param {string} chManagerId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CHManagersApi
     */
    public apiV1ChmanagersChManagerIdDelete(chManagerId: string, options?: any) {
        return CHManagersApiFp(this.configuration).apiV1ChmanagersChManagerIdDelete(chManagerId, options)(this.axios, this.basePath);
    }

    /**
     * Sample request:        GET /api/v1/chmanagers/1
     * @summary Get cloud hospital manager.
     * @param {string} managerId 
     * @param {string} chManagerId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CHManagersApi
     */
    public apiV1ChmanagersChManagerIdGet(managerId: string, chManagerId: string, options?: any) {
        return CHManagersApiFp(this.configuration).apiV1ChmanagersChManagerIdGet(managerId, chManagerId, options)(this.axios, this.basePath);
    }

    /**
     * Sample request:        PUT /api/v1/chmanagers/1      {          \"firstName\": \"cloud\",          \"lastName\": \"manager\",          \"photo\": \"string\",          \"locations\": [          {              \"locationType\": \"LivesIn\",              \"latitude\": 0,              \"longitude\": 0,              \"country\": \"string\",              \"state\": \"string\",              \"county\": \"string\",              \"city\": \"string\",              \"zipCode\": \"string\",              \"address\": \"string\"              }          ]      }
     * @summary Update cloud hospital manager.
     * @param {string} chManagerId 
     * @param {UpdateCHManagerCommand} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CHManagersApi
     */
    public apiV1ChmanagersChManagerIdPut(chManagerId: string, body?: UpdateCHManagerCommand, options?: any) {
        return CHManagersApiFp(this.configuration).apiV1ChmanagersChManagerIdPut(chManagerId, body, options)(this.axios, this.basePath);
    }

    /**
     * Sample request:        GET /api/v1/chmanagers      {          \"pageQueryFilter\": {              \"page\": 1,              \"limit\": 20,              \"lastRetrived\": \"2020-02-05T08:40\"          },          \"searchString\": \"chmanager\"      }
     * @summary Get cloud hospital managers.
     * @param {string} [id] 
     * @param {string} [fullname] 
     * @param {string} [email] 
     * @param {object} [gender] 
     * @param {Date} [dateOfBirth] 
     * @param {Date} [created] 
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {Date} [lastRetrieved] 
     * @param {boolean} [current] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CHManagersApi
     */
    public apiV1ChmanagersGet(id?: string, fullname?: string, email?: string, gender?: object, dateOfBirth?: Date, created?: Date, page?: number, limit?: number, lastRetrieved?: Date, current?: boolean, options?: any) {
        return CHManagersApiFp(this.configuration).apiV1ChmanagersGet(id, fullname, email, gender, dateOfBirth, created, page, limit, lastRetrieved, current, options)(this.axios, this.basePath);
    }

    /**
     * Sample request:        POST /api/v1/chmanagers      {          \"userName\": \"chmanager\",          \"email\": \"chmanger@icloudhospital.com\",          \"firstName\": \"cloud\",          \"lastName\": \"manager\",          \"photo\": \"string\",          \"photoThumbnail\": \"string\",          \"gender\": \"NotSpecified\",          \"dateOfBirth\": \"2020-02-22T15:28:09.897Z\",          \"locations\": [             {             \"locationType\": \"LivesIn\",             \"latitude\": 0,             \"longitude\": 0,             \"country\": \"string\",             \"state\": \"string\",             \"county\": \"string\",             \"city\": \"string\",             \"zipCode\": \"string\",             \"address\": \"string\"             }          ]       }
     * @summary Create cloud hospital manager.
     * @param {CreateCHManagerCommand} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CHManagersApi
     */
    public apiV1ChmanagersPost(body?: CreateCHManagerCommand, options?: any) {
        return CHManagersApiFp(this.configuration).apiV1ChmanagersPost(body, options)(this.axios, this.basePath);
    }

}


/**
 * CountriesApi - axios parameter creator
 * @export
 */
export const CountriesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Sample request:        DELETE /api/v1/countries/1
         * @summary Delete country.
         * @param {string} countryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CountriesCountryIdDelete(countryId: string, options: any = {}): RequestArgs {
            // verify required parameter 'countryId' is not null or undefined
            if (countryId === null || countryId === undefined) {
                throw new RequiredError('countryId','Required parameter countryId was null or undefined when calling apiV1CountriesCountryIdDelete.');
            }
            const localVarPath = `/api/v1/countries/{countryId}`
                .replace(`{${"countryId"}}`, encodeURIComponent(String(countryId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        GET /api/v1/countries/1
         * @summary Get country.
         * @param {string} countryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CountriesCountryIdGet(countryId: string, options: any = {}): RequestArgs {
            // verify required parameter 'countryId' is not null or undefined
            if (countryId === null || countryId === undefined) {
                throw new RequiredError('countryId','Required parameter countryId was null or undefined when calling apiV1CountriesCountryIdGet.');
            }
            const localVarPath = `/api/v1/countries/{countryId}`
                .replace(`{${"countryId"}}`, encodeURIComponent(String(countryId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        PUT /api/v1/countries/1      {          \"name\": \"USA\",          \"description\": \"United States of America\"          \"medias\": [            {              \"mediaType\": 0,              \"url\": \"https://cloudhospitalblob.blob.core.windows.net/imagecontainer/SouthKorea.png\",              \"thumbnailUrl\": \"https://cloudhospitalblob.blob.core.windows.net/thumbnailcontainer/SouthKorea.png\"              \"description\": \"string\",              \"order\": 0            },            {              \"mediaType\": 1,              \"url\": \"string\",              \"description\": \"string\",              \"order\": 1            }          ],      }
         * @summary Update country.
         * @param {string} countryId 
         * @param {UpdateCountryCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CountriesCountryIdPut(countryId: string, body?: UpdateCountryCommand, options: any = {}): RequestArgs {
            // verify required parameter 'countryId' is not null or undefined
            if (countryId === null || countryId === undefined) {
                throw new RequiredError('countryId','Required parameter countryId was null or undefined when calling apiV1CountriesCountryIdPut.');
            }
            const localVarPath = `/api/v1/countries/{countryId}`
                .replace(`{${"countryId"}}`, encodeURIComponent(String(countryId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        GET /api/v1/countries      {          \"countryPageQueryFilter\": {              \"page\": 1,              \"limit\": 20,              \"lastRetrived\": \"2020-02-05T08:40\"          }      }
         * @summary Get all countries.
         * @param {string} [id] 
         * @param {string} [name] 
         * @param {string} [description] 
         * @param {Date} [createdDate] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {Date} [lastRetrieved] 
         * @param {boolean} [current] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CountriesGet(id?: string, name?: string, description?: string, createdDate?: Date, page?: number, limit?: number, lastRetrieved?: Date, current?: boolean, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/countries`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }

            if (name !== undefined) {
                localVarQueryParameter['Name'] = name;
            }

            if (description !== undefined) {
                localVarQueryParameter['Description'] = description;
            }

            if (createdDate !== undefined) {
                localVarQueryParameter['CreatedDate'] = (createdDate as any instanceof Date) ?
                    (createdDate as any).toISOString() :
                    createdDate;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (lastRetrieved !== undefined) {
                localVarQueryParameter['lastRetrieved'] = (lastRetrieved as any instanceof Date) ?
                    (lastRetrieved as any).toISOString() :
                    lastRetrieved;
            }

            if (current !== undefined) {
                localVarQueryParameter['Current'] = current;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        POST /api/v1/countries      {          \"name\": \"Korea\",          \"description\": \"Republic of Korea\",          \"medias\": [              {                  \"mediaType\": \"Photo\",                  \"url\": \"https://cloudhospitalblob.blob.core.windows.net/imagecontainer/SouthKorea.png\",                  \"thumbnailUrl\": \"https://cloudhospitalblob.blob.core.windows.net/thumbnailcontainer/SouthKorea.png\",                  \"description\": \"string\"              }          ]      }
         * @summary Create a country.
         * @param {CreateCountryCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CountriesPost(body?: CreateCountryCommand, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/countries`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CountriesApi - functional programming interface
 * @export
 */
export const CountriesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Sample request:        DELETE /api/v1/countries/1
         * @summary Delete country.
         * @param {string} countryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CountriesCountryIdDelete(countryId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = CountriesApiAxiosParamCreator(configuration).apiV1CountriesCountryIdDelete(countryId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        GET /api/v1/countries/1
         * @summary Get country.
         * @param {string} countryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CountriesCountryIdGet(countryId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CountryViewModel> {
            const localVarAxiosArgs = CountriesApiAxiosParamCreator(configuration).apiV1CountriesCountryIdGet(countryId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        PUT /api/v1/countries/1      {          \"name\": \"USA\",          \"description\": \"United States of America\"          \"medias\": [            {              \"mediaType\": 0,              \"url\": \"https://cloudhospitalblob.blob.core.windows.net/imagecontainer/SouthKorea.png\",              \"thumbnailUrl\": \"https://cloudhospitalblob.blob.core.windows.net/thumbnailcontainer/SouthKorea.png\"              \"description\": \"string\",              \"order\": 0            },            {              \"mediaType\": 1,              \"url\": \"string\",              \"description\": \"string\",              \"order\": 1            }          ],      }
         * @summary Update country.
         * @param {string} countryId 
         * @param {UpdateCountryCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CountriesCountryIdPut(countryId: string, body?: UpdateCountryCommand, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = CountriesApiAxiosParamCreator(configuration).apiV1CountriesCountryIdPut(countryId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        GET /api/v1/countries      {          \"countryPageQueryFilter\": {              \"page\": 1,              \"limit\": 20,              \"lastRetrived\": \"2020-02-05T08:40\"          }      }
         * @summary Get all countries.
         * @param {string} [id] 
         * @param {string} [name] 
         * @param {string} [description] 
         * @param {Date} [createdDate] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {Date} [lastRetrieved] 
         * @param {boolean} [current] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CountriesGet(id?: string, name?: string, description?: string, createdDate?: Date, page?: number, limit?: number, lastRetrieved?: Date, current?: boolean, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CountriesViewModel> {
            const localVarAxiosArgs = CountriesApiAxiosParamCreator(configuration).apiV1CountriesGet(id, name, description, createdDate, page, limit, lastRetrieved, current, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        POST /api/v1/countries      {          \"name\": \"Korea\",          \"description\": \"Republic of Korea\",          \"medias\": [              {                  \"mediaType\": \"Photo\",                  \"url\": \"https://cloudhospitalblob.blob.core.windows.net/imagecontainer/SouthKorea.png\",                  \"thumbnailUrl\": \"https://cloudhospitalblob.blob.core.windows.net/thumbnailcontainer/SouthKorea.png\",                  \"description\": \"string\"              }          ]      }
         * @summary Create a country.
         * @param {CreateCountryCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CountriesPost(body?: CreateCountryCommand, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string> {
            const localVarAxiosArgs = CountriesApiAxiosParamCreator(configuration).apiV1CountriesPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * CountriesApi - factory interface
 * @export
 */
export const CountriesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Sample request:        DELETE /api/v1/countries/1
         * @summary Delete country.
         * @param {string} countryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CountriesCountryIdDelete(countryId: string, options?: any): AxiosPromise<boolean> {
            return CountriesApiFp(configuration).apiV1CountriesCountryIdDelete(countryId, options)(axios, basePath);
        },
        /**
         * Sample request:        GET /api/v1/countries/1
         * @summary Get country.
         * @param {string} countryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CountriesCountryIdGet(countryId: string, options?: any): AxiosPromise<CountryViewModel> {
            return CountriesApiFp(configuration).apiV1CountriesCountryIdGet(countryId, options)(axios, basePath);
        },
        /**
         * Sample request:        PUT /api/v1/countries/1      {          \"name\": \"USA\",          \"description\": \"United States of America\"          \"medias\": [            {              \"mediaType\": 0,              \"url\": \"https://cloudhospitalblob.blob.core.windows.net/imagecontainer/SouthKorea.png\",              \"thumbnailUrl\": \"https://cloudhospitalblob.blob.core.windows.net/thumbnailcontainer/SouthKorea.png\"              \"description\": \"string\",              \"order\": 0            },            {              \"mediaType\": 1,              \"url\": \"string\",              \"description\": \"string\",              \"order\": 1            }          ],      }
         * @summary Update country.
         * @param {string} countryId 
         * @param {UpdateCountryCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CountriesCountryIdPut(countryId: string, body?: UpdateCountryCommand, options?: any): AxiosPromise<boolean> {
            return CountriesApiFp(configuration).apiV1CountriesCountryIdPut(countryId, body, options)(axios, basePath);
        },
        /**
         * Sample request:        GET /api/v1/countries      {          \"countryPageQueryFilter\": {              \"page\": 1,              \"limit\": 20,              \"lastRetrived\": \"2020-02-05T08:40\"          }      }
         * @summary Get all countries.
         * @param {string} [id] 
         * @param {string} [name] 
         * @param {string} [description] 
         * @param {Date} [createdDate] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {Date} [lastRetrieved] 
         * @param {boolean} [current] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CountriesGet(id?: string, name?: string, description?: string, createdDate?: Date, page?: number, limit?: number, lastRetrieved?: Date, current?: boolean, options?: any): AxiosPromise<CountriesViewModel> {
            return CountriesApiFp(configuration).apiV1CountriesGet(id, name, description, createdDate, page, limit, lastRetrieved, current, options)(axios, basePath);
        },
        /**
         * Sample request:        POST /api/v1/countries      {          \"name\": \"Korea\",          \"description\": \"Republic of Korea\",          \"medias\": [              {                  \"mediaType\": \"Photo\",                  \"url\": \"https://cloudhospitalblob.blob.core.windows.net/imagecontainer/SouthKorea.png\",                  \"thumbnailUrl\": \"https://cloudhospitalblob.blob.core.windows.net/thumbnailcontainer/SouthKorea.png\",                  \"description\": \"string\"              }          ]      }
         * @summary Create a country.
         * @param {CreateCountryCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CountriesPost(body?: CreateCountryCommand, options?: any): AxiosPromise<string> {
            return CountriesApiFp(configuration).apiV1CountriesPost(body, options)(axios, basePath);
        },
    };
};

/**
 * CountriesApi - object-oriented interface
 * @export
 * @class CountriesApi
 * @extends {BaseAPI}
 */
export class CountriesApi extends BaseAPI {
    /**
     * Sample request:        DELETE /api/v1/countries/1
     * @summary Delete country.
     * @param {string} countryId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CountriesApi
     */
    public apiV1CountriesCountryIdDelete(countryId: string, options?: any) {
        return CountriesApiFp(this.configuration).apiV1CountriesCountryIdDelete(countryId, options)(this.axios, this.basePath);
    }

    /**
     * Sample request:        GET /api/v1/countries/1
     * @summary Get country.
     * @param {string} countryId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CountriesApi
     */
    public apiV1CountriesCountryIdGet(countryId: string, options?: any) {
        return CountriesApiFp(this.configuration).apiV1CountriesCountryIdGet(countryId, options)(this.axios, this.basePath);
    }

    /**
     * Sample request:        PUT /api/v1/countries/1      {          \"name\": \"USA\",          \"description\": \"United States of America\"          \"medias\": [            {              \"mediaType\": 0,              \"url\": \"https://cloudhospitalblob.blob.core.windows.net/imagecontainer/SouthKorea.png\",              \"thumbnailUrl\": \"https://cloudhospitalblob.blob.core.windows.net/thumbnailcontainer/SouthKorea.png\"              \"description\": \"string\",              \"order\": 0            },            {              \"mediaType\": 1,              \"url\": \"string\",              \"description\": \"string\",              \"order\": 1            }          ],      }
     * @summary Update country.
     * @param {string} countryId 
     * @param {UpdateCountryCommand} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CountriesApi
     */
    public apiV1CountriesCountryIdPut(countryId: string, body?: UpdateCountryCommand, options?: any) {
        return CountriesApiFp(this.configuration).apiV1CountriesCountryIdPut(countryId, body, options)(this.axios, this.basePath);
    }

    /**
     * Sample request:        GET /api/v1/countries      {          \"countryPageQueryFilter\": {              \"page\": 1,              \"limit\": 20,              \"lastRetrived\": \"2020-02-05T08:40\"          }      }
     * @summary Get all countries.
     * @param {string} [id] 
     * @param {string} [name] 
     * @param {string} [description] 
     * @param {Date} [createdDate] 
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {Date} [lastRetrieved] 
     * @param {boolean} [current] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CountriesApi
     */
    public apiV1CountriesGet(id?: string, name?: string, description?: string, createdDate?: Date, page?: number, limit?: number, lastRetrieved?: Date, current?: boolean, options?: any) {
        return CountriesApiFp(this.configuration).apiV1CountriesGet(id, name, description, createdDate, page, limit, lastRetrieved, current, options)(this.axios, this.basePath);
    }

    /**
     * Sample request:        POST /api/v1/countries      {          \"name\": \"Korea\",          \"description\": \"Republic of Korea\",          \"medias\": [              {                  \"mediaType\": \"Photo\",                  \"url\": \"https://cloudhospitalblob.blob.core.windows.net/imagecontainer/SouthKorea.png\",                  \"thumbnailUrl\": \"https://cloudhospitalblob.blob.core.windows.net/thumbnailcontainer/SouthKorea.png\",                  \"description\": \"string\"              }          ]      }
     * @summary Create a country.
     * @param {CreateCountryCommand} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CountriesApi
     */
    public apiV1CountriesPost(body?: CreateCountryCommand, options?: any) {
        return CountriesApiFp(this.configuration).apiV1CountriesPost(body, options)(this.axios, this.basePath);
    }

}


/**
 * DepartmentApi - axios parameter creator
 * @export
 */
export const DepartmentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Sample request:        GET /api/v1/hospitals/departments
         * @summary Get all department.
         * @param {string} [id] 
         * @param {string} [hospitalId] 
         * @param {string} [hospitalName] 
         * @param {string} [name] 
         * @param {string} [additionalInfo] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {Date} [lastRetrieved] 
         * @param {boolean} [current] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsDepartmentsGet(id?: string, hospitalId?: string, hospitalName?: string, name?: string, additionalInfo?: string, page?: number, limit?: number, lastRetrieved?: Date, current?: boolean, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/hospitals/departments`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }

            if (hospitalId !== undefined) {
                localVarQueryParameter['HospitalId'] = hospitalId;
            }

            if (hospitalName !== undefined) {
                localVarQueryParameter['HospitalName'] = hospitalName;
            }

            if (name !== undefined) {
                localVarQueryParameter['Name'] = name;
            }

            if (additionalInfo !== undefined) {
                localVarQueryParameter['AdditionalInfo'] = additionalInfo;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (lastRetrieved !== undefined) {
                localVarQueryParameter['lastRetrieved'] = (lastRetrieved as any instanceof Date) ?
                    (lastRetrieved as any).toISOString() :
                    lastRetrieved;
            }

            if (current !== undefined) {
                localVarQueryParameter['Current'] = current;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        DELETE /api/v1/hospitals/1/departments/1
         * @summary Delete department.
         * @param {string} hospitalId 
         * @param {string} departmentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdDepartmentsDepartmentIdDelete(hospitalId: string, departmentId: string, options: any = {}): RequestArgs {
            // verify required parameter 'hospitalId' is not null or undefined
            if (hospitalId === null || hospitalId === undefined) {
                throw new RequiredError('hospitalId','Required parameter hospitalId was null or undefined when calling apiV1HospitalsHospitalIdDepartmentsDepartmentIdDelete.');
            }
            // verify required parameter 'departmentId' is not null or undefined
            if (departmentId === null || departmentId === undefined) {
                throw new RequiredError('departmentId','Required parameter departmentId was null or undefined when calling apiV1HospitalsHospitalIdDepartmentsDepartmentIdDelete.');
            }
            const localVarPath = `/api/v1/hospitals/{hospitalId}/departments/{departmentId}`
                .replace(`{${"hospitalId"}}`, encodeURIComponent(String(hospitalId)))
                .replace(`{${"departmentId"}}`, encodeURIComponent(String(departmentId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        GET /api/v1/hospitals/1/departments/1
         * @summary Get department.
         * @param {string} hospitalId 
         * @param {string} departmentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdDepartmentsDepartmentIdGet(hospitalId: string, departmentId: string, options: any = {}): RequestArgs {
            // verify required parameter 'hospitalId' is not null or undefined
            if (hospitalId === null || hospitalId === undefined) {
                throw new RequiredError('hospitalId','Required parameter hospitalId was null or undefined when calling apiV1HospitalsHospitalIdDepartmentsDepartmentIdGet.');
            }
            // verify required parameter 'departmentId' is not null or undefined
            if (departmentId === null || departmentId === undefined) {
                throw new RequiredError('departmentId','Required parameter departmentId was null or undefined when calling apiV1HospitalsHospitalIdDepartmentsDepartmentIdGet.');
            }
            const localVarPath = `/api/v1/hospitals/{hospitalId}/departments/{departmentId}`
                .replace(`{${"hospitalId"}}`, encodeURIComponent(String(hospitalId)))
                .replace(`{${"departmentId"}}`, encodeURIComponent(String(departmentId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        POST /api/v1/hospitals/1/departments/1
         * @summary Create department.
         * @param {string} hospitalId 
         * @param {string} departmentId 
         * @param {CreateDepartmentCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdDepartmentsDepartmentIdPost(hospitalId: string, departmentId: string, body?: CreateDepartmentCommand, options: any = {}): RequestArgs {
            // verify required parameter 'hospitalId' is not null or undefined
            if (hospitalId === null || hospitalId === undefined) {
                throw new RequiredError('hospitalId','Required parameter hospitalId was null or undefined when calling apiV1HospitalsHospitalIdDepartmentsDepartmentIdPost.');
            }
            // verify required parameter 'departmentId' is not null or undefined
            if (departmentId === null || departmentId === undefined) {
                throw new RequiredError('departmentId','Required parameter departmentId was null or undefined when calling apiV1HospitalsHospitalIdDepartmentsDepartmentIdPost.');
            }
            const localVarPath = `/api/v1/hospitals/{hospitalId}/departments/{departmentId}`
                .replace(`{${"hospitalId"}}`, encodeURIComponent(String(hospitalId)))
                .replace(`{${"departmentId"}}`, encodeURIComponent(String(departmentId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:
         * @summary Update department.
         * @param {string} hospitalId 
         * @param {string} departmentId 
         * @param {UpdateDepartmentCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdDepartmentsDepartmentIdPut(hospitalId: string, departmentId: string, body?: UpdateDepartmentCommand, options: any = {}): RequestArgs {
            // verify required parameter 'hospitalId' is not null or undefined
            if (hospitalId === null || hospitalId === undefined) {
                throw new RequiredError('hospitalId','Required parameter hospitalId was null or undefined when calling apiV1HospitalsHospitalIdDepartmentsDepartmentIdPut.');
            }
            // verify required parameter 'departmentId' is not null or undefined
            if (departmentId === null || departmentId === undefined) {
                throw new RequiredError('departmentId','Required parameter departmentId was null or undefined when calling apiV1HospitalsHospitalIdDepartmentsDepartmentIdPut.');
            }
            const localVarPath = `/api/v1/hospitals/{hospitalId}/departments/{departmentId}`
                .replace(`{${"hospitalId"}}`, encodeURIComponent(String(hospitalId)))
                .replace(`{${"departmentId"}}`, encodeURIComponent(String(departmentId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DepartmentApi - functional programming interface
 * @export
 */
export const DepartmentApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Sample request:        GET /api/v1/hospitals/departments
         * @summary Get all department.
         * @param {string} [id] 
         * @param {string} [hospitalId] 
         * @param {string} [hospitalName] 
         * @param {string} [name] 
         * @param {string} [additionalInfo] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {Date} [lastRetrieved] 
         * @param {boolean} [current] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsDepartmentsGet(id?: string, hospitalId?: string, hospitalName?: string, name?: string, additionalInfo?: string, page?: number, limit?: number, lastRetrieved?: Date, current?: boolean, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<DepartmentsViewModel> {
            const localVarAxiosArgs = DepartmentApiAxiosParamCreator(configuration).apiV1HospitalsDepartmentsGet(id, hospitalId, hospitalName, name, additionalInfo, page, limit, lastRetrieved, current, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        DELETE /api/v1/hospitals/1/departments/1
         * @summary Delete department.
         * @param {string} hospitalId 
         * @param {string} departmentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdDepartmentsDepartmentIdDelete(hospitalId: string, departmentId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = DepartmentApiAxiosParamCreator(configuration).apiV1HospitalsHospitalIdDepartmentsDepartmentIdDelete(hospitalId, departmentId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        GET /api/v1/hospitals/1/departments/1
         * @summary Get department.
         * @param {string} hospitalId 
         * @param {string} departmentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdDepartmentsDepartmentIdGet(hospitalId: string, departmentId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<DepartmentViewModel> {
            const localVarAxiosArgs = DepartmentApiAxiosParamCreator(configuration).apiV1HospitalsHospitalIdDepartmentsDepartmentIdGet(hospitalId, departmentId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        POST /api/v1/hospitals/1/departments/1
         * @summary Create department.
         * @param {string} hospitalId 
         * @param {string} departmentId 
         * @param {CreateDepartmentCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdDepartmentsDepartmentIdPost(hospitalId: string, departmentId: string, body?: CreateDepartmentCommand, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Department> {
            const localVarAxiosArgs = DepartmentApiAxiosParamCreator(configuration).apiV1HospitalsHospitalIdDepartmentsDepartmentIdPost(hospitalId, departmentId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:
         * @summary Update department.
         * @param {string} hospitalId 
         * @param {string} departmentId 
         * @param {UpdateDepartmentCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdDepartmentsDepartmentIdPut(hospitalId: string, departmentId: string, body?: UpdateDepartmentCommand, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = DepartmentApiAxiosParamCreator(configuration).apiV1HospitalsHospitalIdDepartmentsDepartmentIdPut(hospitalId, departmentId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DepartmentApi - factory interface
 * @export
 */
export const DepartmentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Sample request:        GET /api/v1/hospitals/departments
         * @summary Get all department.
         * @param {string} [id] 
         * @param {string} [hospitalId] 
         * @param {string} [hospitalName] 
         * @param {string} [name] 
         * @param {string} [additionalInfo] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {Date} [lastRetrieved] 
         * @param {boolean} [current] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsDepartmentsGet(id?: string, hospitalId?: string, hospitalName?: string, name?: string, additionalInfo?: string, page?: number, limit?: number, lastRetrieved?: Date, current?: boolean, options?: any): AxiosPromise<DepartmentsViewModel> {
            return DepartmentApiFp(configuration).apiV1HospitalsDepartmentsGet(id, hospitalId, hospitalName, name, additionalInfo, page, limit, lastRetrieved, current, options)(axios, basePath);
        },
        /**
         * Sample request:        DELETE /api/v1/hospitals/1/departments/1
         * @summary Delete department.
         * @param {string} hospitalId 
         * @param {string} departmentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdDepartmentsDepartmentIdDelete(hospitalId: string, departmentId: string, options?: any): AxiosPromise<boolean> {
            return DepartmentApiFp(configuration).apiV1HospitalsHospitalIdDepartmentsDepartmentIdDelete(hospitalId, departmentId, options)(axios, basePath);
        },
        /**
         * Sample request:        GET /api/v1/hospitals/1/departments/1
         * @summary Get department.
         * @param {string} hospitalId 
         * @param {string} departmentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdDepartmentsDepartmentIdGet(hospitalId: string, departmentId: string, options?: any): AxiosPromise<DepartmentViewModel> {
            return DepartmentApiFp(configuration).apiV1HospitalsHospitalIdDepartmentsDepartmentIdGet(hospitalId, departmentId, options)(axios, basePath);
        },
        /**
         * Sample request:        POST /api/v1/hospitals/1/departments/1
         * @summary Create department.
         * @param {string} hospitalId 
         * @param {string} departmentId 
         * @param {CreateDepartmentCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdDepartmentsDepartmentIdPost(hospitalId: string, departmentId: string, body?: CreateDepartmentCommand, options?: any): AxiosPromise<Department> {
            return DepartmentApiFp(configuration).apiV1HospitalsHospitalIdDepartmentsDepartmentIdPost(hospitalId, departmentId, body, options)(axios, basePath);
        },
        /**
         * Sample request:
         * @summary Update department.
         * @param {string} hospitalId 
         * @param {string} departmentId 
         * @param {UpdateDepartmentCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdDepartmentsDepartmentIdPut(hospitalId: string, departmentId: string, body?: UpdateDepartmentCommand, options?: any): AxiosPromise<boolean> {
            return DepartmentApiFp(configuration).apiV1HospitalsHospitalIdDepartmentsDepartmentIdPut(hospitalId, departmentId, body, options)(axios, basePath);
        },
    };
};

/**
 * DepartmentApi - object-oriented interface
 * @export
 * @class DepartmentApi
 * @extends {BaseAPI}
 */
export class DepartmentApi extends BaseAPI {
    /**
     * Sample request:        GET /api/v1/hospitals/departments
     * @summary Get all department.
     * @param {string} [id] 
     * @param {string} [hospitalId] 
     * @param {string} [hospitalName] 
     * @param {string} [name] 
     * @param {string} [additionalInfo] 
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {Date} [lastRetrieved] 
     * @param {boolean} [current] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentApi
     */
    public apiV1HospitalsDepartmentsGet(id?: string, hospitalId?: string, hospitalName?: string, name?: string, additionalInfo?: string, page?: number, limit?: number, lastRetrieved?: Date, current?: boolean, options?: any) {
        return DepartmentApiFp(this.configuration).apiV1HospitalsDepartmentsGet(id, hospitalId, hospitalName, name, additionalInfo, page, limit, lastRetrieved, current, options)(this.axios, this.basePath);
    }

    /**
     * Sample request:        DELETE /api/v1/hospitals/1/departments/1
     * @summary Delete department.
     * @param {string} hospitalId 
     * @param {string} departmentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentApi
     */
    public apiV1HospitalsHospitalIdDepartmentsDepartmentIdDelete(hospitalId: string, departmentId: string, options?: any) {
        return DepartmentApiFp(this.configuration).apiV1HospitalsHospitalIdDepartmentsDepartmentIdDelete(hospitalId, departmentId, options)(this.axios, this.basePath);
    }

    /**
     * Sample request:        GET /api/v1/hospitals/1/departments/1
     * @summary Get department.
     * @param {string} hospitalId 
     * @param {string} departmentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentApi
     */
    public apiV1HospitalsHospitalIdDepartmentsDepartmentIdGet(hospitalId: string, departmentId: string, options?: any) {
        return DepartmentApiFp(this.configuration).apiV1HospitalsHospitalIdDepartmentsDepartmentIdGet(hospitalId, departmentId, options)(this.axios, this.basePath);
    }

    /**
     * Sample request:        POST /api/v1/hospitals/1/departments/1
     * @summary Create department.
     * @param {string} hospitalId 
     * @param {string} departmentId 
     * @param {CreateDepartmentCommand} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentApi
     */
    public apiV1HospitalsHospitalIdDepartmentsDepartmentIdPost(hospitalId: string, departmentId: string, body?: CreateDepartmentCommand, options?: any) {
        return DepartmentApiFp(this.configuration).apiV1HospitalsHospitalIdDepartmentsDepartmentIdPost(hospitalId, departmentId, body, options)(this.axios, this.basePath);
    }

    /**
     * Sample request:
     * @summary Update department.
     * @param {string} hospitalId 
     * @param {string} departmentId 
     * @param {UpdateDepartmentCommand} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentApi
     */
    public apiV1HospitalsHospitalIdDepartmentsDepartmentIdPut(hospitalId: string, departmentId: string, body?: UpdateDepartmentCommand, options?: any) {
        return DepartmentApiFp(this.configuration).apiV1HospitalsHospitalIdDepartmentsDepartmentIdPut(hospitalId, departmentId, body, options)(this.axios, this.basePath);
    }

}


/**
 * DoctorCertificatesApi - axios parameter creator
 * @export
 */
export const DoctorCertificatesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Sample request:        GET /api/v1/doctors/certificates
         * @summary Get all certificates.
         * @param {string} [id] 
         * @param {string} [doctorId] 
         * @param {string} [doctorName] 
         * @param {string} [certificate] 
         * @param {Date} [activeFrom] 
         * @param {Date} [activeTo] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {Date} [lastRetrieved] 
         * @param {boolean} [current] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DoctorsCertificatesGet(id?: string, doctorId?: string, doctorName?: string, certificate?: string, activeFrom?: Date, activeTo?: Date, page?: number, limit?: number, lastRetrieved?: Date, current?: boolean, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/doctors/certificates`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }

            if (doctorId !== undefined) {
                localVarQueryParameter['DoctorId'] = doctorId;
            }

            if (doctorName !== undefined) {
                localVarQueryParameter['DoctorName'] = doctorName;
            }

            if (certificate !== undefined) {
                localVarQueryParameter['Certificate'] = certificate;
            }

            if (activeFrom !== undefined) {
                localVarQueryParameter['ActiveFrom'] = (activeFrom as any instanceof Date) ?
                    (activeFrom as any).toISOString() :
                    activeFrom;
            }

            if (activeTo !== undefined) {
                localVarQueryParameter['ActiveTo'] = (activeTo as any instanceof Date) ?
                    (activeTo as any).toISOString() :
                    activeTo;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (lastRetrieved !== undefined) {
                localVarQueryParameter['lastRetrieved'] = (lastRetrieved as any instanceof Date) ?
                    (lastRetrieved as any).toISOString() :
                    lastRetrieved;
            }

            if (current !== undefined) {
                localVarQueryParameter['Current'] = current;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        DELETE /api/v1/doctors/1/certificates/1
         * @summary Delete certificate.
         * @param {string} doctorId 
         * @param {string} certificateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DoctorsDoctorIdCertificatesCertificateIdDelete(doctorId: string, certificateId: string, options: any = {}): RequestArgs {
            // verify required parameter 'doctorId' is not null or undefined
            if (doctorId === null || doctorId === undefined) {
                throw new RequiredError('doctorId','Required parameter doctorId was null or undefined when calling apiV1DoctorsDoctorIdCertificatesCertificateIdDelete.');
            }
            // verify required parameter 'certificateId' is not null or undefined
            if (certificateId === null || certificateId === undefined) {
                throw new RequiredError('certificateId','Required parameter certificateId was null or undefined when calling apiV1DoctorsDoctorIdCertificatesCertificateIdDelete.');
            }
            const localVarPath = `/api/v1/doctors/{doctorId}/certificates/{certificateId}`
                .replace(`{${"doctorId"}}`, encodeURIComponent(String(doctorId)))
                .replace(`{${"certificateId"}}`, encodeURIComponent(String(certificateId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        GET /api/v1/doctors/1/certificates/1
         * @summary Get certificate.
         * @param {string} doctorId 
         * @param {string} certificateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DoctorsDoctorIdCertificatesCertificateIdGet(doctorId: string, certificateId: string, options: any = {}): RequestArgs {
            // verify required parameter 'doctorId' is not null or undefined
            if (doctorId === null || doctorId === undefined) {
                throw new RequiredError('doctorId','Required parameter doctorId was null or undefined when calling apiV1DoctorsDoctorIdCertificatesCertificateIdGet.');
            }
            // verify required parameter 'certificateId' is not null or undefined
            if (certificateId === null || certificateId === undefined) {
                throw new RequiredError('certificateId','Required parameter certificateId was null or undefined when calling apiV1DoctorsDoctorIdCertificatesCertificateIdGet.');
            }
            const localVarPath = `/api/v1/doctors/{doctorId}/certificates/{certificateId}`
                .replace(`{${"doctorId"}}`, encodeURIComponent(String(doctorId)))
                .replace(`{${"certificateId"}}`, encodeURIComponent(String(certificateId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:
         * @summary Update department.
         * @param {string} doctorId 
         * @param {string} certificateId 
         * @param {UpdateDoctorCertificateCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DoctorsDoctorIdCertificatesCertificateIdPut(doctorId: string, certificateId: string, body?: UpdateDoctorCertificateCommand, options: any = {}): RequestArgs {
            // verify required parameter 'doctorId' is not null or undefined
            if (doctorId === null || doctorId === undefined) {
                throw new RequiredError('doctorId','Required parameter doctorId was null or undefined when calling apiV1DoctorsDoctorIdCertificatesCertificateIdPut.');
            }
            // verify required parameter 'certificateId' is not null or undefined
            if (certificateId === null || certificateId === undefined) {
                throw new RequiredError('certificateId','Required parameter certificateId was null or undefined when calling apiV1DoctorsDoctorIdCertificatesCertificateIdPut.');
            }
            const localVarPath = `/api/v1/doctors/{doctorId}/certificates/{certificateId}`
                .replace(`{${"doctorId"}}`, encodeURIComponent(String(doctorId)))
                .replace(`{${"certificateId"}}`, encodeURIComponent(String(certificateId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        POST /api/v1/doctors/1/certificates/1
         * @summary Create certificate.
         * @param {string} doctorId 
         * @param {CreateDoctorCertificateCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DoctorsDoctorIdCertificatesPost(doctorId: string, body?: CreateDoctorCertificateCommand, options: any = {}): RequestArgs {
            // verify required parameter 'doctorId' is not null or undefined
            if (doctorId === null || doctorId === undefined) {
                throw new RequiredError('doctorId','Required parameter doctorId was null or undefined when calling apiV1DoctorsDoctorIdCertificatesPost.');
            }
            const localVarPath = `/api/v1/doctors/{doctorId}/certificates`
                .replace(`{${"doctorId"}}`, encodeURIComponent(String(doctorId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DoctorCertificatesApi - functional programming interface
 * @export
 */
export const DoctorCertificatesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Sample request:        GET /api/v1/doctors/certificates
         * @summary Get all certificates.
         * @param {string} [id] 
         * @param {string} [doctorId] 
         * @param {string} [doctorName] 
         * @param {string} [certificate] 
         * @param {Date} [activeFrom] 
         * @param {Date} [activeTo] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {Date} [lastRetrieved] 
         * @param {boolean} [current] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DoctorsCertificatesGet(id?: string, doctorId?: string, doctorName?: string, certificate?: string, activeFrom?: Date, activeTo?: Date, page?: number, limit?: number, lastRetrieved?: Date, current?: boolean, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<DoctorCertificatesViewModel> {
            const localVarAxiosArgs = DoctorCertificatesApiAxiosParamCreator(configuration).apiV1DoctorsCertificatesGet(id, doctorId, doctorName, certificate, activeFrom, activeTo, page, limit, lastRetrieved, current, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        DELETE /api/v1/doctors/1/certificates/1
         * @summary Delete certificate.
         * @param {string} doctorId 
         * @param {string} certificateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DoctorsDoctorIdCertificatesCertificateIdDelete(doctorId: string, certificateId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = DoctorCertificatesApiAxiosParamCreator(configuration).apiV1DoctorsDoctorIdCertificatesCertificateIdDelete(doctorId, certificateId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        GET /api/v1/doctors/1/certificates/1
         * @summary Get certificate.
         * @param {string} doctorId 
         * @param {string} certificateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DoctorsDoctorIdCertificatesCertificateIdGet(doctorId: string, certificateId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<DoctorCertificateViewModel> {
            const localVarAxiosArgs = DoctorCertificatesApiAxiosParamCreator(configuration).apiV1DoctorsDoctorIdCertificatesCertificateIdGet(doctorId, certificateId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:
         * @summary Update department.
         * @param {string} doctorId 
         * @param {string} certificateId 
         * @param {UpdateDoctorCertificateCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DoctorsDoctorIdCertificatesCertificateIdPut(doctorId: string, certificateId: string, body?: UpdateDoctorCertificateCommand, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = DoctorCertificatesApiAxiosParamCreator(configuration).apiV1DoctorsDoctorIdCertificatesCertificateIdPut(doctorId, certificateId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        POST /api/v1/doctors/1/certificates/1
         * @summary Create certificate.
         * @param {string} doctorId 
         * @param {CreateDoctorCertificateCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DoctorsDoctorIdCertificatesPost(doctorId: string, body?: CreateDoctorCertificateCommand, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<DoctorCertificate> {
            const localVarAxiosArgs = DoctorCertificatesApiAxiosParamCreator(configuration).apiV1DoctorsDoctorIdCertificatesPost(doctorId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DoctorCertificatesApi - factory interface
 * @export
 */
export const DoctorCertificatesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Sample request:        GET /api/v1/doctors/certificates
         * @summary Get all certificates.
         * @param {string} [id] 
         * @param {string} [doctorId] 
         * @param {string} [doctorName] 
         * @param {string} [certificate] 
         * @param {Date} [activeFrom] 
         * @param {Date} [activeTo] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {Date} [lastRetrieved] 
         * @param {boolean} [current] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DoctorsCertificatesGet(id?: string, doctorId?: string, doctorName?: string, certificate?: string, activeFrom?: Date, activeTo?: Date, page?: number, limit?: number, lastRetrieved?: Date, current?: boolean, options?: any): AxiosPromise<DoctorCertificatesViewModel> {
            return DoctorCertificatesApiFp(configuration).apiV1DoctorsCertificatesGet(id, doctorId, doctorName, certificate, activeFrom, activeTo, page, limit, lastRetrieved, current, options)(axios, basePath);
        },
        /**
         * Sample request:        DELETE /api/v1/doctors/1/certificates/1
         * @summary Delete certificate.
         * @param {string} doctorId 
         * @param {string} certificateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DoctorsDoctorIdCertificatesCertificateIdDelete(doctorId: string, certificateId: string, options?: any): AxiosPromise<boolean> {
            return DoctorCertificatesApiFp(configuration).apiV1DoctorsDoctorIdCertificatesCertificateIdDelete(doctorId, certificateId, options)(axios, basePath);
        },
        /**
         * Sample request:        GET /api/v1/doctors/1/certificates/1
         * @summary Get certificate.
         * @param {string} doctorId 
         * @param {string} certificateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DoctorsDoctorIdCertificatesCertificateIdGet(doctorId: string, certificateId: string, options?: any): AxiosPromise<DoctorCertificateViewModel> {
            return DoctorCertificatesApiFp(configuration).apiV1DoctorsDoctorIdCertificatesCertificateIdGet(doctorId, certificateId, options)(axios, basePath);
        },
        /**
         * Sample request:
         * @summary Update department.
         * @param {string} doctorId 
         * @param {string} certificateId 
         * @param {UpdateDoctorCertificateCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DoctorsDoctorIdCertificatesCertificateIdPut(doctorId: string, certificateId: string, body?: UpdateDoctorCertificateCommand, options?: any): AxiosPromise<boolean> {
            return DoctorCertificatesApiFp(configuration).apiV1DoctorsDoctorIdCertificatesCertificateIdPut(doctorId, certificateId, body, options)(axios, basePath);
        },
        /**
         * Sample request:        POST /api/v1/doctors/1/certificates/1
         * @summary Create certificate.
         * @param {string} doctorId 
         * @param {CreateDoctorCertificateCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DoctorsDoctorIdCertificatesPost(doctorId: string, body?: CreateDoctorCertificateCommand, options?: any): AxiosPromise<DoctorCertificate> {
            return DoctorCertificatesApiFp(configuration).apiV1DoctorsDoctorIdCertificatesPost(doctorId, body, options)(axios, basePath);
        },
    };
};

/**
 * DoctorCertificatesApi - object-oriented interface
 * @export
 * @class DoctorCertificatesApi
 * @extends {BaseAPI}
 */
export class DoctorCertificatesApi extends BaseAPI {
    /**
     * Sample request:        GET /api/v1/doctors/certificates
     * @summary Get all certificates.
     * @param {string} [id] 
     * @param {string} [doctorId] 
     * @param {string} [doctorName] 
     * @param {string} [certificate] 
     * @param {Date} [activeFrom] 
     * @param {Date} [activeTo] 
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {Date} [lastRetrieved] 
     * @param {boolean} [current] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DoctorCertificatesApi
     */
    public apiV1DoctorsCertificatesGet(id?: string, doctorId?: string, doctorName?: string, certificate?: string, activeFrom?: Date, activeTo?: Date, page?: number, limit?: number, lastRetrieved?: Date, current?: boolean, options?: any) {
        return DoctorCertificatesApiFp(this.configuration).apiV1DoctorsCertificatesGet(id, doctorId, doctorName, certificate, activeFrom, activeTo, page, limit, lastRetrieved, current, options)(this.axios, this.basePath);
    }

    /**
     * Sample request:        DELETE /api/v1/doctors/1/certificates/1
     * @summary Delete certificate.
     * @param {string} doctorId 
     * @param {string} certificateId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DoctorCertificatesApi
     */
    public apiV1DoctorsDoctorIdCertificatesCertificateIdDelete(doctorId: string, certificateId: string, options?: any) {
        return DoctorCertificatesApiFp(this.configuration).apiV1DoctorsDoctorIdCertificatesCertificateIdDelete(doctorId, certificateId, options)(this.axios, this.basePath);
    }

    /**
     * Sample request:        GET /api/v1/doctors/1/certificates/1
     * @summary Get certificate.
     * @param {string} doctorId 
     * @param {string} certificateId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DoctorCertificatesApi
     */
    public apiV1DoctorsDoctorIdCertificatesCertificateIdGet(doctorId: string, certificateId: string, options?: any) {
        return DoctorCertificatesApiFp(this.configuration).apiV1DoctorsDoctorIdCertificatesCertificateIdGet(doctorId, certificateId, options)(this.axios, this.basePath);
    }

    /**
     * Sample request:
     * @summary Update department.
     * @param {string} doctorId 
     * @param {string} certificateId 
     * @param {UpdateDoctorCertificateCommand} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DoctorCertificatesApi
     */
    public apiV1DoctorsDoctorIdCertificatesCertificateIdPut(doctorId: string, certificateId: string, body?: UpdateDoctorCertificateCommand, options?: any) {
        return DoctorCertificatesApiFp(this.configuration).apiV1DoctorsDoctorIdCertificatesCertificateIdPut(doctorId, certificateId, body, options)(this.axios, this.basePath);
    }

    /**
     * Sample request:        POST /api/v1/doctors/1/certificates/1
     * @summary Create certificate.
     * @param {string} doctorId 
     * @param {CreateDoctorCertificateCommand} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DoctorCertificatesApi
     */
    public apiV1DoctorsDoctorIdCertificatesPost(doctorId: string, body?: CreateDoctorCertificateCommand, options?: any) {
        return DoctorCertificatesApiFp(this.configuration).apiV1DoctorsDoctorIdCertificatesPost(doctorId, body, options)(this.axios, this.basePath);
    }

}


/**
 * DoctorReviewsApi - axios parameter creator
 * @export
 */
export const DoctorReviewsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Sample request:        DELETE /api/v1/doctors/1/reviews/1
         * @summary Delete review.
         * @param {string} doctorId 
         * @param {string} patientId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DoctorsDoctorIdReviewsPatientIdDelete(doctorId: string, patientId: string, options: any = {}): RequestArgs {
            // verify required parameter 'doctorId' is not null or undefined
            if (doctorId === null || doctorId === undefined) {
                throw new RequiredError('doctorId','Required parameter doctorId was null or undefined when calling apiV1DoctorsDoctorIdReviewsPatientIdDelete.');
            }
            // verify required parameter 'patientId' is not null or undefined
            if (patientId === null || patientId === undefined) {
                throw new RequiredError('patientId','Required parameter patientId was null or undefined when calling apiV1DoctorsDoctorIdReviewsPatientIdDelete.');
            }
            const localVarPath = `/api/v1/doctors/{doctorId}/reviews/{patientId}`
                .replace(`{${"doctorId"}}`, encodeURIComponent(String(doctorId)))
                .replace(`{${"patientId"}}`, encodeURIComponent(String(patientId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        GET /api/v1/doctors/1/reviews/1
         * @summary Get review.
         * @param {string} doctorId 
         * @param {string} patientId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DoctorsDoctorIdReviewsPatientIdGet(doctorId: string, patientId: string, options: any = {}): RequestArgs {
            // verify required parameter 'doctorId' is not null or undefined
            if (doctorId === null || doctorId === undefined) {
                throw new RequiredError('doctorId','Required parameter doctorId was null or undefined when calling apiV1DoctorsDoctorIdReviewsPatientIdGet.');
            }
            // verify required parameter 'patientId' is not null or undefined
            if (patientId === null || patientId === undefined) {
                throw new RequiredError('patientId','Required parameter patientId was null or undefined when calling apiV1DoctorsDoctorIdReviewsPatientIdGet.');
            }
            const localVarPath = `/api/v1/doctors/{doctorId}/reviews/{patientId}`
                .replace(`{${"doctorId"}}`, encodeURIComponent(String(doctorId)))
                .replace(`{${"patientId"}}`, encodeURIComponent(String(patientId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:
         * @summary Update review.
         * @param {string} doctorId 
         * @param {string} patientId 
         * @param {UpdateDoctorReviewCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DoctorsDoctorIdReviewsPatientIdPut(doctorId: string, patientId: string, body?: UpdateDoctorReviewCommand, options: any = {}): RequestArgs {
            // verify required parameter 'doctorId' is not null or undefined
            if (doctorId === null || doctorId === undefined) {
                throw new RequiredError('doctorId','Required parameter doctorId was null or undefined when calling apiV1DoctorsDoctorIdReviewsPatientIdPut.');
            }
            // verify required parameter 'patientId' is not null or undefined
            if (patientId === null || patientId === undefined) {
                throw new RequiredError('patientId','Required parameter patientId was null or undefined when calling apiV1DoctorsDoctorIdReviewsPatientIdPut.');
            }
            const localVarPath = `/api/v1/doctors/{doctorId}/reviews/{patientId}`
                .replace(`{${"doctorId"}}`, encodeURIComponent(String(doctorId)))
                .replace(`{${"patientId"}}`, encodeURIComponent(String(patientId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        POST /api/v1/doctors/1/reviews/1
         * @summary Create review.
         * @param {string} doctorId 
         * @param {string} patientId 
         * @param {CreateDoctorReviewCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DoctorsDoctorIdReviewsPost(doctorId: string, patientId: string, body?: CreateDoctorReviewCommand, options: any = {}): RequestArgs {
            // verify required parameter 'doctorId' is not null or undefined
            if (doctorId === null || doctorId === undefined) {
                throw new RequiredError('doctorId','Required parameter doctorId was null or undefined when calling apiV1DoctorsDoctorIdReviewsPost.');
            }
            // verify required parameter 'patientId' is not null or undefined
            if (patientId === null || patientId === undefined) {
                throw new RequiredError('patientId','Required parameter patientId was null or undefined when calling apiV1DoctorsDoctorIdReviewsPost.');
            }
            const localVarPath = `/api/v1/doctors/{doctorId}/reviews`
                .replace(`{${"doctorId"}}`, encodeURIComponent(String(doctorId)))
                .replace(`{${"patientId"}}`, encodeURIComponent(String(patientId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        GET /api/v1/doctors/reviews
         * @summary Get all reviews.
         * @param {string} [doctorId] 
         * @param {string} [doctorName] 
         * @param {string} [patientId] 
         * @param {string} [patientName] 
         * @param {string} [body] 
         * @param {boolean} [recommended] 
         * @param {object} [reviewCategory] 
         * @param {number} [rate] 
         * @param {Date} [created] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {Date} [lastRetrieved] 
         * @param {boolean} [current] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DoctorsReviewsGet(doctorId?: string, doctorName?: string, patientId?: string, patientName?: string, body?: string, recommended?: boolean, reviewCategory?: object, rate?: number, created?: Date, page?: number, limit?: number, lastRetrieved?: Date, current?: boolean, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/doctors/reviews`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (doctorId !== undefined) {
                localVarQueryParameter['DoctorId'] = doctorId;
            }

            if (doctorName !== undefined) {
                localVarQueryParameter['DoctorName'] = doctorName;
            }

            if (patientId !== undefined) {
                localVarQueryParameter['PatientId'] = patientId;
            }

            if (patientName !== undefined) {
                localVarQueryParameter['PatientName'] = patientName;
            }

            if (body !== undefined) {
                localVarQueryParameter['Body'] = body;
            }

            if (recommended !== undefined) {
                localVarQueryParameter['Recommended'] = recommended;
            }

            if (reviewCategory !== undefined) {
                localVarQueryParameter['ReviewCategory'] = reviewCategory;
            }

            if (rate !== undefined) {
                localVarQueryParameter['Rate'] = rate;
            }

            if (created !== undefined) {
                localVarQueryParameter['Created'] = (created as any instanceof Date) ?
                    (created as any).toISOString() :
                    created;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (lastRetrieved !== undefined) {
                localVarQueryParameter['lastRetrieved'] = (lastRetrieved as any instanceof Date) ?
                    (lastRetrieved as any).toISOString() :
                    lastRetrieved;
            }

            if (current !== undefined) {
                localVarQueryParameter['Current'] = current;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DoctorReviewsApi - functional programming interface
 * @export
 */
export const DoctorReviewsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Sample request:        DELETE /api/v1/doctors/1/reviews/1
         * @summary Delete review.
         * @param {string} doctorId 
         * @param {string} patientId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DoctorsDoctorIdReviewsPatientIdDelete(doctorId: string, patientId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = DoctorReviewsApiAxiosParamCreator(configuration).apiV1DoctorsDoctorIdReviewsPatientIdDelete(doctorId, patientId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        GET /api/v1/doctors/1/reviews/1
         * @summary Get review.
         * @param {string} doctorId 
         * @param {string} patientId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DoctorsDoctorIdReviewsPatientIdGet(doctorId: string, patientId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<DoctorReviewViewModel> {
            const localVarAxiosArgs = DoctorReviewsApiAxiosParamCreator(configuration).apiV1DoctorsDoctorIdReviewsPatientIdGet(doctorId, patientId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:
         * @summary Update review.
         * @param {string} doctorId 
         * @param {string} patientId 
         * @param {UpdateDoctorReviewCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DoctorsDoctorIdReviewsPatientIdPut(doctorId: string, patientId: string, body?: UpdateDoctorReviewCommand, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = DoctorReviewsApiAxiosParamCreator(configuration).apiV1DoctorsDoctorIdReviewsPatientIdPut(doctorId, patientId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        POST /api/v1/doctors/1/reviews/1
         * @summary Create review.
         * @param {string} doctorId 
         * @param {string} patientId 
         * @param {CreateDoctorReviewCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DoctorsDoctorIdReviewsPost(doctorId: string, patientId: string, body?: CreateDoctorReviewCommand, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<DoctorReview> {
            const localVarAxiosArgs = DoctorReviewsApiAxiosParamCreator(configuration).apiV1DoctorsDoctorIdReviewsPost(doctorId, patientId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        GET /api/v1/doctors/reviews
         * @summary Get all reviews.
         * @param {string} [doctorId] 
         * @param {string} [doctorName] 
         * @param {string} [patientId] 
         * @param {string} [patientName] 
         * @param {string} [body] 
         * @param {boolean} [recommended] 
         * @param {object} [reviewCategory] 
         * @param {number} [rate] 
         * @param {Date} [created] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {Date} [lastRetrieved] 
         * @param {boolean} [current] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DoctorsReviewsGet(doctorId?: string, doctorName?: string, patientId?: string, patientName?: string, body?: string, recommended?: boolean, reviewCategory?: object, rate?: number, created?: Date, page?: number, limit?: number, lastRetrieved?: Date, current?: boolean, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<DoctorReviewsViewModel> {
            const localVarAxiosArgs = DoctorReviewsApiAxiosParamCreator(configuration).apiV1DoctorsReviewsGet(doctorId, doctorName, patientId, patientName, body, recommended, reviewCategory, rate, created, page, limit, lastRetrieved, current, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DoctorReviewsApi - factory interface
 * @export
 */
export const DoctorReviewsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Sample request:        DELETE /api/v1/doctors/1/reviews/1
         * @summary Delete review.
         * @param {string} doctorId 
         * @param {string} patientId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DoctorsDoctorIdReviewsPatientIdDelete(doctorId: string, patientId: string, options?: any): AxiosPromise<boolean> {
            return DoctorReviewsApiFp(configuration).apiV1DoctorsDoctorIdReviewsPatientIdDelete(doctorId, patientId, options)(axios, basePath);
        },
        /**
         * Sample request:        GET /api/v1/doctors/1/reviews/1
         * @summary Get review.
         * @param {string} doctorId 
         * @param {string} patientId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DoctorsDoctorIdReviewsPatientIdGet(doctorId: string, patientId: string, options?: any): AxiosPromise<DoctorReviewViewModel> {
            return DoctorReviewsApiFp(configuration).apiV1DoctorsDoctorIdReviewsPatientIdGet(doctorId, patientId, options)(axios, basePath);
        },
        /**
         * Sample request:
         * @summary Update review.
         * @param {string} doctorId 
         * @param {string} patientId 
         * @param {UpdateDoctorReviewCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DoctorsDoctorIdReviewsPatientIdPut(doctorId: string, patientId: string, body?: UpdateDoctorReviewCommand, options?: any): AxiosPromise<boolean> {
            return DoctorReviewsApiFp(configuration).apiV1DoctorsDoctorIdReviewsPatientIdPut(doctorId, patientId, body, options)(axios, basePath);
        },
        /**
         * Sample request:        POST /api/v1/doctors/1/reviews/1
         * @summary Create review.
         * @param {string} doctorId 
         * @param {string} patientId 
         * @param {CreateDoctorReviewCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DoctorsDoctorIdReviewsPost(doctorId: string, patientId: string, body?: CreateDoctorReviewCommand, options?: any): AxiosPromise<DoctorReview> {
            return DoctorReviewsApiFp(configuration).apiV1DoctorsDoctorIdReviewsPost(doctorId, patientId, body, options)(axios, basePath);
        },
        /**
         * Sample request:        GET /api/v1/doctors/reviews
         * @summary Get all reviews.
         * @param {string} [doctorId] 
         * @param {string} [doctorName] 
         * @param {string} [patientId] 
         * @param {string} [patientName] 
         * @param {string} [body] 
         * @param {boolean} [recommended] 
         * @param {object} [reviewCategory] 
         * @param {number} [rate] 
         * @param {Date} [created] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {Date} [lastRetrieved] 
         * @param {boolean} [current] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DoctorsReviewsGet(doctorId?: string, doctorName?: string, patientId?: string, patientName?: string, body?: string, recommended?: boolean, reviewCategory?: object, rate?: number, created?: Date, page?: number, limit?: number, lastRetrieved?: Date, current?: boolean, options?: any): AxiosPromise<DoctorReviewsViewModel> {
            return DoctorReviewsApiFp(configuration).apiV1DoctorsReviewsGet(doctorId, doctorName, patientId, patientName, body, recommended, reviewCategory, rate, created, page, limit, lastRetrieved, current, options)(axios, basePath);
        },
    };
};

/**
 * DoctorReviewsApi - object-oriented interface
 * @export
 * @class DoctorReviewsApi
 * @extends {BaseAPI}
 */
export class DoctorReviewsApi extends BaseAPI {
    /**
     * Sample request:        DELETE /api/v1/doctors/1/reviews/1
     * @summary Delete review.
     * @param {string} doctorId 
     * @param {string} patientId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DoctorReviewsApi
     */
    public apiV1DoctorsDoctorIdReviewsPatientIdDelete(doctorId: string, patientId: string, options?: any) {
        return DoctorReviewsApiFp(this.configuration).apiV1DoctorsDoctorIdReviewsPatientIdDelete(doctorId, patientId, options)(this.axios, this.basePath);
    }

    /**
     * Sample request:        GET /api/v1/doctors/1/reviews/1
     * @summary Get review.
     * @param {string} doctorId 
     * @param {string} patientId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DoctorReviewsApi
     */
    public apiV1DoctorsDoctorIdReviewsPatientIdGet(doctorId: string, patientId: string, options?: any) {
        return DoctorReviewsApiFp(this.configuration).apiV1DoctorsDoctorIdReviewsPatientIdGet(doctorId, patientId, options)(this.axios, this.basePath);
    }

    /**
     * Sample request:
     * @summary Update review.
     * @param {string} doctorId 
     * @param {string} patientId 
     * @param {UpdateDoctorReviewCommand} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DoctorReviewsApi
     */
    public apiV1DoctorsDoctorIdReviewsPatientIdPut(doctorId: string, patientId: string, body?: UpdateDoctorReviewCommand, options?: any) {
        return DoctorReviewsApiFp(this.configuration).apiV1DoctorsDoctorIdReviewsPatientIdPut(doctorId, patientId, body, options)(this.axios, this.basePath);
    }

    /**
     * Sample request:        POST /api/v1/doctors/1/reviews/1
     * @summary Create review.
     * @param {string} doctorId 
     * @param {string} patientId 
     * @param {CreateDoctorReviewCommand} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DoctorReviewsApi
     */
    public apiV1DoctorsDoctorIdReviewsPost(doctorId: string, patientId: string, body?: CreateDoctorReviewCommand, options?: any) {
        return DoctorReviewsApiFp(this.configuration).apiV1DoctorsDoctorIdReviewsPost(doctorId, patientId, body, options)(this.axios, this.basePath);
    }

    /**
     * Sample request:        GET /api/v1/doctors/reviews
     * @summary Get all reviews.
     * @param {string} [doctorId] 
     * @param {string} [doctorName] 
     * @param {string} [patientId] 
     * @param {string} [patientName] 
     * @param {string} [body] 
     * @param {boolean} [recommended] 
     * @param {object} [reviewCategory] 
     * @param {number} [rate] 
     * @param {Date} [created] 
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {Date} [lastRetrieved] 
     * @param {boolean} [current] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DoctorReviewsApi
     */
    public apiV1DoctorsReviewsGet(doctorId?: string, doctorName?: string, patientId?: string, patientName?: string, body?: string, recommended?: boolean, reviewCategory?: object, rate?: number, created?: Date, page?: number, limit?: number, lastRetrieved?: Date, current?: boolean, options?: any) {
        return DoctorReviewsApiFp(this.configuration).apiV1DoctorsReviewsGet(doctorId, doctorName, patientId, patientName, body, recommended, reviewCategory, rate, created, page, limit, lastRetrieved, current, options)(this.axios, this.basePath);
    }

}


/**
 * DoctorSpecialtiesApi - axios parameter creator
 * @export
 */
export const DoctorSpecialtiesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Sample request:        POST /api/v1/doctors/1/specialty/1
         * @summary Link a doctor to a specialty.
         * @param {string} doctorId 
         * @param {string} specialtyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DoctorsDoctorIdSpecialtySpecialtyIdPost(doctorId: string, specialtyId: string, options: any = {}): RequestArgs {
            // verify required parameter 'doctorId' is not null or undefined
            if (doctorId === null || doctorId === undefined) {
                throw new RequiredError('doctorId','Required parameter doctorId was null or undefined when calling apiV1DoctorsDoctorIdSpecialtySpecialtyIdPost.');
            }
            // verify required parameter 'specialtyId' is not null or undefined
            if (specialtyId === null || specialtyId === undefined) {
                throw new RequiredError('specialtyId','Required parameter specialtyId was null or undefined when calling apiV1DoctorsDoctorIdSpecialtySpecialtyIdPost.');
            }
            const localVarPath = `/api/v1/doctors/{doctorId}/specialty/{specialtyId}`
                .replace(`{${"doctorId"}}`, encodeURIComponent(String(doctorId)))
                .replace(`{${"specialtyId"}}`, encodeURIComponent(String(specialtyId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        DELETE /api/v1/doctors/1/specialty/1
         * @summary Remove link between the doctor and the specialty.
         * @param {string} doctorId 
         * @param {string} specailtyId 
         * @param {string} hospitalId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DoctorsHospitalIdDoctorsDoctorIdDelete(doctorId: string, specailtyId: string, hospitalId: string, options: any = {}): RequestArgs {
            // verify required parameter 'doctorId' is not null or undefined
            if (doctorId === null || doctorId === undefined) {
                throw new RequiredError('doctorId','Required parameter doctorId was null or undefined when calling apiV1DoctorsHospitalIdDoctorsDoctorIdDelete.');
            }
            // verify required parameter 'specailtyId' is not null or undefined
            if (specailtyId === null || specailtyId === undefined) {
                throw new RequiredError('specailtyId','Required parameter specailtyId was null or undefined when calling apiV1DoctorsHospitalIdDoctorsDoctorIdDelete.');
            }
            // verify required parameter 'hospitalId' is not null or undefined
            if (hospitalId === null || hospitalId === undefined) {
                throw new RequiredError('hospitalId','Required parameter hospitalId was null or undefined when calling apiV1DoctorsHospitalIdDoctorsDoctorIdDelete.');
            }
            const localVarPath = `/api/v1/doctors/{hospitalId}/doctors/{doctorId}`
                .replace(`{${"doctorId"}}`, encodeURIComponent(String(doctorId)))
                .replace(`{${"specailtyId"}}`, encodeURIComponent(String(specailtyId)))
                .replace(`{${"hospitalId"}}`, encodeURIComponent(String(hospitalId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DoctorSpecialtiesApi - functional programming interface
 * @export
 */
export const DoctorSpecialtiesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Sample request:        POST /api/v1/doctors/1/specialty/1
         * @summary Link a doctor to a specialty.
         * @param {string} doctorId 
         * @param {string} specialtyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DoctorsDoctorIdSpecialtySpecialtyIdPost(doctorId: string, specialtyId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<DoctorSpecialtyViewModel> {
            const localVarAxiosArgs = DoctorSpecialtiesApiAxiosParamCreator(configuration).apiV1DoctorsDoctorIdSpecialtySpecialtyIdPost(doctorId, specialtyId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        DELETE /api/v1/doctors/1/specialty/1
         * @summary Remove link between the doctor and the specialty.
         * @param {string} doctorId 
         * @param {string} specailtyId 
         * @param {string} hospitalId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DoctorsHospitalIdDoctorsDoctorIdDelete(doctorId: string, specailtyId: string, hospitalId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = DoctorSpecialtiesApiAxiosParamCreator(configuration).apiV1DoctorsHospitalIdDoctorsDoctorIdDelete(doctorId, specailtyId, hospitalId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DoctorSpecialtiesApi - factory interface
 * @export
 */
export const DoctorSpecialtiesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Sample request:        POST /api/v1/doctors/1/specialty/1
         * @summary Link a doctor to a specialty.
         * @param {string} doctorId 
         * @param {string} specialtyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DoctorsDoctorIdSpecialtySpecialtyIdPost(doctorId: string, specialtyId: string, options?: any): AxiosPromise<DoctorSpecialtyViewModel> {
            return DoctorSpecialtiesApiFp(configuration).apiV1DoctorsDoctorIdSpecialtySpecialtyIdPost(doctorId, specialtyId, options)(axios, basePath);
        },
        /**
         * Sample request:        DELETE /api/v1/doctors/1/specialty/1
         * @summary Remove link between the doctor and the specialty.
         * @param {string} doctorId 
         * @param {string} specailtyId 
         * @param {string} hospitalId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DoctorsHospitalIdDoctorsDoctorIdDelete(doctorId: string, specailtyId: string, hospitalId: string, options?: any): AxiosPromise<boolean> {
            return DoctorSpecialtiesApiFp(configuration).apiV1DoctorsHospitalIdDoctorsDoctorIdDelete(doctorId, specailtyId, hospitalId, options)(axios, basePath);
        },
    };
};

/**
 * DoctorSpecialtiesApi - object-oriented interface
 * @export
 * @class DoctorSpecialtiesApi
 * @extends {BaseAPI}
 */
export class DoctorSpecialtiesApi extends BaseAPI {
    /**
     * Sample request:        POST /api/v1/doctors/1/specialty/1
     * @summary Link a doctor to a specialty.
     * @param {string} doctorId 
     * @param {string} specialtyId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DoctorSpecialtiesApi
     */
    public apiV1DoctorsDoctorIdSpecialtySpecialtyIdPost(doctorId: string, specialtyId: string, options?: any) {
        return DoctorSpecialtiesApiFp(this.configuration).apiV1DoctorsDoctorIdSpecialtySpecialtyIdPost(doctorId, specialtyId, options)(this.axios, this.basePath);
    }

    /**
     * Sample request:        DELETE /api/v1/doctors/1/specialty/1
     * @summary Remove link between the doctor and the specialty.
     * @param {string} doctorId 
     * @param {string} specailtyId 
     * @param {string} hospitalId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DoctorSpecialtiesApi
     */
    public apiV1DoctorsHospitalIdDoctorsDoctorIdDelete(doctorId: string, specailtyId: string, hospitalId: string, options?: any) {
        return DoctorSpecialtiesApiFp(this.configuration).apiV1DoctorsHospitalIdDoctorsDoctorIdDelete(doctorId, specailtyId, hospitalId, options)(this.axios, this.basePath);
    }

}


/**
 * DoctorsApi - axios parameter creator
 * @export
 */
export const DoctorsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Sample request:        DELETE /api/v1/doctors/1
         * @summary Delete doctor.
         * @param {string} doctorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DoctorsDoctorIdDelete(doctorId: string, options: any = {}): RequestArgs {
            // verify required parameter 'doctorId' is not null or undefined
            if (doctorId === null || doctorId === undefined) {
                throw new RequiredError('doctorId','Required parameter doctorId was null or undefined when calling apiV1DoctorsDoctorIdDelete.');
            }
            const localVarPath = `/api/v1/doctors/{doctorId}`
                .replace(`{${"doctorId"}}`, encodeURIComponent(String(doctorId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        GET /api/v1/doctors/1
         * @summary Get hospital doctor.
         * @param {string} doctorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DoctorsDoctorIdGet(doctorId: string, options: any = {}): RequestArgs {
            // verify required parameter 'doctorId' is not null or undefined
            if (doctorId === null || doctorId === undefined) {
                throw new RequiredError('doctorId','Required parameter doctorId was null or undefined when calling apiV1DoctorsDoctorIdGet.');
            }
            const localVarPath = `/api/v1/doctors/{doctorId}`
                .replace(`{${"doctorId"}}`, encodeURIComponent(String(doctorId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        PUT /api/v1/doctors/1      {          \"firstName\": \"string\",          \"lastName\": \"string\",          \"photo\": \"string\",          \"locations\": [            {              \"locationType\": \"LivesIn\",              \"latitude\": 0,              \"longitude\": 0,              \"country\": \"string\",              \"state\": \"string\",              \"county\": \"string\",              \"city\": \"string\",              \"zipCode\": \"string\",              \"address\": \"string\"            }          ]      }
         * @summary Update hospital doctor.
         * @param {string} doctorId 
         * @param {UpdateDoctorCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DoctorsDoctorIdPut(doctorId: string, body?: UpdateDoctorCommand, options: any = {}): RequestArgs {
            // verify required parameter 'doctorId' is not null or undefined
            if (doctorId === null || doctorId === undefined) {
                throw new RequiredError('doctorId','Required parameter doctorId was null or undefined when calling apiV1DoctorsDoctorIdPut.');
            }
            const localVarPath = `/api/v1/doctors/{doctorId}`
                .replace(`{${"doctorId"}}`, encodeURIComponent(String(doctorId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        GET /api/v1/doctors      {          \"pageQueryFilter\": {              \"page\": 1,              \"limit\": 20,              \"lastRetrived\": \"2020-02-05T08:40\"          },          \"searchString\": \"doctor\"
         * @summary Get all hospital doctors.
         * @param {string} [id] 
         * @param {string} [fullname] 
         * @param {string} [email] 
         * @param {object} [gender] 
         * @param {Date} [dateOfBirth] 
         * @param {Date} [created] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {Date} [lastRetrieved] 
         * @param {boolean} [current] 
         * @param {string} [countryId] 
         * @param {string} [hospitalId] 
         * @param {object} [marketingType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DoctorsGet(id?: string, fullname?: string, email?: string, gender?: object, dateOfBirth?: Date, created?: Date, page?: number, limit?: number, lastRetrieved?: Date, current?: boolean, countryId?: string, hospitalId?: string, marketingType?: object, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/doctors`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }

            if (fullname !== undefined) {
                localVarQueryParameter['Fullname'] = fullname;
            }

            if (email !== undefined) {
                localVarQueryParameter['Email'] = email;
            }

            if (gender !== undefined) {
                localVarQueryParameter['Gender'] = gender;
            }

            if (dateOfBirth !== undefined) {
                localVarQueryParameter['DateOfBirth'] = (dateOfBirth as any instanceof Date) ?
                    (dateOfBirth as any).toISOString() :
                    dateOfBirth;
            }

            if (created !== undefined) {
                localVarQueryParameter['Created'] = (created as any instanceof Date) ?
                    (created as any).toISOString() :
                    created;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (lastRetrieved !== undefined) {
                localVarQueryParameter['lastRetrieved'] = (lastRetrieved as any instanceof Date) ?
                    (lastRetrieved as any).toISOString() :
                    lastRetrieved;
            }

            if (current !== undefined) {
                localVarQueryParameter['Current'] = current;
            }

            if (countryId !== undefined) {
                localVarQueryParameter['countryId'] = countryId;
            }

            if (hospitalId !== undefined) {
                localVarQueryParameter['hospitalId'] = hospitalId;
            }

            if (marketingType !== undefined) {
                localVarQueryParameter['marketingType'] = marketingType;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        POST /api/v1/doctors      {          \"userName\": \"cloudDoctor\",          \"email\": \"doctor@icloudhospital.com\",          \"hospitalId\": 1,          \"firstName\": \"cloud\",          \"lastName\": \"doctor\",          \"photo\": \"string\",          \"photoThumbnail\": \"string\",          \"gender\": \"NotSpecified\",          \"dateOfBirth\": \"2020-02-22T17:57:32.048Z\",          \"locations\": [            {              \"locationType\": \"LivesIn\",              \"latitude\": 0,              \"longitude\": 0,              \"country\": \"string\",              \"state\": \"string\",              \"county\": \"string\",              \"city\": \"string\",              \"zipCode\": \"string\",              \"address\": \"string\"            }          ]      }
         * @summary Create hospital doctor.
         * @param {CreateDoctorCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DoctorsPost(body?: CreateDoctorCommand, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/doctors`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DoctorsApi - functional programming interface
 * @export
 */
export const DoctorsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Sample request:        DELETE /api/v1/doctors/1
         * @summary Delete doctor.
         * @param {string} doctorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DoctorsDoctorIdDelete(doctorId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = DoctorsApiAxiosParamCreator(configuration).apiV1DoctorsDoctorIdDelete(doctorId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        GET /api/v1/doctors/1
         * @summary Get hospital doctor.
         * @param {string} doctorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DoctorsDoctorIdGet(doctorId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<DoctorViewModel> {
            const localVarAxiosArgs = DoctorsApiAxiosParamCreator(configuration).apiV1DoctorsDoctorIdGet(doctorId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        PUT /api/v1/doctors/1      {          \"firstName\": \"string\",          \"lastName\": \"string\",          \"photo\": \"string\",          \"locations\": [            {              \"locationType\": \"LivesIn\",              \"latitude\": 0,              \"longitude\": 0,              \"country\": \"string\",              \"state\": \"string\",              \"county\": \"string\",              \"city\": \"string\",              \"zipCode\": \"string\",              \"address\": \"string\"            }          ]      }
         * @summary Update hospital doctor.
         * @param {string} doctorId 
         * @param {UpdateDoctorCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DoctorsDoctorIdPut(doctorId: string, body?: UpdateDoctorCommand, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = DoctorsApiAxiosParamCreator(configuration).apiV1DoctorsDoctorIdPut(doctorId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        GET /api/v1/doctors      {          \"pageQueryFilter\": {              \"page\": 1,              \"limit\": 20,              \"lastRetrived\": \"2020-02-05T08:40\"          },          \"searchString\": \"doctor\"
         * @summary Get all hospital doctors.
         * @param {string} [id] 
         * @param {string} [fullname] 
         * @param {string} [email] 
         * @param {object} [gender] 
         * @param {Date} [dateOfBirth] 
         * @param {Date} [created] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {Date} [lastRetrieved] 
         * @param {boolean} [current] 
         * @param {string} [countryId] 
         * @param {string} [hospitalId] 
         * @param {object} [marketingType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DoctorsGet(id?: string, fullname?: string, email?: string, gender?: object, dateOfBirth?: Date, created?: Date, page?: number, limit?: number, lastRetrieved?: Date, current?: boolean, countryId?: string, hospitalId?: string, marketingType?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<DoctorsViewModel> {
            const localVarAxiosArgs = DoctorsApiAxiosParamCreator(configuration).apiV1DoctorsGet(id, fullname, email, gender, dateOfBirth, created, page, limit, lastRetrieved, current, countryId, hospitalId, marketingType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        POST /api/v1/doctors      {          \"userName\": \"cloudDoctor\",          \"email\": \"doctor@icloudhospital.com\",          \"hospitalId\": 1,          \"firstName\": \"cloud\",          \"lastName\": \"doctor\",          \"photo\": \"string\",          \"photoThumbnail\": \"string\",          \"gender\": \"NotSpecified\",          \"dateOfBirth\": \"2020-02-22T17:57:32.048Z\",          \"locations\": [            {              \"locationType\": \"LivesIn\",              \"latitude\": 0,              \"longitude\": 0,              \"country\": \"string\",              \"state\": \"string\",              \"county\": \"string\",              \"city\": \"string\",              \"zipCode\": \"string\",              \"address\": \"string\"            }          ]      }
         * @summary Create hospital doctor.
         * @param {CreateDoctorCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DoctorsPost(body?: CreateDoctorCommand, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string> {
            const localVarAxiosArgs = DoctorsApiAxiosParamCreator(configuration).apiV1DoctorsPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DoctorsApi - factory interface
 * @export
 */
export const DoctorsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Sample request:        DELETE /api/v1/doctors/1
         * @summary Delete doctor.
         * @param {string} doctorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DoctorsDoctorIdDelete(doctorId: string, options?: any): AxiosPromise<boolean> {
            return DoctorsApiFp(configuration).apiV1DoctorsDoctorIdDelete(doctorId, options)(axios, basePath);
        },
        /**
         * Sample request:        GET /api/v1/doctors/1
         * @summary Get hospital doctor.
         * @param {string} doctorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DoctorsDoctorIdGet(doctorId: string, options?: any): AxiosPromise<DoctorViewModel> {
            return DoctorsApiFp(configuration).apiV1DoctorsDoctorIdGet(doctorId, options)(axios, basePath);
        },
        /**
         * Sample request:        PUT /api/v1/doctors/1      {          \"firstName\": \"string\",          \"lastName\": \"string\",          \"photo\": \"string\",          \"locations\": [            {              \"locationType\": \"LivesIn\",              \"latitude\": 0,              \"longitude\": 0,              \"country\": \"string\",              \"state\": \"string\",              \"county\": \"string\",              \"city\": \"string\",              \"zipCode\": \"string\",              \"address\": \"string\"            }          ]      }
         * @summary Update hospital doctor.
         * @param {string} doctorId 
         * @param {UpdateDoctorCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DoctorsDoctorIdPut(doctorId: string, body?: UpdateDoctorCommand, options?: any): AxiosPromise<boolean> {
            return DoctorsApiFp(configuration).apiV1DoctorsDoctorIdPut(doctorId, body, options)(axios, basePath);
        },
        /**
         * Sample request:        GET /api/v1/doctors      {          \"pageQueryFilter\": {              \"page\": 1,              \"limit\": 20,              \"lastRetrived\": \"2020-02-05T08:40\"          },          \"searchString\": \"doctor\"
         * @summary Get all hospital doctors.
         * @param {string} [id] 
         * @param {string} [fullname] 
         * @param {string} [email] 
         * @param {object} [gender] 
         * @param {Date} [dateOfBirth] 
         * @param {Date} [created] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {Date} [lastRetrieved] 
         * @param {boolean} [current] 
         * @param {string} [countryId] 
         * @param {string} [hospitalId] 
         * @param {object} [marketingType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DoctorsGet(id?: string, fullname?: string, email?: string, gender?: object, dateOfBirth?: Date, created?: Date, page?: number, limit?: number, lastRetrieved?: Date, current?: boolean, countryId?: string, hospitalId?: string, marketingType?: object, options?: any): AxiosPromise<DoctorsViewModel> {
            return DoctorsApiFp(configuration).apiV1DoctorsGet(id, fullname, email, gender, dateOfBirth, created, page, limit, lastRetrieved, current, countryId, hospitalId, marketingType, options)(axios, basePath);
        },
        /**
         * Sample request:        POST /api/v1/doctors      {          \"userName\": \"cloudDoctor\",          \"email\": \"doctor@icloudhospital.com\",          \"hospitalId\": 1,          \"firstName\": \"cloud\",          \"lastName\": \"doctor\",          \"photo\": \"string\",          \"photoThumbnail\": \"string\",          \"gender\": \"NotSpecified\",          \"dateOfBirth\": \"2020-02-22T17:57:32.048Z\",          \"locations\": [            {              \"locationType\": \"LivesIn\",              \"latitude\": 0,              \"longitude\": 0,              \"country\": \"string\",              \"state\": \"string\",              \"county\": \"string\",              \"city\": \"string\",              \"zipCode\": \"string\",              \"address\": \"string\"            }          ]      }
         * @summary Create hospital doctor.
         * @param {CreateDoctorCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DoctorsPost(body?: CreateDoctorCommand, options?: any): AxiosPromise<string> {
            return DoctorsApiFp(configuration).apiV1DoctorsPost(body, options)(axios, basePath);
        },
    };
};

/**
 * DoctorsApi - object-oriented interface
 * @export
 * @class DoctorsApi
 * @extends {BaseAPI}
 */
export class DoctorsApi extends BaseAPI {
    /**
     * Sample request:        DELETE /api/v1/doctors/1
     * @summary Delete doctor.
     * @param {string} doctorId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DoctorsApi
     */
    public apiV1DoctorsDoctorIdDelete(doctorId: string, options?: any) {
        return DoctorsApiFp(this.configuration).apiV1DoctorsDoctorIdDelete(doctorId, options)(this.axios, this.basePath);
    }

    /**
     * Sample request:        GET /api/v1/doctors/1
     * @summary Get hospital doctor.
     * @param {string} doctorId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DoctorsApi
     */
    public apiV1DoctorsDoctorIdGet(doctorId: string, options?: any) {
        return DoctorsApiFp(this.configuration).apiV1DoctorsDoctorIdGet(doctorId, options)(this.axios, this.basePath);
    }

    /**
     * Sample request:        PUT /api/v1/doctors/1      {          \"firstName\": \"string\",          \"lastName\": \"string\",          \"photo\": \"string\",          \"locations\": [            {              \"locationType\": \"LivesIn\",              \"latitude\": 0,              \"longitude\": 0,              \"country\": \"string\",              \"state\": \"string\",              \"county\": \"string\",              \"city\": \"string\",              \"zipCode\": \"string\",              \"address\": \"string\"            }          ]      }
     * @summary Update hospital doctor.
     * @param {string} doctorId 
     * @param {UpdateDoctorCommand} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DoctorsApi
     */
    public apiV1DoctorsDoctorIdPut(doctorId: string, body?: UpdateDoctorCommand, options?: any) {
        return DoctorsApiFp(this.configuration).apiV1DoctorsDoctorIdPut(doctorId, body, options)(this.axios, this.basePath);
    }

    /**
     * Sample request:        GET /api/v1/doctors      {          \"pageQueryFilter\": {              \"page\": 1,              \"limit\": 20,              \"lastRetrived\": \"2020-02-05T08:40\"          },          \"searchString\": \"doctor\"
     * @summary Get all hospital doctors.
     * @param {string} [id] 
     * @param {string} [fullname] 
     * @param {string} [email] 
     * @param {object} [gender] 
     * @param {Date} [dateOfBirth] 
     * @param {Date} [created] 
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {Date} [lastRetrieved] 
     * @param {boolean} [current] 
     * @param {string} [countryId] 
     * @param {string} [hospitalId] 
     * @param {object} [marketingType] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DoctorsApi
     */
    public apiV1DoctorsGet(id?: string, fullname?: string, email?: string, gender?: object, dateOfBirth?: Date, created?: Date, page?: number, limit?: number, lastRetrieved?: Date, current?: boolean, countryId?: string, hospitalId?: string, marketingType?: object, options?: any) {
        return DoctorsApiFp(this.configuration).apiV1DoctorsGet(id, fullname, email, gender, dateOfBirth, created, page, limit, lastRetrieved, current, countryId, hospitalId, marketingType, options)(this.axios, this.basePath);
    }

    /**
     * Sample request:        POST /api/v1/doctors      {          \"userName\": \"cloudDoctor\",          \"email\": \"doctor@icloudhospital.com\",          \"hospitalId\": 1,          \"firstName\": \"cloud\",          \"lastName\": \"doctor\",          \"photo\": \"string\",          \"photoThumbnail\": \"string\",          \"gender\": \"NotSpecified\",          \"dateOfBirth\": \"2020-02-22T17:57:32.048Z\",          \"locations\": [            {              \"locationType\": \"LivesIn\",              \"latitude\": 0,              \"longitude\": 0,              \"country\": \"string\",              \"state\": \"string\",              \"county\": \"string\",              \"city\": \"string\",              \"zipCode\": \"string\",              \"address\": \"string\"            }          ]      }
     * @summary Create hospital doctor.
     * @param {CreateDoctorCommand} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DoctorsApi
     */
    public apiV1DoctorsPost(body?: CreateDoctorCommand, options?: any) {
        return DoctorsApiFp(this.configuration).apiV1DoctorsPost(body, options)(this.axios, this.basePath);
    }

}


/**
 * EquipmentsApi - axios parameter creator
 * @export
 */
export const EquipmentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Sample request:        GET /api/v1/hospitals/1/equipments      {          \"pageQueryFilter\": {              \"page\": 1,              \"limit\": 20,              \"lastRetrived\": \"2020-02-05T08:40\"          },          \"searchString\": \"Medical\"      }
         * @summary Get all equipments.
         * @param {string} [id] 
         * @param {string} [name] 
         * @param {string} [description] 
         * @param {string} [hospitalId] 
         * @param {string} [hospitalName] 
         * @param {Date} [created] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {Date} [lastRetrieved] 
         * @param {boolean} [current] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsEquipmentsGet(id?: string, name?: string, description?: string, hospitalId?: string, hospitalName?: string, created?: Date, page?: number, limit?: number, lastRetrieved?: Date, current?: boolean, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/hospitals/equipments`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }

            if (name !== undefined) {
                localVarQueryParameter['Name'] = name;
            }

            if (description !== undefined) {
                localVarQueryParameter['Description'] = description;
            }

            if (hospitalId !== undefined) {
                localVarQueryParameter['HospitalId'] = hospitalId;
            }

            if (hospitalName !== undefined) {
                localVarQueryParameter['HospitalName'] = hospitalName;
            }

            if (created !== undefined) {
                localVarQueryParameter['Created'] = (created as any instanceof Date) ?
                    (created as any).toISOString() :
                    created;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (lastRetrieved !== undefined) {
                localVarQueryParameter['lastRetrieved'] = (lastRetrieved as any instanceof Date) ?
                    (lastRetrieved as any).toISOString() :
                    lastRetrieved;
            }

            if (current !== undefined) {
                localVarQueryParameter['Current'] = current;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        DELETE /api/v1/hospitals/1/equipments/1
         * @summary Delete equipment.
         * @param {string} hospitalId 
         * @param {string} equipmentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdEquipmentsEquipmentIdDelete(hospitalId: string, equipmentId: string, options: any = {}): RequestArgs {
            // verify required parameter 'hospitalId' is not null or undefined
            if (hospitalId === null || hospitalId === undefined) {
                throw new RequiredError('hospitalId','Required parameter hospitalId was null or undefined when calling apiV1HospitalsHospitalIdEquipmentsEquipmentIdDelete.');
            }
            // verify required parameter 'equipmentId' is not null or undefined
            if (equipmentId === null || equipmentId === undefined) {
                throw new RequiredError('equipmentId','Required parameter equipmentId was null or undefined when calling apiV1HospitalsHospitalIdEquipmentsEquipmentIdDelete.');
            }
            const localVarPath = `/api/v1/hospitals/{hospitalId}/equipments/{equipmentId}`
                .replace(`{${"hospitalId"}}`, encodeURIComponent(String(hospitalId)))
                .replace(`{${"equipmentId"}}`, encodeURIComponent(String(equipmentId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        GET /api/v1/hospitals/1/equipments/1
         * @summary Get equipment.
         * @param {string} hospitalId 
         * @param {string} equipmentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdEquipmentsEquipmentIdGet(hospitalId: string, equipmentId: string, options: any = {}): RequestArgs {
            // verify required parameter 'hospitalId' is not null or undefined
            if (hospitalId === null || hospitalId === undefined) {
                throw new RequiredError('hospitalId','Required parameter hospitalId was null or undefined when calling apiV1HospitalsHospitalIdEquipmentsEquipmentIdGet.');
            }
            // verify required parameter 'equipmentId' is not null or undefined
            if (equipmentId === null || equipmentId === undefined) {
                throw new RequiredError('equipmentId','Required parameter equipmentId was null or undefined when calling apiV1HospitalsHospitalIdEquipmentsEquipmentIdGet.');
            }
            const localVarPath = `/api/v1/hospitals/{hospitalId}/equipments/{equipmentId}`
                .replace(`{${"hospitalId"}}`, encodeURIComponent(String(hospitalId)))
                .replace(`{${"equipmentId"}}`, encodeURIComponent(String(equipmentId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        PUT /api/v1/hospitals/1/equipments/1      {          \"description\": \"Upgraded medical equipment\"      }
         * @summary Update equipment.
         * @param {string} hospitalId 
         * @param {string} equipmentId 
         * @param {UpdateEquipmentCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdEquipmentsEquipmentIdPut(hospitalId: string, equipmentId: string, body?: UpdateEquipmentCommand, options: any = {}): RequestArgs {
            // verify required parameter 'hospitalId' is not null or undefined
            if (hospitalId === null || hospitalId === undefined) {
                throw new RequiredError('hospitalId','Required parameter hospitalId was null or undefined when calling apiV1HospitalsHospitalIdEquipmentsEquipmentIdPut.');
            }
            // verify required parameter 'equipmentId' is not null or undefined
            if (equipmentId === null || equipmentId === undefined) {
                throw new RequiredError('equipmentId','Required parameter equipmentId was null or undefined when calling apiV1HospitalsHospitalIdEquipmentsEquipmentIdPut.');
            }
            const localVarPath = `/api/v1/hospitals/{hospitalId}/equipments/{equipmentId}`
                .replace(`{${"hospitalId"}}`, encodeURIComponent(String(hospitalId)))
                .replace(`{${"equipmentId"}}`, encodeURIComponent(String(equipmentId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        POST /api/v1/hospitals/1/equipments      {          \"name\": \"Afroasia ltd\",          \"description\": \"Medical equipment\",          \"medias\": [            {              \"mediaType\": 0,              \"url\": \"imageurl\",              \"description\": \"string\",                      \"order\": 0            }          ]      }
         * @summary Create an equipment and add to a hospital.
         * @param {string} hospitalId 
         * @param {CreateEquipmentCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdEquipmentsPost(hospitalId: string, body?: CreateEquipmentCommand, options: any = {}): RequestArgs {
            // verify required parameter 'hospitalId' is not null or undefined
            if (hospitalId === null || hospitalId === undefined) {
                throw new RequiredError('hospitalId','Required parameter hospitalId was null or undefined when calling apiV1HospitalsHospitalIdEquipmentsPost.');
            }
            const localVarPath = `/api/v1/hospitals/{hospitalId}/equipments`
                .replace(`{${"hospitalId"}}`, encodeURIComponent(String(hospitalId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EquipmentsApi - functional programming interface
 * @export
 */
export const EquipmentsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Sample request:        GET /api/v1/hospitals/1/equipments      {          \"pageQueryFilter\": {              \"page\": 1,              \"limit\": 20,              \"lastRetrived\": \"2020-02-05T08:40\"          },          \"searchString\": \"Medical\"      }
         * @summary Get all equipments.
         * @param {string} [id] 
         * @param {string} [name] 
         * @param {string} [description] 
         * @param {string} [hospitalId] 
         * @param {string} [hospitalName] 
         * @param {Date} [created] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {Date} [lastRetrieved] 
         * @param {boolean} [current] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsEquipmentsGet(id?: string, name?: string, description?: string, hospitalId?: string, hospitalName?: string, created?: Date, page?: number, limit?: number, lastRetrieved?: Date, current?: boolean, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EquipmentsViewModel> {
            const localVarAxiosArgs = EquipmentsApiAxiosParamCreator(configuration).apiV1HospitalsEquipmentsGet(id, name, description, hospitalId, hospitalName, created, page, limit, lastRetrieved, current, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        DELETE /api/v1/hospitals/1/equipments/1
         * @summary Delete equipment.
         * @param {string} hospitalId 
         * @param {string} equipmentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdEquipmentsEquipmentIdDelete(hospitalId: string, equipmentId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = EquipmentsApiAxiosParamCreator(configuration).apiV1HospitalsHospitalIdEquipmentsEquipmentIdDelete(hospitalId, equipmentId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        GET /api/v1/hospitals/1/equipments/1
         * @summary Get equipment.
         * @param {string} hospitalId 
         * @param {string} equipmentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdEquipmentsEquipmentIdGet(hospitalId: string, equipmentId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EquipmentViewModel> {
            const localVarAxiosArgs = EquipmentsApiAxiosParamCreator(configuration).apiV1HospitalsHospitalIdEquipmentsEquipmentIdGet(hospitalId, equipmentId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        PUT /api/v1/hospitals/1/equipments/1      {          \"description\": \"Upgraded medical equipment\"      }
         * @summary Update equipment.
         * @param {string} hospitalId 
         * @param {string} equipmentId 
         * @param {UpdateEquipmentCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdEquipmentsEquipmentIdPut(hospitalId: string, equipmentId: string, body?: UpdateEquipmentCommand, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = EquipmentsApiAxiosParamCreator(configuration).apiV1HospitalsHospitalIdEquipmentsEquipmentIdPut(hospitalId, equipmentId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        POST /api/v1/hospitals/1/equipments      {          \"name\": \"Afroasia ltd\",          \"description\": \"Medical equipment\",          \"medias\": [            {              \"mediaType\": 0,              \"url\": \"imageurl\",              \"description\": \"string\",                      \"order\": 0            }          ]      }
         * @summary Create an equipment and add to a hospital.
         * @param {string} hospitalId 
         * @param {CreateEquipmentCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdEquipmentsPost(hospitalId: string, body?: CreateEquipmentCommand, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string> {
            const localVarAxiosArgs = EquipmentsApiAxiosParamCreator(configuration).apiV1HospitalsHospitalIdEquipmentsPost(hospitalId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * EquipmentsApi - factory interface
 * @export
 */
export const EquipmentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Sample request:        GET /api/v1/hospitals/1/equipments      {          \"pageQueryFilter\": {              \"page\": 1,              \"limit\": 20,              \"lastRetrived\": \"2020-02-05T08:40\"          },          \"searchString\": \"Medical\"      }
         * @summary Get all equipments.
         * @param {string} [id] 
         * @param {string} [name] 
         * @param {string} [description] 
         * @param {string} [hospitalId] 
         * @param {string} [hospitalName] 
         * @param {Date} [created] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {Date} [lastRetrieved] 
         * @param {boolean} [current] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsEquipmentsGet(id?: string, name?: string, description?: string, hospitalId?: string, hospitalName?: string, created?: Date, page?: number, limit?: number, lastRetrieved?: Date, current?: boolean, options?: any): AxiosPromise<EquipmentsViewModel> {
            return EquipmentsApiFp(configuration).apiV1HospitalsEquipmentsGet(id, name, description, hospitalId, hospitalName, created, page, limit, lastRetrieved, current, options)(axios, basePath);
        },
        /**
         * Sample request:        DELETE /api/v1/hospitals/1/equipments/1
         * @summary Delete equipment.
         * @param {string} hospitalId 
         * @param {string} equipmentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdEquipmentsEquipmentIdDelete(hospitalId: string, equipmentId: string, options?: any): AxiosPromise<boolean> {
            return EquipmentsApiFp(configuration).apiV1HospitalsHospitalIdEquipmentsEquipmentIdDelete(hospitalId, equipmentId, options)(axios, basePath);
        },
        /**
         * Sample request:        GET /api/v1/hospitals/1/equipments/1
         * @summary Get equipment.
         * @param {string} hospitalId 
         * @param {string} equipmentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdEquipmentsEquipmentIdGet(hospitalId: string, equipmentId: string, options?: any): AxiosPromise<EquipmentViewModel> {
            return EquipmentsApiFp(configuration).apiV1HospitalsHospitalIdEquipmentsEquipmentIdGet(hospitalId, equipmentId, options)(axios, basePath);
        },
        /**
         * Sample request:        PUT /api/v1/hospitals/1/equipments/1      {          \"description\": \"Upgraded medical equipment\"      }
         * @summary Update equipment.
         * @param {string} hospitalId 
         * @param {string} equipmentId 
         * @param {UpdateEquipmentCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdEquipmentsEquipmentIdPut(hospitalId: string, equipmentId: string, body?: UpdateEquipmentCommand, options?: any): AxiosPromise<boolean> {
            return EquipmentsApiFp(configuration).apiV1HospitalsHospitalIdEquipmentsEquipmentIdPut(hospitalId, equipmentId, body, options)(axios, basePath);
        },
        /**
         * Sample request:        POST /api/v1/hospitals/1/equipments      {          \"name\": \"Afroasia ltd\",          \"description\": \"Medical equipment\",          \"medias\": [            {              \"mediaType\": 0,              \"url\": \"imageurl\",              \"description\": \"string\",                      \"order\": 0            }          ]      }
         * @summary Create an equipment and add to a hospital.
         * @param {string} hospitalId 
         * @param {CreateEquipmentCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdEquipmentsPost(hospitalId: string, body?: CreateEquipmentCommand, options?: any): AxiosPromise<string> {
            return EquipmentsApiFp(configuration).apiV1HospitalsHospitalIdEquipmentsPost(hospitalId, body, options)(axios, basePath);
        },
    };
};

/**
 * EquipmentsApi - object-oriented interface
 * @export
 * @class EquipmentsApi
 * @extends {BaseAPI}
 */
export class EquipmentsApi extends BaseAPI {
    /**
     * Sample request:        GET /api/v1/hospitals/1/equipments      {          \"pageQueryFilter\": {              \"page\": 1,              \"limit\": 20,              \"lastRetrived\": \"2020-02-05T08:40\"          },          \"searchString\": \"Medical\"      }
     * @summary Get all equipments.
     * @param {string} [id] 
     * @param {string} [name] 
     * @param {string} [description] 
     * @param {string} [hospitalId] 
     * @param {string} [hospitalName] 
     * @param {Date} [created] 
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {Date} [lastRetrieved] 
     * @param {boolean} [current] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EquipmentsApi
     */
    public apiV1HospitalsEquipmentsGet(id?: string, name?: string, description?: string, hospitalId?: string, hospitalName?: string, created?: Date, page?: number, limit?: number, lastRetrieved?: Date, current?: boolean, options?: any) {
        return EquipmentsApiFp(this.configuration).apiV1HospitalsEquipmentsGet(id, name, description, hospitalId, hospitalName, created, page, limit, lastRetrieved, current, options)(this.axios, this.basePath);
    }

    /**
     * Sample request:        DELETE /api/v1/hospitals/1/equipments/1
     * @summary Delete equipment.
     * @param {string} hospitalId 
     * @param {string} equipmentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EquipmentsApi
     */
    public apiV1HospitalsHospitalIdEquipmentsEquipmentIdDelete(hospitalId: string, equipmentId: string, options?: any) {
        return EquipmentsApiFp(this.configuration).apiV1HospitalsHospitalIdEquipmentsEquipmentIdDelete(hospitalId, equipmentId, options)(this.axios, this.basePath);
    }

    /**
     * Sample request:        GET /api/v1/hospitals/1/equipments/1
     * @summary Get equipment.
     * @param {string} hospitalId 
     * @param {string} equipmentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EquipmentsApi
     */
    public apiV1HospitalsHospitalIdEquipmentsEquipmentIdGet(hospitalId: string, equipmentId: string, options?: any) {
        return EquipmentsApiFp(this.configuration).apiV1HospitalsHospitalIdEquipmentsEquipmentIdGet(hospitalId, equipmentId, options)(this.axios, this.basePath);
    }

    /**
     * Sample request:        PUT /api/v1/hospitals/1/equipments/1      {          \"description\": \"Upgraded medical equipment\"      }
     * @summary Update equipment.
     * @param {string} hospitalId 
     * @param {string} equipmentId 
     * @param {UpdateEquipmentCommand} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EquipmentsApi
     */
    public apiV1HospitalsHospitalIdEquipmentsEquipmentIdPut(hospitalId: string, equipmentId: string, body?: UpdateEquipmentCommand, options?: any) {
        return EquipmentsApiFp(this.configuration).apiV1HospitalsHospitalIdEquipmentsEquipmentIdPut(hospitalId, equipmentId, body, options)(this.axios, this.basePath);
    }

    /**
     * Sample request:        POST /api/v1/hospitals/1/equipments      {          \"name\": \"Afroasia ltd\",          \"description\": \"Medical equipment\",          \"medias\": [            {              \"mediaType\": 0,              \"url\": \"imageurl\",              \"description\": \"string\",                      \"order\": 0            }          ]      }
     * @summary Create an equipment and add to a hospital.
     * @param {string} hospitalId 
     * @param {CreateEquipmentCommand} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EquipmentsApi
     */
    public apiV1HospitalsHospitalIdEquipmentsPost(hospitalId: string, body?: CreateEquipmentCommand, options?: any) {
        return EquipmentsApiFp(this.configuration).apiV1HospitalsHospitalIdEquipmentsPost(hospitalId, body, options)(this.axios, this.basePath);
    }

}


/**
 * HospitalReviewsApi - axios parameter creator
 * @export
 */
export const HospitalReviewsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Sample request:        DELETE /api/v1/hospitals/1/reviews/1
         * @summary Delete review.
         * @param {string} hospitalId 
         * @param {string} patientId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdReviewsPatientIdDelete(hospitalId: string, patientId: string, options: any = {}): RequestArgs {
            // verify required parameter 'hospitalId' is not null or undefined
            if (hospitalId === null || hospitalId === undefined) {
                throw new RequiredError('hospitalId','Required parameter hospitalId was null or undefined when calling apiV1HospitalsHospitalIdReviewsPatientIdDelete.');
            }
            // verify required parameter 'patientId' is not null or undefined
            if (patientId === null || patientId === undefined) {
                throw new RequiredError('patientId','Required parameter patientId was null or undefined when calling apiV1HospitalsHospitalIdReviewsPatientIdDelete.');
            }
            const localVarPath = `/api/v1/hospitals/{hospitalId}/reviews/{patientId}`
                .replace(`{${"hospitalId"}}`, encodeURIComponent(String(hospitalId)))
                .replace(`{${"patientId"}}`, encodeURIComponent(String(patientId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        GET /api/v1/hospitals/1/reviews/1
         * @summary Get review.
         * @param {string} hospitalId 
         * @param {string} patientId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdReviewsPatientIdGet(hospitalId: string, patientId: string, options: any = {}): RequestArgs {
            // verify required parameter 'hospitalId' is not null or undefined
            if (hospitalId === null || hospitalId === undefined) {
                throw new RequiredError('hospitalId','Required parameter hospitalId was null or undefined when calling apiV1HospitalsHospitalIdReviewsPatientIdGet.');
            }
            // verify required parameter 'patientId' is not null or undefined
            if (patientId === null || patientId === undefined) {
                throw new RequiredError('patientId','Required parameter patientId was null or undefined when calling apiV1HospitalsHospitalIdReviewsPatientIdGet.');
            }
            const localVarPath = `/api/v1/hospitals/{hospitalId}/reviews/{patientId}`
                .replace(`{${"hospitalId"}}`, encodeURIComponent(String(hospitalId)))
                .replace(`{${"patientId"}}`, encodeURIComponent(String(patientId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:
         * @summary Update review.
         * @param {string} hospitalId 
         * @param {string} patientId 
         * @param {UpdateHospitalReviewCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdReviewsPatientIdPut(hospitalId: string, patientId: string, body?: UpdateHospitalReviewCommand, options: any = {}): RequestArgs {
            // verify required parameter 'hospitalId' is not null or undefined
            if (hospitalId === null || hospitalId === undefined) {
                throw new RequiredError('hospitalId','Required parameter hospitalId was null or undefined when calling apiV1HospitalsHospitalIdReviewsPatientIdPut.');
            }
            // verify required parameter 'patientId' is not null or undefined
            if (patientId === null || patientId === undefined) {
                throw new RequiredError('patientId','Required parameter patientId was null or undefined when calling apiV1HospitalsHospitalIdReviewsPatientIdPut.');
            }
            const localVarPath = `/api/v1/hospitals/{hospitalId}/reviews/{patientId}`
                .replace(`{${"hospitalId"}}`, encodeURIComponent(String(hospitalId)))
                .replace(`{${"patientId"}}`, encodeURIComponent(String(patientId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        POST /api/v1/hospitals/1/reviews/1
         * @summary Create review.
         * @param {string} hospitalId 
         * @param {string} patientId 
         * @param {CreateHospitalReviewCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdReviewsPost(hospitalId: string, patientId: string, body?: CreateHospitalReviewCommand, options: any = {}): RequestArgs {
            // verify required parameter 'hospitalId' is not null or undefined
            if (hospitalId === null || hospitalId === undefined) {
                throw new RequiredError('hospitalId','Required parameter hospitalId was null or undefined when calling apiV1HospitalsHospitalIdReviewsPost.');
            }
            // verify required parameter 'patientId' is not null or undefined
            if (patientId === null || patientId === undefined) {
                throw new RequiredError('patientId','Required parameter patientId was null or undefined when calling apiV1HospitalsHospitalIdReviewsPost.');
            }
            const localVarPath = `/api/v1/hospitals/{hospitalId}/reviews`
                .replace(`{${"hospitalId"}}`, encodeURIComponent(String(hospitalId)))
                .replace(`{${"patientId"}}`, encodeURIComponent(String(patientId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        GET /api/v1/hospitals/reviews
         * @summary Get all reviews.
         * @param {string} [patientId] 
         * @param {string} [patientName] 
         * @param {string} [hospitalId] 
         * @param {string} [hospitalName] 
         * @param {string} [body] 
         * @param {boolean} [recommended] 
         * @param {object} [reviewCategory] 
         * @param {number} [rate] 
         * @param {Date} [created] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {Date} [lastRetrieved] 
         * @param {boolean} [current] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsReviewsGet(patientId?: string, patientName?: string, hospitalId?: string, hospitalName?: string, body?: string, recommended?: boolean, reviewCategory?: object, rate?: number, created?: Date, page?: number, limit?: number, lastRetrieved?: Date, current?: boolean, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/hospitals/reviews`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (patientId !== undefined) {
                localVarQueryParameter['PatientId'] = patientId;
            }

            if (patientName !== undefined) {
                localVarQueryParameter['PatientName'] = patientName;
            }

            if (hospitalId !== undefined) {
                localVarQueryParameter['HospitalId'] = hospitalId;
            }

            if (hospitalName !== undefined) {
                localVarQueryParameter['HospitalName'] = hospitalName;
            }

            if (body !== undefined) {
                localVarQueryParameter['Body'] = body;
            }

            if (recommended !== undefined) {
                localVarQueryParameter['Recommended'] = recommended;
            }

            if (reviewCategory !== undefined) {
                localVarQueryParameter['ReviewCategory'] = reviewCategory;
            }

            if (rate !== undefined) {
                localVarQueryParameter['Rate'] = rate;
            }

            if (created !== undefined) {
                localVarQueryParameter['Created'] = (created as any instanceof Date) ?
                    (created as any).toISOString() :
                    created;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (lastRetrieved !== undefined) {
                localVarQueryParameter['lastRetrieved'] = (lastRetrieved as any instanceof Date) ?
                    (lastRetrieved as any).toISOString() :
                    lastRetrieved;
            }

            if (current !== undefined) {
                localVarQueryParameter['Current'] = current;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HospitalReviewsApi - functional programming interface
 * @export
 */
export const HospitalReviewsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Sample request:        DELETE /api/v1/hospitals/1/reviews/1
         * @summary Delete review.
         * @param {string} hospitalId 
         * @param {string} patientId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdReviewsPatientIdDelete(hospitalId: string, patientId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = HospitalReviewsApiAxiosParamCreator(configuration).apiV1HospitalsHospitalIdReviewsPatientIdDelete(hospitalId, patientId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        GET /api/v1/hospitals/1/reviews/1
         * @summary Get review.
         * @param {string} hospitalId 
         * @param {string} patientId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdReviewsPatientIdGet(hospitalId: string, patientId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<HospitalReviewViewModel> {
            const localVarAxiosArgs = HospitalReviewsApiAxiosParamCreator(configuration).apiV1HospitalsHospitalIdReviewsPatientIdGet(hospitalId, patientId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:
         * @summary Update review.
         * @param {string} hospitalId 
         * @param {string} patientId 
         * @param {UpdateHospitalReviewCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdReviewsPatientIdPut(hospitalId: string, patientId: string, body?: UpdateHospitalReviewCommand, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = HospitalReviewsApiAxiosParamCreator(configuration).apiV1HospitalsHospitalIdReviewsPatientIdPut(hospitalId, patientId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        POST /api/v1/hospitals/1/reviews/1
         * @summary Create review.
         * @param {string} hospitalId 
         * @param {string} patientId 
         * @param {CreateHospitalReviewCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdReviewsPost(hospitalId: string, patientId: string, body?: CreateHospitalReviewCommand, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<HospitalReview> {
            const localVarAxiosArgs = HospitalReviewsApiAxiosParamCreator(configuration).apiV1HospitalsHospitalIdReviewsPost(hospitalId, patientId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        GET /api/v1/hospitals/reviews
         * @summary Get all reviews.
         * @param {string} [patientId] 
         * @param {string} [patientName] 
         * @param {string} [hospitalId] 
         * @param {string} [hospitalName] 
         * @param {string} [body] 
         * @param {boolean} [recommended] 
         * @param {object} [reviewCategory] 
         * @param {number} [rate] 
         * @param {Date} [created] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {Date} [lastRetrieved] 
         * @param {boolean} [current] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsReviewsGet(patientId?: string, patientName?: string, hospitalId?: string, hospitalName?: string, body?: string, recommended?: boolean, reviewCategory?: object, rate?: number, created?: Date, page?: number, limit?: number, lastRetrieved?: Date, current?: boolean, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<HospitalReviewsViewModel> {
            const localVarAxiosArgs = HospitalReviewsApiAxiosParamCreator(configuration).apiV1HospitalsReviewsGet(patientId, patientName, hospitalId, hospitalName, body, recommended, reviewCategory, rate, created, page, limit, lastRetrieved, current, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * HospitalReviewsApi - factory interface
 * @export
 */
export const HospitalReviewsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Sample request:        DELETE /api/v1/hospitals/1/reviews/1
         * @summary Delete review.
         * @param {string} hospitalId 
         * @param {string} patientId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdReviewsPatientIdDelete(hospitalId: string, patientId: string, options?: any): AxiosPromise<boolean> {
            return HospitalReviewsApiFp(configuration).apiV1HospitalsHospitalIdReviewsPatientIdDelete(hospitalId, patientId, options)(axios, basePath);
        },
        /**
         * Sample request:        GET /api/v1/hospitals/1/reviews/1
         * @summary Get review.
         * @param {string} hospitalId 
         * @param {string} patientId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdReviewsPatientIdGet(hospitalId: string, patientId: string, options?: any): AxiosPromise<HospitalReviewViewModel> {
            return HospitalReviewsApiFp(configuration).apiV1HospitalsHospitalIdReviewsPatientIdGet(hospitalId, patientId, options)(axios, basePath);
        },
        /**
         * Sample request:
         * @summary Update review.
         * @param {string} hospitalId 
         * @param {string} patientId 
         * @param {UpdateHospitalReviewCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdReviewsPatientIdPut(hospitalId: string, patientId: string, body?: UpdateHospitalReviewCommand, options?: any): AxiosPromise<boolean> {
            return HospitalReviewsApiFp(configuration).apiV1HospitalsHospitalIdReviewsPatientIdPut(hospitalId, patientId, body, options)(axios, basePath);
        },
        /**
         * Sample request:        POST /api/v1/hospitals/1/reviews/1
         * @summary Create review.
         * @param {string} hospitalId 
         * @param {string} patientId 
         * @param {CreateHospitalReviewCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdReviewsPost(hospitalId: string, patientId: string, body?: CreateHospitalReviewCommand, options?: any): AxiosPromise<HospitalReview> {
            return HospitalReviewsApiFp(configuration).apiV1HospitalsHospitalIdReviewsPost(hospitalId, patientId, body, options)(axios, basePath);
        },
        /**
         * Sample request:        GET /api/v1/hospitals/reviews
         * @summary Get all reviews.
         * @param {string} [patientId] 
         * @param {string} [patientName] 
         * @param {string} [hospitalId] 
         * @param {string} [hospitalName] 
         * @param {string} [body] 
         * @param {boolean} [recommended] 
         * @param {object} [reviewCategory] 
         * @param {number} [rate] 
         * @param {Date} [created] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {Date} [lastRetrieved] 
         * @param {boolean} [current] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsReviewsGet(patientId?: string, patientName?: string, hospitalId?: string, hospitalName?: string, body?: string, recommended?: boolean, reviewCategory?: object, rate?: number, created?: Date, page?: number, limit?: number, lastRetrieved?: Date, current?: boolean, options?: any): AxiosPromise<HospitalReviewsViewModel> {
            return HospitalReviewsApiFp(configuration).apiV1HospitalsReviewsGet(patientId, patientName, hospitalId, hospitalName, body, recommended, reviewCategory, rate, created, page, limit, lastRetrieved, current, options)(axios, basePath);
        },
    };
};

/**
 * HospitalReviewsApi - object-oriented interface
 * @export
 * @class HospitalReviewsApi
 * @extends {BaseAPI}
 */
export class HospitalReviewsApi extends BaseAPI {
    /**
     * Sample request:        DELETE /api/v1/hospitals/1/reviews/1
     * @summary Delete review.
     * @param {string} hospitalId 
     * @param {string} patientId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HospitalReviewsApi
     */
    public apiV1HospitalsHospitalIdReviewsPatientIdDelete(hospitalId: string, patientId: string, options?: any) {
        return HospitalReviewsApiFp(this.configuration).apiV1HospitalsHospitalIdReviewsPatientIdDelete(hospitalId, patientId, options)(this.axios, this.basePath);
    }

    /**
     * Sample request:        GET /api/v1/hospitals/1/reviews/1
     * @summary Get review.
     * @param {string} hospitalId 
     * @param {string} patientId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HospitalReviewsApi
     */
    public apiV1HospitalsHospitalIdReviewsPatientIdGet(hospitalId: string, patientId: string, options?: any) {
        return HospitalReviewsApiFp(this.configuration).apiV1HospitalsHospitalIdReviewsPatientIdGet(hospitalId, patientId, options)(this.axios, this.basePath);
    }

    /**
     * Sample request:
     * @summary Update review.
     * @param {string} hospitalId 
     * @param {string} patientId 
     * @param {UpdateHospitalReviewCommand} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HospitalReviewsApi
     */
    public apiV1HospitalsHospitalIdReviewsPatientIdPut(hospitalId: string, patientId: string, body?: UpdateHospitalReviewCommand, options?: any) {
        return HospitalReviewsApiFp(this.configuration).apiV1HospitalsHospitalIdReviewsPatientIdPut(hospitalId, patientId, body, options)(this.axios, this.basePath);
    }

    /**
     * Sample request:        POST /api/v1/hospitals/1/reviews/1
     * @summary Create review.
     * @param {string} hospitalId 
     * @param {string} patientId 
     * @param {CreateHospitalReviewCommand} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HospitalReviewsApi
     */
    public apiV1HospitalsHospitalIdReviewsPost(hospitalId: string, patientId: string, body?: CreateHospitalReviewCommand, options?: any) {
        return HospitalReviewsApiFp(this.configuration).apiV1HospitalsHospitalIdReviewsPost(hospitalId, patientId, body, options)(this.axios, this.basePath);
    }

    /**
     * Sample request:        GET /api/v1/hospitals/reviews
     * @summary Get all reviews.
     * @param {string} [patientId] 
     * @param {string} [patientName] 
     * @param {string} [hospitalId] 
     * @param {string} [hospitalName] 
     * @param {string} [body] 
     * @param {boolean} [recommended] 
     * @param {object} [reviewCategory] 
     * @param {number} [rate] 
     * @param {Date} [created] 
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {Date} [lastRetrieved] 
     * @param {boolean} [current] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HospitalReviewsApi
     */
    public apiV1HospitalsReviewsGet(patientId?: string, patientName?: string, hospitalId?: string, hospitalName?: string, body?: string, recommended?: boolean, reviewCategory?: object, rate?: number, created?: Date, page?: number, limit?: number, lastRetrieved?: Date, current?: boolean, options?: any) {
        return HospitalReviewsApiFp(this.configuration).apiV1HospitalsReviewsGet(patientId, patientName, hospitalId, hospitalName, body, recommended, reviewCategory, rate, created, page, limit, lastRetrieved, current, options)(this.axios, this.basePath);
    }

}


/**
 * HospitalSpecialtiesApi - axios parameter creator
 * @export
 */
export const HospitalSpecialtiesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Sample request:        DELETE /api/v1/hospitals/1/specialties/1
         * @summary Delete hospitalSpecialty.
         * @param {string} hospitalId 
         * @param {string} specialtyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdDelete(hospitalId: string, specialtyId: string, options: any = {}): RequestArgs {
            // verify required parameter 'hospitalId' is not null or undefined
            if (hospitalId === null || hospitalId === undefined) {
                throw new RequiredError('hospitalId','Required parameter hospitalId was null or undefined when calling apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdDelete.');
            }
            // verify required parameter 'specialtyId' is not null or undefined
            if (specialtyId === null || specialtyId === undefined) {
                throw new RequiredError('specialtyId','Required parameter specialtyId was null or undefined when calling apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdDelete.');
            }
            const localVarPath = `/api/v1/hospitals/{hospitalId}/specialties/{specialtyId}`
                .replace(`{${"hospitalId"}}`, encodeURIComponent(String(hospitalId)))
                .replace(`{${"specialtyId"}}`, encodeURIComponent(String(specialtyId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        POST /api/v1/hospitals/1/specialties/1
         * @summary Create hospitalSpecialty.
         * @param {string} hospitalId 
         * @param {string} specialtyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdPost(hospitalId: string, specialtyId: string, options: any = {}): RequestArgs {
            // verify required parameter 'hospitalId' is not null or undefined
            if (hospitalId === null || hospitalId === undefined) {
                throw new RequiredError('hospitalId','Required parameter hospitalId was null or undefined when calling apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdPost.');
            }
            // verify required parameter 'specialtyId' is not null or undefined
            if (specialtyId === null || specialtyId === undefined) {
                throw new RequiredError('specialtyId','Required parameter specialtyId was null or undefined when calling apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdPost.');
            }
            const localVarPath = `/api/v1/hospitals/{hospitalId}/specialties/{specialtyId}`
                .replace(`{${"hospitalId"}}`, encodeURIComponent(String(hospitalId)))
                .replace(`{${"specialtyId"}}`, encodeURIComponent(String(specialtyId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        PUT /api/v1/hospitals/1/specialtysequence      {          \"specialtyType\": \"Endocrinology\",          \"hospitalSpecialtySequence\": [14, 30, 5, 7]      }
         * @summary Update hospitalSpecialty sequence.
         * @param {string} hospitalId 
         * @param {string} specialtyTypeId 
         * @param {UpdateHospitalSpecialtySequenceCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdSpecialtysequencePut(hospitalId: string, specialtyTypeId: string, body?: UpdateHospitalSpecialtySequenceCommand, options: any = {}): RequestArgs {
            // verify required parameter 'hospitalId' is not null or undefined
            if (hospitalId === null || hospitalId === undefined) {
                throw new RequiredError('hospitalId','Required parameter hospitalId was null or undefined when calling apiV1HospitalsHospitalIdSpecialtysequencePut.');
            }
            // verify required parameter 'specialtyTypeId' is not null or undefined
            if (specialtyTypeId === null || specialtyTypeId === undefined) {
                throw new RequiredError('specialtyTypeId','Required parameter specialtyTypeId was null or undefined when calling apiV1HospitalsHospitalIdSpecialtysequencePut.');
            }
            const localVarPath = `/api/v1/hospitals/{hospitalId}/specialtysequence`
                .replace(`{${"hospitalId"}}`, encodeURIComponent(String(hospitalId)))
                .replace(`{${"SpecialtyTypeId"}}`, encodeURIComponent(String(specialtyTypeId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        GET /api/v1/hospitals/specialties
         * @summary Get all hospitalSpecialties.
         * @param {string} [hospitalId] 
         * @param {string} [hospitalName] 
         * @param {string} [specialtyId] 
         * @param {string} [specialtyName] 
         * @param {string} [specialtyTypeId] 
         * @param {object} [marketingType] 
         * @param {Date} [created] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {Date} [lastRetrieved] 
         * @param {boolean} [current] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsSpecialtiesGet(hospitalId?: string, hospitalName?: string, specialtyId?: string, specialtyName?: string, specialtyTypeId?: string, marketingType?: object, created?: Date, page?: number, limit?: number, lastRetrieved?: Date, current?: boolean, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/hospitals/specialties`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (hospitalId !== undefined) {
                localVarQueryParameter['HospitalId'] = hospitalId;
            }

            if (hospitalName !== undefined) {
                localVarQueryParameter['HospitalName'] = hospitalName;
            }

            if (specialtyId !== undefined) {
                localVarQueryParameter['SpecialtyId'] = specialtyId;
            }

            if (specialtyName !== undefined) {
                localVarQueryParameter['SpecialtyName'] = specialtyName;
            }

            if (specialtyTypeId !== undefined) {
                localVarQueryParameter['SpecialtyTypeId'] = specialtyTypeId;
            }

            if (marketingType !== undefined) {
                localVarQueryParameter['MarketingType'] = marketingType;
            }

            if (created !== undefined) {
                localVarQueryParameter['Created'] = (created as any instanceof Date) ?
                    (created as any).toISOString() :
                    created;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (lastRetrieved !== undefined) {
                localVarQueryParameter['lastRetrieved'] = (lastRetrieved as any instanceof Date) ?
                    (lastRetrieved as any).toISOString() :
                    lastRetrieved;
            }

            if (current !== undefined) {
                localVarQueryParameter['Current'] = current;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HospitalSpecialtiesApi - functional programming interface
 * @export
 */
export const HospitalSpecialtiesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Sample request:        DELETE /api/v1/hospitals/1/specialties/1
         * @summary Delete hospitalSpecialty.
         * @param {string} hospitalId 
         * @param {string} specialtyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdDelete(hospitalId: string, specialtyId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = HospitalSpecialtiesApiAxiosParamCreator(configuration).apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdDelete(hospitalId, specialtyId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        POST /api/v1/hospitals/1/specialties/1
         * @summary Create hospitalSpecialty.
         * @param {string} hospitalId 
         * @param {string} specialtyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdPost(hospitalId: string, specialtyId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<HospitalSpecialtyViewModel> {
            const localVarAxiosArgs = HospitalSpecialtiesApiAxiosParamCreator(configuration).apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdPost(hospitalId, specialtyId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        PUT /api/v1/hospitals/1/specialtysequence      {          \"specialtyType\": \"Endocrinology\",          \"hospitalSpecialtySequence\": [14, 30, 5, 7]      }
         * @summary Update hospitalSpecialty sequence.
         * @param {string} hospitalId 
         * @param {string} specialtyTypeId 
         * @param {UpdateHospitalSpecialtySequenceCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdSpecialtysequencePut(hospitalId: string, specialtyTypeId: string, body?: UpdateHospitalSpecialtySequenceCommand, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = HospitalSpecialtiesApiAxiosParamCreator(configuration).apiV1HospitalsHospitalIdSpecialtysequencePut(hospitalId, specialtyTypeId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        GET /api/v1/hospitals/specialties
         * @summary Get all hospitalSpecialties.
         * @param {string} [hospitalId] 
         * @param {string} [hospitalName] 
         * @param {string} [specialtyId] 
         * @param {string} [specialtyName] 
         * @param {string} [specialtyTypeId] 
         * @param {object} [marketingType] 
         * @param {Date} [created] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {Date} [lastRetrieved] 
         * @param {boolean} [current] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsSpecialtiesGet(hospitalId?: string, hospitalName?: string, specialtyId?: string, specialtyName?: string, specialtyTypeId?: string, marketingType?: object, created?: Date, page?: number, limit?: number, lastRetrieved?: Date, current?: boolean, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<HospitalSpecialtiesViewModel> {
            const localVarAxiosArgs = HospitalSpecialtiesApiAxiosParamCreator(configuration).apiV1HospitalsSpecialtiesGet(hospitalId, hospitalName, specialtyId, specialtyName, specialtyTypeId, marketingType, created, page, limit, lastRetrieved, current, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * HospitalSpecialtiesApi - factory interface
 * @export
 */
export const HospitalSpecialtiesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Sample request:        DELETE /api/v1/hospitals/1/specialties/1
         * @summary Delete hospitalSpecialty.
         * @param {string} hospitalId 
         * @param {string} specialtyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdDelete(hospitalId: string, specialtyId: string, options?: any): AxiosPromise<boolean> {
            return HospitalSpecialtiesApiFp(configuration).apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdDelete(hospitalId, specialtyId, options)(axios, basePath);
        },
        /**
         * Sample request:        POST /api/v1/hospitals/1/specialties/1
         * @summary Create hospitalSpecialty.
         * @param {string} hospitalId 
         * @param {string} specialtyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdPost(hospitalId: string, specialtyId: string, options?: any): AxiosPromise<HospitalSpecialtyViewModel> {
            return HospitalSpecialtiesApiFp(configuration).apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdPost(hospitalId, specialtyId, options)(axios, basePath);
        },
        /**
         * Sample request:        PUT /api/v1/hospitals/1/specialtysequence      {          \"specialtyType\": \"Endocrinology\",          \"hospitalSpecialtySequence\": [14, 30, 5, 7]      }
         * @summary Update hospitalSpecialty sequence.
         * @param {string} hospitalId 
         * @param {string} specialtyTypeId 
         * @param {UpdateHospitalSpecialtySequenceCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdSpecialtysequencePut(hospitalId: string, specialtyTypeId: string, body?: UpdateHospitalSpecialtySequenceCommand, options?: any): AxiosPromise<boolean> {
            return HospitalSpecialtiesApiFp(configuration).apiV1HospitalsHospitalIdSpecialtysequencePut(hospitalId, specialtyTypeId, body, options)(axios, basePath);
        },
        /**
         * Sample request:        GET /api/v1/hospitals/specialties
         * @summary Get all hospitalSpecialties.
         * @param {string} [hospitalId] 
         * @param {string} [hospitalName] 
         * @param {string} [specialtyId] 
         * @param {string} [specialtyName] 
         * @param {string} [specialtyTypeId] 
         * @param {object} [marketingType] 
         * @param {Date} [created] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {Date} [lastRetrieved] 
         * @param {boolean} [current] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsSpecialtiesGet(hospitalId?: string, hospitalName?: string, specialtyId?: string, specialtyName?: string, specialtyTypeId?: string, marketingType?: object, created?: Date, page?: number, limit?: number, lastRetrieved?: Date, current?: boolean, options?: any): AxiosPromise<HospitalSpecialtiesViewModel> {
            return HospitalSpecialtiesApiFp(configuration).apiV1HospitalsSpecialtiesGet(hospitalId, hospitalName, specialtyId, specialtyName, specialtyTypeId, marketingType, created, page, limit, lastRetrieved, current, options)(axios, basePath);
        },
    };
};

/**
 * HospitalSpecialtiesApi - object-oriented interface
 * @export
 * @class HospitalSpecialtiesApi
 * @extends {BaseAPI}
 */
export class HospitalSpecialtiesApi extends BaseAPI {
    /**
     * Sample request:        DELETE /api/v1/hospitals/1/specialties/1
     * @summary Delete hospitalSpecialty.
     * @param {string} hospitalId 
     * @param {string} specialtyId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HospitalSpecialtiesApi
     */
    public apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdDelete(hospitalId: string, specialtyId: string, options?: any) {
        return HospitalSpecialtiesApiFp(this.configuration).apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdDelete(hospitalId, specialtyId, options)(this.axios, this.basePath);
    }

    /**
     * Sample request:        POST /api/v1/hospitals/1/specialties/1
     * @summary Create hospitalSpecialty.
     * @param {string} hospitalId 
     * @param {string} specialtyId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HospitalSpecialtiesApi
     */
    public apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdPost(hospitalId: string, specialtyId: string, options?: any) {
        return HospitalSpecialtiesApiFp(this.configuration).apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdPost(hospitalId, specialtyId, options)(this.axios, this.basePath);
    }

    /**
     * Sample request:        PUT /api/v1/hospitals/1/specialtysequence      {          \"specialtyType\": \"Endocrinology\",          \"hospitalSpecialtySequence\": [14, 30, 5, 7]      }
     * @summary Update hospitalSpecialty sequence.
     * @param {string} hospitalId 
     * @param {string} specialtyTypeId 
     * @param {UpdateHospitalSpecialtySequenceCommand} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HospitalSpecialtiesApi
     */
    public apiV1HospitalsHospitalIdSpecialtysequencePut(hospitalId: string, specialtyTypeId: string, body?: UpdateHospitalSpecialtySequenceCommand, options?: any) {
        return HospitalSpecialtiesApiFp(this.configuration).apiV1HospitalsHospitalIdSpecialtysequencePut(hospitalId, specialtyTypeId, body, options)(this.axios, this.basePath);
    }

    /**
     * Sample request:        GET /api/v1/hospitals/specialties
     * @summary Get all hospitalSpecialties.
     * @param {string} [hospitalId] 
     * @param {string} [hospitalName] 
     * @param {string} [specialtyId] 
     * @param {string} [specialtyName] 
     * @param {string} [specialtyTypeId] 
     * @param {object} [marketingType] 
     * @param {Date} [created] 
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {Date} [lastRetrieved] 
     * @param {boolean} [current] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HospitalSpecialtiesApi
     */
    public apiV1HospitalsSpecialtiesGet(hospitalId?: string, hospitalName?: string, specialtyId?: string, specialtyName?: string, specialtyTypeId?: string, marketingType?: object, created?: Date, page?: number, limit?: number, lastRetrieved?: Date, current?: boolean, options?: any) {
        return HospitalSpecialtiesApiFp(this.configuration).apiV1HospitalsSpecialtiesGet(hospitalId, hospitalName, specialtyId, specialtyName, specialtyTypeId, marketingType, created, page, limit, lastRetrieved, current, options)(this.axios, this.basePath);
    }

}


/**
 * HospitalsApi - axios parameter creator
 * @export
 */
export const HospitalsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Sample request:        GET /api/v1/hospitals      {          \"pageQueryFilter\": {              \"page\": 1,              \"limit\": 20,              \"lastRetrived\": \"2020-02-05T08:40\"          },          \"searchString\": \"Samsung\"      }
         * @summary Get all hospitals.
         * @param {string} [id] 
         * @param {string} [name] 
         * @param {string} [description] 
         * @param {string} [countryId] 
         * @param {Date} [created] 
         * @param {object} [marketingType] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {Date} [lastRetrieved] 
         * @param {boolean} [current] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsGet(id?: string, name?: string, description?: string, countryId?: string, created?: Date, marketingType?: object, page?: number, limit?: number, lastRetrieved?: Date, current?: boolean, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/hospitals`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }

            if (name !== undefined) {
                localVarQueryParameter['Name'] = name;
            }

            if (description !== undefined) {
                localVarQueryParameter['Description'] = description;
            }

            if (countryId !== undefined) {
                localVarQueryParameter['CountryId'] = countryId;
            }

            if (created !== undefined) {
                localVarQueryParameter['Created'] = (created as any instanceof Date) ?
                    (created as any).toISOString() :
                    created;
            }

            if (marketingType !== undefined) {
                localVarQueryParameter['MarketingType'] = marketingType;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (lastRetrieved !== undefined) {
                localVarQueryParameter['lastRetrieved'] = (lastRetrieved as any instanceof Date) ?
                    (lastRetrieved as any).toISOString() :
                    lastRetrieved;
            }

            if (current !== undefined) {
                localVarQueryParameter['Current'] = current;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        DELETE /api/v1/hospitals/1
         * @summary Delete hospital.
         * @param {string} hospitalId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdDelete(hospitalId: string, options: any = {}): RequestArgs {
            // verify required parameter 'hospitalId' is not null or undefined
            if (hospitalId === null || hospitalId === undefined) {
                throw new RequiredError('hospitalId','Required parameter hospitalId was null or undefined when calling apiV1HospitalsHospitalIdDelete.');
            }
            const localVarPath = `/api/v1/hospitals/{hospitalId}`
                .replace(`{${"hospitalId"}}`, encodeURIComponent(String(hospitalId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        GET /api/v1/hospitals/1
         * @summary Get hospita.
         * @param {string} hospitalId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdGet(hospitalId: string, options: any = {}): RequestArgs {
            // verify required parameter 'hospitalId' is not null or undefined
            if (hospitalId === null || hospitalId === undefined) {
                throw new RequiredError('hospitalId','Required parameter hospitalId was null or undefined when calling apiV1HospitalsHospitalIdGet.');
            }
            const localVarPath = `/api/v1/hospitals/{hospitalId}`
                .replace(`{${"hospitalId"}}`, encodeURIComponent(String(hospitalId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sameple request:        PUT /api/v1/hospitals      {          \"overview\": \"Overview of Samsung Medical Center\",          \"bedsCount\": 2436,          \"operationRoomsCount\": 44,          \"icuBedsCount\": 122,          \"departmentsCount\": 200,          \"medicalStaffCount\": 1200,      }
         * @summary Update hospital.
         * @param {string} hospitalId 
         * @param {UpdateHospitalCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdPut(hospitalId: string, body?: UpdateHospitalCommand, options: any = {}): RequestArgs {
            // verify required parameter 'hospitalId' is not null or undefined
            if (hospitalId === null || hospitalId === undefined) {
                throw new RequiredError('hospitalId','Required parameter hospitalId was null or undefined when calling apiV1HospitalsHospitalIdPut.');
            }
            const localVarPath = `/api/v1/hospitals/{hospitalId}`
                .replace(`{${"hospitalId"}}`, encodeURIComponent(String(hospitalId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        POST /api/v1/hospitals      {          \"name\": \"Samsung Medical Center\",          \"description\": \"Comprehensive Cancer Center in Seoul, South Korea is nationally ranked in 1 adult specialty.\",          \"logo\": \"http://www.samsunghospital.com/home/main/index.do\",          \"overview\": \"Overview of Samsung Medical Center\",          \"bedsCount\": 1436,          \"operationRoomsCount\": 34,          \"icuBedsCount\": 12,          \"departmentsCount\": 20,          \"medicalStaffCount\": 600,          \"countryId\": 1,          \"awards\": [            {              \"name\": \"Award1\",              \"image\": \"string\",              \"date\": \"2020-02-05T09:29:19.240Z\"            },            {              \"name\": \"Award2\",              \"image\": \"string\",              \"date\": \"2020-02-05T09:29:19.240Z\"            }          ],          \"medias\": [            {              \"mediaType\": \"Photo\",              \"url\": \"https://cloudhospitalblob.blob.core.windows.net/imagecontainer/SamsungMedicalCenter.jpg\",              \"thumbnailUrl\": \"https://cloudhospitalblob.blob.core.windows.net/thumbnailcontainer/SamsungMedicalCenter.jpg\",              \"description\": \"string\",              \"order\": 0            },            {              \"mediaType\": \"Video\",              \"url\": \"string\",              \"description\": \"string\",              \"order\": 1            }          ],          \"location\": {            \"latitude\": 37.4881568,            \"longitude\": 127.0855952,            \"country\": \"Korea\",            \"state\": \"string\",            \"county\": \"Gangnamgu\",            \"city\": \"Seoul\",            \"zipCode\": \"12345\",            \"address\": \"Il-won ro 81\"          }      }
         * @summary Create a hospital.
         * @param {CreateHospitalCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsPost(body?: CreateHospitalCommand, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/hospitals`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HospitalsApi - functional programming interface
 * @export
 */
export const HospitalsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Sample request:        GET /api/v1/hospitals      {          \"pageQueryFilter\": {              \"page\": 1,              \"limit\": 20,              \"lastRetrived\": \"2020-02-05T08:40\"          },          \"searchString\": \"Samsung\"      }
         * @summary Get all hospitals.
         * @param {string} [id] 
         * @param {string} [name] 
         * @param {string} [description] 
         * @param {string} [countryId] 
         * @param {Date} [created] 
         * @param {object} [marketingType] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {Date} [lastRetrieved] 
         * @param {boolean} [current] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsGet(id?: string, name?: string, description?: string, countryId?: string, created?: Date, marketingType?: object, page?: number, limit?: number, lastRetrieved?: Date, current?: boolean, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<HospitalsViewModel> {
            const localVarAxiosArgs = HospitalsApiAxiosParamCreator(configuration).apiV1HospitalsGet(id, name, description, countryId, created, marketingType, page, limit, lastRetrieved, current, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        DELETE /api/v1/hospitals/1
         * @summary Delete hospital.
         * @param {string} hospitalId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdDelete(hospitalId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = HospitalsApiAxiosParamCreator(configuration).apiV1HospitalsHospitalIdDelete(hospitalId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        GET /api/v1/hospitals/1
         * @summary Get hospita.
         * @param {string} hospitalId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdGet(hospitalId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<HospitalViewModel> {
            const localVarAxiosArgs = HospitalsApiAxiosParamCreator(configuration).apiV1HospitalsHospitalIdGet(hospitalId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sameple request:        PUT /api/v1/hospitals      {          \"overview\": \"Overview of Samsung Medical Center\",          \"bedsCount\": 2436,          \"operationRoomsCount\": 44,          \"icuBedsCount\": 122,          \"departmentsCount\": 200,          \"medicalStaffCount\": 1200,      }
         * @summary Update hospital.
         * @param {string} hospitalId 
         * @param {UpdateHospitalCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdPut(hospitalId: string, body?: UpdateHospitalCommand, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = HospitalsApiAxiosParamCreator(configuration).apiV1HospitalsHospitalIdPut(hospitalId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        POST /api/v1/hospitals      {          \"name\": \"Samsung Medical Center\",          \"description\": \"Comprehensive Cancer Center in Seoul, South Korea is nationally ranked in 1 adult specialty.\",          \"logo\": \"http://www.samsunghospital.com/home/main/index.do\",          \"overview\": \"Overview of Samsung Medical Center\",          \"bedsCount\": 1436,          \"operationRoomsCount\": 34,          \"icuBedsCount\": 12,          \"departmentsCount\": 20,          \"medicalStaffCount\": 600,          \"countryId\": 1,          \"awards\": [            {              \"name\": \"Award1\",              \"image\": \"string\",              \"date\": \"2020-02-05T09:29:19.240Z\"            },            {              \"name\": \"Award2\",              \"image\": \"string\",              \"date\": \"2020-02-05T09:29:19.240Z\"            }          ],          \"medias\": [            {              \"mediaType\": \"Photo\",              \"url\": \"https://cloudhospitalblob.blob.core.windows.net/imagecontainer/SamsungMedicalCenter.jpg\",              \"thumbnailUrl\": \"https://cloudhospitalblob.blob.core.windows.net/thumbnailcontainer/SamsungMedicalCenter.jpg\",              \"description\": \"string\",              \"order\": 0            },            {              \"mediaType\": \"Video\",              \"url\": \"string\",              \"description\": \"string\",              \"order\": 1            }          ],          \"location\": {            \"latitude\": 37.4881568,            \"longitude\": 127.0855952,            \"country\": \"Korea\",            \"state\": \"string\",            \"county\": \"Gangnamgu\",            \"city\": \"Seoul\",            \"zipCode\": \"12345\",            \"address\": \"Il-won ro 81\"          }      }
         * @summary Create a hospital.
         * @param {CreateHospitalCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsPost(body?: CreateHospitalCommand, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string> {
            const localVarAxiosArgs = HospitalsApiAxiosParamCreator(configuration).apiV1HospitalsPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * HospitalsApi - factory interface
 * @export
 */
export const HospitalsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Sample request:        GET /api/v1/hospitals      {          \"pageQueryFilter\": {              \"page\": 1,              \"limit\": 20,              \"lastRetrived\": \"2020-02-05T08:40\"          },          \"searchString\": \"Samsung\"      }
         * @summary Get all hospitals.
         * @param {string} [id] 
         * @param {string} [name] 
         * @param {string} [description] 
         * @param {string} [countryId] 
         * @param {Date} [created] 
         * @param {object} [marketingType] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {Date} [lastRetrieved] 
         * @param {boolean} [current] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsGet(id?: string, name?: string, description?: string, countryId?: string, created?: Date, marketingType?: object, page?: number, limit?: number, lastRetrieved?: Date, current?: boolean, options?: any): AxiosPromise<HospitalsViewModel> {
            return HospitalsApiFp(configuration).apiV1HospitalsGet(id, name, description, countryId, created, marketingType, page, limit, lastRetrieved, current, options)(axios, basePath);
        },
        /**
         * Sample request:        DELETE /api/v1/hospitals/1
         * @summary Delete hospital.
         * @param {string} hospitalId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdDelete(hospitalId: string, options?: any): AxiosPromise<boolean> {
            return HospitalsApiFp(configuration).apiV1HospitalsHospitalIdDelete(hospitalId, options)(axios, basePath);
        },
        /**
         * Sample request:        GET /api/v1/hospitals/1
         * @summary Get hospita.
         * @param {string} hospitalId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdGet(hospitalId: string, options?: any): AxiosPromise<HospitalViewModel> {
            return HospitalsApiFp(configuration).apiV1HospitalsHospitalIdGet(hospitalId, options)(axios, basePath);
        },
        /**
         * Sameple request:        PUT /api/v1/hospitals      {          \"overview\": \"Overview of Samsung Medical Center\",          \"bedsCount\": 2436,          \"operationRoomsCount\": 44,          \"icuBedsCount\": 122,          \"departmentsCount\": 200,          \"medicalStaffCount\": 1200,      }
         * @summary Update hospital.
         * @param {string} hospitalId 
         * @param {UpdateHospitalCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdPut(hospitalId: string, body?: UpdateHospitalCommand, options?: any): AxiosPromise<boolean> {
            return HospitalsApiFp(configuration).apiV1HospitalsHospitalIdPut(hospitalId, body, options)(axios, basePath);
        },
        /**
         * Sample request:        POST /api/v1/hospitals      {          \"name\": \"Samsung Medical Center\",          \"description\": \"Comprehensive Cancer Center in Seoul, South Korea is nationally ranked in 1 adult specialty.\",          \"logo\": \"http://www.samsunghospital.com/home/main/index.do\",          \"overview\": \"Overview of Samsung Medical Center\",          \"bedsCount\": 1436,          \"operationRoomsCount\": 34,          \"icuBedsCount\": 12,          \"departmentsCount\": 20,          \"medicalStaffCount\": 600,          \"countryId\": 1,          \"awards\": [            {              \"name\": \"Award1\",              \"image\": \"string\",              \"date\": \"2020-02-05T09:29:19.240Z\"            },            {              \"name\": \"Award2\",              \"image\": \"string\",              \"date\": \"2020-02-05T09:29:19.240Z\"            }          ],          \"medias\": [            {              \"mediaType\": \"Photo\",              \"url\": \"https://cloudhospitalblob.blob.core.windows.net/imagecontainer/SamsungMedicalCenter.jpg\",              \"thumbnailUrl\": \"https://cloudhospitalblob.blob.core.windows.net/thumbnailcontainer/SamsungMedicalCenter.jpg\",              \"description\": \"string\",              \"order\": 0            },            {              \"mediaType\": \"Video\",              \"url\": \"string\",              \"description\": \"string\",              \"order\": 1            }          ],          \"location\": {            \"latitude\": 37.4881568,            \"longitude\": 127.0855952,            \"country\": \"Korea\",            \"state\": \"string\",            \"county\": \"Gangnamgu\",            \"city\": \"Seoul\",            \"zipCode\": \"12345\",            \"address\": \"Il-won ro 81\"          }      }
         * @summary Create a hospital.
         * @param {CreateHospitalCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsPost(body?: CreateHospitalCommand, options?: any): AxiosPromise<string> {
            return HospitalsApiFp(configuration).apiV1HospitalsPost(body, options)(axios, basePath);
        },
    };
};

/**
 * HospitalsApi - object-oriented interface
 * @export
 * @class HospitalsApi
 * @extends {BaseAPI}
 */
export class HospitalsApi extends BaseAPI {
    /**
     * Sample request:        GET /api/v1/hospitals      {          \"pageQueryFilter\": {              \"page\": 1,              \"limit\": 20,              \"lastRetrived\": \"2020-02-05T08:40\"          },          \"searchString\": \"Samsung\"      }
     * @summary Get all hospitals.
     * @param {string} [id] 
     * @param {string} [name] 
     * @param {string} [description] 
     * @param {string} [countryId] 
     * @param {Date} [created] 
     * @param {object} [marketingType] 
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {Date} [lastRetrieved] 
     * @param {boolean} [current] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HospitalsApi
     */
    public apiV1HospitalsGet(id?: string, name?: string, description?: string, countryId?: string, created?: Date, marketingType?: object, page?: number, limit?: number, lastRetrieved?: Date, current?: boolean, options?: any) {
        return HospitalsApiFp(this.configuration).apiV1HospitalsGet(id, name, description, countryId, created, marketingType, page, limit, lastRetrieved, current, options)(this.axios, this.basePath);
    }

    /**
     * Sample request:        DELETE /api/v1/hospitals/1
     * @summary Delete hospital.
     * @param {string} hospitalId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HospitalsApi
     */
    public apiV1HospitalsHospitalIdDelete(hospitalId: string, options?: any) {
        return HospitalsApiFp(this.configuration).apiV1HospitalsHospitalIdDelete(hospitalId, options)(this.axios, this.basePath);
    }

    /**
     * Sample request:        GET /api/v1/hospitals/1
     * @summary Get hospita.
     * @param {string} hospitalId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HospitalsApi
     */
    public apiV1HospitalsHospitalIdGet(hospitalId: string, options?: any) {
        return HospitalsApiFp(this.configuration).apiV1HospitalsHospitalIdGet(hospitalId, options)(this.axios, this.basePath);
    }

    /**
     * Sameple request:        PUT /api/v1/hospitals      {          \"overview\": \"Overview of Samsung Medical Center\",          \"bedsCount\": 2436,          \"operationRoomsCount\": 44,          \"icuBedsCount\": 122,          \"departmentsCount\": 200,          \"medicalStaffCount\": 1200,      }
     * @summary Update hospital.
     * @param {string} hospitalId 
     * @param {UpdateHospitalCommand} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HospitalsApi
     */
    public apiV1HospitalsHospitalIdPut(hospitalId: string, body?: UpdateHospitalCommand, options?: any) {
        return HospitalsApiFp(this.configuration).apiV1HospitalsHospitalIdPut(hospitalId, body, options)(this.axios, this.basePath);
    }

    /**
     * Sample request:        POST /api/v1/hospitals      {          \"name\": \"Samsung Medical Center\",          \"description\": \"Comprehensive Cancer Center in Seoul, South Korea is nationally ranked in 1 adult specialty.\",          \"logo\": \"http://www.samsunghospital.com/home/main/index.do\",          \"overview\": \"Overview of Samsung Medical Center\",          \"bedsCount\": 1436,          \"operationRoomsCount\": 34,          \"icuBedsCount\": 12,          \"departmentsCount\": 20,          \"medicalStaffCount\": 600,          \"countryId\": 1,          \"awards\": [            {              \"name\": \"Award1\",              \"image\": \"string\",              \"date\": \"2020-02-05T09:29:19.240Z\"            },            {              \"name\": \"Award2\",              \"image\": \"string\",              \"date\": \"2020-02-05T09:29:19.240Z\"            }          ],          \"medias\": [            {              \"mediaType\": \"Photo\",              \"url\": \"https://cloudhospitalblob.blob.core.windows.net/imagecontainer/SamsungMedicalCenter.jpg\",              \"thumbnailUrl\": \"https://cloudhospitalblob.blob.core.windows.net/thumbnailcontainer/SamsungMedicalCenter.jpg\",              \"description\": \"string\",              \"order\": 0            },            {              \"mediaType\": \"Video\",              \"url\": \"string\",              \"description\": \"string\",              \"order\": 1            }          ],          \"location\": {            \"latitude\": 37.4881568,            \"longitude\": 127.0855952,            \"country\": \"Korea\",            \"state\": \"string\",            \"county\": \"Gangnamgu\",            \"city\": \"Seoul\",            \"zipCode\": \"12345\",            \"address\": \"Il-won ro 81\"          }      }
     * @summary Create a hospital.
     * @param {CreateHospitalCommand} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HospitalsApi
     */
    public apiV1HospitalsPost(body?: CreateHospitalCommand, options?: any) {
        return HospitalsApiFp(this.configuration).apiV1HospitalsPost(body, options)(this.axios, this.basePath);
    }

}


/**
 * IdentityApi - axios parameter creator
 * @export
 */
export const IdentityApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Smaple request:        GET /api/v1/identity
         * @summary Get current user\'s Identity claims.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IdentityGet(options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/identity`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * IdentityApi - functional programming interface
 * @export
 */
export const IdentityApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Smaple request:        GET /api/v1/identity
         * @summary Get current user\'s Identity claims.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IdentityGet(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = IdentityApiAxiosParamCreator(configuration).apiV1IdentityGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * IdentityApi - factory interface
 * @export
 */
export const IdentityApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Smaple request:        GET /api/v1/identity
         * @summary Get current user\'s Identity claims.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IdentityGet(options?: any): AxiosPromise<void> {
            return IdentityApiFp(configuration).apiV1IdentityGet(options)(axios, basePath);
        },
    };
};

/**
 * IdentityApi - object-oriented interface
 * @export
 * @class IdentityApi
 * @extends {BaseAPI}
 */
export class IdentityApi extends BaseAPI {
    /**
     * Smaple request:        GET /api/v1/identity
     * @summary Get current user\'s Identity claims.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityApi
     */
    public apiV1IdentityGet(options?: any) {
        return IdentityApiFp(this.configuration).apiV1IdentityGet(options)(this.axios, this.basePath);
    }

}


/**
 * ImagesApi - axios parameter creator
 * @export
 */
export const ImagesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ImagesPost(options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/images`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ImagesApi - functional programming interface
 * @export
 */
export const ImagesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ImagesPost(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = ImagesApiAxiosParamCreator(configuration).apiV1ImagesPost(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ImagesApi - factory interface
 * @export
 */
export const ImagesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ImagesPost(options?: any): AxiosPromise<void> {
            return ImagesApiFp(configuration).apiV1ImagesPost(options)(axios, basePath);
        },
    };
};

/**
 * ImagesApi - object-oriented interface
 * @export
 * @class ImagesApi
 * @extends {BaseAPI}
 */
export class ImagesApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImagesApi
     */
    public apiV1ImagesPost(options?: any) {
        return ImagesApiFp(this.configuration).apiV1ImagesPost(options)(this.axios, this.basePath);
    }

}


/**
 * ManagersApi - axios parameter creator
 * @export
 */
export const ManagersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Sample request:        GET /api/v1/managers      {          \"pageQueryFilter\": {              \"page\": 1,              \"limit\": 20,              \"lastRetrived\": \"2020-02-05T08:40\"          },          \"searchString\": \"manager\"      }
         * @summary Get all hospital managers.
         * @param {string} [id] 
         * @param {string} [fullname] 
         * @param {string} [email] 
         * @param {object} [gender] 
         * @param {Date} [dateOfBirth] 
         * @param {Date} [created] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {Date} [lastRetrieved] 
         * @param {boolean} [current] 
         * @param {string} [hospitalId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagersGet(id?: string, fullname?: string, email?: string, gender?: object, dateOfBirth?: Date, created?: Date, page?: number, limit?: number, lastRetrieved?: Date, current?: boolean, hospitalId?: string, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/managers`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }

            if (fullname !== undefined) {
                localVarQueryParameter['Fullname'] = fullname;
            }

            if (email !== undefined) {
                localVarQueryParameter['Email'] = email;
            }

            if (gender !== undefined) {
                localVarQueryParameter['Gender'] = gender;
            }

            if (dateOfBirth !== undefined) {
                localVarQueryParameter['DateOfBirth'] = (dateOfBirth as any instanceof Date) ?
                    (dateOfBirth as any).toISOString() :
                    dateOfBirth;
            }

            if (created !== undefined) {
                localVarQueryParameter['Created'] = (created as any instanceof Date) ?
                    (created as any).toISOString() :
                    created;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (lastRetrieved !== undefined) {
                localVarQueryParameter['lastRetrieved'] = (lastRetrieved as any instanceof Date) ?
                    (lastRetrieved as any).toISOString() :
                    lastRetrieved;
            }

            if (current !== undefined) {
                localVarQueryParameter['Current'] = current;
            }

            if (hospitalId !== undefined) {
                localVarQueryParameter['hospitalId'] = hospitalId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        DELETE /api/v1/managers/1
         * @summary Delete hospital manager.
         * @param {string} managerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagersManagerIdDelete(managerId: string, options: any = {}): RequestArgs {
            // verify required parameter 'managerId' is not null or undefined
            if (managerId === null || managerId === undefined) {
                throw new RequiredError('managerId','Required parameter managerId was null or undefined when calling apiV1ManagersManagerIdDelete.');
            }
            const localVarPath = `/api/v1/managers/{managerId}`
                .replace(`{${"managerId"}}`, encodeURIComponent(String(managerId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        GET /api/v1/managers/1
         * @summary Get hospital manager.
         * @param {string} managerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagersManagerIdGet(managerId: string, options: any = {}): RequestArgs {
            // verify required parameter 'managerId' is not null or undefined
            if (managerId === null || managerId === undefined) {
                throw new RequiredError('managerId','Required parameter managerId was null or undefined when calling apiV1ManagersManagerIdGet.');
            }
            const localVarPath = `/api/v1/managers/{managerId}`
                .replace(`{${"managerId"}}`, encodeURIComponent(String(managerId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        PUT /api/v1/managers/1      {          \"firstName\": \"string\",          \"lastName\": \"string\",          \"photo\": \"string\",          \"locations\": [            {              \"locationType\": \"LivesIn\",              \"latitude\": 0,              \"longitude\": 0,              \"country\": \"string\",              \"state\": \"string\",              \"county\": \"string\",              \"city\": \"string\",              \"zipCode\": \"string\",              \"address\": \"string\"            }          ]      }
         * @summary Update hospital manager.
         * @param {string} managerId 
         * @param {UpdateManagerCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagersManagerIdPut(managerId: string, body?: UpdateManagerCommand, options: any = {}): RequestArgs {
            // verify required parameter 'managerId' is not null or undefined
            if (managerId === null || managerId === undefined) {
                throw new RequiredError('managerId','Required parameter managerId was null or undefined when calling apiV1ManagersManagerIdPut.');
            }
            const localVarPath = `/api/v1/managers/{managerId}`
                .replace(`{${"managerId"}}`, encodeURIComponent(String(managerId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        POST /api/v1/managers      {          \"userName\": \"manager\",          \"email\": \"manger@icloudhospital.com\",          \"hospitalId\": 1,          \"firstName\": \"cloud\",          \"lastName\": \"manager\",          \"photo\": \"string\",          \"photoThumbnail\": \"string\",          \"gender\": \"NotSpecified\",          \"dateOfBirth\": \"2020-02-22T15:28:09.897Z\",          \"locations\": [            {              \"locationType\": \"LivesIn\",              \"latitude\": 0,              \"longitude\": 0,              \"country\": \"string\",              \"state\": \"string\",              \"county\": \"string\",              \"city\": \"string\",              \"zipCode\": \"string\",              \"address\": \"string\"            }          ]      }
         * @summary Create hospital manager.
         * @param {CreateManagerCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagersPost(body?: CreateManagerCommand, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/managers`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ManagersApi - functional programming interface
 * @export
 */
export const ManagersApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Sample request:        GET /api/v1/managers      {          \"pageQueryFilter\": {              \"page\": 1,              \"limit\": 20,              \"lastRetrived\": \"2020-02-05T08:40\"          },          \"searchString\": \"manager\"      }
         * @summary Get all hospital managers.
         * @param {string} [id] 
         * @param {string} [fullname] 
         * @param {string} [email] 
         * @param {object} [gender] 
         * @param {Date} [dateOfBirth] 
         * @param {Date} [created] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {Date} [lastRetrieved] 
         * @param {boolean} [current] 
         * @param {string} [hospitalId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagersGet(id?: string, fullname?: string, email?: string, gender?: object, dateOfBirth?: Date, created?: Date, page?: number, limit?: number, lastRetrieved?: Date, current?: boolean, hospitalId?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ManagersViewModel> {
            const localVarAxiosArgs = ManagersApiAxiosParamCreator(configuration).apiV1ManagersGet(id, fullname, email, gender, dateOfBirth, created, page, limit, lastRetrieved, current, hospitalId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        DELETE /api/v1/managers/1
         * @summary Delete hospital manager.
         * @param {string} managerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagersManagerIdDelete(managerId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = ManagersApiAxiosParamCreator(configuration).apiV1ManagersManagerIdDelete(managerId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        GET /api/v1/managers/1
         * @summary Get hospital manager.
         * @param {string} managerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagersManagerIdGet(managerId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ManagerViewModel> {
            const localVarAxiosArgs = ManagersApiAxiosParamCreator(configuration).apiV1ManagersManagerIdGet(managerId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        PUT /api/v1/managers/1      {          \"firstName\": \"string\",          \"lastName\": \"string\",          \"photo\": \"string\",          \"locations\": [            {              \"locationType\": \"LivesIn\",              \"latitude\": 0,              \"longitude\": 0,              \"country\": \"string\",              \"state\": \"string\",              \"county\": \"string\",              \"city\": \"string\",              \"zipCode\": \"string\",              \"address\": \"string\"            }          ]      }
         * @summary Update hospital manager.
         * @param {string} managerId 
         * @param {UpdateManagerCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagersManagerIdPut(managerId: string, body?: UpdateManagerCommand, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = ManagersApiAxiosParamCreator(configuration).apiV1ManagersManagerIdPut(managerId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        POST /api/v1/managers      {          \"userName\": \"manager\",          \"email\": \"manger@icloudhospital.com\",          \"hospitalId\": 1,          \"firstName\": \"cloud\",          \"lastName\": \"manager\",          \"photo\": \"string\",          \"photoThumbnail\": \"string\",          \"gender\": \"NotSpecified\",          \"dateOfBirth\": \"2020-02-22T15:28:09.897Z\",          \"locations\": [            {              \"locationType\": \"LivesIn\",              \"latitude\": 0,              \"longitude\": 0,              \"country\": \"string\",              \"state\": \"string\",              \"county\": \"string\",              \"city\": \"string\",              \"zipCode\": \"string\",              \"address\": \"string\"            }          ]      }
         * @summary Create hospital manager.
         * @param {CreateManagerCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagersPost(body?: CreateManagerCommand, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string> {
            const localVarAxiosArgs = ManagersApiAxiosParamCreator(configuration).apiV1ManagersPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ManagersApi - factory interface
 * @export
 */
export const ManagersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Sample request:        GET /api/v1/managers      {          \"pageQueryFilter\": {              \"page\": 1,              \"limit\": 20,              \"lastRetrived\": \"2020-02-05T08:40\"          },          \"searchString\": \"manager\"      }
         * @summary Get all hospital managers.
         * @param {string} [id] 
         * @param {string} [fullname] 
         * @param {string} [email] 
         * @param {object} [gender] 
         * @param {Date} [dateOfBirth] 
         * @param {Date} [created] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {Date} [lastRetrieved] 
         * @param {boolean} [current] 
         * @param {string} [hospitalId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagersGet(id?: string, fullname?: string, email?: string, gender?: object, dateOfBirth?: Date, created?: Date, page?: number, limit?: number, lastRetrieved?: Date, current?: boolean, hospitalId?: string, options?: any): AxiosPromise<ManagersViewModel> {
            return ManagersApiFp(configuration).apiV1ManagersGet(id, fullname, email, gender, dateOfBirth, created, page, limit, lastRetrieved, current, hospitalId, options)(axios, basePath);
        },
        /**
         * Sample request:        DELETE /api/v1/managers/1
         * @summary Delete hospital manager.
         * @param {string} managerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagersManagerIdDelete(managerId: string, options?: any): AxiosPromise<boolean> {
            return ManagersApiFp(configuration).apiV1ManagersManagerIdDelete(managerId, options)(axios, basePath);
        },
        /**
         * Sample request:        GET /api/v1/managers/1
         * @summary Get hospital manager.
         * @param {string} managerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagersManagerIdGet(managerId: string, options?: any): AxiosPromise<ManagerViewModel> {
            return ManagersApiFp(configuration).apiV1ManagersManagerIdGet(managerId, options)(axios, basePath);
        },
        /**
         * Sample request:        PUT /api/v1/managers/1      {          \"firstName\": \"string\",          \"lastName\": \"string\",          \"photo\": \"string\",          \"locations\": [            {              \"locationType\": \"LivesIn\",              \"latitude\": 0,              \"longitude\": 0,              \"country\": \"string\",              \"state\": \"string\",              \"county\": \"string\",              \"city\": \"string\",              \"zipCode\": \"string\",              \"address\": \"string\"            }          ]      }
         * @summary Update hospital manager.
         * @param {string} managerId 
         * @param {UpdateManagerCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagersManagerIdPut(managerId: string, body?: UpdateManagerCommand, options?: any): AxiosPromise<boolean> {
            return ManagersApiFp(configuration).apiV1ManagersManagerIdPut(managerId, body, options)(axios, basePath);
        },
        /**
         * Sample request:        POST /api/v1/managers      {          \"userName\": \"manager\",          \"email\": \"manger@icloudhospital.com\",          \"hospitalId\": 1,          \"firstName\": \"cloud\",          \"lastName\": \"manager\",          \"photo\": \"string\",          \"photoThumbnail\": \"string\",          \"gender\": \"NotSpecified\",          \"dateOfBirth\": \"2020-02-22T15:28:09.897Z\",          \"locations\": [            {              \"locationType\": \"LivesIn\",              \"latitude\": 0,              \"longitude\": 0,              \"country\": \"string\",              \"state\": \"string\",              \"county\": \"string\",              \"city\": \"string\",              \"zipCode\": \"string\",              \"address\": \"string\"            }          ]      }
         * @summary Create hospital manager.
         * @param {CreateManagerCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagersPost(body?: CreateManagerCommand, options?: any): AxiosPromise<string> {
            return ManagersApiFp(configuration).apiV1ManagersPost(body, options)(axios, basePath);
        },
    };
};

/**
 * ManagersApi - object-oriented interface
 * @export
 * @class ManagersApi
 * @extends {BaseAPI}
 */
export class ManagersApi extends BaseAPI {
    /**
     * Sample request:        GET /api/v1/managers      {          \"pageQueryFilter\": {              \"page\": 1,              \"limit\": 20,              \"lastRetrived\": \"2020-02-05T08:40\"          },          \"searchString\": \"manager\"      }
     * @summary Get all hospital managers.
     * @param {string} [id] 
     * @param {string} [fullname] 
     * @param {string} [email] 
     * @param {object} [gender] 
     * @param {Date} [dateOfBirth] 
     * @param {Date} [created] 
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {Date} [lastRetrieved] 
     * @param {boolean} [current] 
     * @param {string} [hospitalId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagersApi
     */
    public apiV1ManagersGet(id?: string, fullname?: string, email?: string, gender?: object, dateOfBirth?: Date, created?: Date, page?: number, limit?: number, lastRetrieved?: Date, current?: boolean, hospitalId?: string, options?: any) {
        return ManagersApiFp(this.configuration).apiV1ManagersGet(id, fullname, email, gender, dateOfBirth, created, page, limit, lastRetrieved, current, hospitalId, options)(this.axios, this.basePath);
    }

    /**
     * Sample request:        DELETE /api/v1/managers/1
     * @summary Delete hospital manager.
     * @param {string} managerId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagersApi
     */
    public apiV1ManagersManagerIdDelete(managerId: string, options?: any) {
        return ManagersApiFp(this.configuration).apiV1ManagersManagerIdDelete(managerId, options)(this.axios, this.basePath);
    }

    /**
     * Sample request:        GET /api/v1/managers/1
     * @summary Get hospital manager.
     * @param {string} managerId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagersApi
     */
    public apiV1ManagersManagerIdGet(managerId: string, options?: any) {
        return ManagersApiFp(this.configuration).apiV1ManagersManagerIdGet(managerId, options)(this.axios, this.basePath);
    }

    /**
     * Sample request:        PUT /api/v1/managers/1      {          \"firstName\": \"string\",          \"lastName\": \"string\",          \"photo\": \"string\",          \"locations\": [            {              \"locationType\": \"LivesIn\",              \"latitude\": 0,              \"longitude\": 0,              \"country\": \"string\",              \"state\": \"string\",              \"county\": \"string\",              \"city\": \"string\",              \"zipCode\": \"string\",              \"address\": \"string\"            }          ]      }
     * @summary Update hospital manager.
     * @param {string} managerId 
     * @param {UpdateManagerCommand} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagersApi
     */
    public apiV1ManagersManagerIdPut(managerId: string, body?: UpdateManagerCommand, options?: any) {
        return ManagersApiFp(this.configuration).apiV1ManagersManagerIdPut(managerId, body, options)(this.axios, this.basePath);
    }

    /**
     * Sample request:        POST /api/v1/managers      {          \"userName\": \"manager\",          \"email\": \"manger@icloudhospital.com\",          \"hospitalId\": 1,          \"firstName\": \"cloud\",          \"lastName\": \"manager\",          \"photo\": \"string\",          \"photoThumbnail\": \"string\",          \"gender\": \"NotSpecified\",          \"dateOfBirth\": \"2020-02-22T15:28:09.897Z\",          \"locations\": [            {              \"locationType\": \"LivesIn\",              \"latitude\": 0,              \"longitude\": 0,              \"country\": \"string\",              \"state\": \"string\",              \"county\": \"string\",              \"city\": \"string\",              \"zipCode\": \"string\",              \"address\": \"string\"            }          ]      }
     * @summary Create hospital manager.
     * @param {CreateManagerCommand} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagersApi
     */
    public apiV1ManagersPost(body?: CreateManagerCommand, options?: any) {
        return ManagersApiFp(this.configuration).apiV1ManagersPost(body, options)(this.axios, this.basePath);
    }

}


/**
 * MoviesApi - axios parameter creator
 * @export
 */
export const MoviesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1MoviesPost(options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/movies`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MoviesApi - functional programming interface
 * @export
 */
export const MoviesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1MoviesPost(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = MoviesApiAxiosParamCreator(configuration).apiV1MoviesPost(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * MoviesApi - factory interface
 * @export
 */
export const MoviesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1MoviesPost(options?: any): AxiosPromise<void> {
            return MoviesApiFp(configuration).apiV1MoviesPost(options)(axios, basePath);
        },
    };
};

/**
 * MoviesApi - object-oriented interface
 * @export
 * @class MoviesApi
 * @extends {BaseAPI}
 */
export class MoviesApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MoviesApi
     */
    public apiV1MoviesPost(options?: any) {
        return MoviesApiFp(this.configuration).apiV1MoviesPost(options)(this.axios, this.basePath);
    }

}


/**
 * PackagesApi - axios parameter creator
 * @export
 */
export const PackagesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Sample request:        DELETE /api/v1/hospitals/1/packages/1
         * @summary Delete package.
         * @param {string} hospitalId 
         * @param {string} equipmentId 
         * @param {string} packageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdPackagesPackageIdDelete(hospitalId: string, equipmentId: string, packageId: string, options: any = {}): RequestArgs {
            // verify required parameter 'hospitalId' is not null or undefined
            if (hospitalId === null || hospitalId === undefined) {
                throw new RequiredError('hospitalId','Required parameter hospitalId was null or undefined when calling apiV1HospitalsHospitalIdPackagesPackageIdDelete.');
            }
            // verify required parameter 'equipmentId' is not null or undefined
            if (equipmentId === null || equipmentId === undefined) {
                throw new RequiredError('equipmentId','Required parameter equipmentId was null or undefined when calling apiV1HospitalsHospitalIdPackagesPackageIdDelete.');
            }
            // verify required parameter 'packageId' is not null or undefined
            if (packageId === null || packageId === undefined) {
                throw new RequiredError('packageId','Required parameter packageId was null or undefined when calling apiV1HospitalsHospitalIdPackagesPackageIdDelete.');
            }
            const localVarPath = `/api/v1/hospitals/{hospitalId}/packages/{packageId}`
                .replace(`{${"hospitalId"}}`, encodeURIComponent(String(hospitalId)))
                .replace(`{${"equipmentId"}}`, encodeURIComponent(String(equipmentId)))
                .replace(`{${"packageId"}}`, encodeURIComponent(String(packageId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        GET /api/v1/hospitals/1/packages/1
         * @summary Get package.
         * @param {string} hospitalId 
         * @param {string} equipmentId 
         * @param {string} packageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdPackagesPackageIdGet(hospitalId: string, equipmentId: string, packageId: string, options: any = {}): RequestArgs {
            // verify required parameter 'hospitalId' is not null or undefined
            if (hospitalId === null || hospitalId === undefined) {
                throw new RequiredError('hospitalId','Required parameter hospitalId was null or undefined when calling apiV1HospitalsHospitalIdPackagesPackageIdGet.');
            }
            // verify required parameter 'equipmentId' is not null or undefined
            if (equipmentId === null || equipmentId === undefined) {
                throw new RequiredError('equipmentId','Required parameter equipmentId was null or undefined when calling apiV1HospitalsHospitalIdPackagesPackageIdGet.');
            }
            // verify required parameter 'packageId' is not null or undefined
            if (packageId === null || packageId === undefined) {
                throw new RequiredError('packageId','Required parameter packageId was null or undefined when calling apiV1HospitalsHospitalIdPackagesPackageIdGet.');
            }
            const localVarPath = `/api/v1/hospitals/{hospitalId}/packages/{packageId}`
                .replace(`{${"hospitalId"}}`, encodeURIComponent(String(hospitalId)))
                .replace(`{${"equipmentId"}}`, encodeURIComponent(String(equipmentId)))
                .replace(`{${"packageId"}}`, encodeURIComponent(String(packageId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        PUT /api/v1/hospitals/1/packages/1      {          \"description\": \"Upgraded medical package\"      }
         * @summary Update package.
         * @param {string} hospitalId 
         * @param {string} packageId 
         * @param {UpdateHospitalPackageCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdPackagesPackageIdPut(hospitalId: string, packageId: string, body?: UpdateHospitalPackageCommand, options: any = {}): RequestArgs {
            // verify required parameter 'hospitalId' is not null or undefined
            if (hospitalId === null || hospitalId === undefined) {
                throw new RequiredError('hospitalId','Required parameter hospitalId was null or undefined when calling apiV1HospitalsHospitalIdPackagesPackageIdPut.');
            }
            // verify required parameter 'packageId' is not null or undefined
            if (packageId === null || packageId === undefined) {
                throw new RequiredError('packageId','Required parameter packageId was null or undefined when calling apiV1HospitalsHospitalIdPackagesPackageIdPut.');
            }
            const localVarPath = `/api/v1/hospitals/{hospitalId}/packages/{packageId}`
                .replace(`{${"hospitalId"}}`, encodeURIComponent(String(hospitalId)))
                .replace(`{${"packageId"}}`, encodeURIComponent(String(packageId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        POST /api/v1/hospitals/1/packages      {          \"name\": \"Afroasia ltd\",          \"description\": \"Medical package\",          \"medias\": [            {              \"mediaType\": 0,              \"url\": \"imageurl\",              \"description\": \"string\",                      \"order\": 0            }          ]      }
         * @summary Create an package and add to a hospital.
         * @param {string} hospitalId 
         * @param {CreateHospitalPackageCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdPackagesPost(hospitalId: string, body?: CreateHospitalPackageCommand, options: any = {}): RequestArgs {
            // verify required parameter 'hospitalId' is not null or undefined
            if (hospitalId === null || hospitalId === undefined) {
                throw new RequiredError('hospitalId','Required parameter hospitalId was null or undefined when calling apiV1HospitalsHospitalIdPackagesPost.');
            }
            const localVarPath = `/api/v1/hospitals/{hospitalId}/packages`
                .replace(`{${"hospitalId"}}`, encodeURIComponent(String(hospitalId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        GET /api/v1/hospitals/1/packages      {          \"pageQueryFilter\": {              \"page\": 1,              \"limit\": 20,              \"lastRetrived\": \"2020-02-05T08:40\"          },          \"searchString\": \"Medical\"      }
         * @summary Get all packages.
         * @param {string} [id] 
         * @param {string} [name] 
         * @param {string} [hospitalId] 
         * @param {string} [hospitalName] 
         * @param {object} [packageStatus] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {Date} [lastRetrieved] 
         * @param {boolean} [current] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsPackagesGet(id?: string, name?: string, hospitalId?: string, hospitalName?: string, packageStatus?: object, page?: number, limit?: number, lastRetrieved?: Date, current?: boolean, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/hospitals/packages`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }

            if (name !== undefined) {
                localVarQueryParameter['Name'] = name;
            }

            if (hospitalId !== undefined) {
                localVarQueryParameter['HospitalId'] = hospitalId;
            }

            if (hospitalName !== undefined) {
                localVarQueryParameter['HospitalName'] = hospitalName;
            }

            if (packageStatus !== undefined) {
                localVarQueryParameter['PackageStatus'] = packageStatus;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (lastRetrieved !== undefined) {
                localVarQueryParameter['lastRetrieved'] = (lastRetrieved as any instanceof Date) ?
                    (lastRetrieved as any).toISOString() :
                    lastRetrieved;
            }

            if (current !== undefined) {
                localVarQueryParameter['Current'] = current;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PackagesApi - functional programming interface
 * @export
 */
export const PackagesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Sample request:        DELETE /api/v1/hospitals/1/packages/1
         * @summary Delete package.
         * @param {string} hospitalId 
         * @param {string} equipmentId 
         * @param {string} packageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdPackagesPackageIdDelete(hospitalId: string, equipmentId: string, packageId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = PackagesApiAxiosParamCreator(configuration).apiV1HospitalsHospitalIdPackagesPackageIdDelete(hospitalId, equipmentId, packageId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        GET /api/v1/hospitals/1/packages/1
         * @summary Get package.
         * @param {string} hospitalId 
         * @param {string} equipmentId 
         * @param {string} packageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdPackagesPackageIdGet(hospitalId: string, equipmentId: string, packageId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<HospitalPackageViewModel> {
            const localVarAxiosArgs = PackagesApiAxiosParamCreator(configuration).apiV1HospitalsHospitalIdPackagesPackageIdGet(hospitalId, equipmentId, packageId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        PUT /api/v1/hospitals/1/packages/1      {          \"description\": \"Upgraded medical package\"      }
         * @summary Update package.
         * @param {string} hospitalId 
         * @param {string} packageId 
         * @param {UpdateHospitalPackageCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdPackagesPackageIdPut(hospitalId: string, packageId: string, body?: UpdateHospitalPackageCommand, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = PackagesApiAxiosParamCreator(configuration).apiV1HospitalsHospitalIdPackagesPackageIdPut(hospitalId, packageId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        POST /api/v1/hospitals/1/packages      {          \"name\": \"Afroasia ltd\",          \"description\": \"Medical package\",          \"medias\": [            {              \"mediaType\": 0,              \"url\": \"imageurl\",              \"description\": \"string\",                      \"order\": 0            }          ]      }
         * @summary Create an package and add to a hospital.
         * @param {string} hospitalId 
         * @param {CreateHospitalPackageCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdPackagesPost(hospitalId: string, body?: CreateHospitalPackageCommand, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string> {
            const localVarAxiosArgs = PackagesApiAxiosParamCreator(configuration).apiV1HospitalsHospitalIdPackagesPost(hospitalId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        GET /api/v1/hospitals/1/packages      {          \"pageQueryFilter\": {              \"page\": 1,              \"limit\": 20,              \"lastRetrived\": \"2020-02-05T08:40\"          },          \"searchString\": \"Medical\"      }
         * @summary Get all packages.
         * @param {string} [id] 
         * @param {string} [name] 
         * @param {string} [hospitalId] 
         * @param {string} [hospitalName] 
         * @param {object} [packageStatus] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {Date} [lastRetrieved] 
         * @param {boolean} [current] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsPackagesGet(id?: string, name?: string, hospitalId?: string, hospitalName?: string, packageStatus?: object, page?: number, limit?: number, lastRetrieved?: Date, current?: boolean, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<HospitalPackagesViewModel> {
            const localVarAxiosArgs = PackagesApiAxiosParamCreator(configuration).apiV1HospitalsPackagesGet(id, name, hospitalId, hospitalName, packageStatus, page, limit, lastRetrieved, current, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * PackagesApi - factory interface
 * @export
 */
export const PackagesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Sample request:        DELETE /api/v1/hospitals/1/packages/1
         * @summary Delete package.
         * @param {string} hospitalId 
         * @param {string} equipmentId 
         * @param {string} packageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdPackagesPackageIdDelete(hospitalId: string, equipmentId: string, packageId: string, options?: any): AxiosPromise<boolean> {
            return PackagesApiFp(configuration).apiV1HospitalsHospitalIdPackagesPackageIdDelete(hospitalId, equipmentId, packageId, options)(axios, basePath);
        },
        /**
         * Sample request:        GET /api/v1/hospitals/1/packages/1
         * @summary Get package.
         * @param {string} hospitalId 
         * @param {string} equipmentId 
         * @param {string} packageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdPackagesPackageIdGet(hospitalId: string, equipmentId: string, packageId: string, options?: any): AxiosPromise<HospitalPackageViewModel> {
            return PackagesApiFp(configuration).apiV1HospitalsHospitalIdPackagesPackageIdGet(hospitalId, equipmentId, packageId, options)(axios, basePath);
        },
        /**
         * Sample request:        PUT /api/v1/hospitals/1/packages/1      {          \"description\": \"Upgraded medical package\"      }
         * @summary Update package.
         * @param {string} hospitalId 
         * @param {string} packageId 
         * @param {UpdateHospitalPackageCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdPackagesPackageIdPut(hospitalId: string, packageId: string, body?: UpdateHospitalPackageCommand, options?: any): AxiosPromise<boolean> {
            return PackagesApiFp(configuration).apiV1HospitalsHospitalIdPackagesPackageIdPut(hospitalId, packageId, body, options)(axios, basePath);
        },
        /**
         * Sample request:        POST /api/v1/hospitals/1/packages      {          \"name\": \"Afroasia ltd\",          \"description\": \"Medical package\",          \"medias\": [            {              \"mediaType\": 0,              \"url\": \"imageurl\",              \"description\": \"string\",                      \"order\": 0            }          ]      }
         * @summary Create an package and add to a hospital.
         * @param {string} hospitalId 
         * @param {CreateHospitalPackageCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdPackagesPost(hospitalId: string, body?: CreateHospitalPackageCommand, options?: any): AxiosPromise<string> {
            return PackagesApiFp(configuration).apiV1HospitalsHospitalIdPackagesPost(hospitalId, body, options)(axios, basePath);
        },
        /**
         * Sample request:        GET /api/v1/hospitals/1/packages      {          \"pageQueryFilter\": {              \"page\": 1,              \"limit\": 20,              \"lastRetrived\": \"2020-02-05T08:40\"          },          \"searchString\": \"Medical\"      }
         * @summary Get all packages.
         * @param {string} [id] 
         * @param {string} [name] 
         * @param {string} [hospitalId] 
         * @param {string} [hospitalName] 
         * @param {object} [packageStatus] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {Date} [lastRetrieved] 
         * @param {boolean} [current] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsPackagesGet(id?: string, name?: string, hospitalId?: string, hospitalName?: string, packageStatus?: object, page?: number, limit?: number, lastRetrieved?: Date, current?: boolean, options?: any): AxiosPromise<HospitalPackagesViewModel> {
            return PackagesApiFp(configuration).apiV1HospitalsPackagesGet(id, name, hospitalId, hospitalName, packageStatus, page, limit, lastRetrieved, current, options)(axios, basePath);
        },
    };
};

/**
 * PackagesApi - object-oriented interface
 * @export
 * @class PackagesApi
 * @extends {BaseAPI}
 */
export class PackagesApi extends BaseAPI {
    /**
     * Sample request:        DELETE /api/v1/hospitals/1/packages/1
     * @summary Delete package.
     * @param {string} hospitalId 
     * @param {string} equipmentId 
     * @param {string} packageId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PackagesApi
     */
    public apiV1HospitalsHospitalIdPackagesPackageIdDelete(hospitalId: string, equipmentId: string, packageId: string, options?: any) {
        return PackagesApiFp(this.configuration).apiV1HospitalsHospitalIdPackagesPackageIdDelete(hospitalId, equipmentId, packageId, options)(this.axios, this.basePath);
    }

    /**
     * Sample request:        GET /api/v1/hospitals/1/packages/1
     * @summary Get package.
     * @param {string} hospitalId 
     * @param {string} equipmentId 
     * @param {string} packageId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PackagesApi
     */
    public apiV1HospitalsHospitalIdPackagesPackageIdGet(hospitalId: string, equipmentId: string, packageId: string, options?: any) {
        return PackagesApiFp(this.configuration).apiV1HospitalsHospitalIdPackagesPackageIdGet(hospitalId, equipmentId, packageId, options)(this.axios, this.basePath);
    }

    /**
     * Sample request:        PUT /api/v1/hospitals/1/packages/1      {          \"description\": \"Upgraded medical package\"      }
     * @summary Update package.
     * @param {string} hospitalId 
     * @param {string} packageId 
     * @param {UpdateHospitalPackageCommand} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PackagesApi
     */
    public apiV1HospitalsHospitalIdPackagesPackageIdPut(hospitalId: string, packageId: string, body?: UpdateHospitalPackageCommand, options?: any) {
        return PackagesApiFp(this.configuration).apiV1HospitalsHospitalIdPackagesPackageIdPut(hospitalId, packageId, body, options)(this.axios, this.basePath);
    }

    /**
     * Sample request:        POST /api/v1/hospitals/1/packages      {          \"name\": \"Afroasia ltd\",          \"description\": \"Medical package\",          \"medias\": [            {              \"mediaType\": 0,              \"url\": \"imageurl\",              \"description\": \"string\",                      \"order\": 0            }          ]      }
     * @summary Create an package and add to a hospital.
     * @param {string} hospitalId 
     * @param {CreateHospitalPackageCommand} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PackagesApi
     */
    public apiV1HospitalsHospitalIdPackagesPost(hospitalId: string, body?: CreateHospitalPackageCommand, options?: any) {
        return PackagesApiFp(this.configuration).apiV1HospitalsHospitalIdPackagesPost(hospitalId, body, options)(this.axios, this.basePath);
    }

    /**
     * Sample request:        GET /api/v1/hospitals/1/packages      {          \"pageQueryFilter\": {              \"page\": 1,              \"limit\": 20,              \"lastRetrived\": \"2020-02-05T08:40\"          },          \"searchString\": \"Medical\"      }
     * @summary Get all packages.
     * @param {string} [id] 
     * @param {string} [name] 
     * @param {string} [hospitalId] 
     * @param {string} [hospitalName] 
     * @param {object} [packageStatus] 
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {Date} [lastRetrieved] 
     * @param {boolean} [current] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PackagesApi
     */
    public apiV1HospitalsPackagesGet(id?: string, name?: string, hospitalId?: string, hospitalName?: string, packageStatus?: object, page?: number, limit?: number, lastRetrieved?: Date, current?: boolean, options?: any) {
        return PackagesApiFp(this.configuration).apiV1HospitalsPackagesGet(id, name, hospitalId, hospitalName, packageStatus, page, limit, lastRetrieved, current, options)(this.axios, this.basePath);
    }

}


/**
 * PartnersApi - axios parameter creator
 * @export
 */
export const PartnersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Sample request:        GET /api/v1/partners      {          \"pageQueryFilter\": {              \"page\": 1,              \"limit\": 20,              \"lastRetrived\": \"2020-02-05T08:40\"          },          \"searchString\": \"patner\"      }
         * @summary Get all partners.
         * @param {string} [id] 
         * @param {string} [fullname] 
         * @param {string} [email] 
         * @param {object} [gender] 
         * @param {Date} [dateOfBirth] 
         * @param {Date} [created] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {Date} [lastRetrieved] 
         * @param {boolean} [current] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PartnersGet(id?: string, fullname?: string, email?: string, gender?: object, dateOfBirth?: Date, created?: Date, page?: number, limit?: number, lastRetrieved?: Date, current?: boolean, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/partners`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }

            if (fullname !== undefined) {
                localVarQueryParameter['Fullname'] = fullname;
            }

            if (email !== undefined) {
                localVarQueryParameter['Email'] = email;
            }

            if (gender !== undefined) {
                localVarQueryParameter['Gender'] = gender;
            }

            if (dateOfBirth !== undefined) {
                localVarQueryParameter['DateOfBirth'] = (dateOfBirth as any instanceof Date) ?
                    (dateOfBirth as any).toISOString() :
                    dateOfBirth;
            }

            if (created !== undefined) {
                localVarQueryParameter['Created'] = (created as any instanceof Date) ?
                    (created as any).toISOString() :
                    created;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (lastRetrieved !== undefined) {
                localVarQueryParameter['lastRetrieved'] = (lastRetrieved as any instanceof Date) ?
                    (lastRetrieved as any).toISOString() :
                    lastRetrieved;
            }

            if (current !== undefined) {
                localVarQueryParameter['Current'] = current;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        DELETE /api/v1/partners/1
         * @summary Delete patner.
         * @param {string} partnerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PartnersPartnerIdDelete(partnerId: string, options: any = {}): RequestArgs {
            // verify required parameter 'partnerId' is not null or undefined
            if (partnerId === null || partnerId === undefined) {
                throw new RequiredError('partnerId','Required parameter partnerId was null or undefined when calling apiV1PartnersPartnerIdDelete.');
            }
            const localVarPath = `/api/v1/partners/{partnerId}`
                .replace(`{${"partnerId"}}`, encodeURIComponent(String(partnerId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        GET /api/v1/patners/1
         * @summary Get partner.
         * @param {string} partnerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PartnersPartnerIdGet(partnerId: string, options: any = {}): RequestArgs {
            // verify required parameter 'partnerId' is not null or undefined
            if (partnerId === null || partnerId === undefined) {
                throw new RequiredError('partnerId','Required parameter partnerId was null or undefined when calling apiV1PartnersPartnerIdGet.');
            }
            const localVarPath = `/api/v1/partners/{partnerId}`
                .replace(`{${"partnerId"}}`, encodeURIComponent(String(partnerId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        PUT /api/v1/patners/1      {          firstName\": \"string\",          \"lastName\": \"string\",          \"photo\": \"string\",          \"locations\": [            {              \"locationType\": \"LivesIn\",              \"latitude\": 0,              \"longitude\": 0,              \"country\": \"string\",              \"state\": \"string\",              \"county\": \"string\",              \"city\": \"string\",              \"zipCode\": \"string\",              \"address\": \"string\"            }          ]      }
         * @summary Update partner.
         * @param {string} partnerId 
         * @param {UpdatePartnerCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PartnersPartnerIdPut(partnerId: string, body?: UpdatePartnerCommand, options: any = {}): RequestArgs {
            // verify required parameter 'partnerId' is not null or undefined
            if (partnerId === null || partnerId === undefined) {
                throw new RequiredError('partnerId','Required parameter partnerId was null or undefined when calling apiV1PartnersPartnerIdPut.');
            }
            const localVarPath = `/api/v1/partners/{partnerId}`
                .replace(`{${"partnerId"}}`, encodeURIComponent(String(partnerId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        POST /api/v1/partners      {          \"userName\": \"string\",          \"email\": \"string\",          \"firstName\": \"string\",          \"lastName\": \"string\",          \"photo\": \"string\",          \"photoThumbnail\": \"string\",          \"gender\": \"NotSpecified\",          \"dateOfBirth\": \"2020-02-22T18:04:18.025Z\",          \"locations\": [            {              \"locationType\": \"LivesIn\",              \"latitude\": 0,              \"longitude\": 0,              \"country\": \"string\",              \"state\": \"string\",              \"county\": \"string\",              \"city\": \"string\",              \"zipCode\": \"string\",              \"address\": \"string\"            }          ]      }
         * @summary Create partner.
         * @param {CreatePartnerCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PartnersPost(body?: CreatePartnerCommand, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/partners`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PartnersApi - functional programming interface
 * @export
 */
export const PartnersApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Sample request:        GET /api/v1/partners      {          \"pageQueryFilter\": {              \"page\": 1,              \"limit\": 20,              \"lastRetrived\": \"2020-02-05T08:40\"          },          \"searchString\": \"patner\"      }
         * @summary Get all partners.
         * @param {string} [id] 
         * @param {string} [fullname] 
         * @param {string} [email] 
         * @param {object} [gender] 
         * @param {Date} [dateOfBirth] 
         * @param {Date} [created] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {Date} [lastRetrieved] 
         * @param {boolean} [current] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PartnersGet(id?: string, fullname?: string, email?: string, gender?: object, dateOfBirth?: Date, created?: Date, page?: number, limit?: number, lastRetrieved?: Date, current?: boolean, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PartnersViewModel> {
            const localVarAxiosArgs = PartnersApiAxiosParamCreator(configuration).apiV1PartnersGet(id, fullname, email, gender, dateOfBirth, created, page, limit, lastRetrieved, current, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        DELETE /api/v1/partners/1
         * @summary Delete patner.
         * @param {string} partnerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PartnersPartnerIdDelete(partnerId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = PartnersApiAxiosParamCreator(configuration).apiV1PartnersPartnerIdDelete(partnerId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        GET /api/v1/patners/1
         * @summary Get partner.
         * @param {string} partnerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PartnersPartnerIdGet(partnerId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PartnerViewModel> {
            const localVarAxiosArgs = PartnersApiAxiosParamCreator(configuration).apiV1PartnersPartnerIdGet(partnerId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        PUT /api/v1/patners/1      {          firstName\": \"string\",          \"lastName\": \"string\",          \"photo\": \"string\",          \"locations\": [            {              \"locationType\": \"LivesIn\",              \"latitude\": 0,              \"longitude\": 0,              \"country\": \"string\",              \"state\": \"string\",              \"county\": \"string\",              \"city\": \"string\",              \"zipCode\": \"string\",              \"address\": \"string\"            }          ]      }
         * @summary Update partner.
         * @param {string} partnerId 
         * @param {UpdatePartnerCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PartnersPartnerIdPut(partnerId: string, body?: UpdatePartnerCommand, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = PartnersApiAxiosParamCreator(configuration).apiV1PartnersPartnerIdPut(partnerId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        POST /api/v1/partners      {          \"userName\": \"string\",          \"email\": \"string\",          \"firstName\": \"string\",          \"lastName\": \"string\",          \"photo\": \"string\",          \"photoThumbnail\": \"string\",          \"gender\": \"NotSpecified\",          \"dateOfBirth\": \"2020-02-22T18:04:18.025Z\",          \"locations\": [            {              \"locationType\": \"LivesIn\",              \"latitude\": 0,              \"longitude\": 0,              \"country\": \"string\",              \"state\": \"string\",              \"county\": \"string\",              \"city\": \"string\",              \"zipCode\": \"string\",              \"address\": \"string\"            }          ]      }
         * @summary Create partner.
         * @param {CreatePartnerCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PartnersPost(body?: CreatePartnerCommand, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string> {
            const localVarAxiosArgs = PartnersApiAxiosParamCreator(configuration).apiV1PartnersPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * PartnersApi - factory interface
 * @export
 */
export const PartnersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Sample request:        GET /api/v1/partners      {          \"pageQueryFilter\": {              \"page\": 1,              \"limit\": 20,              \"lastRetrived\": \"2020-02-05T08:40\"          },          \"searchString\": \"patner\"      }
         * @summary Get all partners.
         * @param {string} [id] 
         * @param {string} [fullname] 
         * @param {string} [email] 
         * @param {object} [gender] 
         * @param {Date} [dateOfBirth] 
         * @param {Date} [created] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {Date} [lastRetrieved] 
         * @param {boolean} [current] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PartnersGet(id?: string, fullname?: string, email?: string, gender?: object, dateOfBirth?: Date, created?: Date, page?: number, limit?: number, lastRetrieved?: Date, current?: boolean, options?: any): AxiosPromise<PartnersViewModel> {
            return PartnersApiFp(configuration).apiV1PartnersGet(id, fullname, email, gender, dateOfBirth, created, page, limit, lastRetrieved, current, options)(axios, basePath);
        },
        /**
         * Sample request:        DELETE /api/v1/partners/1
         * @summary Delete patner.
         * @param {string} partnerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PartnersPartnerIdDelete(partnerId: string, options?: any): AxiosPromise<boolean> {
            return PartnersApiFp(configuration).apiV1PartnersPartnerIdDelete(partnerId, options)(axios, basePath);
        },
        /**
         * Sample request:        GET /api/v1/patners/1
         * @summary Get partner.
         * @param {string} partnerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PartnersPartnerIdGet(partnerId: string, options?: any): AxiosPromise<PartnerViewModel> {
            return PartnersApiFp(configuration).apiV1PartnersPartnerIdGet(partnerId, options)(axios, basePath);
        },
        /**
         * Sample request:        PUT /api/v1/patners/1      {          firstName\": \"string\",          \"lastName\": \"string\",          \"photo\": \"string\",          \"locations\": [            {              \"locationType\": \"LivesIn\",              \"latitude\": 0,              \"longitude\": 0,              \"country\": \"string\",              \"state\": \"string\",              \"county\": \"string\",              \"city\": \"string\",              \"zipCode\": \"string\",              \"address\": \"string\"            }          ]      }
         * @summary Update partner.
         * @param {string} partnerId 
         * @param {UpdatePartnerCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PartnersPartnerIdPut(partnerId: string, body?: UpdatePartnerCommand, options?: any): AxiosPromise<boolean> {
            return PartnersApiFp(configuration).apiV1PartnersPartnerIdPut(partnerId, body, options)(axios, basePath);
        },
        /**
         * Sample request:        POST /api/v1/partners      {          \"userName\": \"string\",          \"email\": \"string\",          \"firstName\": \"string\",          \"lastName\": \"string\",          \"photo\": \"string\",          \"photoThumbnail\": \"string\",          \"gender\": \"NotSpecified\",          \"dateOfBirth\": \"2020-02-22T18:04:18.025Z\",          \"locations\": [            {              \"locationType\": \"LivesIn\",              \"latitude\": 0,              \"longitude\": 0,              \"country\": \"string\",              \"state\": \"string\",              \"county\": \"string\",              \"city\": \"string\",              \"zipCode\": \"string\",              \"address\": \"string\"            }          ]      }
         * @summary Create partner.
         * @param {CreatePartnerCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PartnersPost(body?: CreatePartnerCommand, options?: any): AxiosPromise<string> {
            return PartnersApiFp(configuration).apiV1PartnersPost(body, options)(axios, basePath);
        },
    };
};

/**
 * PartnersApi - object-oriented interface
 * @export
 * @class PartnersApi
 * @extends {BaseAPI}
 */
export class PartnersApi extends BaseAPI {
    /**
     * Sample request:        GET /api/v1/partners      {          \"pageQueryFilter\": {              \"page\": 1,              \"limit\": 20,              \"lastRetrived\": \"2020-02-05T08:40\"          },          \"searchString\": \"patner\"      }
     * @summary Get all partners.
     * @param {string} [id] 
     * @param {string} [fullname] 
     * @param {string} [email] 
     * @param {object} [gender] 
     * @param {Date} [dateOfBirth] 
     * @param {Date} [created] 
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {Date} [lastRetrieved] 
     * @param {boolean} [current] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartnersApi
     */
    public apiV1PartnersGet(id?: string, fullname?: string, email?: string, gender?: object, dateOfBirth?: Date, created?: Date, page?: number, limit?: number, lastRetrieved?: Date, current?: boolean, options?: any) {
        return PartnersApiFp(this.configuration).apiV1PartnersGet(id, fullname, email, gender, dateOfBirth, created, page, limit, lastRetrieved, current, options)(this.axios, this.basePath);
    }

    /**
     * Sample request:        DELETE /api/v1/partners/1
     * @summary Delete patner.
     * @param {string} partnerId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartnersApi
     */
    public apiV1PartnersPartnerIdDelete(partnerId: string, options?: any) {
        return PartnersApiFp(this.configuration).apiV1PartnersPartnerIdDelete(partnerId, options)(this.axios, this.basePath);
    }

    /**
     * Sample request:        GET /api/v1/patners/1
     * @summary Get partner.
     * @param {string} partnerId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartnersApi
     */
    public apiV1PartnersPartnerIdGet(partnerId: string, options?: any) {
        return PartnersApiFp(this.configuration).apiV1PartnersPartnerIdGet(partnerId, options)(this.axios, this.basePath);
    }

    /**
     * Sample request:        PUT /api/v1/patners/1      {          firstName\": \"string\",          \"lastName\": \"string\",          \"photo\": \"string\",          \"locations\": [            {              \"locationType\": \"LivesIn\",              \"latitude\": 0,              \"longitude\": 0,              \"country\": \"string\",              \"state\": \"string\",              \"county\": \"string\",              \"city\": \"string\",              \"zipCode\": \"string\",              \"address\": \"string\"            }          ]      }
     * @summary Update partner.
     * @param {string} partnerId 
     * @param {UpdatePartnerCommand} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartnersApi
     */
    public apiV1PartnersPartnerIdPut(partnerId: string, body?: UpdatePartnerCommand, options?: any) {
        return PartnersApiFp(this.configuration).apiV1PartnersPartnerIdPut(partnerId, body, options)(this.axios, this.basePath);
    }

    /**
     * Sample request:        POST /api/v1/partners      {          \"userName\": \"string\",          \"email\": \"string\",          \"firstName\": \"string\",          \"lastName\": \"string\",          \"photo\": \"string\",          \"photoThumbnail\": \"string\",          \"gender\": \"NotSpecified\",          \"dateOfBirth\": \"2020-02-22T18:04:18.025Z\",          \"locations\": [            {              \"locationType\": \"LivesIn\",              \"latitude\": 0,              \"longitude\": 0,              \"country\": \"string\",              \"state\": \"string\",              \"county\": \"string\",              \"city\": \"string\",              \"zipCode\": \"string\",              \"address\": \"string\"            }          ]      }
     * @summary Create partner.
     * @param {CreatePartnerCommand} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartnersApi
     */
    public apiV1PartnersPost(body?: CreatePartnerCommand, options?: any) {
        return PartnersApiFp(this.configuration).apiV1PartnersPost(body, options)(this.axios, this.basePath);
    }

}


/**
 * PatientsApi - axios parameter creator
 * @export
 */
export const PatientsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Sample request:        GET /api/v1/patients      {          \"pageQueryFilter\": {              \"page\": 1,              \"limit\": 20,              \"lastRetrived\": \"2020-02-05T08:40\"          },          \"searchString\": \"patient\"      }
         * @summary Get all patients.
         * @param {string} [id] 
         * @param {string} [fullname] 
         * @param {string} [email] 
         * @param {object} [gender] 
         * @param {Date} [dateOfBirth] 
         * @param {Date} [created] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {Date} [lastRetrieved] 
         * @param {boolean} [current] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PatientsGet(id?: string, fullname?: string, email?: string, gender?: object, dateOfBirth?: Date, created?: Date, page?: number, limit?: number, lastRetrieved?: Date, current?: boolean, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/patients`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }

            if (fullname !== undefined) {
                localVarQueryParameter['Fullname'] = fullname;
            }

            if (email !== undefined) {
                localVarQueryParameter['Email'] = email;
            }

            if (gender !== undefined) {
                localVarQueryParameter['Gender'] = gender;
            }

            if (dateOfBirth !== undefined) {
                localVarQueryParameter['DateOfBirth'] = (dateOfBirth as any instanceof Date) ?
                    (dateOfBirth as any).toISOString() :
                    dateOfBirth;
            }

            if (created !== undefined) {
                localVarQueryParameter['Created'] = (created as any instanceof Date) ?
                    (created as any).toISOString() :
                    created;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (lastRetrieved !== undefined) {
                localVarQueryParameter['lastRetrieved'] = (lastRetrieved as any instanceof Date) ?
                    (lastRetrieved as any).toISOString() :
                    lastRetrieved;
            }

            if (current !== undefined) {
                localVarQueryParameter['Current'] = current;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        DELETE /api/v1/patients/1
         * @summary Delete patient.
         * @param {string} patientId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PatientsPatientIdDelete(patientId: string, options: any = {}): RequestArgs {
            // verify required parameter 'patientId' is not null or undefined
            if (patientId === null || patientId === undefined) {
                throw new RequiredError('patientId','Required parameter patientId was null or undefined when calling apiV1PatientsPatientIdDelete.');
            }
            const localVarPath = `/api/v1/patients/{patientId}`
                .replace(`{${"patientId"}}`, encodeURIComponent(String(patientId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        GET /api/v1/patients/1
         * @summary Get patient.
         * @param {string} patientId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PatientsPatientIdGet(patientId: string, options: any = {}): RequestArgs {
            // verify required parameter 'patientId' is not null or undefined
            if (patientId === null || patientId === undefined) {
                throw new RequiredError('patientId','Required parameter patientId was null or undefined when calling apiV1PatientsPatientIdGet.');
            }
            const localVarPath = `/api/v1/patients/{patientId}`
                .replace(`{${"patientId"}}`, encodeURIComponent(String(patientId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        PUT /api/v1/patients/1      {          \"referralCode\": \"string\",          \"firstName\": \"patient\",          \"lastName\": \"cloud\",          \"photo\": \"string\",          \"locations\": [            {              \"locationType\": \"LivesIn\",              \"latitude\": 0,              \"longitude\": 0,              \"country\": \"string\",              \"state\": \"string\",              \"county\": \"string\",              \"city\": \"string\",              \"zipCode\": \"string\",              \"address\": \"string\"            }          ]      }
         * @summary Update patient.
         * @param {string} patientId 
         * @param {UpdatePatientCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PatientsPatientIdPut(patientId: string, body?: UpdatePatientCommand, options: any = {}): RequestArgs {
            // verify required parameter 'patientId' is not null or undefined
            if (patientId === null || patientId === undefined) {
                throw new RequiredError('patientId','Required parameter patientId was null or undefined when calling apiV1PatientsPatientIdPut.');
            }
            const localVarPath = `/api/v1/patients/{patientId}`
                .replace(`{${"patientId"}}`, encodeURIComponent(String(patientId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        POST /api/v1/patients      {          \"referralCode\": \"123456\",          \"email\": \"patient@icloudhospital.com\",          \"firstName\": \"patient\",          \"lastName\": \"cloud\",          \"photo\": \"string\",          \"locations\": [            {              \"locationType\": \"LivesIn\",              \"latitude\": 0,              \"longitude\": 0,              \"country\": \"string\",              \"state\": \"string\",              \"county\": \"string\",              \"city\": \"string\",              \"zipCode\": \"string\",              \"address\": \"string\"            }          ]      }
         * @summary Create patient.
         * @param {CreatePatientCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PatientsPost(body?: CreatePatientCommand, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/patients`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PatientsApi - functional programming interface
 * @export
 */
export const PatientsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Sample request:        GET /api/v1/patients      {          \"pageQueryFilter\": {              \"page\": 1,              \"limit\": 20,              \"lastRetrived\": \"2020-02-05T08:40\"          },          \"searchString\": \"patient\"      }
         * @summary Get all patients.
         * @param {string} [id] 
         * @param {string} [fullname] 
         * @param {string} [email] 
         * @param {object} [gender] 
         * @param {Date} [dateOfBirth] 
         * @param {Date} [created] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {Date} [lastRetrieved] 
         * @param {boolean} [current] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PatientsGet(id?: string, fullname?: string, email?: string, gender?: object, dateOfBirth?: Date, created?: Date, page?: number, limit?: number, lastRetrieved?: Date, current?: boolean, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PatientsViewModel> {
            const localVarAxiosArgs = PatientsApiAxiosParamCreator(configuration).apiV1PatientsGet(id, fullname, email, gender, dateOfBirth, created, page, limit, lastRetrieved, current, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        DELETE /api/v1/patients/1
         * @summary Delete patient.
         * @param {string} patientId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PatientsPatientIdDelete(patientId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = PatientsApiAxiosParamCreator(configuration).apiV1PatientsPatientIdDelete(patientId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        GET /api/v1/patients/1
         * @summary Get patient.
         * @param {string} patientId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PatientsPatientIdGet(patientId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PatientViewModel> {
            const localVarAxiosArgs = PatientsApiAxiosParamCreator(configuration).apiV1PatientsPatientIdGet(patientId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        PUT /api/v1/patients/1      {          \"referralCode\": \"string\",          \"firstName\": \"patient\",          \"lastName\": \"cloud\",          \"photo\": \"string\",          \"locations\": [            {              \"locationType\": \"LivesIn\",              \"latitude\": 0,              \"longitude\": 0,              \"country\": \"string\",              \"state\": \"string\",              \"county\": \"string\",              \"city\": \"string\",              \"zipCode\": \"string\",              \"address\": \"string\"            }          ]      }
         * @summary Update patient.
         * @param {string} patientId 
         * @param {UpdatePatientCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PatientsPatientIdPut(patientId: string, body?: UpdatePatientCommand, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = PatientsApiAxiosParamCreator(configuration).apiV1PatientsPatientIdPut(patientId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        POST /api/v1/patients      {          \"referralCode\": \"123456\",          \"email\": \"patient@icloudhospital.com\",          \"firstName\": \"patient\",          \"lastName\": \"cloud\",          \"photo\": \"string\",          \"locations\": [            {              \"locationType\": \"LivesIn\",              \"latitude\": 0,              \"longitude\": 0,              \"country\": \"string\",              \"state\": \"string\",              \"county\": \"string\",              \"city\": \"string\",              \"zipCode\": \"string\",              \"address\": \"string\"            }          ]      }
         * @summary Create patient.
         * @param {CreatePatientCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PatientsPost(body?: CreatePatientCommand, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string> {
            const localVarAxiosArgs = PatientsApiAxiosParamCreator(configuration).apiV1PatientsPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * PatientsApi - factory interface
 * @export
 */
export const PatientsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Sample request:        GET /api/v1/patients      {          \"pageQueryFilter\": {              \"page\": 1,              \"limit\": 20,              \"lastRetrived\": \"2020-02-05T08:40\"          },          \"searchString\": \"patient\"      }
         * @summary Get all patients.
         * @param {string} [id] 
         * @param {string} [fullname] 
         * @param {string} [email] 
         * @param {object} [gender] 
         * @param {Date} [dateOfBirth] 
         * @param {Date} [created] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {Date} [lastRetrieved] 
         * @param {boolean} [current] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PatientsGet(id?: string, fullname?: string, email?: string, gender?: object, dateOfBirth?: Date, created?: Date, page?: number, limit?: number, lastRetrieved?: Date, current?: boolean, options?: any): AxiosPromise<PatientsViewModel> {
            return PatientsApiFp(configuration).apiV1PatientsGet(id, fullname, email, gender, dateOfBirth, created, page, limit, lastRetrieved, current, options)(axios, basePath);
        },
        /**
         * Sample request:        DELETE /api/v1/patients/1
         * @summary Delete patient.
         * @param {string} patientId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PatientsPatientIdDelete(patientId: string, options?: any): AxiosPromise<boolean> {
            return PatientsApiFp(configuration).apiV1PatientsPatientIdDelete(patientId, options)(axios, basePath);
        },
        /**
         * Sample request:        GET /api/v1/patients/1
         * @summary Get patient.
         * @param {string} patientId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PatientsPatientIdGet(patientId: string, options?: any): AxiosPromise<PatientViewModel> {
            return PatientsApiFp(configuration).apiV1PatientsPatientIdGet(patientId, options)(axios, basePath);
        },
        /**
         * Sample request:        PUT /api/v1/patients/1      {          \"referralCode\": \"string\",          \"firstName\": \"patient\",          \"lastName\": \"cloud\",          \"photo\": \"string\",          \"locations\": [            {              \"locationType\": \"LivesIn\",              \"latitude\": 0,              \"longitude\": 0,              \"country\": \"string\",              \"state\": \"string\",              \"county\": \"string\",              \"city\": \"string\",              \"zipCode\": \"string\",              \"address\": \"string\"            }          ]      }
         * @summary Update patient.
         * @param {string} patientId 
         * @param {UpdatePatientCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PatientsPatientIdPut(patientId: string, body?: UpdatePatientCommand, options?: any): AxiosPromise<boolean> {
            return PatientsApiFp(configuration).apiV1PatientsPatientIdPut(patientId, body, options)(axios, basePath);
        },
        /**
         * Sample request:        POST /api/v1/patients      {          \"referralCode\": \"123456\",          \"email\": \"patient@icloudhospital.com\",          \"firstName\": \"patient\",          \"lastName\": \"cloud\",          \"photo\": \"string\",          \"locations\": [            {              \"locationType\": \"LivesIn\",              \"latitude\": 0,              \"longitude\": 0,              \"country\": \"string\",              \"state\": \"string\",              \"county\": \"string\",              \"city\": \"string\",              \"zipCode\": \"string\",              \"address\": \"string\"            }          ]      }
         * @summary Create patient.
         * @param {CreatePatientCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PatientsPost(body?: CreatePatientCommand, options?: any): AxiosPromise<string> {
            return PatientsApiFp(configuration).apiV1PatientsPost(body, options)(axios, basePath);
        },
    };
};

/**
 * PatientsApi - object-oriented interface
 * @export
 * @class PatientsApi
 * @extends {BaseAPI}
 */
export class PatientsApi extends BaseAPI {
    /**
     * Sample request:        GET /api/v1/patients      {          \"pageQueryFilter\": {              \"page\": 1,              \"limit\": 20,              \"lastRetrived\": \"2020-02-05T08:40\"          },          \"searchString\": \"patient\"      }
     * @summary Get all patients.
     * @param {string} [id] 
     * @param {string} [fullname] 
     * @param {string} [email] 
     * @param {object} [gender] 
     * @param {Date} [dateOfBirth] 
     * @param {Date} [created] 
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {Date} [lastRetrieved] 
     * @param {boolean} [current] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientsApi
     */
    public apiV1PatientsGet(id?: string, fullname?: string, email?: string, gender?: object, dateOfBirth?: Date, created?: Date, page?: number, limit?: number, lastRetrieved?: Date, current?: boolean, options?: any) {
        return PatientsApiFp(this.configuration).apiV1PatientsGet(id, fullname, email, gender, dateOfBirth, created, page, limit, lastRetrieved, current, options)(this.axios, this.basePath);
    }

    /**
     * Sample request:        DELETE /api/v1/patients/1
     * @summary Delete patient.
     * @param {string} patientId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientsApi
     */
    public apiV1PatientsPatientIdDelete(patientId: string, options?: any) {
        return PatientsApiFp(this.configuration).apiV1PatientsPatientIdDelete(patientId, options)(this.axios, this.basePath);
    }

    /**
     * Sample request:        GET /api/v1/patients/1
     * @summary Get patient.
     * @param {string} patientId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientsApi
     */
    public apiV1PatientsPatientIdGet(patientId: string, options?: any) {
        return PatientsApiFp(this.configuration).apiV1PatientsPatientIdGet(patientId, options)(this.axios, this.basePath);
    }

    /**
     * Sample request:        PUT /api/v1/patients/1      {          \"referralCode\": \"string\",          \"firstName\": \"patient\",          \"lastName\": \"cloud\",          \"photo\": \"string\",          \"locations\": [            {              \"locationType\": \"LivesIn\",              \"latitude\": 0,              \"longitude\": 0,              \"country\": \"string\",              \"state\": \"string\",              \"county\": \"string\",              \"city\": \"string\",              \"zipCode\": \"string\",              \"address\": \"string\"            }          ]      }
     * @summary Update patient.
     * @param {string} patientId 
     * @param {UpdatePatientCommand} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientsApi
     */
    public apiV1PatientsPatientIdPut(patientId: string, body?: UpdatePatientCommand, options?: any) {
        return PatientsApiFp(this.configuration).apiV1PatientsPatientIdPut(patientId, body, options)(this.axios, this.basePath);
    }

    /**
     * Sample request:        POST /api/v1/patients      {          \"referralCode\": \"123456\",          \"email\": \"patient@icloudhospital.com\",          \"firstName\": \"patient\",          \"lastName\": \"cloud\",          \"photo\": \"string\",          \"locations\": [            {              \"locationType\": \"LivesIn\",              \"latitude\": 0,              \"longitude\": 0,              \"country\": \"string\",              \"state\": \"string\",              \"county\": \"string\",              \"city\": \"string\",              \"zipCode\": \"string\",              \"address\": \"string\"            }          ]      }
     * @summary Create patient.
     * @param {CreatePatientCommand} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientsApi
     */
    public apiV1PatientsPost(body?: CreatePatientCommand, options?: any) {
        return PatientsApiFp(this.configuration).apiV1PatientsPost(body, options)(this.axios, this.basePath);
    }

}


/**
 * ProfilesApi - axios parameter creator
 * @export
 */
export const ProfilesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Sample request:        POST /api/v1/profiles/changeEmail      {          \"email\": \"user@example.com\"      }
         * @summary Change user\'s email on both Identity and Api.
         * @param {ChangeEmailCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ProfilesChangeemailPost(body?: ChangeEmailCommand, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/profiles/changeemail`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        GET /api/v1/profiles
         * @summary Get current user\'s profile.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ProfilesGet(options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/profiles`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProfilesApi - functional programming interface
 * @export
 */
export const ProfilesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Sample request:        POST /api/v1/profiles/changeEmail      {          \"email\": \"user@example.com\"      }
         * @summary Change user\'s email on both Identity and Api.
         * @param {ChangeEmailCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ProfilesChangeemailPost(body?: ChangeEmailCommand, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = ProfilesApiAxiosParamCreator(configuration).apiV1ProfilesChangeemailPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        GET /api/v1/profiles
         * @summary Get current user\'s profile.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ProfilesGet(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserViewModel> {
            const localVarAxiosArgs = ProfilesApiAxiosParamCreator(configuration).apiV1ProfilesGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ProfilesApi - factory interface
 * @export
 */
export const ProfilesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Sample request:        POST /api/v1/profiles/changeEmail      {          \"email\": \"user@example.com\"      }
         * @summary Change user\'s email on both Identity and Api.
         * @param {ChangeEmailCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ProfilesChangeemailPost(body?: ChangeEmailCommand, options?: any): AxiosPromise<boolean> {
            return ProfilesApiFp(configuration).apiV1ProfilesChangeemailPost(body, options)(axios, basePath);
        },
        /**
         * Sample request:        GET /api/v1/profiles
         * @summary Get current user\'s profile.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ProfilesGet(options?: any): AxiosPromise<UserViewModel> {
            return ProfilesApiFp(configuration).apiV1ProfilesGet(options)(axios, basePath);
        },
    };
};

/**
 * ProfilesApi - object-oriented interface
 * @export
 * @class ProfilesApi
 * @extends {BaseAPI}
 */
export class ProfilesApi extends BaseAPI {
    /**
     * Sample request:        POST /api/v1/profiles/changeEmail      {          \"email\": \"user@example.com\"      }
     * @summary Change user\'s email on both Identity and Api.
     * @param {ChangeEmailCommand} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApi
     */
    public apiV1ProfilesChangeemailPost(body?: ChangeEmailCommand, options?: any) {
        return ProfilesApiFp(this.configuration).apiV1ProfilesChangeemailPost(body, options)(this.axios, this.basePath);
    }

    /**
     * Sample request:        GET /api/v1/profiles
     * @summary Get current user\'s profile.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApi
     */
    public apiV1ProfilesGet(options?: any) {
        return ProfilesApiFp(this.configuration).apiV1ProfilesGet(options)(this.axios, this.basePath);
    }

}


/**
 * ServicesApi - axios parameter creator
 * @export
 */
export const ServicesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Sample request:        POST /api/v1/hospitals/1/specialties/1/services      {          \"name\": \"Heart check up\",          \"description\": \"Asan Hospital (Asan Medical Center) is the largest multidisciplinary medical center in South Korea, which can serve 2,700 patients at once.The key specialties in the hospital are organ transplant, oncology, cardiology, and cardiac surgery.Almost half of all heart transplants in South Korea are carried out (45%) at Asan.The success of organ transplants ranges from 90%. Every day, 11,800 outpatients and 2,550 inpatients are treated in Asan Hospital. Medical tourists from the USA, China, the UAE, Russia, Kazakhstan, and Mongolia choose Asan Hospital.\",          \"minPrice\": 2235,          \"maxPrice\": 2566,          \"priceReuqest\": false,          \"procedure\": \"Treatment\"      }
         * @summary Create service.
         * @param {string} hospitalId 
         * @param {string} specialtyId 
         * @param {CreateServiceCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdServicesPost(hospitalId: string, specialtyId: string, body?: CreateServiceCommand, options: any = {}): RequestArgs {
            // verify required parameter 'hospitalId' is not null or undefined
            if (hospitalId === null || hospitalId === undefined) {
                throw new RequiredError('hospitalId','Required parameter hospitalId was null or undefined when calling apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdServicesPost.');
            }
            // verify required parameter 'specialtyId' is not null or undefined
            if (specialtyId === null || specialtyId === undefined) {
                throw new RequiredError('specialtyId','Required parameter specialtyId was null or undefined when calling apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdServicesPost.');
            }
            const localVarPath = `/api/v1/hospitals/{hospitalId}/specialties/{specialtyId}/services`
                .replace(`{${"hospitalId"}}`, encodeURIComponent(String(hospitalId)))
                .replace(`{${"specialtyId"}}`, encodeURIComponent(String(specialtyId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        DELETE /api/v1/hospitals/1/specialties/1/services/1
         * @summary Delete service.
         * @param {string} hospitalId 
         * @param {string} specialtyId 
         * @param {string} serviceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdServicesServiceIdDelete(hospitalId: string, specialtyId: string, serviceId: string, options: any = {}): RequestArgs {
            // verify required parameter 'hospitalId' is not null or undefined
            if (hospitalId === null || hospitalId === undefined) {
                throw new RequiredError('hospitalId','Required parameter hospitalId was null or undefined when calling apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdServicesServiceIdDelete.');
            }
            // verify required parameter 'specialtyId' is not null or undefined
            if (specialtyId === null || specialtyId === undefined) {
                throw new RequiredError('specialtyId','Required parameter specialtyId was null or undefined when calling apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdServicesServiceIdDelete.');
            }
            // verify required parameter 'serviceId' is not null or undefined
            if (serviceId === null || serviceId === undefined) {
                throw new RequiredError('serviceId','Required parameter serviceId was null or undefined when calling apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdServicesServiceIdDelete.');
            }
            const localVarPath = `/api/v1/hospitals/{hospitalId}/specialties/{specialtyId}/services/{serviceId}`
                .replace(`{${"hospitalId"}}`, encodeURIComponent(String(hospitalId)))
                .replace(`{${"specialtyId"}}`, encodeURIComponent(String(specialtyId)))
                .replace(`{${"serviceId"}}`, encodeURIComponent(String(serviceId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        GET /api/v1/hospitals/1/specialties/1/services/1
         * @summary Get service.
         * @param {string} hospitalId 
         * @param {string} specialtyId 
         * @param {string} serviceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdServicesServiceIdGet(hospitalId: string, specialtyId: string, serviceId: string, options: any = {}): RequestArgs {
            // verify required parameter 'hospitalId' is not null or undefined
            if (hospitalId === null || hospitalId === undefined) {
                throw new RequiredError('hospitalId','Required parameter hospitalId was null or undefined when calling apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdServicesServiceIdGet.');
            }
            // verify required parameter 'specialtyId' is not null or undefined
            if (specialtyId === null || specialtyId === undefined) {
                throw new RequiredError('specialtyId','Required parameter specialtyId was null or undefined when calling apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdServicesServiceIdGet.');
            }
            // verify required parameter 'serviceId' is not null or undefined
            if (serviceId === null || serviceId === undefined) {
                throw new RequiredError('serviceId','Required parameter serviceId was null or undefined when calling apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdServicesServiceIdGet.');
            }
            const localVarPath = `/api/v1/hospitals/{hospitalId}/specialties/{specialtyId}/services/{serviceId}`
                .replace(`{${"hospitalId"}}`, encodeURIComponent(String(hospitalId)))
                .replace(`{${"specialtyId"}}`, encodeURIComponent(String(specialtyId)))
                .replace(`{${"serviceId"}}`, encodeURIComponent(String(serviceId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        PUT /api/v1/hospitals/1/specialties/1/services/1      {          \"name\": \"Extended analysis of blood\",          \"description\": \"Extended analysis of blood description.\",          \"minPrice\": 1000,          \"maxPrice\": 2600,          \"priceReuqest\": false      }
         * @summary Update service.
         * @param {string} hospitalId 
         * @param {string} specialtyId 
         * @param {string} serviceId 
         * @param {UpdateServiceCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdServicesServiceIdPut(hospitalId: string, specialtyId: string, serviceId: string, body?: UpdateServiceCommand, options: any = {}): RequestArgs {
            // verify required parameter 'hospitalId' is not null or undefined
            if (hospitalId === null || hospitalId === undefined) {
                throw new RequiredError('hospitalId','Required parameter hospitalId was null or undefined when calling apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdServicesServiceIdPut.');
            }
            // verify required parameter 'specialtyId' is not null or undefined
            if (specialtyId === null || specialtyId === undefined) {
                throw new RequiredError('specialtyId','Required parameter specialtyId was null or undefined when calling apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdServicesServiceIdPut.');
            }
            // verify required parameter 'serviceId' is not null or undefined
            if (serviceId === null || serviceId === undefined) {
                throw new RequiredError('serviceId','Required parameter serviceId was null or undefined when calling apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdServicesServiceIdPut.');
            }
            const localVarPath = `/api/v1/hospitals/{hospitalId}/specialties/{specialtyId}/services/{serviceId}`
                .replace(`{${"hospitalId"}}`, encodeURIComponent(String(hospitalId)))
                .replace(`{${"specialtyId"}}`, encodeURIComponent(String(specialtyId)))
                .replace(`{${"serviceId"}}`, encodeURIComponent(String(serviceId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Smaple request:        PUT /api/v1/hospitals/1/specialties/1/servicesquence      {          \"serviceSequence\": [1, 3, 5]      }
         * @summary Update service sequence.
         * @param {string} hospitalId 
         * @param {string} specialtyId 
         * @param {UpdateServiceSequenceCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdServicesquencePut(hospitalId: string, specialtyId: string, body?: UpdateServiceSequenceCommand, options: any = {}): RequestArgs {
            // verify required parameter 'hospitalId' is not null or undefined
            if (hospitalId === null || hospitalId === undefined) {
                throw new RequiredError('hospitalId','Required parameter hospitalId was null or undefined when calling apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdServicesquencePut.');
            }
            // verify required parameter 'specialtyId' is not null or undefined
            if (specialtyId === null || specialtyId === undefined) {
                throw new RequiredError('specialtyId','Required parameter specialtyId was null or undefined when calling apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdServicesquencePut.');
            }
            const localVarPath = `/api/v1/hospitals/{hospitalId}/specialties/{specialtyId}/servicesquence`
                .replace(`{${"hospitalId"}}`, encodeURIComponent(String(hospitalId)))
                .replace(`{${"specialtyId"}}`, encodeURIComponent(String(specialtyId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get service counts.
         * @param {string} [specialtyTypeId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsServicecountGet(specialtyTypeId?: string, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/hospitals/servicecount`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (specialtyTypeId !== undefined) {
                localVarQueryParameter['specialtyTypeId'] = specialtyTypeId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        GET /api/v1/hospitals/services
         * @summary Get all services.
         * @param {string} [id] 
         * @param {string} [name] 
         * @param {string} [description] 
         * @param {string} [hospitalId] 
         * @param {string} [hospitalName] 
         * @param {string} [specialtyId] 
         * @param {string} [specialtyTypeId] 
         * @param {string} [specialtyTypeName] 
         * @param {object} [marketingType] 
         * @param {object} [procedure] 
         * @param {Date} [created] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {Date} [lastRetrieved] 
         * @param {boolean} [current] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsServicesGet(id?: string, name?: string, description?: string, hospitalId?: string, hospitalName?: string, specialtyId?: string, specialtyTypeId?: string, specialtyTypeName?: string, marketingType?: object, procedure?: object, created?: Date, page?: number, limit?: number, lastRetrieved?: Date, current?: boolean, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/hospitals/services`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }

            if (name !== undefined) {
                localVarQueryParameter['Name'] = name;
            }

            if (description !== undefined) {
                localVarQueryParameter['Description'] = description;
            }

            if (hospitalId !== undefined) {
                localVarQueryParameter['HospitalId'] = hospitalId;
            }

            if (hospitalName !== undefined) {
                localVarQueryParameter['HospitalName'] = hospitalName;
            }

            if (specialtyId !== undefined) {
                localVarQueryParameter['SpecialtyId'] = specialtyId;
            }

            if (specialtyTypeId !== undefined) {
                localVarQueryParameter['SpecialtyTypeId'] = specialtyTypeId;
            }

            if (specialtyTypeName !== undefined) {
                localVarQueryParameter['SpecialtyTypeName'] = specialtyTypeName;
            }

            if (marketingType !== undefined) {
                localVarQueryParameter['MarketingType'] = marketingType;
            }

            if (procedure !== undefined) {
                localVarQueryParameter['Procedure'] = procedure;
            }

            if (created !== undefined) {
                localVarQueryParameter['Created'] = (created as any instanceof Date) ?
                    (created as any).toISOString() :
                    created;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (lastRetrieved !== undefined) {
                localVarQueryParameter['lastRetrieved'] = (lastRetrieved as any instanceof Date) ?
                    (lastRetrieved as any).toISOString() :
                    lastRetrieved;
            }

            if (current !== undefined) {
                localVarQueryParameter['Current'] = current;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ServicesApi - functional programming interface
 * @export
 */
export const ServicesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Sample request:        POST /api/v1/hospitals/1/specialties/1/services      {          \"name\": \"Heart check up\",          \"description\": \"Asan Hospital (Asan Medical Center) is the largest multidisciplinary medical center in South Korea, which can serve 2,700 patients at once.The key specialties in the hospital are organ transplant, oncology, cardiology, and cardiac surgery.Almost half of all heart transplants in South Korea are carried out (45%) at Asan.The success of organ transplants ranges from 90%. Every day, 11,800 outpatients and 2,550 inpatients are treated in Asan Hospital. Medical tourists from the USA, China, the UAE, Russia, Kazakhstan, and Mongolia choose Asan Hospital.\",          \"minPrice\": 2235,          \"maxPrice\": 2566,          \"priceReuqest\": false,          \"procedure\": \"Treatment\"      }
         * @summary Create service.
         * @param {string} hospitalId 
         * @param {string} specialtyId 
         * @param {CreateServiceCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdServicesPost(hospitalId: string, specialtyId: string, body?: CreateServiceCommand, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string> {
            const localVarAxiosArgs = ServicesApiAxiosParamCreator(configuration).apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdServicesPost(hospitalId, specialtyId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        DELETE /api/v1/hospitals/1/specialties/1/services/1
         * @summary Delete service.
         * @param {string} hospitalId 
         * @param {string} specialtyId 
         * @param {string} serviceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdServicesServiceIdDelete(hospitalId: string, specialtyId: string, serviceId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = ServicesApiAxiosParamCreator(configuration).apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdServicesServiceIdDelete(hospitalId, specialtyId, serviceId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        GET /api/v1/hospitals/1/specialties/1/services/1
         * @summary Get service.
         * @param {string} hospitalId 
         * @param {string} specialtyId 
         * @param {string} serviceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdServicesServiceIdGet(hospitalId: string, specialtyId: string, serviceId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceViewModel> {
            const localVarAxiosArgs = ServicesApiAxiosParamCreator(configuration).apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdServicesServiceIdGet(hospitalId, specialtyId, serviceId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        PUT /api/v1/hospitals/1/specialties/1/services/1      {          \"name\": \"Extended analysis of blood\",          \"description\": \"Extended analysis of blood description.\",          \"minPrice\": 1000,          \"maxPrice\": 2600,          \"priceReuqest\": false      }
         * @summary Update service.
         * @param {string} hospitalId 
         * @param {string} specialtyId 
         * @param {string} serviceId 
         * @param {UpdateServiceCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdServicesServiceIdPut(hospitalId: string, specialtyId: string, serviceId: string, body?: UpdateServiceCommand, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = ServicesApiAxiosParamCreator(configuration).apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdServicesServiceIdPut(hospitalId, specialtyId, serviceId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Smaple request:        PUT /api/v1/hospitals/1/specialties/1/servicesquence      {          \"serviceSequence\": [1, 3, 5]      }
         * @summary Update service sequence.
         * @param {string} hospitalId 
         * @param {string} specialtyId 
         * @param {UpdateServiceSequenceCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdServicesquencePut(hospitalId: string, specialtyId: string, body?: UpdateServiceSequenceCommand, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = ServicesApiAxiosParamCreator(configuration).apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdServicesquencePut(hospitalId, specialtyId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get service counts.
         * @param {string} [specialtyTypeId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsServicecountGet(specialtyTypeId?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceCountViewModel> {
            const localVarAxiosArgs = ServicesApiAxiosParamCreator(configuration).apiV1HospitalsServicecountGet(specialtyTypeId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        GET /api/v1/hospitals/services
         * @summary Get all services.
         * @param {string} [id] 
         * @param {string} [name] 
         * @param {string} [description] 
         * @param {string} [hospitalId] 
         * @param {string} [hospitalName] 
         * @param {string} [specialtyId] 
         * @param {string} [specialtyTypeId] 
         * @param {string} [specialtyTypeName] 
         * @param {object} [marketingType] 
         * @param {object} [procedure] 
         * @param {Date} [created] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {Date} [lastRetrieved] 
         * @param {boolean} [current] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsServicesGet(id?: string, name?: string, description?: string, hospitalId?: string, hospitalName?: string, specialtyId?: string, specialtyTypeId?: string, specialtyTypeName?: string, marketingType?: object, procedure?: object, created?: Date, page?: number, limit?: number, lastRetrieved?: Date, current?: boolean, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServicesViewModel> {
            const localVarAxiosArgs = ServicesApiAxiosParamCreator(configuration).apiV1HospitalsServicesGet(id, name, description, hospitalId, hospitalName, specialtyId, specialtyTypeId, specialtyTypeName, marketingType, procedure, created, page, limit, lastRetrieved, current, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ServicesApi - factory interface
 * @export
 */
export const ServicesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Sample request:        POST /api/v1/hospitals/1/specialties/1/services      {          \"name\": \"Heart check up\",          \"description\": \"Asan Hospital (Asan Medical Center) is the largest multidisciplinary medical center in South Korea, which can serve 2,700 patients at once.The key specialties in the hospital are organ transplant, oncology, cardiology, and cardiac surgery.Almost half of all heart transplants in South Korea are carried out (45%) at Asan.The success of organ transplants ranges from 90%. Every day, 11,800 outpatients and 2,550 inpatients are treated in Asan Hospital. Medical tourists from the USA, China, the UAE, Russia, Kazakhstan, and Mongolia choose Asan Hospital.\",          \"minPrice\": 2235,          \"maxPrice\": 2566,          \"priceReuqest\": false,          \"procedure\": \"Treatment\"      }
         * @summary Create service.
         * @param {string} hospitalId 
         * @param {string} specialtyId 
         * @param {CreateServiceCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdServicesPost(hospitalId: string, specialtyId: string, body?: CreateServiceCommand, options?: any): AxiosPromise<string> {
            return ServicesApiFp(configuration).apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdServicesPost(hospitalId, specialtyId, body, options)(axios, basePath);
        },
        /**
         * Sample request:        DELETE /api/v1/hospitals/1/specialties/1/services/1
         * @summary Delete service.
         * @param {string} hospitalId 
         * @param {string} specialtyId 
         * @param {string} serviceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdServicesServiceIdDelete(hospitalId: string, specialtyId: string, serviceId: string, options?: any): AxiosPromise<boolean> {
            return ServicesApiFp(configuration).apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdServicesServiceIdDelete(hospitalId, specialtyId, serviceId, options)(axios, basePath);
        },
        /**
         * Sample request:        GET /api/v1/hospitals/1/specialties/1/services/1
         * @summary Get service.
         * @param {string} hospitalId 
         * @param {string} specialtyId 
         * @param {string} serviceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdServicesServiceIdGet(hospitalId: string, specialtyId: string, serviceId: string, options?: any): AxiosPromise<ServiceViewModel> {
            return ServicesApiFp(configuration).apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdServicesServiceIdGet(hospitalId, specialtyId, serviceId, options)(axios, basePath);
        },
        /**
         * Sample request:        PUT /api/v1/hospitals/1/specialties/1/services/1      {          \"name\": \"Extended analysis of blood\",          \"description\": \"Extended analysis of blood description.\",          \"minPrice\": 1000,          \"maxPrice\": 2600,          \"priceReuqest\": false      }
         * @summary Update service.
         * @param {string} hospitalId 
         * @param {string} specialtyId 
         * @param {string} serviceId 
         * @param {UpdateServiceCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdServicesServiceIdPut(hospitalId: string, specialtyId: string, serviceId: string, body?: UpdateServiceCommand, options?: any): AxiosPromise<boolean> {
            return ServicesApiFp(configuration).apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdServicesServiceIdPut(hospitalId, specialtyId, serviceId, body, options)(axios, basePath);
        },
        /**
         * Smaple request:        PUT /api/v1/hospitals/1/specialties/1/servicesquence      {          \"serviceSequence\": [1, 3, 5]      }
         * @summary Update service sequence.
         * @param {string} hospitalId 
         * @param {string} specialtyId 
         * @param {UpdateServiceSequenceCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdServicesquencePut(hospitalId: string, specialtyId: string, body?: UpdateServiceSequenceCommand, options?: any): AxiosPromise<boolean> {
            return ServicesApiFp(configuration).apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdServicesquencePut(hospitalId, specialtyId, body, options)(axios, basePath);
        },
        /**
         * 
         * @summary Get service counts.
         * @param {string} [specialtyTypeId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsServicecountGet(specialtyTypeId?: string, options?: any): AxiosPromise<ServiceCountViewModel> {
            return ServicesApiFp(configuration).apiV1HospitalsServicecountGet(specialtyTypeId, options)(axios, basePath);
        },
        /**
         * Sample request:        GET /api/v1/hospitals/services
         * @summary Get all services.
         * @param {string} [id] 
         * @param {string} [name] 
         * @param {string} [description] 
         * @param {string} [hospitalId] 
         * @param {string} [hospitalName] 
         * @param {string} [specialtyId] 
         * @param {string} [specialtyTypeId] 
         * @param {string} [specialtyTypeName] 
         * @param {object} [marketingType] 
         * @param {object} [procedure] 
         * @param {Date} [created] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {Date} [lastRetrieved] 
         * @param {boolean} [current] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsServicesGet(id?: string, name?: string, description?: string, hospitalId?: string, hospitalName?: string, specialtyId?: string, specialtyTypeId?: string, specialtyTypeName?: string, marketingType?: object, procedure?: object, created?: Date, page?: number, limit?: number, lastRetrieved?: Date, current?: boolean, options?: any): AxiosPromise<ServicesViewModel> {
            return ServicesApiFp(configuration).apiV1HospitalsServicesGet(id, name, description, hospitalId, hospitalName, specialtyId, specialtyTypeId, specialtyTypeName, marketingType, procedure, created, page, limit, lastRetrieved, current, options)(axios, basePath);
        },
    };
};

/**
 * ServicesApi - object-oriented interface
 * @export
 * @class ServicesApi
 * @extends {BaseAPI}
 */
export class ServicesApi extends BaseAPI {
    /**
     * Sample request:        POST /api/v1/hospitals/1/specialties/1/services      {          \"name\": \"Heart check up\",          \"description\": \"Asan Hospital (Asan Medical Center) is the largest multidisciplinary medical center in South Korea, which can serve 2,700 patients at once.The key specialties in the hospital are organ transplant, oncology, cardiology, and cardiac surgery.Almost half of all heart transplants in South Korea are carried out (45%) at Asan.The success of organ transplants ranges from 90%. Every day, 11,800 outpatients and 2,550 inpatients are treated in Asan Hospital. Medical tourists from the USA, China, the UAE, Russia, Kazakhstan, and Mongolia choose Asan Hospital.\",          \"minPrice\": 2235,          \"maxPrice\": 2566,          \"priceReuqest\": false,          \"procedure\": \"Treatment\"      }
     * @summary Create service.
     * @param {string} hospitalId 
     * @param {string} specialtyId 
     * @param {CreateServiceCommand} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServicesApi
     */
    public apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdServicesPost(hospitalId: string, specialtyId: string, body?: CreateServiceCommand, options?: any) {
        return ServicesApiFp(this.configuration).apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdServicesPost(hospitalId, specialtyId, body, options)(this.axios, this.basePath);
    }

    /**
     * Sample request:        DELETE /api/v1/hospitals/1/specialties/1/services/1
     * @summary Delete service.
     * @param {string} hospitalId 
     * @param {string} specialtyId 
     * @param {string} serviceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServicesApi
     */
    public apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdServicesServiceIdDelete(hospitalId: string, specialtyId: string, serviceId: string, options?: any) {
        return ServicesApiFp(this.configuration).apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdServicesServiceIdDelete(hospitalId, specialtyId, serviceId, options)(this.axios, this.basePath);
    }

    /**
     * Sample request:        GET /api/v1/hospitals/1/specialties/1/services/1
     * @summary Get service.
     * @param {string} hospitalId 
     * @param {string} specialtyId 
     * @param {string} serviceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServicesApi
     */
    public apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdServicesServiceIdGet(hospitalId: string, specialtyId: string, serviceId: string, options?: any) {
        return ServicesApiFp(this.configuration).apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdServicesServiceIdGet(hospitalId, specialtyId, serviceId, options)(this.axios, this.basePath);
    }

    /**
     * Sample request:        PUT /api/v1/hospitals/1/specialties/1/services/1      {          \"name\": \"Extended analysis of blood\",          \"description\": \"Extended analysis of blood description.\",          \"minPrice\": 1000,          \"maxPrice\": 2600,          \"priceReuqest\": false      }
     * @summary Update service.
     * @param {string} hospitalId 
     * @param {string} specialtyId 
     * @param {string} serviceId 
     * @param {UpdateServiceCommand} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServicesApi
     */
    public apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdServicesServiceIdPut(hospitalId: string, specialtyId: string, serviceId: string, body?: UpdateServiceCommand, options?: any) {
        return ServicesApiFp(this.configuration).apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdServicesServiceIdPut(hospitalId, specialtyId, serviceId, body, options)(this.axios, this.basePath);
    }

    /**
     * Smaple request:        PUT /api/v1/hospitals/1/specialties/1/servicesquence      {          \"serviceSequence\": [1, 3, 5]      }
     * @summary Update service sequence.
     * @param {string} hospitalId 
     * @param {string} specialtyId 
     * @param {UpdateServiceSequenceCommand} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServicesApi
     */
    public apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdServicesquencePut(hospitalId: string, specialtyId: string, body?: UpdateServiceSequenceCommand, options?: any) {
        return ServicesApiFp(this.configuration).apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdServicesquencePut(hospitalId, specialtyId, body, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Get service counts.
     * @param {string} [specialtyTypeId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServicesApi
     */
    public apiV1HospitalsServicecountGet(specialtyTypeId?: string, options?: any) {
        return ServicesApiFp(this.configuration).apiV1HospitalsServicecountGet(specialtyTypeId, options)(this.axios, this.basePath);
    }

    /**
     * Sample request:        GET /api/v1/hospitals/services
     * @summary Get all services.
     * @param {string} [id] 
     * @param {string} [name] 
     * @param {string} [description] 
     * @param {string} [hospitalId] 
     * @param {string} [hospitalName] 
     * @param {string} [specialtyId] 
     * @param {string} [specialtyTypeId] 
     * @param {string} [specialtyTypeName] 
     * @param {object} [marketingType] 
     * @param {object} [procedure] 
     * @param {Date} [created] 
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {Date} [lastRetrieved] 
     * @param {boolean} [current] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServicesApi
     */
    public apiV1HospitalsServicesGet(id?: string, name?: string, description?: string, hospitalId?: string, hospitalName?: string, specialtyId?: string, specialtyTypeId?: string, specialtyTypeName?: string, marketingType?: object, procedure?: object, created?: Date, page?: number, limit?: number, lastRetrieved?: Date, current?: boolean, options?: any) {
        return ServicesApiFp(this.configuration).apiV1HospitalsServicesGet(id, name, description, hospitalId, hospitalName, specialtyId, specialtyTypeId, specialtyTypeName, marketingType, procedure, created, page, limit, lastRetrieved, current, options)(this.axios, this.basePath);
    }

}


/**
 * SpecialtiesApi - axios parameter creator
 * @export
 */
export const SpecialtiesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Sample request:        GET /api/v1/specialties
         * @summary Get all specialties.
         * @param {string} [id] 
         * @param {string} [name] 
         * @param {string} [description] 
         * @param {string} [specialtyTypeId] 
         * @param {Date} [created] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {Date} [lastRetrieved] 
         * @param {boolean} [current] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SpecialtiesGet(id?: string, name?: string, description?: string, specialtyTypeId?: string, created?: Date, page?: number, limit?: number, lastRetrieved?: Date, current?: boolean, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/specialties`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }

            if (name !== undefined) {
                localVarQueryParameter['Name'] = name;
            }

            if (description !== undefined) {
                localVarQueryParameter['Description'] = description;
            }

            if (specialtyTypeId !== undefined) {
                localVarQueryParameter['SpecialtyTypeId'] = specialtyTypeId;
            }

            if (created !== undefined) {
                localVarQueryParameter['Created'] = (created as any instanceof Date) ?
                    (created as any).toISOString() :
                    created;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (lastRetrieved !== undefined) {
                localVarQueryParameter['lastRetrieved'] = (lastRetrieved as any instanceof Date) ?
                    (lastRetrieved as any).toISOString() :
                    lastRetrieved;
            }

            if (current !== undefined) {
                localVarQueryParameter['Current'] = current;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        POST /api/v1/specialties      {          \"name\": \"Coronary artery disease\",          \"description\": \"Coronary artery disease\",          \"specialtyType\": \"Cardiology\"      }
         * @summary Create specialty.
         * @param {string} [specialtyTypeId] 
         * @param {CreateSpecialtyCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SpecialtiesPost(specialtyTypeId?: string, body?: CreateSpecialtyCommand, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/specialties`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (specialtyTypeId !== undefined) {
                localVarQueryParameter['specialtyTypeId'] = specialtyTypeId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        DELETE /api/v1/specialties/1
         * @summary Delete specialty.
         * @param {string} specialtyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SpecialtiesSpecialtyIdDelete(specialtyId: string, options: any = {}): RequestArgs {
            // verify required parameter 'specialtyId' is not null or undefined
            if (specialtyId === null || specialtyId === undefined) {
                throw new RequiredError('specialtyId','Required parameter specialtyId was null or undefined when calling apiV1SpecialtiesSpecialtyIdDelete.');
            }
            const localVarPath = `/api/v1/specialties/{specialtyId}`
                .replace(`{${"specialtyId"}}`, encodeURIComponent(String(specialtyId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        GET /api/v1/specialties/1
         * @summary Get specialty.
         * @param {string} specialtyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SpecialtiesSpecialtyIdGet(specialtyId: string, options: any = {}): RequestArgs {
            // verify required parameter 'specialtyId' is not null or undefined
            if (specialtyId === null || specialtyId === undefined) {
                throw new RequiredError('specialtyId','Required parameter specialtyId was null or undefined when calling apiV1SpecialtiesSpecialtyIdGet.');
            }
            const localVarPath = `/api/v1/specialties/{specialtyId}`
                .replace(`{${"specialtyId"}}`, encodeURIComponent(String(specialtyId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        PUT /api/v1/specialties/1      {          \"name\": \"Dilated cardiomyopathy\",          \"description\": \"Dilated cardiomyopathy\"      }
         * @summary Update specialty
         * @param {string} specialtyId 
         * @param {UpdateSpecialtyCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SpecialtiesSpecialtyIdPut(specialtyId: string, body?: UpdateSpecialtyCommand, options: any = {}): RequestArgs {
            // verify required parameter 'specialtyId' is not null or undefined
            if (specialtyId === null || specialtyId === undefined) {
                throw new RequiredError('specialtyId','Required parameter specialtyId was null or undefined when calling apiV1SpecialtiesSpecialtyIdPut.');
            }
            const localVarPath = `/api/v1/specialties/{specialtyId}`
                .replace(`{${"specialtyId"}}`, encodeURIComponent(String(specialtyId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SpecialtiesApi - functional programming interface
 * @export
 */
export const SpecialtiesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Sample request:        GET /api/v1/specialties
         * @summary Get all specialties.
         * @param {string} [id] 
         * @param {string} [name] 
         * @param {string} [description] 
         * @param {string} [specialtyTypeId] 
         * @param {Date} [created] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {Date} [lastRetrieved] 
         * @param {boolean} [current] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SpecialtiesGet(id?: string, name?: string, description?: string, specialtyTypeId?: string, created?: Date, page?: number, limit?: number, lastRetrieved?: Date, current?: boolean, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SpecialtiesViewModel> {
            const localVarAxiosArgs = SpecialtiesApiAxiosParamCreator(configuration).apiV1SpecialtiesGet(id, name, description, specialtyTypeId, created, page, limit, lastRetrieved, current, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        POST /api/v1/specialties      {          \"name\": \"Coronary artery disease\",          \"description\": \"Coronary artery disease\",          \"specialtyType\": \"Cardiology\"      }
         * @summary Create specialty.
         * @param {string} [specialtyTypeId] 
         * @param {CreateSpecialtyCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SpecialtiesPost(specialtyTypeId?: string, body?: CreateSpecialtyCommand, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string> {
            const localVarAxiosArgs = SpecialtiesApiAxiosParamCreator(configuration).apiV1SpecialtiesPost(specialtyTypeId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        DELETE /api/v1/specialties/1
         * @summary Delete specialty.
         * @param {string} specialtyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SpecialtiesSpecialtyIdDelete(specialtyId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = SpecialtiesApiAxiosParamCreator(configuration).apiV1SpecialtiesSpecialtyIdDelete(specialtyId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        GET /api/v1/specialties/1
         * @summary Get specialty.
         * @param {string} specialtyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SpecialtiesSpecialtyIdGet(specialtyId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SpecialtyViewModel> {
            const localVarAxiosArgs = SpecialtiesApiAxiosParamCreator(configuration).apiV1SpecialtiesSpecialtyIdGet(specialtyId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        PUT /api/v1/specialties/1      {          \"name\": \"Dilated cardiomyopathy\",          \"description\": \"Dilated cardiomyopathy\"      }
         * @summary Update specialty
         * @param {string} specialtyId 
         * @param {UpdateSpecialtyCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SpecialtiesSpecialtyIdPut(specialtyId: string, body?: UpdateSpecialtyCommand, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = SpecialtiesApiAxiosParamCreator(configuration).apiV1SpecialtiesSpecialtyIdPut(specialtyId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * SpecialtiesApi - factory interface
 * @export
 */
export const SpecialtiesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Sample request:        GET /api/v1/specialties
         * @summary Get all specialties.
         * @param {string} [id] 
         * @param {string} [name] 
         * @param {string} [description] 
         * @param {string} [specialtyTypeId] 
         * @param {Date} [created] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {Date} [lastRetrieved] 
         * @param {boolean} [current] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SpecialtiesGet(id?: string, name?: string, description?: string, specialtyTypeId?: string, created?: Date, page?: number, limit?: number, lastRetrieved?: Date, current?: boolean, options?: any): AxiosPromise<SpecialtiesViewModel> {
            return SpecialtiesApiFp(configuration).apiV1SpecialtiesGet(id, name, description, specialtyTypeId, created, page, limit, lastRetrieved, current, options)(axios, basePath);
        },
        /**
         * Sample request:        POST /api/v1/specialties      {          \"name\": \"Coronary artery disease\",          \"description\": \"Coronary artery disease\",          \"specialtyType\": \"Cardiology\"      }
         * @summary Create specialty.
         * @param {string} [specialtyTypeId] 
         * @param {CreateSpecialtyCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SpecialtiesPost(specialtyTypeId?: string, body?: CreateSpecialtyCommand, options?: any): AxiosPromise<string> {
            return SpecialtiesApiFp(configuration).apiV1SpecialtiesPost(specialtyTypeId, body, options)(axios, basePath);
        },
        /**
         * Sample request:        DELETE /api/v1/specialties/1
         * @summary Delete specialty.
         * @param {string} specialtyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SpecialtiesSpecialtyIdDelete(specialtyId: string, options?: any): AxiosPromise<boolean> {
            return SpecialtiesApiFp(configuration).apiV1SpecialtiesSpecialtyIdDelete(specialtyId, options)(axios, basePath);
        },
        /**
         * Sample request:        GET /api/v1/specialties/1
         * @summary Get specialty.
         * @param {string} specialtyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SpecialtiesSpecialtyIdGet(specialtyId: string, options?: any): AxiosPromise<SpecialtyViewModel> {
            return SpecialtiesApiFp(configuration).apiV1SpecialtiesSpecialtyIdGet(specialtyId, options)(axios, basePath);
        },
        /**
         * Sample request:        PUT /api/v1/specialties/1      {          \"name\": \"Dilated cardiomyopathy\",          \"description\": \"Dilated cardiomyopathy\"      }
         * @summary Update specialty
         * @param {string} specialtyId 
         * @param {UpdateSpecialtyCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SpecialtiesSpecialtyIdPut(specialtyId: string, body?: UpdateSpecialtyCommand, options?: any): AxiosPromise<boolean> {
            return SpecialtiesApiFp(configuration).apiV1SpecialtiesSpecialtyIdPut(specialtyId, body, options)(axios, basePath);
        },
    };
};

/**
 * SpecialtiesApi - object-oriented interface
 * @export
 * @class SpecialtiesApi
 * @extends {BaseAPI}
 */
export class SpecialtiesApi extends BaseAPI {
    /**
     * Sample request:        GET /api/v1/specialties
     * @summary Get all specialties.
     * @param {string} [id] 
     * @param {string} [name] 
     * @param {string} [description] 
     * @param {string} [specialtyTypeId] 
     * @param {Date} [created] 
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {Date} [lastRetrieved] 
     * @param {boolean} [current] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpecialtiesApi
     */
    public apiV1SpecialtiesGet(id?: string, name?: string, description?: string, specialtyTypeId?: string, created?: Date, page?: number, limit?: number, lastRetrieved?: Date, current?: boolean, options?: any) {
        return SpecialtiesApiFp(this.configuration).apiV1SpecialtiesGet(id, name, description, specialtyTypeId, created, page, limit, lastRetrieved, current, options)(this.axios, this.basePath);
    }

    /**
     * Sample request:        POST /api/v1/specialties      {          \"name\": \"Coronary artery disease\",          \"description\": \"Coronary artery disease\",          \"specialtyType\": \"Cardiology\"      }
     * @summary Create specialty.
     * @param {string} [specialtyTypeId] 
     * @param {CreateSpecialtyCommand} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpecialtiesApi
     */
    public apiV1SpecialtiesPost(specialtyTypeId?: string, body?: CreateSpecialtyCommand, options?: any) {
        return SpecialtiesApiFp(this.configuration).apiV1SpecialtiesPost(specialtyTypeId, body, options)(this.axios, this.basePath);
    }

    /**
     * Sample request:        DELETE /api/v1/specialties/1
     * @summary Delete specialty.
     * @param {string} specialtyId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpecialtiesApi
     */
    public apiV1SpecialtiesSpecialtyIdDelete(specialtyId: string, options?: any) {
        return SpecialtiesApiFp(this.configuration).apiV1SpecialtiesSpecialtyIdDelete(specialtyId, options)(this.axios, this.basePath);
    }

    /**
     * Sample request:        GET /api/v1/specialties/1
     * @summary Get specialty.
     * @param {string} specialtyId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpecialtiesApi
     */
    public apiV1SpecialtiesSpecialtyIdGet(specialtyId: string, options?: any) {
        return SpecialtiesApiFp(this.configuration).apiV1SpecialtiesSpecialtyIdGet(specialtyId, options)(this.axios, this.basePath);
    }

    /**
     * Sample request:        PUT /api/v1/specialties/1      {          \"name\": \"Dilated cardiomyopathy\",          \"description\": \"Dilated cardiomyopathy\"      }
     * @summary Update specialty
     * @param {string} specialtyId 
     * @param {UpdateSpecialtyCommand} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpecialtiesApi
     */
    public apiV1SpecialtiesSpecialtyIdPut(specialtyId: string, body?: UpdateSpecialtyCommand, options?: any) {
        return SpecialtiesApiFp(this.configuration).apiV1SpecialtiesSpecialtyIdPut(specialtyId, body, options)(this.axios, this.basePath);
    }

}


/**
 * SpecialtyTypesApi - axios parameter creator
 * @export
 */
export const SpecialtyTypesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Sample request:        GET /api/v1/SpecialtyTypes
         * @summary Get all SpecialtyTypes.
         * @param {string} [id] 
         * @param {string} [name] 
         * @param {string} [description] 
         * @param {object} [marketingType] 
         * @param {Date} [created] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {Date} [lastRetrieved] 
         * @param {boolean} [current] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SpecialtytypesGet(id?: string, name?: string, description?: string, marketingType?: object, created?: Date, page?: number, limit?: number, lastRetrieved?: Date, current?: boolean, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/specialtytypes`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }

            if (name !== undefined) {
                localVarQueryParameter['Name'] = name;
            }

            if (description !== undefined) {
                localVarQueryParameter['Description'] = description;
            }

            if (marketingType !== undefined) {
                localVarQueryParameter['MarketingType'] = marketingType;
            }

            if (created !== undefined) {
                localVarQueryParameter['Created'] = (created as any instanceof Date) ?
                    (created as any).toISOString() :
                    created;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (lastRetrieved !== undefined) {
                localVarQueryParameter['lastRetrieved'] = (lastRetrieved as any instanceof Date) ?
                    (lastRetrieved as any).toISOString() :
                    lastRetrieved;
            }

            if (current !== undefined) {
                localVarQueryParameter['Current'] = current;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        POST /api/v1/SpecialtyTypes      {          \"name\": \"Coronary artery disease\",          \"description\": \"Coronary artery disease\",          \"specialtyTypeType\": \"Cardiology\"      }
         * @summary Create specialtyType.
         * @param {string} [specialtyTypeId] 
         * @param {CreateSpecialtyTypeCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SpecialtytypesPost(specialtyTypeId?: string, body?: CreateSpecialtyTypeCommand, options: any = {}): RequestArgs {
            const localVarPath = `/api/v1/specialtytypes`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (specialtyTypeId !== undefined) {
                localVarQueryParameter['specialtyTypeId'] = specialtyTypeId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        DELETE /api/v1/SpecialtyTypes/1
         * @summary Delete specialtyType.
         * @param {string} specialtyTypeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SpecialtytypesSpecialtyTypeIdDelete(specialtyTypeId: string, options: any = {}): RequestArgs {
            // verify required parameter 'specialtyTypeId' is not null or undefined
            if (specialtyTypeId === null || specialtyTypeId === undefined) {
                throw new RequiredError('specialtyTypeId','Required parameter specialtyTypeId was null or undefined when calling apiV1SpecialtytypesSpecialtyTypeIdDelete.');
            }
            const localVarPath = `/api/v1/specialtytypes/{specialtyTypeId}`
                .replace(`{${"specialtyTypeId"}}`, encodeURIComponent(String(specialtyTypeId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        GET /api/v1/SpecialtyTypes/1
         * @summary Get specialtyType.
         * @param {string} specialtyTypeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SpecialtytypesSpecialtyTypeIdGet(specialtyTypeId: string, options: any = {}): RequestArgs {
            // verify required parameter 'specialtyTypeId' is not null or undefined
            if (specialtyTypeId === null || specialtyTypeId === undefined) {
                throw new RequiredError('specialtyTypeId','Required parameter specialtyTypeId was null or undefined when calling apiV1SpecialtytypesSpecialtyTypeIdGet.');
            }
            const localVarPath = `/api/v1/specialtytypes/{specialtyTypeId}`
                .replace(`{${"specialtyTypeId"}}`, encodeURIComponent(String(specialtyTypeId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        PUT /api/v1/SpecialtyTypes/1      {          \"name\": \"Dilated cardiomyopathy\",          \"description\": \"Dilated cardiomyopathy\"      }
         * @summary Update specialtyType
         * @param {string} specialtyTypeId 
         * @param {UpdateSpecialtyTypeCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SpecialtytypesSpecialtyTypeIdPut(specialtyTypeId: string, body?: UpdateSpecialtyTypeCommand, options: any = {}): RequestArgs {
            // verify required parameter 'specialtyTypeId' is not null or undefined
            if (specialtyTypeId === null || specialtyTypeId === undefined) {
                throw new RequiredError('specialtyTypeId','Required parameter specialtyTypeId was null or undefined when calling apiV1SpecialtytypesSpecialtyTypeIdPut.');
            }
            const localVarPath = `/api/v1/specialtytypes/{specialtyTypeId}`
                .replace(`{${"specialtyTypeId"}}`, encodeURIComponent(String(specialtyTypeId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SpecialtyTypesApi - functional programming interface
 * @export
 */
export const SpecialtyTypesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Sample request:        GET /api/v1/SpecialtyTypes
         * @summary Get all SpecialtyTypes.
         * @param {string} [id] 
         * @param {string} [name] 
         * @param {string} [description] 
         * @param {object} [marketingType] 
         * @param {Date} [created] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {Date} [lastRetrieved] 
         * @param {boolean} [current] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SpecialtytypesGet(id?: string, name?: string, description?: string, marketingType?: object, created?: Date, page?: number, limit?: number, lastRetrieved?: Date, current?: boolean, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SpecialtyTypesViewModel> {
            const localVarAxiosArgs = SpecialtyTypesApiAxiosParamCreator(configuration).apiV1SpecialtytypesGet(id, name, description, marketingType, created, page, limit, lastRetrieved, current, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        POST /api/v1/SpecialtyTypes      {          \"name\": \"Coronary artery disease\",          \"description\": \"Coronary artery disease\",          \"specialtyTypeType\": \"Cardiology\"      }
         * @summary Create specialtyType.
         * @param {string} [specialtyTypeId] 
         * @param {CreateSpecialtyTypeCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SpecialtytypesPost(specialtyTypeId?: string, body?: CreateSpecialtyTypeCommand, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string> {
            const localVarAxiosArgs = SpecialtyTypesApiAxiosParamCreator(configuration).apiV1SpecialtytypesPost(specialtyTypeId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        DELETE /api/v1/SpecialtyTypes/1
         * @summary Delete specialtyType.
         * @param {string} specialtyTypeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SpecialtytypesSpecialtyTypeIdDelete(specialtyTypeId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = SpecialtyTypesApiAxiosParamCreator(configuration).apiV1SpecialtytypesSpecialtyTypeIdDelete(specialtyTypeId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        GET /api/v1/SpecialtyTypes/1
         * @summary Get specialtyType.
         * @param {string} specialtyTypeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SpecialtytypesSpecialtyTypeIdGet(specialtyTypeId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SpecialtyTypeViewModel> {
            const localVarAxiosArgs = SpecialtyTypesApiAxiosParamCreator(configuration).apiV1SpecialtytypesSpecialtyTypeIdGet(specialtyTypeId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        PUT /api/v1/SpecialtyTypes/1      {          \"name\": \"Dilated cardiomyopathy\",          \"description\": \"Dilated cardiomyopathy\"      }
         * @summary Update specialtyType
         * @param {string} specialtyTypeId 
         * @param {UpdateSpecialtyTypeCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SpecialtytypesSpecialtyTypeIdPut(specialtyTypeId: string, body?: UpdateSpecialtyTypeCommand, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = SpecialtyTypesApiAxiosParamCreator(configuration).apiV1SpecialtytypesSpecialtyTypeIdPut(specialtyTypeId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * SpecialtyTypesApi - factory interface
 * @export
 */
export const SpecialtyTypesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Sample request:        GET /api/v1/SpecialtyTypes
         * @summary Get all SpecialtyTypes.
         * @param {string} [id] 
         * @param {string} [name] 
         * @param {string} [description] 
         * @param {object} [marketingType] 
         * @param {Date} [created] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {Date} [lastRetrieved] 
         * @param {boolean} [current] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SpecialtytypesGet(id?: string, name?: string, description?: string, marketingType?: object, created?: Date, page?: number, limit?: number, lastRetrieved?: Date, current?: boolean, options?: any): AxiosPromise<SpecialtyTypesViewModel> {
            return SpecialtyTypesApiFp(configuration).apiV1SpecialtytypesGet(id, name, description, marketingType, created, page, limit, lastRetrieved, current, options)(axios, basePath);
        },
        /**
         * Sample request:        POST /api/v1/SpecialtyTypes      {          \"name\": \"Coronary artery disease\",          \"description\": \"Coronary artery disease\",          \"specialtyTypeType\": \"Cardiology\"      }
         * @summary Create specialtyType.
         * @param {string} [specialtyTypeId] 
         * @param {CreateSpecialtyTypeCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SpecialtytypesPost(specialtyTypeId?: string, body?: CreateSpecialtyTypeCommand, options?: any): AxiosPromise<string> {
            return SpecialtyTypesApiFp(configuration).apiV1SpecialtytypesPost(specialtyTypeId, body, options)(axios, basePath);
        },
        /**
         * Sample request:        DELETE /api/v1/SpecialtyTypes/1
         * @summary Delete specialtyType.
         * @param {string} specialtyTypeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SpecialtytypesSpecialtyTypeIdDelete(specialtyTypeId: string, options?: any): AxiosPromise<boolean> {
            return SpecialtyTypesApiFp(configuration).apiV1SpecialtytypesSpecialtyTypeIdDelete(specialtyTypeId, options)(axios, basePath);
        },
        /**
         * Sample request:        GET /api/v1/SpecialtyTypes/1
         * @summary Get specialtyType.
         * @param {string} specialtyTypeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SpecialtytypesSpecialtyTypeIdGet(specialtyTypeId: string, options?: any): AxiosPromise<SpecialtyTypeViewModel> {
            return SpecialtyTypesApiFp(configuration).apiV1SpecialtytypesSpecialtyTypeIdGet(specialtyTypeId, options)(axios, basePath);
        },
        /**
         * Sample request:        PUT /api/v1/SpecialtyTypes/1      {          \"name\": \"Dilated cardiomyopathy\",          \"description\": \"Dilated cardiomyopathy\"      }
         * @summary Update specialtyType
         * @param {string} specialtyTypeId 
         * @param {UpdateSpecialtyTypeCommand} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SpecialtytypesSpecialtyTypeIdPut(specialtyTypeId: string, body?: UpdateSpecialtyTypeCommand, options?: any): AxiosPromise<boolean> {
            return SpecialtyTypesApiFp(configuration).apiV1SpecialtytypesSpecialtyTypeIdPut(specialtyTypeId, body, options)(axios, basePath);
        },
    };
};

/**
 * SpecialtyTypesApi - object-oriented interface
 * @export
 * @class SpecialtyTypesApi
 * @extends {BaseAPI}
 */
export class SpecialtyTypesApi extends BaseAPI {
    /**
     * Sample request:        GET /api/v1/SpecialtyTypes
     * @summary Get all SpecialtyTypes.
     * @param {string} [id] 
     * @param {string} [name] 
     * @param {string} [description] 
     * @param {object} [marketingType] 
     * @param {Date} [created] 
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {Date} [lastRetrieved] 
     * @param {boolean} [current] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpecialtyTypesApi
     */
    public apiV1SpecialtytypesGet(id?: string, name?: string, description?: string, marketingType?: object, created?: Date, page?: number, limit?: number, lastRetrieved?: Date, current?: boolean, options?: any) {
        return SpecialtyTypesApiFp(this.configuration).apiV1SpecialtytypesGet(id, name, description, marketingType, created, page, limit, lastRetrieved, current, options)(this.axios, this.basePath);
    }

    /**
     * Sample request:        POST /api/v1/SpecialtyTypes      {          \"name\": \"Coronary artery disease\",          \"description\": \"Coronary artery disease\",          \"specialtyTypeType\": \"Cardiology\"      }
     * @summary Create specialtyType.
     * @param {string} [specialtyTypeId] 
     * @param {CreateSpecialtyTypeCommand} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpecialtyTypesApi
     */
    public apiV1SpecialtytypesPost(specialtyTypeId?: string, body?: CreateSpecialtyTypeCommand, options?: any) {
        return SpecialtyTypesApiFp(this.configuration).apiV1SpecialtytypesPost(specialtyTypeId, body, options)(this.axios, this.basePath);
    }

    /**
     * Sample request:        DELETE /api/v1/SpecialtyTypes/1
     * @summary Delete specialtyType.
     * @param {string} specialtyTypeId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpecialtyTypesApi
     */
    public apiV1SpecialtytypesSpecialtyTypeIdDelete(specialtyTypeId: string, options?: any) {
        return SpecialtyTypesApiFp(this.configuration).apiV1SpecialtytypesSpecialtyTypeIdDelete(specialtyTypeId, options)(this.axios, this.basePath);
    }

    /**
     * Sample request:        GET /api/v1/SpecialtyTypes/1
     * @summary Get specialtyType.
     * @param {string} specialtyTypeId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpecialtyTypesApi
     */
    public apiV1SpecialtytypesSpecialtyTypeIdGet(specialtyTypeId: string, options?: any) {
        return SpecialtyTypesApiFp(this.configuration).apiV1SpecialtytypesSpecialtyTypeIdGet(specialtyTypeId, options)(this.axios, this.basePath);
    }

    /**
     * Sample request:        PUT /api/v1/SpecialtyTypes/1      {          \"name\": \"Dilated cardiomyopathy\",          \"description\": \"Dilated cardiomyopathy\"      }
     * @summary Update specialtyType
     * @param {string} specialtyTypeId 
     * @param {UpdateSpecialtyTypeCommand} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpecialtyTypesApi
     */
    public apiV1SpecialtytypesSpecialtyTypeIdPut(specialtyTypeId: string, body?: UpdateSpecialtyTypeCommand, options?: any) {
        return SpecialtyTypesApiFp(this.configuration).apiV1SpecialtytypesSpecialtyTypeIdPut(specialtyTypeId, body, options)(this.axios, this.basePath);
    }

}


