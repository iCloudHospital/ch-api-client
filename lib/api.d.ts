/**
 * Swagger UI - Cloud Hospital Api-INT
 * Cloud Hospital application with Swagger, Swashbuckle, and API versioning.
 *
 * The version of the OpenAPI document: 1
 * Contact: hyounoosung@icloudhospital.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { Configuration } from './configuration';
import { AxiosPromise, AxiosInstance } from 'axios';
import { RequestArgs, BaseAPI } from './base';
/**
 *
 * @export
 * @interface Account
 */
export interface Account {
    /**
     *
     * @type {string}
     * @memberof Account
     */
    id?: string;
    /**
     *
     * @type {VendorType}
     * @memberof Account
     */
    vendor?: VendorType;
    /**
     *
     * @type {AuditableEntity}
     * @memberof Account
     */
    auditableEntity?: AuditableEntity;
}
/**
 *
 * @export
 * @interface Accreditation
 */
export interface Accreditation {
    /**
     *
     * @type {string}
     * @memberof Accreditation
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof Accreditation
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof Accreditation
     */
    normalizedName?: string;
    /**
     *
     * @type {string}
     * @memberof Accreditation
     */
    logo?: string;
    /**
     *
     * @type {string}
     * @memberof Accreditation
     */
    country?: string;
    /**
     *
     * @type {Array<HospitalAccreditation>}
     * @memberof Accreditation
     */
    accreditations?: Array<HospitalAccreditation>;
}
/**
 *
 * @export
 * @interface ApproveBookingCommand
 */
export interface ApproveBookingCommand {
    /**
     *
     * @type {Date}
     * @memberof ApproveBookingCommand
     */
    confirmedDateStart?: Date;
    /**
     *
     * @type {Date}
     * @memberof ApproveBookingCommand
     */
    confirmedDateEnd?: Date;
}
/**
 *
 * @export
 * @interface ApproveConsultationCommand
 */
export interface ApproveConsultationCommand {
    /**
     *
     * @type {Date}
     * @memberof ApproveConsultationCommand
     */
    confirmedDateStart?: Date;
    /**
     *
     * @type {Date}
     * @memberof ApproveConsultationCommand
     */
    confirmedDateEnd?: Date;
    /**
     *
     * @type {string}
     * @memberof ApproveConsultationCommand
     */
    callerId?: string;
}
/**
 *
 * @export
 * @interface Article
 */
export interface Article {
    /**
     *
     * @type {string}
     * @memberof Article
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof Article
     */
    title?: string;
    /**
     *
     * @type {string}
     * @memberof Article
     */
    normalizedTitle?: string;
    /**
     *
     * @type {string}
     * @memberof Article
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof Article
     */
    body?: string;
    /**
     *
     * @type {ArticleStatus}
     * @memberof Article
     */
    status?: ArticleStatus;
    /**
     *
     * @type {MarketingType}
     * @memberof Article
     */
    marketingType?: MarketingType;
    /**
     *
     * @type {string}
     * @memberof Article
     */
    userId?: string;
    /**
     *
     * @type {User}
     * @memberof Article
     */
    user?: User;
    /**
     *
     * @type {string}
     * @memberof Article
     */
    hospitalId?: string;
    /**
     *
     * @type {Hospital}
     * @memberof Article
     */
    hospital?: Hospital;
    /**
     *
     * @type {Array<ArticleTag>}
     * @memberof Article
     */
    articleTags?: Array<ArticleTag>;
    /**
     *
     * @type {Array<Media>}
     * @memberof Article
     */
    medias?: Array<Media>;
    /**
     *
     * @type {AuditableEntity}
     * @memberof Article
     */
    auditableEntity?: AuditableEntity;
}
/**
 *
 * @export
 * @interface ArticleItemViewModel
 */
export interface ArticleItemViewModel {
    /**
     *
     * @type {string}
     * @memberof ArticleItemViewModel
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof ArticleItemViewModel
     */
    title?: string;
    /**
     *
     * @type {string}
     * @memberof ArticleItemViewModel
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof ArticleItemViewModel
     */
    body?: string;
    /**
     *
     * @type {ArticleStatus}
     * @memberof ArticleItemViewModel
     */
    status?: ArticleStatus;
    /**
     *
     * @type {MarketingType}
     * @memberof ArticleItemViewModel
     */
    marketingType?: MarketingType;
    /**
     *
     * @type {string}
     * @memberof ArticleItemViewModel
     */
    userId?: string;
    /**
     *
     * @type {string}
     * @memberof ArticleItemViewModel
     */
    userName?: string;
    /**
     *
     * @type {string}
     * @memberof ArticleItemViewModel
     */
    hospitalId?: string;
    /**
     *
     * @type {string}
     * @memberof ArticleItemViewModel
     */
    hospitalName?: string;
    /**
     *
     * @type {Array<ArticleTagItemViewModel>}
     * @memberof ArticleItemViewModel
     */
    articleTags?: Array<ArticleTagItemViewModel>;
    /**
     *
     * @type {Array<MediaViewModel>}
     * @memberof ArticleItemViewModel
     */
    medias?: Array<MediaViewModel>;
    /**
     *
     * @type {AuditableEntity}
     * @memberof ArticleItemViewModel
     */
    auditableEntity?: AuditableEntity;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum ArticleStatus {
    Draft = "Draft",
    Active = "Active",
    Archived = "Archived"
}
/**
 *
 * @export
 * @interface ArticleTag
 */
export interface ArticleTag {
    /**
     *
     * @type {string}
     * @memberof ArticleTag
     */
    articleId?: string;
    /**
     *
     * @type {Article}
     * @memberof ArticleTag
     */
    article?: Article;
    /**
     *
     * @type {string}
     * @memberof ArticleTag
     */
    tagId?: string;
    /**
     *
     * @type {Tag}
     * @memberof ArticleTag
     */
    tag?: Tag;
    /**
     *
     * @type {number}
     * @memberof ArticleTag
     */
    order?: number;
}
/**
 *
 * @export
 * @interface ArticleTagItemViewModel
 */
export interface ArticleTagItemViewModel {
    /**
     *
     * @type {string}
     * @memberof ArticleTagItemViewModel
     */
    articleId?: string;
    /**
     *
     * @type {string}
     * @memberof ArticleTagItemViewModel
     */
    tagId?: string;
    /**
     *
     * @type {number}
     * @memberof ArticleTagItemViewModel
     */
    order?: number;
}
/**
 *
 * @export
 * @interface ArticleViewModel
 */
export interface ArticleViewModel {
    /**
     *
     * @type {string}
     * @memberof ArticleViewModel
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof ArticleViewModel
     */
    title?: string;
    /**
     *
     * @type {string}
     * @memberof ArticleViewModel
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof ArticleViewModel
     */
    body?: string;
    /**
     *
     * @type {ArticleStatus}
     * @memberof ArticleViewModel
     */
    status?: ArticleStatus;
    /**
     *
     * @type {MarketingType}
     * @memberof ArticleViewModel
     */
    marketingType?: MarketingType;
    /**
     *
     * @type {string}
     * @memberof ArticleViewModel
     */
    userId?: string;
    /**
     *
     * @type {string}
     * @memberof ArticleViewModel
     */
    userName?: string;
    /**
     *
     * @type {string}
     * @memberof ArticleViewModel
     */
    hospitalId?: string;
    /**
     *
     * @type {string}
     * @memberof ArticleViewModel
     */
    hospitalName?: string;
    /**
     *
     * @type {Array<ArticleTagItemViewModel>}
     * @memberof ArticleViewModel
     */
    articleTags?: Array<ArticleTagItemViewModel>;
    /**
     *
     * @type {Array<MediaViewModel>}
     * @memberof ArticleViewModel
     */
    medias?: Array<MediaViewModel>;
    /**
     *
     * @type {AuditableEntity}
     * @memberof ArticleViewModel
     */
    auditableEntity?: AuditableEntity;
}
/**
 *
 * @export
 * @interface ArticlesViewModel
 */
export interface ArticlesViewModel {
    /**
     *
     * @type {Array<ArticleItemViewModel>}
     * @memberof ArticlesViewModel
     */
    items?: Array<ArticleItemViewModel>;
    /**
     *
     * @type {PagedListMetaData}
     * @memberof ArticlesViewModel
     */
    metaData?: PagedListMetaData;
}
/**
 *
 * @export
 * @interface AuditableEntity
 */
export interface AuditableEntity {
    /**
     *
     * @type {string}
     * @memberof AuditableEntity
     */
    createdBy?: string;
    /**
     *
     * @type {string}
     * @memberof AuditableEntity
     */
    updatedBy?: string;
    /**
     *
     * @type {string}
     * @memberof AuditableEntity
     */
    deletedBy?: string;
    /**
     *
     * @type {Date}
     * @memberof AuditableEntity
     */
    createdDate?: Date;
    /**
     *
     * @type {Date}
     * @memberof AuditableEntity
     */
    updatedDate?: Date;
    /**
     *
     * @type {Date}
     * @memberof AuditableEntity
     */
    deletedDate?: Date;
    /**
     *
     * @type {boolean}
     * @memberof AuditableEntity
     */
    isHidden?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof AuditableEntity
     */
    isDeleted?: boolean;
}
/**
 *
 * @export
 * @interface Award
 */
export interface Award {
    /**
     *
     * @type {string}
     * @memberof Award
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof Award
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof Award
     */
    image?: string;
    /**
     *
     * @type {Date}
     * @memberof Award
     */
    date?: Date;
}
/**
 *
 * @export
 * @interface AwardViewModel
 */
export interface AwardViewModel {
    /**
     *
     * @type {string}
     * @memberof AwardViewModel
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof AwardViewModel
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof AwardViewModel
     */
    image?: string;
    /**
     *
     * @type {Date}
     * @memberof AwardViewModel
     */
    date?: Date;
}
/**
 *
 * @export
 * @interface AzureSearchViewModel
 */
export interface AzureSearchViewModel {
    /**
     *
     * @type {number}
     * @memberof AzureSearchViewModel
     */
    hospitals?: number;
    /**
     *
     * @type {number}
     * @memberof AzureSearchViewModel
     */
    doctors?: number;
    /**
     *
     * @type {number}
     * @memberof AzureSearchViewModel
     */
    deals?: number;
    /**
     *
     * @type {number}
     * @memberof AzureSearchViewModel
     */
    specialties?: number;
    /**
     *
     * @type {number}
     * @memberof AzureSearchViewModel
     */
    equipments?: number;
}
/**
 *
 * @export
 * @interface Booking
 */
export interface Booking {
    /**
     *
     * @type {string}
     * @memberof Booking
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof Booking
     */
    patientId?: string;
    /**
     *
     * @type {Patient}
     * @memberof Booking
     */
    patient?: Patient;
    /**
     *
     * @type {string}
     * @memberof Booking
     */
    hospitalId?: string;
    /**
     *
     * @type {Hospital}
     * @memberof Booking
     */
    hospital?: Hospital;
    /**
     *
     * @type {string}
     * @memberof Booking
     */
    dealPackageId?: string;
    /**
     *
     * @type {DealPackage}
     * @memberof Booking
     */
    dealPackage?: DealPackage;
    /**
     *
     * @type {number}
     * @memberof Booking
     */
    quantity?: number;
    /**
     *
     * @type {string}
     * @memberof Booking
     */
    firstName?: string;
    /**
     *
     * @type {string}
     * @memberof Booking
     */
    lastName?: string;
    /**
     *
     * @type {string}
     * @memberof Booking
     */
    email?: string;
    /**
     *
     * @type {string}
     * @memberof Booking
     */
    phone?: string;
    /**
     *
     * @type {string}
     * @memberof Booking
     */
    comment?: string;
    /**
     *
     * @type {Date}
     * @memberof Booking
     */
    approximateDateStart?: Date;
    /**
     *
     * @type {Date}
     * @memberof Booking
     */
    approximateDateEnd?: Date;
    /**
     *
     * @type {Date}
     * @memberof Booking
     */
    confirmedDateStart?: Date;
    /**
     *
     * @type {Date}
     * @memberof Booking
     */
    confirmedDateEnd?: Date;
    /**
     *
     * @type {number}
     * @memberof Booking
     */
    fee?: number;
    /**
     *
     * @type {number}
     * @memberof Booking
     */
    applicationFee?: number;
    /**
     *
     * @type {BookingStatus}
     * @memberof Booking
     */
    status?: BookingStatus;
    /**
     *
     * @type {RejectReason}
     * @memberof Booking
     */
    rejectReason?: RejectReason;
    /**
     *
     * @type {string}
     * @memberof Booking
     */
    rejectComment?: string;
    /**
     *
     * @type {boolean}
     * @memberof Booking
     */
    isOpen?: boolean;
    /**
     *
     * @type {string}
     * @memberof Booking
     */
    paymentId?: string;
    /**
     *
     * @type {Payment}
     * @memberof Booking
     */
    payment?: Payment;
    /**
     *
     * @type {Array<ChangeLog>}
     * @memberof Booking
     */
    statusChangeLogs?: Array<ChangeLog>;
    /**
     *
     * @type {Array<Media>}
     * @memberof Booking
     */
    medias?: Array<Media>;
    /**
     *
     * @type {AuditableEntity}
     * @memberof Booking
     */
    auditableEntity?: AuditableEntity;
}
/**
 *
 * @export
 * @interface BookingItemViewModel
 */
export interface BookingItemViewModel {
    /**
     *
     * @type {string}
     * @memberof BookingItemViewModel
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof BookingItemViewModel
     */
    patientId?: string;
    /**
     *
     * @type {string}
     * @memberof BookingItemViewModel
     */
    patientName?: string;
    /**
     *
     * @type {string}
     * @memberof BookingItemViewModel
     */
    hospitalId?: string;
    /**
     *
     * @type {string}
     * @memberof BookingItemViewModel
     */
    hospitalName?: string;
    /**
     *
     * @type {string}
     * @memberof BookingItemViewModel
     */
    deallId?: string;
    /**
     *
     * @type {string}
     * @memberof BookingItemViewModel
     */
    dealName?: string;
    /**
     *
     * @type {string}
     * @memberof BookingItemViewModel
     */
    dealPackageId?: string;
    /**
     *
     * @type {RefundPolicy}
     * @memberof BookingItemViewModel
     */
    refundPolicy?: RefundPolicy;
    /**
     *
     * @type {number}
     * @memberof BookingItemViewModel
     */
    quantity?: number;
    /**
     *
     * @type {string}
     * @memberof BookingItemViewModel
     */
    firstName?: string;
    /**
     *
     * @type {string}
     * @memberof BookingItemViewModel
     */
    lastName?: string;
    /**
     *
     * @type {string}
     * @memberof BookingItemViewModel
     */
    email?: string;
    /**
     *
     * @type {string}
     * @memberof BookingItemViewModel
     */
    phone?: string;
    /**
     *
     * @type {string}
     * @memberof BookingItemViewModel
     */
    comment?: string;
    /**
     *
     * @type {Date}
     * @memberof BookingItemViewModel
     */
    approximateDateStart?: Date;
    /**
     *
     * @type {Date}
     * @memberof BookingItemViewModel
     */
    approximateDateEnd?: Date;
    /**
     *
     * @type {Date}
     * @memberof BookingItemViewModel
     */
    confirmedDateStart?: Date;
    /**
     *
     * @type {Date}
     * @memberof BookingItemViewModel
     */
    confirmedDateEnd?: Date;
    /**
     *
     * @type {number}
     * @memberof BookingItemViewModel
     */
    fee?: number;
    /**
     *
     * @type {number}
     * @memberof BookingItemViewModel
     */
    applicationFee?: number;
    /**
     *
     * @type {BookingStatus}
     * @memberof BookingItemViewModel
     */
    status?: BookingStatus;
    /**
     *
     * @type {RejectReason}
     * @memberof BookingItemViewModel
     */
    rejectReason?: RejectReason;
    /**
     *
     * @type {string}
     * @memberof BookingItemViewModel
     */
    rejectComment?: string;
    /**
     *
     * @type {boolean}
     * @memberof BookingItemViewModel
     */
    isOpen?: boolean;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum BookingStatus {
    New = "New",
    Rejected = "Rejected",
    Approved = "Approved",
    Paid = "Paid",
    Canceled = "Canceled"
}
/**
 *
 * @export
 * @interface BookingViewModel
 */
export interface BookingViewModel {
    /**
     *
     * @type {string}
     * @memberof BookingViewModel
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof BookingViewModel
     */
    patientId?: string;
    /**
     *
     * @type {string}
     * @memberof BookingViewModel
     */
    patientName?: string;
    /**
     *
     * @type {string}
     * @memberof BookingViewModel
     */
    hospitalId?: string;
    /**
     *
     * @type {string}
     * @memberof BookingViewModel
     */
    hospitalName?: string;
    /**
     *
     * @type {string}
     * @memberof BookingViewModel
     */
    deallId?: string;
    /**
     *
     * @type {string}
     * @memberof BookingViewModel
     */
    dealName?: string;
    /**
     *
     * @type {string}
     * @memberof BookingViewModel
     */
    dealPackageId?: string;
    /**
     *
     * @type {RefundPolicy}
     * @memberof BookingViewModel
     */
    refundPolicy?: RefundPolicy;
    /**
     *
     * @type {number}
     * @memberof BookingViewModel
     */
    quantity?: number;
    /**
     *
     * @type {string}
     * @memberof BookingViewModel
     */
    firstName?: string;
    /**
     *
     * @type {string}
     * @memberof BookingViewModel
     */
    lastName?: string;
    /**
     *
     * @type {string}
     * @memberof BookingViewModel
     */
    email?: string;
    /**
     *
     * @type {string}
     * @memberof BookingViewModel
     */
    phone?: string;
    /**
     *
     * @type {string}
     * @memberof BookingViewModel
     */
    comment?: string;
    /**
     *
     * @type {Date}
     * @memberof BookingViewModel
     */
    approximateDateStart?: Date;
    /**
     *
     * @type {Date}
     * @memberof BookingViewModel
     */
    approximateDateEnd?: Date;
    /**
     *
     * @type {Date}
     * @memberof BookingViewModel
     */
    confirmedDateStart?: Date;
    /**
     *
     * @type {Date}
     * @memberof BookingViewModel
     */
    confirmedDateEnd?: Date;
    /**
     *
     * @type {number}
     * @memberof BookingViewModel
     */
    fee?: number;
    /**
     *
     * @type {number}
     * @memberof BookingViewModel
     */
    applicationFee?: number;
    /**
     *
     * @type {BookingStatus}
     * @memberof BookingViewModel
     */
    status?: BookingStatus;
    /**
     *
     * @type {RejectReason}
     * @memberof BookingViewModel
     */
    rejectReason?: RejectReason;
    /**
     *
     * @type {string}
     * @memberof BookingViewModel
     */
    rejectComment?: string;
    /**
     *
     * @type {boolean}
     * @memberof BookingViewModel
     */
    isOpen?: boolean;
}
/**
 *
 * @export
 * @interface BookingsViewModel
 */
export interface BookingsViewModel {
    /**
     *
     * @type {Array<BookingItemViewModel>}
     * @memberof BookingsViewModel
     */
    items?: Array<BookingItemViewModel>;
    /**
     *
     * @type {PagedListMetaData}
     * @memberof BookingsViewModel
     */
    metaData?: PagedListMetaData;
}
/**
 *
 * @export
 * @interface CHAdminItemViewModel
 */
export interface CHAdminItemViewModel {
    /**
     *
     * @type {string}
     * @memberof CHAdminItemViewModel
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof CHAdminItemViewModel
     */
    userName?: string;
    /**
     *
     * @type {string}
     * @memberof CHAdminItemViewModel
     */
    firstName?: string;
    /**
     *
     * @type {string}
     * @memberof CHAdminItemViewModel
     */
    lastName?: string;
    /**
     *
     * @type {string}
     * @memberof CHAdminItemViewModel
     */
    fullname?: string;
    /**
     *
     * @type {string}
     * @memberof CHAdminItemViewModel
     */
    phone?: string;
    /**
     *
     * @type {string}
     * @memberof CHAdminItemViewModel
     */
    email?: string;
    /**
     *
     * @type {string}
     * @memberof CHAdminItemViewModel
     */
    photo?: string;
    /**
     *
     * @type {string}
     * @memberof CHAdminItemViewModel
     */
    photoThumbnail?: string;
    /**
     *
     * @type {Gender}
     * @memberof CHAdminItemViewModel
     */
    gender?: Gender;
    /**
     *
     * @type {Date}
     * @memberof CHAdminItemViewModel
     */
    dateOfBirth?: Date;
    /**
     *
     * @type {AuditableEntity}
     * @memberof CHAdminItemViewModel
     */
    auditableEntity?: AuditableEntity;
}
/**
 *
 * @export
 * @interface CHAdminViewModel
 */
export interface CHAdminViewModel {
    /**
     *
     * @type {string}
     * @memberof CHAdminViewModel
     */
    userType?: string;
    /**
     *
     * @type {Array<UserLanguageViewModel>}
     * @memberof CHAdminViewModel
     */
    languages?: Array<UserLanguageViewModel>;
    /**
     *
     * @type {Array<UserLocationViewModel>}
     * @memberof CHAdminViewModel
     */
    locations?: Array<UserLocationViewModel>;
    /**
     *
     * @type {string}
     * @memberof CHAdminViewModel
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof CHAdminViewModel
     */
    userName?: string;
    /**
     *
     * @type {string}
     * @memberof CHAdminViewModel
     */
    firstName?: string;
    /**
     *
     * @type {string}
     * @memberof CHAdminViewModel
     */
    lastName?: string;
    /**
     *
     * @type {string}
     * @memberof CHAdminViewModel
     */
    fullname?: string;
    /**
     *
     * @type {string}
     * @memberof CHAdminViewModel
     */
    phone?: string;
    /**
     *
     * @type {string}
     * @memberof CHAdminViewModel
     */
    email?: string;
    /**
     *
     * @type {string}
     * @memberof CHAdminViewModel
     */
    photo?: string;
    /**
     *
     * @type {string}
     * @memberof CHAdminViewModel
     */
    photoThumbnail?: string;
    /**
     *
     * @type {Gender}
     * @memberof CHAdminViewModel
     */
    gender?: Gender;
    /**
     *
     * @type {Date}
     * @memberof CHAdminViewModel
     */
    dateOfBirth?: Date;
    /**
     *
     * @type {AuditableEntity}
     * @memberof CHAdminViewModel
     */
    auditableEntity?: AuditableEntity;
}
/**
 *
 * @export
 * @interface CHAdminsViewModel
 */
export interface CHAdminsViewModel {
    /**
     *
     * @type {Array<CHAdminItemViewModel>}
     * @memberof CHAdminsViewModel
     */
    items?: Array<CHAdminItemViewModel>;
    /**
     *
     * @type {PagedListMetaData}
     * @memberof CHAdminsViewModel
     */
    metaData?: PagedListMetaData;
}
/**
 *
 * @export
 * @interface CHManagerItemViewModel
 */
export interface CHManagerItemViewModel {
    /**
     *
     * @type {string}
     * @memberof CHManagerItemViewModel
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof CHManagerItemViewModel
     */
    userName?: string;
    /**
     *
     * @type {string}
     * @memberof CHManagerItemViewModel
     */
    firstName?: string;
    /**
     *
     * @type {string}
     * @memberof CHManagerItemViewModel
     */
    lastName?: string;
    /**
     *
     * @type {string}
     * @memberof CHManagerItemViewModel
     */
    fullname?: string;
    /**
     *
     * @type {string}
     * @memberof CHManagerItemViewModel
     */
    phone?: string;
    /**
     *
     * @type {string}
     * @memberof CHManagerItemViewModel
     */
    email?: string;
    /**
     *
     * @type {string}
     * @memberof CHManagerItemViewModel
     */
    photo?: string;
    /**
     *
     * @type {string}
     * @memberof CHManagerItemViewModel
     */
    photoThumbnail?: string;
    /**
     *
     * @type {Gender}
     * @memberof CHManagerItemViewModel
     */
    gender?: Gender;
    /**
     *
     * @type {Date}
     * @memberof CHManagerItemViewModel
     */
    dateOfBirth?: Date;
    /**
     *
     * @type {AuditableEntity}
     * @memberof CHManagerItemViewModel
     */
    auditableEntity?: AuditableEntity;
}
/**
 *
 * @export
 * @interface CHManagerViewModel
 */
export interface CHManagerViewModel {
    /**
     *
     * @type {string}
     * @memberof CHManagerViewModel
     */
    userType?: string;
    /**
     *
     * @type {Array<UserLanguageViewModel>}
     * @memberof CHManagerViewModel
     */
    languages?: Array<UserLanguageViewModel>;
    /**
     *
     * @type {Array<UserLocationViewModel>}
     * @memberof CHManagerViewModel
     */
    locations?: Array<UserLocationViewModel>;
    /**
     *
     * @type {string}
     * @memberof CHManagerViewModel
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof CHManagerViewModel
     */
    userName?: string;
    /**
     *
     * @type {string}
     * @memberof CHManagerViewModel
     */
    firstName?: string;
    /**
     *
     * @type {string}
     * @memberof CHManagerViewModel
     */
    lastName?: string;
    /**
     *
     * @type {string}
     * @memberof CHManagerViewModel
     */
    fullname?: string;
    /**
     *
     * @type {string}
     * @memberof CHManagerViewModel
     */
    phone?: string;
    /**
     *
     * @type {string}
     * @memberof CHManagerViewModel
     */
    email?: string;
    /**
     *
     * @type {string}
     * @memberof CHManagerViewModel
     */
    photo?: string;
    /**
     *
     * @type {string}
     * @memberof CHManagerViewModel
     */
    photoThumbnail?: string;
    /**
     *
     * @type {Gender}
     * @memberof CHManagerViewModel
     */
    gender?: Gender;
    /**
     *
     * @type {Date}
     * @memberof CHManagerViewModel
     */
    dateOfBirth?: Date;
    /**
     *
     * @type {AuditableEntity}
     * @memberof CHManagerViewModel
     */
    auditableEntity?: AuditableEntity;
}
/**
 *
 * @export
 * @interface CHManagersViewModel
 */
export interface CHManagersViewModel {
    /**
     *
     * @type {Array<CHManagerItemViewModel>}
     * @memberof CHManagersViewModel
     */
    items?: Array<CHManagerItemViewModel>;
    /**
     *
     * @type {PagedListMetaData}
     * @memberof CHManagersViewModel
     */
    metaData?: PagedListMetaData;
}
/**
 *
 * @export
 * @interface ChangeEmailCommand
 */
export interface ChangeEmailCommand {
    /**
     *
     * @type {string}
     * @memberof ChangeEmailCommand
     */
    email?: string;
}
/**
 *
 * @export
 * @interface ChangeLog
 */
export interface ChangeLog {
    /**
     *
     * @type {string}
     * @memberof ChangeLog
     */
    id?: string;
    /**
     *
     * @type {number}
     * @memberof ChangeLog
     */
    status?: number;
    /**
     *
     * @type {string}
     * @memberof ChangeLog
     */
    actorId?: string;
    /**
     *
     * @type {Date}
     * @memberof ChangeLog
     */
    createdDate?: Date;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum ChargeStatus {
    Pending = "Pending",
    Succeeded = "Succeeded",
    Failed = "Failed"
}
/**
 *
 * @export
 * @interface ConfirmEmailCommand
 */
export interface ConfirmEmailCommand {
    /**
     *
     * @type {string}
     * @memberof ConfirmEmailCommand
     */
    code?: string;
}
/**
 *
 * @export
 * @interface Consultation
 */
export interface Consultation {
    /**
     *
     * @type {string}
     * @memberof Consultation
     */
    id?: string;
    /**
     *
     * @type {ConsultationType}
     * @memberof Consultation
     */
    consultationType?: ConsultationType;
    /**
     *
     * @type {string}
     * @memberof Consultation
     */
    patientId?: string;
    /**
     *
     * @type {Patient}
     * @memberof Consultation
     */
    patient?: Patient;
    /**
     *
     * @type {string}
     * @memberof Consultation
     */
    hospitalId?: string;
    /**
     *
     * @type {Hospital}
     * @memberof Consultation
     */
    hospital?: Hospital;
    /**
     *
     * @type {string}
     * @memberof Consultation
     */
    specialtyId?: string;
    /**
     *
     * @type {Specialty}
     * @memberof Consultation
     */
    specialty?: Specialty;
    /**
     *
     * @type {string}
     * @memberof Consultation
     */
    doctorId?: string;
    /**
     *
     * @type {Doctor}
     * @memberof Consultation
     */
    doctor?: Doctor;
    /**
     *
     * @type {string}
     * @memberof Consultation
     */
    dealId?: string;
    /**
     *
     * @type {Deal}
     * @memberof Consultation
     */
    deal?: Deal;
    /**
     *
     * @type {string}
     * @memberof Consultation
     */
    language?: string;
    /**
     *
     * @type {boolean}
     * @memberof Consultation
     */
    isAccountHolder?: boolean;
    /**
     *
     * @type {string}
     * @memberof Consultation
     */
    firstName?: string;
    /**
     *
     * @type {string}
     * @memberof Consultation
     */
    lastName?: string;
    /**
     *
     * @type {string}
     * @memberof Consultation
     */
    email?: string;
    /**
     *
     * @type {Date}
     * @memberof Consultation
     */
    dateOfBirth?: Date;
    /**
     *
     * @type {Gender}
     * @memberof Consultation
     */
    gender?: Gender;
    /**
     *
     * @type {string}
     * @memberof Consultation
     */
    comment?: string;
    /**
     *
     * @type {Date}
     * @memberof Consultation
     */
    approximateDateStart?: Date;
    /**
     *
     * @type {Date}
     * @memberof Consultation
     */
    approximateDateEnd?: Date;
    /**
     *
     * @type {Date}
     * @memberof Consultation
     */
    confirmedDateStart?: Date;
    /**
     *
     * @type {Date}
     * @memberof Consultation
     */
    confirmedDateEnd?: Date;
    /**
     *
     * @type {User}
     * @memberof Consultation
     */
    caller?: User;
    /**
     *
     * @type {string}
     * @memberof Consultation
     */
    callerId?: string;
    /**
     *
     * @type {number}
     * @memberof Consultation
     */
    fee?: number;
    /**
     *
     * @type {number}
     * @memberof Consultation
     */
    applicationFee?: number;
    /**
     *
     * @type {ConsultationStatus}
     * @memberof Consultation
     */
    status?: ConsultationStatus;
    /**
     *
     * @type {RejectReason}
     * @memberof Consultation
     */
    rejectReason?: RejectReason;
    /**
     *
     * @type {string}
     * @memberof Consultation
     */
    rejectComment?: string;
    /**
     *
     * @type {boolean}
     * @memberof Consultation
     */
    isOpen?: boolean;
    /**
     *
     * @type {string}
     * @memberof Consultation
     */
    paymentId?: string;
    /**
     *
     * @type {Payment}
     * @memberof Consultation
     */
    payment?: Payment;
    /**
     *
     * @type {Array<ChangeLog>}
     * @memberof Consultation
     */
    statusChangeLogs?: Array<ChangeLog>;
    /**
     *
     * @type {Array<Media>}
     * @memberof Consultation
     */
    medias?: Array<Media>;
    /**
     *
     * @type {AuditableEntity}
     * @memberof Consultation
     */
    auditableEntity?: AuditableEntity;
}
/**
 *
 * @export
 * @interface ConsultationItemViewModel
 */
export interface ConsultationItemViewModel {
    /**
     *
     * @type {string}
     * @memberof ConsultationItemViewModel
     */
    id?: string;
    /**
     *
     * @type {ConsultationType}
     * @memberof ConsultationItemViewModel
     */
    consultationType?: ConsultationType;
    /**
     *
     * @type {string}
     * @memberof ConsultationItemViewModel
     */
    patientId?: string;
    /**
     *
     * @type {string}
     * @memberof ConsultationItemViewModel
     */
    patientName?: string;
    /**
     *
     * @type {string}
     * @memberof ConsultationItemViewModel
     */
    hospitalId?: string;
    /**
     *
     * @type {string}
     * @memberof ConsultationItemViewModel
     */
    hospitalName?: string;
    /**
     *
     * @type {string}
     * @memberof ConsultationItemViewModel
     */
    specialtyId?: string;
    /**
     *
     * @type {string}
     * @memberof ConsultationItemViewModel
     */
    specialtyName?: string;
    /**
     *
     * @type {string}
     * @memberof ConsultationItemViewModel
     */
    doctorId?: string;
    /**
     *
     * @type {string}
     * @memberof ConsultationItemViewModel
     */
    doctorName?: string;
    /**
     *
     * @type {string}
     * @memberof ConsultationItemViewModel
     */
    language?: string;
    /**
     *
     * @type {boolean}
     * @memberof ConsultationItemViewModel
     */
    isAccountHolder?: boolean;
    /**
     *
     * @type {string}
     * @memberof ConsultationItemViewModel
     */
    firstName?: string;
    /**
     *
     * @type {string}
     * @memberof ConsultationItemViewModel
     */
    lastName?: string;
    /**
     *
     * @type {string}
     * @memberof ConsultationItemViewModel
     */
    email?: string;
    /**
     *
     * @type {Date}
     * @memberof ConsultationItemViewModel
     */
    dateOfBirth?: Date;
    /**
     *
     * @type {Gender}
     * @memberof ConsultationItemViewModel
     */
    gender?: Gender;
    /**
     *
     * @type {string}
     * @memberof ConsultationItemViewModel
     */
    comment?: string;
    /**
     *
     * @type {Date}
     * @memberof ConsultationItemViewModel
     */
    approximateDateStart?: Date;
    /**
     *
     * @type {Date}
     * @memberof ConsultationItemViewModel
     */
    approximateDateEnd?: Date;
    /**
     *
     * @type {Date}
     * @memberof ConsultationItemViewModel
     */
    confirmedDateStart?: Date;
    /**
     *
     * @type {Date}
     * @memberof ConsultationItemViewModel
     */
    confirmedDateEnd?: Date;
    /**
     *
     * @type {string}
     * @memberof ConsultationItemViewModel
     */
    callerName?: string;
    /**
     *
     * @type {string}
     * @memberof ConsultationItemViewModel
     */
    callerId?: string;
    /**
     *
     * @type {number}
     * @memberof ConsultationItemViewModel
     */
    fee?: number;
    /**
     *
     * @type {number}
     * @memberof ConsultationItemViewModel
     */
    applicationFee?: number;
    /**
     *
     * @type {ConsultationStatus}
     * @memberof ConsultationItemViewModel
     */
    status?: ConsultationStatus;
    /**
     *
     * @type {RejectReason}
     * @memberof ConsultationItemViewModel
     */
    rejectReason?: RejectReason;
    /**
     *
     * @type {boolean}
     * @memberof ConsultationItemViewModel
     */
    isOpen?: boolean;
    /**
     *
     * @type {string}
     * @memberof ConsultationItemViewModel
     */
    paymentId?: string;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum ConsultationStatus {
    New = "New",
    Rejected = "Rejected",
    Approved = "Approved",
    Paid = "Paid",
    Canceled = "Canceled"
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum ConsultationType {
    Hospital = "Hospital",
    Doctor = "Doctor",
    Deal = "Deal"
}
/**
 *
 * @export
 * @interface ConsultationViewModel
 */
export interface ConsultationViewModel {
    /**
     *
     * @type {string}
     * @memberof ConsultationViewModel
     */
    id?: string;
    /**
     *
     * @type {ConsultationType}
     * @memberof ConsultationViewModel
     */
    consultationType?: ConsultationType;
    /**
     *
     * @type {string}
     * @memberof ConsultationViewModel
     */
    patientId?: string;
    /**
     *
     * @type {string}
     * @memberof ConsultationViewModel
     */
    patientName?: string;
    /**
     *
     * @type {string}
     * @memberof ConsultationViewModel
     */
    hospitalId?: string;
    /**
     *
     * @type {string}
     * @memberof ConsultationViewModel
     */
    hospitalName?: string;
    /**
     *
     * @type {string}
     * @memberof ConsultationViewModel
     */
    specialtyId?: string;
    /**
     *
     * @type {string}
     * @memberof ConsultationViewModel
     */
    specialtyName?: string;
    /**
     *
     * @type {string}
     * @memberof ConsultationViewModel
     */
    doctorId?: string;
    /**
     *
     * @type {string}
     * @memberof ConsultationViewModel
     */
    doctorName?: string;
    /**
     *
     * @type {string}
     * @memberof ConsultationViewModel
     */
    language?: string;
    /**
     *
     * @type {boolean}
     * @memberof ConsultationViewModel
     */
    isAccountHolder?: boolean;
    /**
     *
     * @type {string}
     * @memberof ConsultationViewModel
     */
    firstName?: string;
    /**
     *
     * @type {string}
     * @memberof ConsultationViewModel
     */
    lastName?: string;
    /**
     *
     * @type {string}
     * @memberof ConsultationViewModel
     */
    email?: string;
    /**
     *
     * @type {Date}
     * @memberof ConsultationViewModel
     */
    dateOfBirth?: Date;
    /**
     *
     * @type {Gender}
     * @memberof ConsultationViewModel
     */
    gender?: Gender;
    /**
     *
     * @type {string}
     * @memberof ConsultationViewModel
     */
    comment?: string;
    /**
     *
     * @type {Date}
     * @memberof ConsultationViewModel
     */
    approximateDateStart?: Date;
    /**
     *
     * @type {Date}
     * @memberof ConsultationViewModel
     */
    approximateDateEnd?: Date;
    /**
     *
     * @type {Date}
     * @memberof ConsultationViewModel
     */
    confirmedDateStart?: Date;
    /**
     *
     * @type {Date}
     * @memberof ConsultationViewModel
     */
    confirmedDateEnd?: Date;
    /**
     *
     * @type {string}
     * @memberof ConsultationViewModel
     */
    callerName?: string;
    /**
     *
     * @type {string}
     * @memberof ConsultationViewModel
     */
    callerId?: string;
    /**
     *
     * @type {number}
     * @memberof ConsultationViewModel
     */
    fee?: number;
    /**
     *
     * @type {number}
     * @memberof ConsultationViewModel
     */
    applicationFee?: number;
    /**
     *
     * @type {ConsultationStatus}
     * @memberof ConsultationViewModel
     */
    status?: ConsultationStatus;
    /**
     *
     * @type {RejectReason}
     * @memberof ConsultationViewModel
     */
    rejectReason?: RejectReason;
    /**
     *
     * @type {boolean}
     * @memberof ConsultationViewModel
     */
    isOpen?: boolean;
    /**
     *
     * @type {string}
     * @memberof ConsultationViewModel
     */
    paymentId?: string;
}
/**
 *
 * @export
 * @interface ConsultationsViewModel
 */
export interface ConsultationsViewModel {
    /**
     *
     * @type {Array<ConsultationItemViewModel>}
     * @memberof ConsultationsViewModel
     */
    items?: Array<ConsultationItemViewModel>;
    /**
     *
     * @type {PagedListMetaData}
     * @memberof ConsultationsViewModel
     */
    metaData?: PagedListMetaData;
}
/**
 *
 * @export
 * @interface CountriesViewModel
 */
export interface CountriesViewModel {
    /**
     *
     * @type {Array<CountryItemViewModel>}
     * @memberof CountriesViewModel
     */
    items?: Array<CountryItemViewModel>;
    /**
     *
     * @type {PagedListMetaData}
     * @memberof CountriesViewModel
     */
    metaData?: PagedListMetaData;
}
/**
 *
 * @export
 * @interface Country
 */
export interface Country {
    /**
     *
     * @type {string}
     * @memberof Country
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof Country
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof Country
     */
    normalizedName?: string;
    /**
     *
     * @type {string}
     * @memberof Country
     */
    description?: string;
    /**
     *
     * @type {Array<Hospital>}
     * @memberof Country
     */
    hospitals?: Array<Hospital>;
    /**
     *
     * @type {Array<Media>}
     * @memberof Country
     */
    medias?: Array<Media>;
    /**
     *
     * @type {AuditableEntity}
     * @memberof Country
     */
    auditableEntity?: AuditableEntity;
}
/**
 *
 * @export
 * @interface CountryItemViewModel
 */
export interface CountryItemViewModel {
    /**
     *
     * @type {string}
     * @memberof CountryItemViewModel
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof CountryItemViewModel
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof CountryItemViewModel
     */
    description?: string;
    /**
     *
     * @type {number}
     * @memberof CountryItemViewModel
     */
    hospitalsCount?: number;
    /**
     *
     * @type {number}
     * @memberof CountryItemViewModel
     */
    doctorsCount?: number;
    /**
     *
     * @type {number}
     * @memberof CountryItemViewModel
     */
    specialitiesCount?: number;
    /**
     *
     * @type {number}
     * @memberof CountryItemViewModel
     */
    packagesCount?: number;
    /**
     *
     * @type {number}
     * @memberof CountryItemViewModel
     */
    articlesCount?: number;
    /**
     *
     * @type {Array<MediaViewModel>}
     * @memberof CountryItemViewModel
     */
    medias?: Array<MediaViewModel>;
    /**
     *
     * @type {AuditableEntity}
     * @memberof CountryItemViewModel
     */
    auditableEntity?: AuditableEntity;
}
/**
 *
 * @export
 * @interface CountryViewModel
 */
export interface CountryViewModel {
    /**
     *
     * @type {string}
     * @memberof CountryViewModel
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof CountryViewModel
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof CountryViewModel
     */
    description?: string;
    /**
     *
     * @type {number}
     * @memberof CountryViewModel
     */
    hospitalsCount?: number;
    /**
     *
     * @type {number}
     * @memberof CountryViewModel
     */
    doctorsCount?: number;
    /**
     *
     * @type {number}
     * @memberof CountryViewModel
     */
    specialitiesCount?: number;
    /**
     *
     * @type {number}
     * @memberof CountryViewModel
     */
    packagesCount?: number;
    /**
     *
     * @type {number}
     * @memberof CountryViewModel
     */
    articlesCount?: number;
    /**
     *
     * @type {Array<MediaViewModel>}
     * @memberof CountryViewModel
     */
    medias?: Array<MediaViewModel>;
    /**
     *
     * @type {AuditableEntity}
     * @memberof CountryViewModel
     */
    auditableEntity?: AuditableEntity;
}
/**
 *
 * @export
 * @interface CreateArticleCommand
 */
export interface CreateArticleCommand {
    /**
     *
     * @type {string}
     * @memberof CreateArticleCommand
     */
    title?: string;
    /**
     *
     * @type {string}
     * @memberof CreateArticleCommand
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof CreateArticleCommand
     */
    body?: string;
    /**
     *
     * @type {ArticleStatus}
     * @memberof CreateArticleCommand
     */
    status?: ArticleStatus;
    /**
     *
     * @type {MarketingType}
     * @memberof CreateArticleCommand
     */
    marketingType?: MarketingType;
    /**
     *
     * @type {Array<ArticleTagItemViewModel>}
     * @memberof CreateArticleCommand
     */
    articleTags?: Array<ArticleTagItemViewModel>;
    /**
     *
     * @type {Array<MediaViewModel>}
     * @memberof CreateArticleCommand
     */
    medias?: Array<MediaViewModel>;
}
/**
 *
 * @export
 * @interface CreateBookingCommand
 */
export interface CreateBookingCommand {
    /**
     *
     * @type {string}
     * @memberof CreateBookingCommand
     */
    hospitalId?: string;
    /**
     *
     * @type {string}
     * @memberof CreateBookingCommand
     */
    dealPackageId?: string;
    /**
     *
     * @type {number}
     * @memberof CreateBookingCommand
     */
    quantity?: number;
    /**
     *
     * @type {string}
     * @memberof CreateBookingCommand
     */
    firstName?: string;
    /**
     *
     * @type {string}
     * @memberof CreateBookingCommand
     */
    lastName?: string;
    /**
     *
     * @type {string}
     * @memberof CreateBookingCommand
     */
    email?: string;
    /**
     *
     * @type {string}
     * @memberof CreateBookingCommand
     */
    phone?: string;
    /**
     *
     * @type {Date}
     * @memberof CreateBookingCommand
     */
    approximateDateStart?: Date;
    /**
     *
     * @type {Date}
     * @memberof CreateBookingCommand
     */
    approximateDateEnd?: Date;
    /**
     *
     * @type {string}
     * @memberof CreateBookingCommand
     */
    comment?: string;
}
/**
 *
 * @export
 * @interface CreateCHAdminCommand
 */
export interface CreateCHAdminCommand {
    /**
     *
     * @type {string}
     * @memberof CreateCHAdminCommand
     */
    firstName?: string;
    /**
     *
     * @type {string}
     * @memberof CreateCHAdminCommand
     */
    lastName?: string;
    /**
     *
     * @type {string}
     * @memberof CreateCHAdminCommand
     */
    phone?: string;
    /**
     *
     * @type {string}
     * @memberof CreateCHAdminCommand
     */
    photo?: string;
    /**
     *
     * @type {string}
     * @memberof CreateCHAdminCommand
     */
    photoThumbnail?: string;
    /**
     *
     * @type {Gender}
     * @memberof CreateCHAdminCommand
     */
    gender?: Gender;
    /**
     *
     * @type {Date}
     * @memberof CreateCHAdminCommand
     */
    dateOfBirth?: Date;
    /**
     *
     * @type {Array<MediaViewModel>}
     * @memberof CreateCHAdminCommand
     */
    medias?: Array<MediaViewModel>;
    /**
     *
     * @type {Array<UserLanguageViewModel>}
     * @memberof CreateCHAdminCommand
     */
    languages?: Array<UserLanguageViewModel>;
    /**
     *
     * @type {Array<UserLocationViewModel>}
     * @memberof CreateCHAdminCommand
     */
    locations?: Array<UserLocationViewModel>;
}
/**
 *
 * @export
 * @interface CreateCHManagerCommand
 */
export interface CreateCHManagerCommand {
    /**
     *
     * @type {string}
     * @memberof CreateCHManagerCommand
     */
    userName?: string;
    /**
     *
     * @type {string}
     * @memberof CreateCHManagerCommand
     */
    email?: string;
    /**
     *
     * @type {string}
     * @memberof CreateCHManagerCommand
     */
    firstName?: string;
    /**
     *
     * @type {string}
     * @memberof CreateCHManagerCommand
     */
    lastName?: string;
    /**
     *
     * @type {string}
     * @memberof CreateCHManagerCommand
     */
    phone?: string;
    /**
     *
     * @type {string}
     * @memberof CreateCHManagerCommand
     */
    photo?: string;
    /**
     *
     * @type {string}
     * @memberof CreateCHManagerCommand
     */
    photoThumbnail?: string;
    /**
     *
     * @type {Gender}
     * @memberof CreateCHManagerCommand
     */
    gender?: Gender;
    /**
     *
     * @type {Date}
     * @memberof CreateCHManagerCommand
     */
    dateOfBirth?: Date;
    /**
     *
     * @type {Array<MediaViewModel>}
     * @memberof CreateCHManagerCommand
     */
    medias?: Array<MediaViewModel>;
    /**
     *
     * @type {Array<UserLanguageViewModel>}
     * @memberof CreateCHManagerCommand
     */
    languages?: Array<UserLanguageViewModel>;
    /**
     *
     * @type {Array<UserLocationViewModel>}
     * @memberof CreateCHManagerCommand
     */
    locations?: Array<UserLocationViewModel>;
}
/**
 *
 * @export
 * @interface CreateConsultationCommand
 */
export interface CreateConsultationCommand {
    /**
     *
     * @type {ConsultationType}
     * @memberof CreateConsultationCommand
     */
    consultationType?: ConsultationType;
    /**
     *
     * @type {string}
     * @memberof CreateConsultationCommand
     */
    hospitalId?: string;
    /**
     *
     * @type {string}
     * @memberof CreateConsultationCommand
     */
    specialtyId?: string;
    /**
     *
     * @type {string}
     * @memberof CreateConsultationCommand
     */
    doctorId?: string;
    /**
     *
     * @type {string}
     * @memberof CreateConsultationCommand
     */
    language?: string;
    /**
     *
     * @type {boolean}
     * @memberof CreateConsultationCommand
     */
    isAccountHolder?: boolean;
    /**
     *
     * @type {string}
     * @memberof CreateConsultationCommand
     */
    firstName?: string;
    /**
     *
     * @type {string}
     * @memberof CreateConsultationCommand
     */
    lastName?: string;
    /**
     *
     * @type {string}
     * @memberof CreateConsultationCommand
     */
    email?: string;
    /**
     *
     * @type {Date}
     * @memberof CreateConsultationCommand
     */
    dateOfBirth?: Date;
    /**
     *
     * @type {Gender}
     * @memberof CreateConsultationCommand
     */
    gender?: Gender;
    /**
     *
     * @type {string}
     * @memberof CreateConsultationCommand
     */
    comment?: string;
    /**
     *
     * @type {Date}
     * @memberof CreateConsultationCommand
     */
    approximateDateStart?: Date;
    /**
     *
     * @type {Date}
     * @memberof CreateConsultationCommand
     */
    approximateDateEnd?: Date;
}
/**
 *
 * @export
 * @interface CreateCountryCommand
 */
export interface CreateCountryCommand {
    /**
     *
     * @type {string}
     * @memberof CreateCountryCommand
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof CreateCountryCommand
     */
    description?: string;
    /**
     *
     * @type {Array<MediaViewModel>}
     * @memberof CreateCountryCommand
     */
    medias?: Array<MediaViewModel>;
}
/**
 *
 * @export
 * @interface CreateDealCommand
 */
export interface CreateDealCommand {
    /**
     *
     * @type {string}
     * @memberof CreateDealCommand
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof CreateDealCommand
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof CreateDealCommand
     */
    hospitalId?: string;
    /**
     *
     * @type {MarketingType}
     * @memberof CreateDealCommand
     */
    marketingType?: MarketingType;
    /**
     *
     * @type {string}
     * @memberof CreateDealCommand
     */
    photo?: string;
    /**
     *
     * @type {string}
     * @memberof CreateDealCommand
     */
    photoThumbnail?: string;
    /**
     *
     * @type {Array<MediaViewModel>}
     * @memberof CreateDealCommand
     */
    medias?: Array<MediaViewModel>;
}
/**
 *
 * @export
 * @interface CreateDealPackageCommand
 */
export interface CreateDealPackageCommand {
    /**
     *
     * @type {string}
     * @memberof CreateDealPackageCommand
     */
    dealId?: string;
    /**
     *
     * @type {RefundPolicy}
     * @memberof CreateDealPackageCommand
     */
    refundPolicy?: RefundPolicy;
    /**
     *
     * @type {string}
     * @memberof CreateDealPackageCommand
     */
    additionalServices?: string;
    /**
     *
     * @type {string}
     * @memberof CreateDealPackageCommand
     */
    accomodation?: string;
    /**
     *
     * @type {string}
     * @memberof CreateDealPackageCommand
     */
    transfer?: string;
    /**
     *
     * @type {string}
     * @memberof CreateDealPackageCommand
     */
    bonus?: string;
    /**
     *
     * @type {number}
     * @memberof CreateDealPackageCommand
     */
    price?: number;
    /**
     *
     * @type {Array<ServiceViewModel>}
     * @memberof CreateDealPackageCommand
     */
    dealPackageServices?: Array<ServiceViewModel>;
}
/**
 *
 * @export
 * @interface CreateDepartmentCommand
 */
export interface CreateDepartmentCommand {
    /**
     *
     * @type {string}
     * @memberof CreateDepartmentCommand
     */
    hospitalId?: string;
    /**
     *
     * @type {string}
     * @memberof CreateDepartmentCommand
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof CreateDepartmentCommand
     */
    additionalInfo?: string;
}
/**
 *
 * @export
 * @interface CreateDeviceCommand
 */
export interface CreateDeviceCommand {
    /**
     *
     * @type {string}
     * @memberof CreateDeviceCommand
     */
    token?: string;
    /**
     *
     * @type {Platform}
     * @memberof CreateDeviceCommand
     */
    platform?: Platform;
    /**
     *
     * @type {boolean}
     * @memberof CreateDeviceCommand
     */
    appAlert?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof CreateDeviceCommand
     */
    eventAlert?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof CreateDeviceCommand
     */
    noticeAlert?: boolean;
}
/**
 *
 * @export
 * @interface CreateDeviceLoginCommand
 */
export interface CreateDeviceLoginCommand {
    /**
     *
     * @type {string}
     * @memberof CreateDeviceLoginCommand
     */
    version?: string;
    /**
     *
     * @type {LocationViewModel}
     * @memberof CreateDeviceLoginCommand
     */
    location?: LocationViewModel;
}
/**
 *
 * @export
 * @interface CreateDoctorCertificateCommand
 */
export interface CreateDoctorCertificateCommand {
    /**
     *
     * @type {string}
     * @memberof CreateDoctorCertificateCommand
     */
    certificate?: string;
    /**
     *
     * @type {Date}
     * @memberof CreateDoctorCertificateCommand
     */
    activeFrom?: Date;
    /**
     *
     * @type {Date}
     * @memberof CreateDoctorCertificateCommand
     */
    activeTo?: Date;
}
/**
 *
 * @export
 * @interface CreateDoctorCommand
 */
export interface CreateDoctorCommand {
    /**
     *
     * @type {string}
     * @memberof CreateDoctorCommand
     */
    userName?: string;
    /**
     *
     * @type {string}
     * @memberof CreateDoctorCommand
     */
    email?: string;
    /**
     *
     * @type {string}
     * @memberof CreateDoctorCommand
     */
    hospitalId?: string;
    /**
     *
     * @type {boolean}
     * @memberof CreateDoctorCommand
     */
    consultationEnabled?: boolean;
    /**
     *
     * @type {number}
     * @memberof CreateDoctorCommand
     */
    consultationFee?: number;
    /**
     *
     * @type {Array<DoctorEducationViewModel>}
     * @memberof CreateDoctorCommand
     */
    educations?: Array<DoctorEducationViewModel>;
    /**
     *
     * @type {Array<DoctorPortfolioViewModel>}
     * @memberof CreateDoctorCommand
     */
    portfolios?: Array<DoctorPortfolioViewModel>;
    /**
     *
     * @type {Array<DoctorSpecialtyViewModel>}
     * @memberof CreateDoctorCommand
     */
    specialties?: Array<DoctorSpecialtyViewModel>;
    /**
     *
     * @type {Array<DoctorCertificateViewModel>}
     * @memberof CreateDoctorCommand
     */
    certificates?: Array<DoctorCertificateViewModel>;
    /**
     *
     * @type {Array<AwardViewModel>}
     * @memberof CreateDoctorCommand
     */
    awards?: Array<AwardViewModel>;
    /**
     *
     * @type {string}
     * @memberof CreateDoctorCommand
     */
    firstName?: string;
    /**
     *
     * @type {string}
     * @memberof CreateDoctorCommand
     */
    lastName?: string;
    /**
     *
     * @type {string}
     * @memberof CreateDoctorCommand
     */
    phone?: string;
    /**
     *
     * @type {string}
     * @memberof CreateDoctorCommand
     */
    photo?: string;
    /**
     *
     * @type {string}
     * @memberof CreateDoctorCommand
     */
    photoThumbnail?: string;
    /**
     *
     * @type {Gender}
     * @memberof CreateDoctorCommand
     */
    gender?: Gender;
    /**
     *
     * @type {Date}
     * @memberof CreateDoctorCommand
     */
    dateOfBirth?: Date;
    /**
     *
     * @type {Array<MediaViewModel>}
     * @memberof CreateDoctorCommand
     */
    medias?: Array<MediaViewModel>;
    /**
     *
     * @type {Array<UserLanguageViewModel>}
     * @memberof CreateDoctorCommand
     */
    languages?: Array<UserLanguageViewModel>;
    /**
     *
     * @type {Array<UserLocationViewModel>}
     * @memberof CreateDoctorCommand
     */
    locations?: Array<UserLocationViewModel>;
}
/**
 *
 * @export
 * @interface CreateDoctorReviewCommand
 */
export interface CreateDoctorReviewCommand {
    /**
     *
     * @type {string}
     * @memberof CreateDoctorReviewCommand
     */
    body?: string;
    /**
     *
     * @type {boolean}
     * @memberof CreateDoctorReviewCommand
     */
    recommended?: boolean;
    /**
     *
     * @type {ReviewCategory}
     * @memberof CreateDoctorReviewCommand
     */
    reviewCategory?: ReviewCategory;
    /**
     *
     * @type {number}
     * @memberof CreateDoctorReviewCommand
     */
    rate?: number;
}
/**
 *
 * @export
 * @interface CreateEquipmentCommand
 */
export interface CreateEquipmentCommand {
    /**
     *
     * @type {string}
     * @memberof CreateEquipmentCommand
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof CreateEquipmentCommand
     */
    description?: string;
    /**
     *
     * @type {Array<MediaViewModel>}
     * @memberof CreateEquipmentCommand
     */
    medias?: Array<MediaViewModel>;
    /**
     *
     * @type {AuditableEntity}
     * @memberof CreateEquipmentCommand
     */
    auditableEntity?: AuditableEntity;
}
/**
 *
 * @export
 * @interface CreateHospitalCommand
 */
export interface CreateHospitalCommand {
    /**
     *
     * @type {string}
     * @memberof CreateHospitalCommand
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof CreateHospitalCommand
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof CreateHospitalCommand
     */
    logo?: string;
    /**
     *
     * @type {string}
     * @memberof CreateHospitalCommand
     */
    overview?: string;
    /**
     *
     * @type {number}
     * @memberof CreateHospitalCommand
     */
    bedsCount?: number;
    /**
     *
     * @type {number}
     * @memberof CreateHospitalCommand
     */
    operationRoomsCount?: number;
    /**
     *
     * @type {number}
     * @memberof CreateHospitalCommand
     */
    icuBedsCount?: number;
    /**
     *
     * @type {number}
     * @memberof CreateHospitalCommand
     */
    departmentsCount?: number;
    /**
     *
     * @type {number}
     * @memberof CreateHospitalCommand
     */
    medicalStaffCount?: number;
    /**
     *
     * @type {string}
     * @memberof CreateHospitalCommand
     */
    countryId?: string;
    /**
     *
     * @type {MarketingType}
     * @memberof CreateHospitalCommand
     */
    marketingType?: MarketingType;
    /**
     *
     * @type {boolean}
     * @memberof CreateHospitalCommand
     */
    consultationEnabled?: boolean;
    /**
     *
     * @type {number}
     * @memberof CreateHospitalCommand
     */
    consultationFee?: number;
    /**
     *
     * @type {Array<AwardViewModel>}
     * @memberof CreateHospitalCommand
     */
    awards?: Array<AwardViewModel>;
    /**
     *
     * @type {Array<MediaViewModel>}
     * @memberof CreateHospitalCommand
     */
    medias?: Array<MediaViewModel>;
    /**
     *
     * @type {LocationViewModel}
     * @memberof CreateHospitalCommand
     */
    location?: LocationViewModel;
}
/**
 *
 * @export
 * @interface CreateHospitalReviewCommand
 */
export interface CreateHospitalReviewCommand {
    /**
     *
     * @type {string}
     * @memberof CreateHospitalReviewCommand
     */
    body?: string;
    /**
     *
     * @type {boolean}
     * @memberof CreateHospitalReviewCommand
     */
    recommended?: boolean;
    /**
     *
     * @type {ReviewCategory}
     * @memberof CreateHospitalReviewCommand
     */
    reviewCategory?: ReviewCategory;
    /**
     *
     * @type {number}
     * @memberof CreateHospitalReviewCommand
     */
    rate?: number;
}
/**
 *
 * @export
 * @interface CreateManagerCommand
 */
export interface CreateManagerCommand {
    /**
     *
     * @type {string}
     * @memberof CreateManagerCommand
     */
    userName?: string;
    /**
     *
     * @type {string}
     * @memberof CreateManagerCommand
     */
    email?: string;
    /**
     *
     * @type {string}
     * @memberof CreateManagerCommand
     */
    hospitalId?: string;
    /**
     *
     * @type {string}
     * @memberof CreateManagerCommand
     */
    firstName?: string;
    /**
     *
     * @type {string}
     * @memberof CreateManagerCommand
     */
    lastName?: string;
    /**
     *
     * @type {string}
     * @memberof CreateManagerCommand
     */
    phone?: string;
    /**
     *
     * @type {string}
     * @memberof CreateManagerCommand
     */
    photo?: string;
    /**
     *
     * @type {string}
     * @memberof CreateManagerCommand
     */
    photoThumbnail?: string;
    /**
     *
     * @type {Gender}
     * @memberof CreateManagerCommand
     */
    gender?: Gender;
    /**
     *
     * @type {Date}
     * @memberof CreateManagerCommand
     */
    dateOfBirth?: Date;
    /**
     *
     * @type {Array<MediaViewModel>}
     * @memberof CreateManagerCommand
     */
    medias?: Array<MediaViewModel>;
    /**
     *
     * @type {Array<UserLanguageViewModel>}
     * @memberof CreateManagerCommand
     */
    languages?: Array<UserLanguageViewModel>;
    /**
     *
     * @type {Array<UserLocationViewModel>}
     * @memberof CreateManagerCommand
     */
    locations?: Array<UserLocationViewModel>;
}
/**
 *
 * @export
 * @interface CreatePartnerCommand
 */
export interface CreatePartnerCommand {
    /**
     *
     * @type {string}
     * @memberof CreatePartnerCommand
     */
    userName?: string;
    /**
     *
     * @type {string}
     * @memberof CreatePartnerCommand
     */
    email?: string;
    /**
     *
     * @type {string}
     * @memberof CreatePartnerCommand
     */
    firstName?: string;
    /**
     *
     * @type {string}
     * @memberof CreatePartnerCommand
     */
    lastName?: string;
    /**
     *
     * @type {string}
     * @memberof CreatePartnerCommand
     */
    phone?: string;
    /**
     *
     * @type {string}
     * @memberof CreatePartnerCommand
     */
    photo?: string;
    /**
     *
     * @type {string}
     * @memberof CreatePartnerCommand
     */
    photoThumbnail?: string;
    /**
     *
     * @type {Gender}
     * @memberof CreatePartnerCommand
     */
    gender?: Gender;
    /**
     *
     * @type {Date}
     * @memberof CreatePartnerCommand
     */
    dateOfBirth?: Date;
    /**
     *
     * @type {Array<MediaViewModel>}
     * @memberof CreatePartnerCommand
     */
    medias?: Array<MediaViewModel>;
    /**
     *
     * @type {Array<UserLanguageViewModel>}
     * @memberof CreatePartnerCommand
     */
    languages?: Array<UserLanguageViewModel>;
    /**
     *
     * @type {Array<UserLocationViewModel>}
     * @memberof CreatePartnerCommand
     */
    locations?: Array<UserLocationViewModel>;
}
/**
 *
 * @export
 * @interface CreatePatientCommand
 */
export interface CreatePatientCommand {
    /**
     *
     * @type {string}
     * @memberof CreatePatientCommand
     */
    userName?: string;
    /**
     *
     * @type {string}
     * @memberof CreatePatientCommand
     */
    email?: string;
    /**
     *
     * @type {boolean}
     * @memberof CreatePatientCommand
     */
    isAdmin?: boolean;
    /**
     *
     * @type {string}
     * @memberof CreatePatientCommand
     */
    firstName?: string;
    /**
     *
     * @type {string}
     * @memberof CreatePatientCommand
     */
    lastName?: string;
    /**
     *
     * @type {string}
     * @memberof CreatePatientCommand
     */
    phone?: string;
    /**
     *
     * @type {string}
     * @memberof CreatePatientCommand
     */
    photo?: string;
    /**
     *
     * @type {string}
     * @memberof CreatePatientCommand
     */
    photoThumbnail?: string;
    /**
     *
     * @type {Gender}
     * @memberof CreatePatientCommand
     */
    gender?: Gender;
    /**
     *
     * @type {Date}
     * @memberof CreatePatientCommand
     */
    dateOfBirth?: Date;
    /**
     *
     * @type {Array<MediaViewModel>}
     * @memberof CreatePatientCommand
     */
    medias?: Array<MediaViewModel>;
    /**
     *
     * @type {Array<UserLanguageViewModel>}
     * @memberof CreatePatientCommand
     */
    languages?: Array<UserLanguageViewModel>;
    /**
     *
     * @type {Array<UserLocationViewModel>}
     * @memberof CreatePatientCommand
     */
    locations?: Array<UserLocationViewModel>;
}
/**
 *
 * @export
 * @interface CreateQuestionCommand
 */
export interface CreateQuestionCommand {
    /**
     *
     * @type {string}
     * @memberof CreateQuestionCommand
     */
    title?: string;
    /**
     *
     * @type {string}
     * @memberof CreateQuestionCommand
     */
    body?: string;
    /**
     *
     * @type {QuestionType}
     * @memberof CreateQuestionCommand
     */
    questionType?: QuestionType;
    /**
     *
     * @type {QuestionStatus}
     * @memberof CreateQuestionCommand
     */
    questionStatus?: QuestionStatus;
    /**
     *
     * @type {string}
     * @memberof CreateQuestionCommand
     */
    dealPackageId?: string;
    /**
     *
     * @type {number}
     * @memberof CreateQuestionCommand
     */
    quantity?: number;
    /**
     *
     * @type {Array<MediaViewModel>}
     * @memberof CreateQuestionCommand
     */
    medias?: Array<MediaViewModel>;
}
/**
 *
 * @export
 * @interface CreateQuestionCommentCommand
 */
export interface CreateQuestionCommentCommand {
    /**
     *
     * @type {string}
     * @memberof CreateQuestionCommentCommand
     */
    body?: string;
    /**
     *
     * @type {Array<MediaViewModel>}
     * @memberof CreateQuestionCommentCommand
     */
    medias?: Array<MediaViewModel>;
}
/**
 *
 * @export
 * @interface CreateServiceCategoryCommand
 */
export interface CreateServiceCategoryCommand {
    /**
     *
     * @type {string}
     * @memberof CreateServiceCategoryCommand
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof CreateServiceCategoryCommand
     */
    description?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof CreateServiceCategoryCommand
     */
    services?: Array<string>;
}
/**
 *
 * @export
 * @interface CreateServiceCommand
 */
export interface CreateServiceCommand {
    /**
     *
     * @type {string}
     * @memberof CreateServiceCommand
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof CreateServiceCommand
     */
    description?: string;
    /**
     *
     * @type {number}
     * @memberof CreateServiceCommand
     */
    minPrice?: number;
    /**
     *
     * @type {number}
     * @memberof CreateServiceCommand
     */
    maxPrice?: number;
    /**
     *
     * @type {boolean}
     * @memberof CreateServiceCommand
     */
    priceReuqest?: boolean;
    /**
     *
     * @type {Procedure}
     * @memberof CreateServiceCommand
     */
    procedure?: Procedure;
}
/**
 *
 * @export
 * @interface CreateSpecialtyCommand
 */
export interface CreateSpecialtyCommand {
    /**
     *
     * @type {string}
     * @memberof CreateSpecialtyCommand
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof CreateSpecialtyCommand
     */
    description?: string;
}
/**
 *
 * @export
 * @interface CreateSpecialtyTypeCategoryCommand
 */
export interface CreateSpecialtyTypeCategoryCommand {
    /**
     *
     * @type {string}
     * @memberof CreateSpecialtyTypeCategoryCommand
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof CreateSpecialtyTypeCategoryCommand
     */
    description?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof CreateSpecialtyTypeCategoryCommand
     */
    specialtyTypes?: Array<string>;
}
/**
 *
 * @export
 * @interface CreateSpecialtyTypeCommand
 */
export interface CreateSpecialtyTypeCommand {
    /**
     *
     * @type {string}
     * @memberof CreateSpecialtyTypeCommand
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof CreateSpecialtyTypeCommand
     */
    description?: string;
    /**
     *
     * @type {MarketingType}
     * @memberof CreateSpecialtyTypeCommand
     */
    marketingType?: MarketingType;
}
/**
 *
 * @export
 * @interface CreateYoutubeCommand
 */
export interface CreateYoutubeCommand {
    /**
     *
     * @type {string}
     * @memberof CreateYoutubeCommand
     */
    title?: string;
    /**
     *
     * @type {string}
     * @memberof CreateYoutubeCommand
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof CreateYoutubeCommand
     */
    url?: string;
    /**
     *
     * @type {Array<YoutubeTagItemViewModel>}
     * @memberof CreateYoutubeCommand
     */
    youtubeTags?: Array<YoutubeTagItemViewModel>;
    /**
     *
     * @type {MarketingType}
     * @memberof CreateYoutubeCommand
     */
    marketingType?: MarketingType;
}
/**
 *
 * @export
 * @interface Customer
 */
export interface Customer {
    /**
     *
     * @type {string}
     * @memberof Customer
     */
    id?: string;
    /**
     *
     * @type {VendorType}
     * @memberof Customer
     */
    vendor?: VendorType;
    /**
     *
     * @type {string}
     * @memberof Customer
     */
    patientId?: string;
    /**
     *
     * @type {Patient}
     * @memberof Customer
     */
    patient?: Patient;
    /**
     *
     * @type {Array<Payment>}
     * @memberof Customer
     */
    payments?: Array<Payment>;
    /**
     *
     * @type {AuditableEntity}
     * @memberof Customer
     */
    auditableEntity?: AuditableEntity;
}
/**
 *
 * @export
 * @interface Deal
 */
export interface Deal {
    /**
     *
     * @type {string}
     * @memberof Deal
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof Deal
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof Deal
     */
    normalizedName?: string;
    /**
     *
     * @type {string}
     * @memberof Deal
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof Deal
     */
    hospitalId?: string;
    /**
     *
     * @type {Hospital}
     * @memberof Deal
     */
    hospital?: Hospital;
    /**
     *
     * @type {MarketingType}
     * @memberof Deal
     */
    marketingType?: MarketingType;
    /**
     *
     * @type {string}
     * @memberof Deal
     */
    photo?: string;
    /**
     *
     * @type {string}
     * @memberof Deal
     */
    photoThumbnail?: string;
    /**
     *
     * @type {Array<DealPackage>}
     * @memberof Deal
     */
    dealPackages?: Array<DealPackage>;
    /**
     *
     * @type {AuditableEntity}
     * @memberof Deal
     */
    auditableEntity?: AuditableEntity;
}
/**
 *
 * @export
 * @interface DealItemViewModel
 */
export interface DealItemViewModel {
    /**
     *
     * @type {string}
     * @memberof DealItemViewModel
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof DealItemViewModel
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof DealItemViewModel
     */
    normalizedName?: string;
    /**
     *
     * @type {string}
     * @memberof DealItemViewModel
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof DealItemViewModel
     */
    hospitalId?: string;
    /**
     *
     * @type {string}
     * @memberof DealItemViewModel
     */
    hospitalName?: string;
    /**
     *
     * @type {MarketingType}
     * @memberof DealItemViewModel
     */
    marketingType?: MarketingType;
    /**
     *
     * @type {string}
     * @memberof DealItemViewModel
     */
    photo?: string;
    /**
     *
     * @type {string}
     * @memberof DealItemViewModel
     */
    photoThumbnail?: string;
    /**
     *
     * @type {Array<DealPackageItemViewModel>}
     * @memberof DealItemViewModel
     */
    dealPackages?: Array<DealPackageItemViewModel>;
    /**
     *
     * @type {AuditableEntity}
     * @memberof DealItemViewModel
     */
    auditableEntity?: AuditableEntity;
}
/**
 *
 * @export
 * @interface DealPackage
 */
export interface DealPackage {
    /**
     *
     * @type {string}
     * @memberof DealPackage
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof DealPackage
     */
    dealId?: string;
    /**
     *
     * @type {Deal}
     * @memberof DealPackage
     */
    deal?: Deal;
    /**
     *
     * @type {RefundPolicy}
     * @memberof DealPackage
     */
    refundPolicy?: RefundPolicy;
    /**
     *
     * @type {string}
     * @memberof DealPackage
     */
    additionalServices?: string;
    /**
     *
     * @type {string}
     * @memberof DealPackage
     */
    accomodation?: string;
    /**
     *
     * @type {string}
     * @memberof DealPackage
     */
    transfer?: string;
    /**
     *
     * @type {string}
     * @memberof DealPackage
     */
    bonus?: string;
    /**
     *
     * @type {number}
     * @memberof DealPackage
     */
    price?: number;
    /**
     *
     * @type {Array<DealPackageService>}
     * @memberof DealPackage
     */
    dealPackageServices?: Array<DealPackageService>;
    /**
     *
     * @type {Array<Manager>}
     * @memberof DealPackage
     */
    managers?: Array<Manager>;
    /**
     *
     * @type {Array<Question>}
     * @memberof DealPackage
     */
    questions?: Array<Question>;
    /**
     *
     * @type {Array<Booking>}
     * @memberof DealPackage
     */
    bookings?: Array<Booking>;
    /**
     *
     * @type {AuditableEntity}
     * @memberof DealPackage
     */
    auditableEntity?: AuditableEntity;
}
/**
 *
 * @export
 * @interface DealPackageItemViewModel
 */
export interface DealPackageItemViewModel {
    /**
     *
     * @type {string}
     * @memberof DealPackageItemViewModel
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof DealPackageItemViewModel
     */
    dealId?: string;
    /**
     *
     * @type {string}
     * @memberof DealPackageItemViewModel
     */
    dealName?: string;
    /**
     *
     * @type {string}
     * @memberof DealPackageItemViewModel
     */
    hospitalId?: string;
    /**
     *
     * @type {string}
     * @memberof DealPackageItemViewModel
     */
    hospitalName?: string;
    /**
     *
     * @type {RefundPolicy}
     * @memberof DealPackageItemViewModel
     */
    refundPolicy?: RefundPolicy;
    /**
     *
     * @type {string}
     * @memberof DealPackageItemViewModel
     */
    additionalServices?: string;
    /**
     *
     * @type {string}
     * @memberof DealPackageItemViewModel
     */
    accomodation?: string;
    /**
     *
     * @type {string}
     * @memberof DealPackageItemViewModel
     */
    transfer?: string;
    /**
     *
     * @type {string}
     * @memberof DealPackageItemViewModel
     */
    bonus?: string;
    /**
     *
     * @type {number}
     * @memberof DealPackageItemViewModel
     */
    price?: number;
    /**
     *
     * @type {number}
     * @memberof DealPackageItemViewModel
     */
    serviceCount?: number;
    /**
     *
     * @type {Array<DealPackageServiceItemViewModel>}
     * @memberof DealPackageItemViewModel
     */
    dealPackageServices?: Array<DealPackageServiceItemViewModel>;
    /**
     *
     * @type {AuditableEntity}
     * @memberof DealPackageItemViewModel
     */
    auditableEntity?: AuditableEntity;
}
/**
 *
 * @export
 * @interface DealPackageSearchViewModel
 */
export interface DealPackageSearchViewModel {
    /**
     *
     * @type {string}
     * @memberof DealPackageSearchViewModel
     */
    id?: string;
    /**
     *
     * @type {number}
     * @memberof DealPackageSearchViewModel
     */
    refundPolicy?: number;
    /**
     *
     * @type {string}
     * @memberof DealPackageSearchViewModel
     */
    additionalServices?: string;
    /**
     *
     * @type {string}
     * @memberof DealPackageSearchViewModel
     */
    accomodation?: string;
    /**
     *
     * @type {string}
     * @memberof DealPackageSearchViewModel
     */
    transfer?: string;
    /**
     *
     * @type {string}
     * @memberof DealPackageSearchViewModel
     */
    bonus?: string;
    /**
     *
     * @type {number}
     * @memberof DealPackageSearchViewModel
     */
    price?: number;
    /**
     *
     * @type {Array<ServiceSearchViewModel>}
     * @memberof DealPackageSearchViewModel
     */
    services?: Array<ServiceSearchViewModel>;
}
/**
 *
 * @export
 * @interface DealPackageService
 */
export interface DealPackageService {
    /**
     *
     * @type {string}
     * @memberof DealPackageService
     */
    dealPackageId?: string;
    /**
     *
     * @type {DealPackage}
     * @memberof DealPackageService
     */
    dealPackage?: DealPackage;
    /**
     *
     * @type {string}
     * @memberof DealPackageService
     */
    serviceId?: string;
    /**
     *
     * @type {Service}
     * @memberof DealPackageService
     */
    service?: Service;
    /**
     *
     * @type {number}
     * @memberof DealPackageService
     */
    order?: number;
}
/**
 *
 * @export
 * @interface DealPackageServiceItemViewModel
 */
export interface DealPackageServiceItemViewModel {
    /**
     *
     * @type {string}
     * @memberof DealPackageServiceItemViewModel
     */
    dealPackageId?: string;
    /**
     *
     * @type {string}
     * @memberof DealPackageServiceItemViewModel
     */
    serviceId?: string;
    /**
     *
     * @type {string}
     * @memberof DealPackageServiceItemViewModel
     */
    serviceName?: string;
    /**
     *
     * @type {Procedure}
     * @memberof DealPackageServiceItemViewModel
     */
    procedure?: Procedure;
    /**
     *
     * @type {number}
     * @memberof DealPackageServiceItemViewModel
     */
    order?: number;
}
/**
 *
 * @export
 * @interface DealPackageViewModel
 */
export interface DealPackageViewModel {
    /**
     *
     * @type {string}
     * @memberof DealPackageViewModel
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof DealPackageViewModel
     */
    dealId?: string;
    /**
     *
     * @type {string}
     * @memberof DealPackageViewModel
     */
    dealName?: string;
    /**
     *
     * @type {string}
     * @memberof DealPackageViewModel
     */
    hospitalId?: string;
    /**
     *
     * @type {string}
     * @memberof DealPackageViewModel
     */
    hospitalName?: string;
    /**
     *
     * @type {RefundPolicy}
     * @memberof DealPackageViewModel
     */
    refundPolicy?: RefundPolicy;
    /**
     *
     * @type {string}
     * @memberof DealPackageViewModel
     */
    additionalServices?: string;
    /**
     *
     * @type {string}
     * @memberof DealPackageViewModel
     */
    accomodation?: string;
    /**
     *
     * @type {string}
     * @memberof DealPackageViewModel
     */
    transfer?: string;
    /**
     *
     * @type {string}
     * @memberof DealPackageViewModel
     */
    bonus?: string;
    /**
     *
     * @type {number}
     * @memberof DealPackageViewModel
     */
    price?: number;
    /**
     *
     * @type {number}
     * @memberof DealPackageViewModel
     */
    serviceCount?: number;
    /**
     *
     * @type {Array<DealPackageServiceItemViewModel>}
     * @memberof DealPackageViewModel
     */
    dealPackageServices?: Array<DealPackageServiceItemViewModel>;
    /**
     *
     * @type {AuditableEntity}
     * @memberof DealPackageViewModel
     */
    auditableEntity?: AuditableEntity;
}
/**
 *
 * @export
 * @interface DealSearchResultViewModel
 */
export interface DealSearchResultViewModel {
    /**
     *
     * @type {Array<DealSearchViewModel>}
     * @memberof DealSearchResultViewModel
     */
    items?: Array<DealSearchViewModel>;
    /**
     *
     * @type {SearchMetaData}
     * @memberof DealSearchResultViewModel
     */
    metaData?: SearchMetaData;
}
/**
 *
 * @export
 * @interface DealSearchViewModel
 */
export interface DealSearchViewModel {
    /**
     *
     * @type {string}
     * @memberof DealSearchViewModel
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof DealSearchViewModel
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof DealSearchViewModel
     */
    description?: string;
    /**
     *
     * @type {number}
     * @memberof DealSearchViewModel
     */
    marketingType?: number;
    /**
     *
     * @type {string}
     * @memberof DealSearchViewModel
     */
    photo?: string;
    /**
     *
     * @type {string}
     * @memberof DealSearchViewModel
     */
    photoThumbnail?: string;
    /**
     *
     * @type {HospitalSearchItemViewModel}
     * @memberof DealSearchViewModel
     */
    hospital?: HospitalSearchItemViewModel;
    /**
     *
     * @type {Array<DealPackageSearchViewModel>}
     * @memberof DealSearchViewModel
     */
    packages?: Array<DealPackageSearchViewModel>;
}
/**
 *
 * @export
 * @interface DealViewModel
 */
export interface DealViewModel {
    /**
     *
     * @type {string}
     * @memberof DealViewModel
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof DealViewModel
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof DealViewModel
     */
    normalizedName?: string;
    /**
     *
     * @type {string}
     * @memberof DealViewModel
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof DealViewModel
     */
    hospitalId?: string;
    /**
     *
     * @type {string}
     * @memberof DealViewModel
     */
    hospitalName?: string;
    /**
     *
     * @type {MarketingType}
     * @memberof DealViewModel
     */
    marketingType?: MarketingType;
    /**
     *
     * @type {string}
     * @memberof DealViewModel
     */
    photo?: string;
    /**
     *
     * @type {string}
     * @memberof DealViewModel
     */
    photoThumbnail?: string;
    /**
     *
     * @type {Array<DealPackageItemViewModel>}
     * @memberof DealViewModel
     */
    dealPackages?: Array<DealPackageItemViewModel>;
    /**
     *
     * @type {AuditableEntity}
     * @memberof DealViewModel
     */
    auditableEntity?: AuditableEntity;
}
/**
 *
 * @export
 * @interface DealsViewModel
 */
export interface DealsViewModel {
    /**
     *
     * @type {Array<DealItemViewModel>}
     * @memberof DealsViewModel
     */
    items?: Array<DealItemViewModel>;
    /**
     *
     * @type {PagedListMetaData}
     * @memberof DealsViewModel
     */
    metaData?: PagedListMetaData;
}
/**
 *
 * @export
 * @interface Department
 */
export interface Department {
    /**
     *
     * @type {string}
     * @memberof Department
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof Department
     */
    hospitalId?: string;
    /**
     *
     * @type {Hospital}
     * @memberof Department
     */
    hospital?: Hospital;
    /**
     *
     * @type {string}
     * @memberof Department
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof Department
     */
    normalizedName?: string;
    /**
     *
     * @type {string}
     * @memberof Department
     */
    additionalInfo?: string;
}
/**
 *
 * @export
 * @interface DepartmentItemViewModel
 */
export interface DepartmentItemViewModel {
    /**
     *
     * @type {string}
     * @memberof DepartmentItemViewModel
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof DepartmentItemViewModel
     */
    hospitalId?: string;
    /**
     *
     * @type {string}
     * @memberof DepartmentItemViewModel
     */
    hospitalName?: string;
    /**
     *
     * @type {string}
     * @memberof DepartmentItemViewModel
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof DepartmentItemViewModel
     */
    additionalInfo?: string;
}
/**
 *
 * @export
 * @interface DepartmentViewModel
 */
export interface DepartmentViewModel {
    /**
     *
     * @type {string}
     * @memberof DepartmentViewModel
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof DepartmentViewModel
     */
    hospitalId?: string;
    /**
     *
     * @type {string}
     * @memberof DepartmentViewModel
     */
    hospitalName?: string;
    /**
     *
     * @type {string}
     * @memberof DepartmentViewModel
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof DepartmentViewModel
     */
    additionalInfo?: string;
}
/**
 *
 * @export
 * @interface DepartmentsViewModel
 */
export interface DepartmentsViewModel {
    /**
     *
     * @type {Array<DepartmentItemViewModel>}
     * @memberof DepartmentsViewModel
     */
    items?: Array<DepartmentItemViewModel>;
    /**
     *
     * @type {PagedListMetaData}
     * @memberof DepartmentsViewModel
     */
    metaData?: PagedListMetaData;
}
/**
 *
 * @export
 * @interface Device
 */
export interface Device {
    /**
     *
     * @type {string}
     * @memberof Device
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof Device
     */
    token?: string;
    /**
     *
     * @type {Platform}
     * @memberof Device
     */
    platform?: Platform;
    /**
     *
     * @type {boolean}
     * @memberof Device
     */
    appAlert?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof Device
     */
    eventAlert?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof Device
     */
    noticeAlert?: boolean;
    /**
     *
     * @type {string}
     * @memberof Device
     */
    userId?: string;
    /**
     *
     * @type {User}
     * @memberof Device
     */
    user?: User;
    /**
     *
     * @type {Array<DeviceLogin>}
     * @memberof Device
     */
    deviceLogins?: Array<DeviceLogin>;
    /**
     *
     * @type {AuditableEntity}
     * @memberof Device
     */
    auditableEntity?: AuditableEntity;
}
/**
 *
 * @export
 * @interface DeviceLogin
 */
export interface DeviceLogin {
    /**
     *
     * @type {string}
     * @memberof DeviceLogin
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof DeviceLogin
     */
    deviceId?: string;
    /**
     *
     * @type {Device}
     * @memberof DeviceLogin
     */
    device?: Device;
    /**
     *
     * @type {string}
     * @memberof DeviceLogin
     */
    version?: string;
    /**
     *
     * @type {Location}
     * @memberof DeviceLogin
     */
    location?: Location;
    /**
     *
     * @type {AuditableEntity}
     * @memberof DeviceLogin
     */
    auditableEntity?: AuditableEntity;
}
/**
 *
 * @export
 * @interface DeviceViewModel
 */
export interface DeviceViewModel {
    /**
     *
     * @type {string}
     * @memberof DeviceViewModel
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof DeviceViewModel
     */
    token?: string;
    /**
     *
     * @type {Platform}
     * @memberof DeviceViewModel
     */
    platform?: Platform;
    /**
     *
     * @type {boolean}
     * @memberof DeviceViewModel
     */
    appAlert?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof DeviceViewModel
     */
    eventAlert?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof DeviceViewModel
     */
    noticeAlert?: boolean;
}
/**
 *
 * @export
 * @interface Doctor
 */
export interface Doctor {
    /**
     *
     * @type {Date}
     * @memberof Doctor
     */
    startPracticeDate?: Date;
    /**
     *
     * @type {string}
     * @memberof Doctor
     */
    overview?: string;
    /**
     *
     * @type {boolean}
     * @memberof Doctor
     */
    consultationEnabled?: boolean;
    /**
     *
     * @type {number}
     * @memberof Doctor
     */
    consultationFee?: number;
    /**
     *
     * @type {Array<DoctorReview>}
     * @memberof Doctor
     */
    doctorReviews?: Array<DoctorReview>;
    /**
     *
     * @type {Array<DoctorEducation>}
     * @memberof Doctor
     */
    doctorEducations?: Array<DoctorEducation>;
    /**
     *
     * @type {Array<DoctorPortfolio>}
     * @memberof Doctor
     */
    doctorPortfolios?: Array<DoctorPortfolio>;
    /**
     *
     * @type {Array<DoctorSpecialty>}
     * @memberof Doctor
     */
    doctorSpecialties?: Array<DoctorSpecialty>;
    /**
     *
     * @type {Array<DoctorCertificate>}
     * @memberof Doctor
     */
    doctorCertificates?: Array<DoctorCertificate>;
    /**
     *
     * @type {Array<DoctorAffiliation>}
     * @memberof Doctor
     */
    doctorAffiliations?: Array<DoctorAffiliation>;
    /**
     *
     * @type {Array<Award>}
     * @memberof Doctor
     */
    awards?: Array<Award>;
    /**
     *
     * @type {Array<Media>}
     * @memberof Doctor
     */
    medias?: Array<Media>;
    /**
     *
     * @type {string}
     * @memberof Doctor
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof Doctor
     */
    userName?: string;
    /**
     *
     * @type {string}
     * @memberof Doctor
     */
    email?: string;
    /**
     *
     * @type {string}
     * @memberof Doctor
     */
    firstName?: string;
    /**
     *
     * @type {string}
     * @memberof Doctor
     */
    lastName?: string;
    /**
     *
     * @type {string}
     * @memberof Doctor
     */
    normalizedName?: string;
    /**
     *
     * @type {string}
     * @memberof Doctor
     */
    phone?: string;
    /**
     *
     * @type {string}
     * @memberof Doctor
     */
    photo?: string;
    /**
     *
     * @type {string}
     * @memberof Doctor
     */
    photoThumbnail?: string;
    /**
     *
     * @type {Gender}
     * @memberof Doctor
     */
    gender?: Gender;
    /**
     *
     * @type {Date}
     * @memberof Doctor
     */
    dateOfBirth?: Date;
    /**
     *
     * @type {string}
     * @memberof Doctor
     */
    timeZone?: string;
    /**
     *
     * @type {Array<Device>}
     * @memberof Doctor
     */
    devices?: Array<Device>;
    /**
     *
     * @type {Array<Article>}
     * @memberof Doctor
     */
    articles?: Array<Article>;
    /**
     *
     * @type {Array<QuestionComment>}
     * @memberof Doctor
     */
    questionComments?: Array<QuestionComment>;
    /**
     *
     * @type {Array<UserLocation>}
     * @memberof Doctor
     */
    locations?: Array<UserLocation>;
    /**
     *
     * @type {Array<UserLanguage>}
     * @memberof Doctor
     */
    languages?: Array<UserLanguage>;
    /**
     *
     * @type {AuditableEntity}
     * @memberof Doctor
     */
    auditableEntity?: AuditableEntity;
}
/**
 *
 * @export
 * @interface DoctorAffiliation
 */
export interface DoctorAffiliation {
    /**
     *
     * @type {string}
     * @memberof DoctorAffiliation
     */
    doctorId?: string;
    /**
     *
     * @type {Doctor}
     * @memberof DoctorAffiliation
     */
    doctor?: Doctor;
    /**
     *
     * @type {string}
     * @memberof DoctorAffiliation
     */
    hospitalId?: string;
    /**
     *
     * @type {Hospital}
     * @memberof DoctorAffiliation
     */
    hospital?: Hospital;
    /**
     *
     * @type {number}
     * @memberof DoctorAffiliation
     */
    order?: number;
}
/**
 *
 * @export
 * @interface DoctorAffiliationViewModel
 */
export interface DoctorAffiliationViewModel {
    /**
     *
     * @type {string}
     * @memberof DoctorAffiliationViewModel
     */
    doctorId?: string;
    /**
     *
     * @type {string}
     * @memberof DoctorAffiliationViewModel
     */
    doctorName?: string;
    /**
     *
     * @type {number}
     * @memberof DoctorAffiliationViewModel
     */
    order?: number;
    /**
     *
     * @type {string}
     * @memberof DoctorAffiliationViewModel
     */
    hospitalId?: string;
    /**
     *
     * @type {string}
     * @memberof DoctorAffiliationViewModel
     */
    hospitalName?: string;
    /**
     *
     * @type {string}
     * @memberof DoctorAffiliationViewModel
     */
    countryId?: string;
    /**
     *
     * @type {string}
     * @memberof DoctorAffiliationViewModel
     */
    countryName?: string;
    /**
     *
     * @type {string}
     * @memberof DoctorAffiliationViewModel
     */
    stateName?: string;
    /**
     *
     * @type {string}
     * @memberof DoctorAffiliationViewModel
     */
    cityName?: string;
}
/**
 *
 * @export
 * @interface DoctorCertificate
 */
export interface DoctorCertificate {
    /**
     *
     * @type {string}
     * @memberof DoctorCertificate
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof DoctorCertificate
     */
    doctorId?: string;
    /**
     *
     * @type {Doctor}
     * @memberof DoctorCertificate
     */
    doctor?: Doctor;
    /**
     *
     * @type {string}
     * @memberof DoctorCertificate
     */
    certificate?: string;
    /**
     *
     * @type {string}
     * @memberof DoctorCertificate
     */
    normalizedCertificate?: string;
    /**
     *
     * @type {Date}
     * @memberof DoctorCertificate
     */
    activeFrom?: Date;
    /**
     *
     * @type {Date}
     * @memberof DoctorCertificate
     */
    activeTo?: Date;
}
/**
 *
 * @export
 * @interface DoctorCertificateItemViewModel
 */
export interface DoctorCertificateItemViewModel {
    /**
     *
     * @type {string}
     * @memberof DoctorCertificateItemViewModel
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof DoctorCertificateItemViewModel
     */
    doctorId?: string;
    /**
     *
     * @type {string}
     * @memberof DoctorCertificateItemViewModel
     */
    doctorName?: string;
    /**
     *
     * @type {string}
     * @memberof DoctorCertificateItemViewModel
     */
    certificate?: string;
    /**
     *
     * @type {Date}
     * @memberof DoctorCertificateItemViewModel
     */
    activeFrom?: Date;
    /**
     *
     * @type {Date}
     * @memberof DoctorCertificateItemViewModel
     */
    activeTo?: Date;
}
/**
 *
 * @export
 * @interface DoctorCertificateViewModel
 */
export interface DoctorCertificateViewModel {
    /**
     *
     * @type {string}
     * @memberof DoctorCertificateViewModel
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof DoctorCertificateViewModel
     */
    doctorId?: string;
    /**
     *
     * @type {string}
     * @memberof DoctorCertificateViewModel
     */
    doctorName?: string;
    /**
     *
     * @type {string}
     * @memberof DoctorCertificateViewModel
     */
    certificate?: string;
    /**
     *
     * @type {Date}
     * @memberof DoctorCertificateViewModel
     */
    activeFrom?: Date;
    /**
     *
     * @type {Date}
     * @memberof DoctorCertificateViewModel
     */
    activeTo?: Date;
}
/**
 *
 * @export
 * @interface DoctorCertificatesViewModel
 */
export interface DoctorCertificatesViewModel {
    /**
     *
     * @type {Array<DoctorCertificateItemViewModel>}
     * @memberof DoctorCertificatesViewModel
     */
    items?: Array<DoctorCertificateItemViewModel>;
    /**
     *
     * @type {PagedListMetaData}
     * @memberof DoctorCertificatesViewModel
     */
    metaData?: PagedListMetaData;
}
/**
 *
 * @export
 * @interface DoctorEducation
 */
export interface DoctorEducation {
    /**
     *
     * @type {string}
     * @memberof DoctorEducation
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof DoctorEducation
     */
    doctorId?: string;
    /**
     *
     * @type {Doctor}
     * @memberof DoctorEducation
     */
    doctor?: Doctor;
    /**
     *
     * @type {string}
     * @memberof DoctorEducation
     */
    institution?: string;
    /**
     *
     * @type {string}
     * @memberof DoctorEducation
     */
    normalizedInstitution?: string;
    /**
     *
     * @type {string}
     * @memberof DoctorEducation
     */
    qualification?: string;
    /**
     *
     * @type {string}
     * @memberof DoctorEducation
     */
    normalizedQualification?: string;
    /**
     *
     * @type {Date}
     * @memberof DoctorEducation
     */
    graduationDate?: Date;
}
/**
 *
 * @export
 * @interface DoctorEducationItemViewModel
 */
export interface DoctorEducationItemViewModel {
    /**
     *
     * @type {string}
     * @memberof DoctorEducationItemViewModel
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof DoctorEducationItemViewModel
     */
    doctorId?: string;
    /**
     *
     * @type {string}
     * @memberof DoctorEducationItemViewModel
     */
    doctorName?: string;
    /**
     *
     * @type {string}
     * @memberof DoctorEducationItemViewModel
     */
    institution?: string;
    /**
     *
     * @type {string}
     * @memberof DoctorEducationItemViewModel
     */
    qualification?: string;
    /**
     *
     * @type {Date}
     * @memberof DoctorEducationItemViewModel
     */
    graduationDate?: Date;
    /**
     *
     * @type {number}
     * @memberof DoctorEducationItemViewModel
     */
    graduationYear?: number;
    /**
     *
     * @type {number}
     * @memberof DoctorEducationItemViewModel
     */
    graduationMonth?: number;
}
/**
 *
 * @export
 * @interface DoctorEducationViewModel
 */
export interface DoctorEducationViewModel {
    /**
     *
     * @type {string}
     * @memberof DoctorEducationViewModel
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof DoctorEducationViewModel
     */
    doctorId?: string;
    /**
     *
     * @type {string}
     * @memberof DoctorEducationViewModel
     */
    doctorName?: string;
    /**
     *
     * @type {string}
     * @memberof DoctorEducationViewModel
     */
    institution?: string;
    /**
     *
     * @type {string}
     * @memberof DoctorEducationViewModel
     */
    qualification?: string;
    /**
     *
     * @type {Date}
     * @memberof DoctorEducationViewModel
     */
    graduationDate?: Date;
    /**
     *
     * @type {number}
     * @memberof DoctorEducationViewModel
     */
    graduationYear?: number;
    /**
     *
     * @type {number}
     * @memberof DoctorEducationViewModel
     */
    graduationMonth?: number;
}
/**
 *
 * @export
 * @interface DoctorItemViewModel
 */
export interface DoctorItemViewModel {
    /**
     *
     * @type {boolean}
     * @memberof DoctorItemViewModel
     */
    consultationEnabled?: boolean;
    /**
     *
     * @type {number}
     * @memberof DoctorItemViewModel
     */
    consultationFee?: number;
    /**
     *
     * @type {number}
     * @memberof DoctorItemViewModel
     */
    doctorReviewsCount?: number;
    /**
     *
     * @type {number}
     * @memberof DoctorItemViewModel
     */
    doctorEducationsCount?: number;
    /**
     *
     * @type {number}
     * @memberof DoctorItemViewModel
     */
    doctorPortfoliosCount?: number;
    /**
     *
     * @type {number}
     * @memberof DoctorItemViewModel
     */
    doctorSpecialtiesCount?: number;
    /**
     *
     * @type {Array<DoctorSpecialtyItemViewModel>}
     * @memberof DoctorItemViewModel
     */
    doctorSpecialties?: Array<DoctorSpecialtyItemViewModel>;
    /**
     *
     * @type {number}
     * @memberof DoctorItemViewModel
     */
    doctorCertificatesCount?: number;
    /**
     *
     * @type {number}
     * @memberof DoctorItemViewModel
     */
    doctorAffiliationsCount?: number;
    /**
     *
     * @type {Array<HospitalAffiliationViewModel>}
     * @memberof DoctorItemViewModel
     */
    doctorAffiliations?: Array<HospitalAffiliationViewModel>;
    /**
     *
     * @type {number}
     * @memberof DoctorItemViewModel
     */
    articlesCount?: number;
    /**
     *
     * @type {string}
     * @memberof DoctorItemViewModel
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof DoctorItemViewModel
     */
    userName?: string;
    /**
     *
     * @type {string}
     * @memberof DoctorItemViewModel
     */
    firstName?: string;
    /**
     *
     * @type {string}
     * @memberof DoctorItemViewModel
     */
    lastName?: string;
    /**
     *
     * @type {string}
     * @memberof DoctorItemViewModel
     */
    fullname?: string;
    /**
     *
     * @type {string}
     * @memberof DoctorItemViewModel
     */
    phone?: string;
    /**
     *
     * @type {string}
     * @memberof DoctorItemViewModel
     */
    email?: string;
    /**
     *
     * @type {string}
     * @memberof DoctorItemViewModel
     */
    photo?: string;
    /**
     *
     * @type {string}
     * @memberof DoctorItemViewModel
     */
    photoThumbnail?: string;
    /**
     *
     * @type {Gender}
     * @memberof DoctorItemViewModel
     */
    gender?: Gender;
    /**
     *
     * @type {Date}
     * @memberof DoctorItemViewModel
     */
    dateOfBirth?: Date;
    /**
     *
     * @type {AuditableEntity}
     * @memberof DoctorItemViewModel
     */
    auditableEntity?: AuditableEntity;
}
/**
 *
 * @export
 * @interface DoctorPortfolio
 */
export interface DoctorPortfolio {
    /**
     *
     * @type {string}
     * @memberof DoctorPortfolio
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof DoctorPortfolio
     */
    doctorId?: string;
    /**
     *
     * @type {Doctor}
     * @memberof DoctorPortfolio
     */
    doctor?: Doctor;
    /**
     *
     * @type {string}
     * @memberof DoctorPortfolio
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof DoctorPortfolio
     */
    normalizedName?: string;
    /**
     *
     * @type {string}
     * @memberof DoctorPortfolio
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof DoctorPortfolio
     */
    photoBefore?: string;
    /**
     *
     * @type {string}
     * @memberof DoctorPortfolio
     */
    photoBeforeThumbnail?: string;
    /**
     *
     * @type {string}
     * @memberof DoctorPortfolio
     */
    photoAfter?: string;
    /**
     *
     * @type {string}
     * @memberof DoctorPortfolio
     */
    photoAfterThumbnail?: string;
}
/**
 *
 * @export
 * @interface DoctorPortfolioItemViewModel
 */
export interface DoctorPortfolioItemViewModel {
    /**
     *
     * @type {string}
     * @memberof DoctorPortfolioItemViewModel
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof DoctorPortfolioItemViewModel
     */
    doctorId?: string;
    /**
     *
     * @type {string}
     * @memberof DoctorPortfolioItemViewModel
     */
    doctorName?: string;
    /**
     *
     * @type {string}
     * @memberof DoctorPortfolioItemViewModel
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof DoctorPortfolioItemViewModel
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof DoctorPortfolioItemViewModel
     */
    photoBefore?: string;
    /**
     *
     * @type {string}
     * @memberof DoctorPortfolioItemViewModel
     */
    photoAfter?: string;
}
/**
 *
 * @export
 * @interface DoctorPortfolioViewModel
 */
export interface DoctorPortfolioViewModel {
    /**
     *
     * @type {string}
     * @memberof DoctorPortfolioViewModel
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof DoctorPortfolioViewModel
     */
    doctorId?: string;
    /**
     *
     * @type {string}
     * @memberof DoctorPortfolioViewModel
     */
    doctorName?: string;
    /**
     *
     * @type {string}
     * @memberof DoctorPortfolioViewModel
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof DoctorPortfolioViewModel
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof DoctorPortfolioViewModel
     */
    photoBefore?: string;
    /**
     *
     * @type {string}
     * @memberof DoctorPortfolioViewModel
     */
    photoAfter?: string;
}
/**
 *
 * @export
 * @interface DoctorReview
 */
export interface DoctorReview {
    /**
     *
     * @type {string}
     * @memberof DoctorReview
     */
    patientId?: string;
    /**
     *
     * @type {Patient}
     * @memberof DoctorReview
     */
    patient?: Patient;
    /**
     *
     * @type {string}
     * @memberof DoctorReview
     */
    doctorId?: string;
    /**
     *
     * @type {Doctor}
     * @memberof DoctorReview
     */
    doctor?: Doctor;
    /**
     *
     * @type {string}
     * @memberof DoctorReview
     */
    body?: string;
    /**
     *
     * @type {boolean}
     * @memberof DoctorReview
     */
    recommended?: boolean;
    /**
     *
     * @type {ReviewCategory}
     * @memberof DoctorReview
     */
    reviewCategory?: ReviewCategory;
    /**
     *
     * @type {number}
     * @memberof DoctorReview
     */
    rate?: number;
}
/**
 *
 * @export
 * @interface DoctorReviewItemViewModel
 */
export interface DoctorReviewItemViewModel {
    /**
     *
     * @type {string}
     * @memberof DoctorReviewItemViewModel
     */
    patientId?: string;
    /**
     *
     * @type {string}
     * @memberof DoctorReviewItemViewModel
     */
    patientName?: string;
    /**
     *
     * @type {string}
     * @memberof DoctorReviewItemViewModel
     */
    doctorId?: string;
    /**
     *
     * @type {string}
     * @memberof DoctorReviewItemViewModel
     */
    doctorName?: string;
    /**
     *
     * @type {string}
     * @memberof DoctorReviewItemViewModel
     */
    body?: string;
    /**
     *
     * @type {boolean}
     * @memberof DoctorReviewItemViewModel
     */
    recommended?: boolean;
    /**
     *
     * @type {ReviewCategory}
     * @memberof DoctorReviewItemViewModel
     */
    reviewCategory?: ReviewCategory;
    /**
     *
     * @type {number}
     * @memberof DoctorReviewItemViewModel
     */
    rate?: number;
}
/**
 *
 * @export
 * @interface DoctorReviewViewModel
 */
export interface DoctorReviewViewModel {
    /**
     *
     * @type {string}
     * @memberof DoctorReviewViewModel
     */
    patientId?: string;
    /**
     *
     * @type {string}
     * @memberof DoctorReviewViewModel
     */
    patientName?: string;
    /**
     *
     * @type {string}
     * @memberof DoctorReviewViewModel
     */
    doctorId?: string;
    /**
     *
     * @type {string}
     * @memberof DoctorReviewViewModel
     */
    doctorName?: string;
    /**
     *
     * @type {string}
     * @memberof DoctorReviewViewModel
     */
    body?: string;
    /**
     *
     * @type {boolean}
     * @memberof DoctorReviewViewModel
     */
    recommended?: boolean;
    /**
     *
     * @type {ReviewCategory}
     * @memberof DoctorReviewViewModel
     */
    reviewCategory?: ReviewCategory;
    /**
     *
     * @type {number}
     * @memberof DoctorReviewViewModel
     */
    rate?: number;
}
/**
 *
 * @export
 * @interface DoctorReviewsViewModel
 */
export interface DoctorReviewsViewModel {
    /**
     *
     * @type {Array<DoctorReviewItemViewModel>}
     * @memberof DoctorReviewsViewModel
     */
    items?: Array<DoctorReviewItemViewModel>;
    /**
     *
     * @type {PagedListMetaData}
     * @memberof DoctorReviewsViewModel
     */
    metaData?: PagedListMetaData;
}
/**
 *
 * @export
 * @interface DoctorSearchResultViewModel
 */
export interface DoctorSearchResultViewModel {
    /**
     *
     * @type {Array<DoctorItemViewModel>}
     * @memberof DoctorSearchResultViewModel
     */
    items?: Array<DoctorItemViewModel>;
    /**
     *
     * @type {SearchMetaData}
     * @memberof DoctorSearchResultViewModel
     */
    metaData?: SearchMetaData;
}
/**
 *
 * @export
 * @interface DoctorSpecialty
 */
export interface DoctorSpecialty {
    /**
     *
     * @type {string}
     * @memberof DoctorSpecialty
     */
    doctorId?: string;
    /**
     *
     * @type {Doctor}
     * @memberof DoctorSpecialty
     */
    doctor?: Doctor;
    /**
     *
     * @type {string}
     * @memberof DoctorSpecialty
     */
    specialtyId?: string;
    /**
     *
     * @type {Specialty}
     * @memberof DoctorSpecialty
     */
    specialty?: Specialty;
    /**
     *
     * @type {number}
     * @memberof DoctorSpecialty
     */
    order?: number;
}
/**
 *
 * @export
 * @interface DoctorSpecialtyItemViewModel
 */
export interface DoctorSpecialtyItemViewModel {
    /**
     *
     * @type {string}
     * @memberof DoctorSpecialtyItemViewModel
     */
    specialtyId?: string;
    /**
     *
     * @type {string}
     * @memberof DoctorSpecialtyItemViewModel
     */
    specialtyName?: string;
    /**
     *
     * @type {string}
     * @memberof DoctorSpecialtyItemViewModel
     */
    specialtyTypeId?: string;
    /**
     *
     * @type {string}
     * @memberof DoctorSpecialtyItemViewModel
     */
    specialtyTypeName?: string;
    /**
     *
     * @type {number}
     * @memberof DoctorSpecialtyItemViewModel
     */
    order?: number;
}
/**
 *
 * @export
 * @interface DoctorSpecialtyViewModel
 */
export interface DoctorSpecialtyViewModel {
    /**
     *
     * @type {string}
     * @memberof DoctorSpecialtyViewModel
     */
    doctorId?: string;
    /**
     *
     * @type {string}
     * @memberof DoctorSpecialtyViewModel
     */
    doctorName?: string;
    /**
     *
     * @type {string}
     * @memberof DoctorSpecialtyViewModel
     */
    specialtyId?: string;
    /**
     *
     * @type {string}
     * @memberof DoctorSpecialtyViewModel
     */
    specialtyName?: string;
    /**
     *
     * @type {string}
     * @memberof DoctorSpecialtyViewModel
     */
    specialtyTypeId?: string;
    /**
     *
     * @type {string}
     * @memberof DoctorSpecialtyViewModel
     */
    specialtyTypeName?: string;
    /**
     *
     * @type {number}
     * @memberof DoctorSpecialtyViewModel
     */
    order?: number;
}
/**
 *
 * @export
 * @interface DoctorViewModel
 */
export interface DoctorViewModel {
    /**
     *
     * @type {Date}
     * @memberof DoctorViewModel
     */
    startPracticeDate?: Date;
    /**
     *
     * @type {number}
     * @memberof DoctorViewModel
     */
    yearOfExperience?: number;
    /**
     *
     * @type {string}
     * @memberof DoctorViewModel
     */
    overview?: string;
    /**
     *
     * @type {boolean}
     * @memberof DoctorViewModel
     */
    consultationEnabled?: boolean;
    /**
     *
     * @type {number}
     * @memberof DoctorViewModel
     */
    consultationFee?: number;
    /**
     *
     * @type {Array<DoctorReviewItemViewModel>}
     * @memberof DoctorViewModel
     */
    doctorReviews?: Array<DoctorReviewItemViewModel>;
    /**
     *
     * @type {Array<DoctorEducationItemViewModel>}
     * @memberof DoctorViewModel
     */
    doctorEducations?: Array<DoctorEducationItemViewModel>;
    /**
     *
     * @type {Array<DoctorPortfolioItemViewModel>}
     * @memberof DoctorViewModel
     */
    doctorPortfolios?: Array<DoctorPortfolioItemViewModel>;
    /**
     *
     * @type {Array<DoctorSpecialtyItemViewModel>}
     * @memberof DoctorViewModel
     */
    doctorSpecialties?: Array<DoctorSpecialtyItemViewModel>;
    /**
     *
     * @type {Array<DoctorCertificateItemViewModel>}
     * @memberof DoctorViewModel
     */
    doctorCertificates?: Array<DoctorCertificateItemViewModel>;
    /**
     *
     * @type {Array<HospitalAffiliationViewModel>}
     * @memberof DoctorViewModel
     */
    doctorAffiliations?: Array<HospitalAffiliationViewModel>;
    /**
     *
     * @type {Array<Article>}
     * @memberof DoctorViewModel
     */
    articles?: Array<Article>;
    /**
     *
     * @type {Array<AwardViewModel>}
     * @memberof DoctorViewModel
     */
    awards?: Array<AwardViewModel>;
    /**
     *
     * @type {Array<MediaViewModel>}
     * @memberof DoctorViewModel
     */
    medias?: Array<MediaViewModel>;
    /**
     *
     * @type {string}
     * @memberof DoctorViewModel
     */
    userType?: string;
    /**
     *
     * @type {Array<UserLanguageViewModel>}
     * @memberof DoctorViewModel
     */
    languages?: Array<UserLanguageViewModel>;
    /**
     *
     * @type {Array<UserLocationViewModel>}
     * @memberof DoctorViewModel
     */
    locations?: Array<UserLocationViewModel>;
    /**
     *
     * @type {string}
     * @memberof DoctorViewModel
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof DoctorViewModel
     */
    userName?: string;
    /**
     *
     * @type {string}
     * @memberof DoctorViewModel
     */
    firstName?: string;
    /**
     *
     * @type {string}
     * @memberof DoctorViewModel
     */
    lastName?: string;
    /**
     *
     * @type {string}
     * @memberof DoctorViewModel
     */
    fullname?: string;
    /**
     *
     * @type {string}
     * @memberof DoctorViewModel
     */
    phone?: string;
    /**
     *
     * @type {string}
     * @memberof DoctorViewModel
     */
    email?: string;
    /**
     *
     * @type {string}
     * @memberof DoctorViewModel
     */
    photo?: string;
    /**
     *
     * @type {string}
     * @memberof DoctorViewModel
     */
    photoThumbnail?: string;
    /**
     *
     * @type {Gender}
     * @memberof DoctorViewModel
     */
    gender?: Gender;
    /**
     *
     * @type {Date}
     * @memberof DoctorViewModel
     */
    dateOfBirth?: Date;
    /**
     *
     * @type {AuditableEntity}
     * @memberof DoctorViewModel
     */
    auditableEntity?: AuditableEntity;
}
/**
 *
 * @export
 * @interface DoctorsViewModel
 */
export interface DoctorsViewModel {
    /**
     *
     * @type {Array<DoctorItemViewModel>}
     * @memberof DoctorsViewModel
     */
    items?: Array<DoctorItemViewModel>;
    /**
     *
     * @type {PagedListMetaData}
     * @memberof DoctorsViewModel
     */
    metaData?: PagedListMetaData;
}
/**
 *
 * @export
 * @interface Equipment
 */
export interface Equipment {
    /**
     *
     * @type {string}
     * @memberof Equipment
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof Equipment
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof Equipment
     */
    normalizedName?: string;
    /**
     *
     * @type {string}
     * @memberof Equipment
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof Equipment
     */
    hospitalId?: string;
    /**
     *
     * @type {Hospital}
     * @memberof Equipment
     */
    hospital?: Hospital;
    /**
     *
     * @type {Array<Media>}
     * @memberof Equipment
     */
    medias?: Array<Media>;
    /**
     *
     * @type {AuditableEntity}
     * @memberof Equipment
     */
    auditableEntity?: AuditableEntity;
}
/**
 *
 * @export
 * @interface EquipmentItemViewModel
 */
export interface EquipmentItemViewModel {
    /**
     *
     * @type {string}
     * @memberof EquipmentItemViewModel
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof EquipmentItemViewModel
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof EquipmentItemViewModel
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof EquipmentItemViewModel
     */
    hospitalId?: string;
    /**
     *
     * @type {string}
     * @memberof EquipmentItemViewModel
     */
    hospitalName?: string;
    /**
     *
     * @type {Array<MediaViewModel>}
     * @memberof EquipmentItemViewModel
     */
    medias?: Array<MediaViewModel>;
    /**
     *
     * @type {AuditableEntity}
     * @memberof EquipmentItemViewModel
     */
    auditableEntity?: AuditableEntity;
}
/**
 *
 * @export
 * @interface EquipmentSearchResultViewModel
 */
export interface EquipmentSearchResultViewModel {
    /**
     *
     * @type {Array<EquipmentSearchViewModel>}
     * @memberof EquipmentSearchResultViewModel
     */
    items?: Array<EquipmentSearchViewModel>;
    /**
     *
     * @type {SearchMetaData}
     * @memberof EquipmentSearchResultViewModel
     */
    metaData?: SearchMetaData;
}
/**
 *
 * @export
 * @interface EquipmentSearchViewModel
 */
export interface EquipmentSearchViewModel {
    /**
     *
     * @type {string}
     * @memberof EquipmentSearchViewModel
     */
    equipmentId?: string;
    /**
     *
     * @type {string}
     * @memberof EquipmentSearchViewModel
     */
    equipmentName?: string;
    /**
     *
     * @type {string}
     * @memberof EquipmentSearchViewModel
     */
    description?: string;
    /**
     *
     * @type {HospitalSearchItemViewModel}
     * @memberof EquipmentSearchViewModel
     */
    hospital?: HospitalSearchItemViewModel;
    /**
     *
     * @type {Array<MediaSearchViewModel>}
     * @memberof EquipmentSearchViewModel
     */
    medias?: Array<MediaSearchViewModel>;
    /**
     *
     * @type {number}
     * @memberof EquipmentSearchViewModel
     */
    order?: number;
}
/**
 *
 * @export
 * @interface EquipmentViewModel
 */
export interface EquipmentViewModel {
    /**
     *
     * @type {string}
     * @memberof EquipmentViewModel
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof EquipmentViewModel
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof EquipmentViewModel
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof EquipmentViewModel
     */
    hospitalId?: string;
    /**
     *
     * @type {string}
     * @memberof EquipmentViewModel
     */
    hospitalName?: string;
    /**
     *
     * @type {Array<MediaViewModel>}
     * @memberof EquipmentViewModel
     */
    medias?: Array<MediaViewModel>;
    /**
     *
     * @type {AuditableEntity}
     * @memberof EquipmentViewModel
     */
    auditableEntity?: AuditableEntity;
}
/**
 *
 * @export
 * @interface EquipmentsViewModel
 */
export interface EquipmentsViewModel {
    /**
     *
     * @type {Array<EquipmentItemViewModel>}
     * @memberof EquipmentsViewModel
     */
    items?: Array<EquipmentItemViewModel>;
    /**
     *
     * @type {PagedListMetaData}
     * @memberof EquipmentsViewModel
     */
    metaData?: PagedListMetaData;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum Gender {
    NotSpecified = "NotSpecified",
    Male = "Male",
    Female = "Female",
    NonBinary = "NonBinary",
    PreferNotToSay = "PreferNotToSay"
}
/**
 *
 * @export
 * @interface Hospital
 */
export interface Hospital {
    /**
     *
     * @type {string}
     * @memberof Hospital
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof Hospital
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof Hospital
     */
    normalizedName?: string;
    /**
     *
     * @type {string}
     * @memberof Hospital
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof Hospital
     */
    normalizedDescription?: string;
    /**
     *
     * @type {string}
     * @memberof Hospital
     */
    logo?: string;
    /**
     *
     * @type {string}
     * @memberof Hospital
     */
    overview?: string;
    /**
     *
     * @type {number}
     * @memberof Hospital
     */
    bedsCount?: number;
    /**
     *
     * @type {number}
     * @memberof Hospital
     */
    operationRoomsCount?: number;
    /**
     *
     * @type {number}
     * @memberof Hospital
     */
    icuBedsCount?: number;
    /**
     *
     * @type {number}
     * @memberof Hospital
     */
    medicalStaffCount?: number;
    /**
     *
     * @type {string}
     * @memberof Hospital
     */
    countryId?: string;
    /**
     *
     * @type {Country}
     * @memberof Hospital
     */
    country?: Country;
    /**
     *
     * @type {MarketingType}
     * @memberof Hospital
     */
    marketingType?: MarketingType;
    /**
     *
     * @type {boolean}
     * @memberof Hospital
     */
    consultationEnabled?: boolean;
    /**
     *
     * @type {number}
     * @memberof Hospital
     */
    consultationFee?: number;
    /**
     *
     * @type {Array<Article>}
     * @memberof Hospital
     */
    articles?: Array<Article>;
    /**
     *
     * @type {Array<Question>}
     * @memberof Hospital
     */
    questions?: Array<Question>;
    /**
     *
     * @type {Array<Deal>}
     * @memberof Hospital
     */
    deals?: Array<Deal>;
    /**
     *
     * @type {Array<Equipment>}
     * @memberof Hospital
     */
    equipments?: Array<Equipment>;
    /**
     *
     * @type {Array<HospitalReview>}
     * @memberof Hospital
     */
    reviews?: Array<HospitalReview>;
    /**
     *
     * @type {Array<Department>}
     * @memberof Hospital
     */
    departments?: Array<Department>;
    /**
     *
     * @type {Array<HospitalSpecialty>}
     * @memberof Hospital
     */
    specialties?: Array<HospitalSpecialty>;
    /**
     *
     * @type {Array<HospitalAccreditation>}
     * @memberof Hospital
     */
    accreditations?: Array<HospitalAccreditation>;
    /**
     *
     * @type {Array<DoctorAffiliation>}
     * @memberof Hospital
     */
    doctorAffiliations?: Array<DoctorAffiliation>;
    /**
     *
     * @type {Array<ManagerAffiliation>}
     * @memberof Hospital
     */
    managerAffiliations?: Array<ManagerAffiliation>;
    /**
     *
     * @type {Array<Booking>}
     * @memberof Hospital
     */
    bookings?: Array<Booking>;
    /**
     *
     * @type {Array<Consultation>}
     * @memberof Hospital
     */
    consultations?: Array<Consultation>;
    /**
     *
     * @type {Array<Award>}
     * @memberof Hospital
     */
    awards?: Array<Award>;
    /**
     *
     * @type {Array<Media>}
     * @memberof Hospital
     */
    medias?: Array<Media>;
    /**
     *
     * @type {Location}
     * @memberof Hospital
     */
    location?: Location;
    /**
     *
     * @type {AuditableEntity}
     * @memberof Hospital
     */
    auditableEntity?: AuditableEntity;
}
/**
 *
 * @export
 * @interface HospitalAccreditation
 */
export interface HospitalAccreditation {
    /**
     *
     * @type {string}
     * @memberof HospitalAccreditation
     */
    hospitalId?: string;
    /**
     *
     * @type {Hospital}
     * @memberof HospitalAccreditation
     */
    hospital?: Hospital;
    /**
     *
     * @type {string}
     * @memberof HospitalAccreditation
     */
    accreditationId?: string;
    /**
     *
     * @type {Accreditation}
     * @memberof HospitalAccreditation
     */
    accreditation?: Accreditation;
}
/**
 *
 * @export
 * @interface HospitalAffiliationViewModel
 */
export interface HospitalAffiliationViewModel {
    /**
     *
     * @type {string}
     * @memberof HospitalAffiliationViewModel
     */
    hospitalId?: string;
    /**
     *
     * @type {string}
     * @memberof HospitalAffiliationViewModel
     */
    hospitalName?: string;
    /**
     *
     * @type {string}
     * @memberof HospitalAffiliationViewModel
     */
    countryId?: string;
    /**
     *
     * @type {string}
     * @memberof HospitalAffiliationViewModel
     */
    countryName?: string;
    /**
     *
     * @type {string}
     * @memberof HospitalAffiliationViewModel
     */
    stateName?: string;
    /**
     *
     * @type {string}
     * @memberof HospitalAffiliationViewModel
     */
    cityName?: string;
}
/**
 *
 * @export
 * @interface HospitalItemViewModel
 */
export interface HospitalItemViewModel {
    /**
     *
     * @type {string}
     * @memberof HospitalItemViewModel
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof HospitalItemViewModel
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof HospitalItemViewModel
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof HospitalItemViewModel
     */
    logo?: string;
    /**
     *
     * @type {string}
     * @memberof HospitalItemViewModel
     */
    overview?: string;
    /**
     *
     * @type {number}
     * @memberof HospitalItemViewModel
     */
    bedsCount?: number;
    /**
     *
     * @type {number}
     * @memberof HospitalItemViewModel
     */
    operationRoomsCount?: number;
    /**
     *
     * @type {number}
     * @memberof HospitalItemViewModel
     */
    icuBedsCount?: number;
    /**
     *
     * @type {number}
     * @memberof HospitalItemViewModel
     */
    medicalStaffCount?: number;
    /**
     *
     * @type {string}
     * @memberof HospitalItemViewModel
     */
    countryId?: string;
    /**
     *
     * @type {string}
     * @memberof HospitalItemViewModel
     */
    countryName?: string;
    /**
     *
     * @type {MarketingType}
     * @memberof HospitalItemViewModel
     */
    marketingType?: MarketingType;
    /**
     *
     * @type {boolean}
     * @memberof HospitalItemViewModel
     */
    consultationEnabled?: boolean;
    /**
     *
     * @type {number}
     * @memberof HospitalItemViewModel
     */
    consultationFee?: number;
    /**
     *
     * @type {number}
     * @memberof HospitalItemViewModel
     */
    articlesCount?: number;
    /**
     *
     * @type {number}
     * @memberof HospitalItemViewModel
     */
    packagesCount?: number;
    /**
     *
     * @type {number}
     * @memberof HospitalItemViewModel
     */
    equipmentsCount?: number;
    /**
     *
     * @type {number}
     * @memberof HospitalItemViewModel
     */
    reviewsCount?: number;
    /**
     *
     * @type {number}
     * @memberof HospitalItemViewModel
     */
    departmentsCount?: number;
    /**
     *
     * @type {number}
     * @memberof HospitalItemViewModel
     */
    specialtiesCount?: number;
    /**
     *
     * @type {number}
     * @memberof HospitalItemViewModel
     */
    accreditationsCount?: number;
    /**
     *
     * @type {number}
     * @memberof HospitalItemViewModel
     */
    doctorAffiliationsCount?: number;
    /**
     *
     * @type {number}
     * @memberof HospitalItemViewModel
     */
    managerAffiliationsCount?: number;
    /**
     *
     * @type {Array<AwardViewModel>}
     * @memberof HospitalItemViewModel
     */
    awards?: Array<AwardViewModel>;
    /**
     *
     * @type {Array<MediaViewModel>}
     * @memberof HospitalItemViewModel
     */
    medias?: Array<MediaViewModel>;
    /**
     *
     * @type {LocationViewModel}
     * @memberof HospitalItemViewModel
     */
    location?: LocationViewModel;
    /**
     *
     * @type {AuditableEntity}
     * @memberof HospitalItemViewModel
     */
    auditableEntity?: AuditableEntity;
}
/**
 *
 * @export
 * @interface HospitalReview
 */
export interface HospitalReview {
    /**
     *
     * @type {string}
     * @memberof HospitalReview
     */
    patientId?: string;
    /**
     *
     * @type {Patient}
     * @memberof HospitalReview
     */
    patient?: Patient;
    /**
     *
     * @type {string}
     * @memberof HospitalReview
     */
    hospitalId?: string;
    /**
     *
     * @type {Hospital}
     * @memberof HospitalReview
     */
    hospital?: Hospital;
    /**
     *
     * @type {string}
     * @memberof HospitalReview
     */
    body?: string;
    /**
     *
     * @type {boolean}
     * @memberof HospitalReview
     */
    recommended?: boolean;
    /**
     *
     * @type {ReviewCategory}
     * @memberof HospitalReview
     */
    reviewCategory?: ReviewCategory;
    /**
     *
     * @type {number}
     * @memberof HospitalReview
     */
    rate?: number;
}
/**
 *
 * @export
 * @interface HospitalReviewItemViewModel
 */
export interface HospitalReviewItemViewModel {
    /**
     *
     * @type {string}
     * @memberof HospitalReviewItemViewModel
     */
    patientId?: string;
    /**
     *
     * @type {string}
     * @memberof HospitalReviewItemViewModel
     */
    patientName?: string;
    /**
     *
     * @type {string}
     * @memberof HospitalReviewItemViewModel
     */
    hospitalId?: string;
    /**
     *
     * @type {string}
     * @memberof HospitalReviewItemViewModel
     */
    hospitalName?: string;
    /**
     *
     * @type {string}
     * @memberof HospitalReviewItemViewModel
     */
    body?: string;
    /**
     *
     * @type {boolean}
     * @memberof HospitalReviewItemViewModel
     */
    recommended?: boolean;
    /**
     *
     * @type {ReviewCategory}
     * @memberof HospitalReviewItemViewModel
     */
    reviewCategory?: ReviewCategory;
    /**
     *
     * @type {number}
     * @memberof HospitalReviewItemViewModel
     */
    rate?: number;
}
/**
 *
 * @export
 * @interface HospitalReviewViewModel
 */
export interface HospitalReviewViewModel {
    /**
     *
     * @type {string}
     * @memberof HospitalReviewViewModel
     */
    patientId?: string;
    /**
     *
     * @type {string}
     * @memberof HospitalReviewViewModel
     */
    patientName?: string;
    /**
     *
     * @type {string}
     * @memberof HospitalReviewViewModel
     */
    hospitalId?: string;
    /**
     *
     * @type {string}
     * @memberof HospitalReviewViewModel
     */
    hospitalName?: string;
    /**
     *
     * @type {string}
     * @memberof HospitalReviewViewModel
     */
    body?: string;
    /**
     *
     * @type {boolean}
     * @memberof HospitalReviewViewModel
     */
    recommended?: boolean;
    /**
     *
     * @type {ReviewCategory}
     * @memberof HospitalReviewViewModel
     */
    reviewCategory?: ReviewCategory;
    /**
     *
     * @type {number}
     * @memberof HospitalReviewViewModel
     */
    rate?: number;
}
/**
 *
 * @export
 * @interface HospitalReviewsViewModel
 */
export interface HospitalReviewsViewModel {
    /**
     *
     * @type {Array<HospitalReviewItemViewModel>}
     * @memberof HospitalReviewsViewModel
     */
    items?: Array<HospitalReviewItemViewModel>;
    /**
     *
     * @type {PagedListMetaData}
     * @memberof HospitalReviewsViewModel
     */
    metaData?: PagedListMetaData;
}
/**
 *
 * @export
 * @interface HospitalSearchItemViewModel
 */
export interface HospitalSearchItemViewModel {
    /**
     *
     * @type {string}
     * @memberof HospitalSearchItemViewModel
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof HospitalSearchItemViewModel
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof HospitalSearchItemViewModel
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof HospitalSearchItemViewModel
     */
    logo?: string;
    /**
     *
     * @type {string}
     * @memberof HospitalSearchItemViewModel
     */
    overview?: string;
    /**
     *
     * @type {number}
     * @memberof HospitalSearchItemViewModel
     */
    bedsCount?: number;
    /**
     *
     * @type {number}
     * @memberof HospitalSearchItemViewModel
     */
    operationRoomsCount?: number;
    /**
     *
     * @type {number}
     * @memberof HospitalSearchItemViewModel
     */
    icuBedsCount?: number;
    /**
     *
     * @type {number}
     * @memberof HospitalSearchItemViewModel
     */
    medicalStaffCount?: number;
    /**
     *
     * @type {string}
     * @memberof HospitalSearchItemViewModel
     */
    countryId?: string;
    /**
     *
     * @type {string}
     * @memberof HospitalSearchItemViewModel
     */
    countryName?: string;
    /**
     *
     * @type {number}
     * @memberof HospitalSearchItemViewModel
     */
    marketingType?: number;
    /**
     *
     * @type {number}
     * @memberof HospitalSearchItemViewModel
     */
    latitude?: number;
    /**
     *
     * @type {number}
     * @memberof HospitalSearchItemViewModel
     */
    longitude?: number;
    /**
     *
     * @type {string}
     * @memberof HospitalSearchItemViewModel
     */
    country?: string;
    /**
     *
     * @type {string}
     * @memberof HospitalSearchItemViewModel
     */
    state?: string;
    /**
     *
     * @type {string}
     * @memberof HospitalSearchItemViewModel
     */
    county?: string;
    /**
     *
     * @type {string}
     * @memberof HospitalSearchItemViewModel
     */
    city?: string;
    /**
     *
     * @type {string}
     * @memberof HospitalSearchItemViewModel
     */
    zipCode?: string;
    /**
     *
     * @type {string}
     * @memberof HospitalSearchItemViewModel
     */
    address?: string;
    /**
     *
     * @type {Array<MediaSearchViewModel>}
     * @memberof HospitalSearchItemViewModel
     */
    medias?: Array<MediaSearchViewModel>;
}
/**
 *
 * @export
 * @interface HospitalSearchResultViewModel
 */
export interface HospitalSearchResultViewModel {
    /**
     *
     * @type {Array<HospitalItemViewModel>}
     * @memberof HospitalSearchResultViewModel
     */
    items?: Array<HospitalItemViewModel>;
    /**
     *
     * @type {SearchMetaData}
     * @memberof HospitalSearchResultViewModel
     */
    metaData?: SearchMetaData;
}
/**
 *
 * @export
 * @interface HospitalSpecialtiesViewModel
 */
export interface HospitalSpecialtiesViewModel {
    /**
     *
     * @type {Array<HospitalSpecialtyItemViewModel>}
     * @memberof HospitalSpecialtiesViewModel
     */
    items?: Array<HospitalSpecialtyItemViewModel>;
    /**
     *
     * @type {PagedListMetaData}
     * @memberof HospitalSpecialtiesViewModel
     */
    metaData?: PagedListMetaData;
}
/**
 *
 * @export
 * @interface HospitalSpecialty
 */
export interface HospitalSpecialty {
    /**
     *
     * @type {string}
     * @memberof HospitalSpecialty
     */
    hospitalId?: string;
    /**
     *
     * @type {Hospital}
     * @memberof HospitalSpecialty
     */
    hospital?: Hospital;
    /**
     *
     * @type {string}
     * @memberof HospitalSpecialty
     */
    specialtyId?: string;
    /**
     *
     * @type {Specialty}
     * @memberof HospitalSpecialty
     */
    specialty?: Specialty;
    /**
     *
     * @type {number}
     * @memberof HospitalSpecialty
     */
    order?: number;
    /**
     *
     * @type {Array<Service>}
     * @memberof HospitalSpecialty
     */
    services?: Array<Service>;
}
/**
 *
 * @export
 * @interface HospitalSpecialtyItemViewModel
 */
export interface HospitalSpecialtyItemViewModel {
    /**
     *
     * @type {string}
     * @memberof HospitalSpecialtyItemViewModel
     */
    hospitalId?: string;
    /**
     *
     * @type {string}
     * @memberof HospitalSpecialtyItemViewModel
     */
    hospitalName?: string;
    /**
     *
     * @type {string}
     * @memberof HospitalSpecialtyItemViewModel
     */
    specialtyId?: string;
    /**
     *
     * @type {string}
     * @memberof HospitalSpecialtyItemViewModel
     */
    specialtyName?: string;
    /**
     *
     * @type {string}
     * @memberof HospitalSpecialtyItemViewModel
     */
    specialtyTypeId?: string;
    /**
     *
     * @type {string}
     * @memberof HospitalSpecialtyItemViewModel
     */
    specialtyTypeName?: string;
    /**
     *
     * @type {number}
     * @memberof HospitalSpecialtyItemViewModel
     */
    order?: number;
    /**
     *
     * @type {AuditableEntity}
     * @memberof HospitalSpecialtyItemViewModel
     */
    auditableEntity?: AuditableEntity;
    /**
     *
     * @type {MarketingType}
     * @memberof HospitalSpecialtyItemViewModel
     */
    marketingType?: MarketingType;
}
/**
 *
 * @export
 * @interface HospitalSpecialtyViewModel
 */
export interface HospitalSpecialtyViewModel {
    /**
     *
     * @type {string}
     * @memberof HospitalSpecialtyViewModel
     */
    hospitalId?: string;
    /**
     *
     * @type {string}
     * @memberof HospitalSpecialtyViewModel
     */
    hospitalName?: string;
    /**
     *
     * @type {string}
     * @memberof HospitalSpecialtyViewModel
     */
    specialtyId?: string;
    /**
     *
     * @type {string}
     * @memberof HospitalSpecialtyViewModel
     */
    specialtyName?: string;
    /**
     *
     * @type {string}
     * @memberof HospitalSpecialtyViewModel
     */
    specialtyTypeId?: string;
    /**
     *
     * @type {string}
     * @memberof HospitalSpecialtyViewModel
     */
    specialtyTypeName?: string;
    /**
     *
     * @type {number}
     * @memberof HospitalSpecialtyViewModel
     */
    order?: number;
    /**
     *
     * @type {AuditableEntity}
     * @memberof HospitalSpecialtyViewModel
     */
    auditableEntity?: AuditableEntity;
    /**
     *
     * @type {MarketingType}
     * @memberof HospitalSpecialtyViewModel
     */
    marketingType?: MarketingType;
}
/**
 *
 * @export
 * @interface HospitalViewModel
 */
export interface HospitalViewModel {
    /**
     *
     * @type {Array<HospitalSpecialtyItemViewModel>}
     * @memberof HospitalViewModel
     */
    specialties?: Array<HospitalSpecialtyItemViewModel>;
    /**
     *
     * @type {string}
     * @memberof HospitalViewModel
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof HospitalViewModel
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof HospitalViewModel
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof HospitalViewModel
     */
    logo?: string;
    /**
     *
     * @type {string}
     * @memberof HospitalViewModel
     */
    overview?: string;
    /**
     *
     * @type {number}
     * @memberof HospitalViewModel
     */
    bedsCount?: number;
    /**
     *
     * @type {number}
     * @memberof HospitalViewModel
     */
    operationRoomsCount?: number;
    /**
     *
     * @type {number}
     * @memberof HospitalViewModel
     */
    icuBedsCount?: number;
    /**
     *
     * @type {number}
     * @memberof HospitalViewModel
     */
    medicalStaffCount?: number;
    /**
     *
     * @type {string}
     * @memberof HospitalViewModel
     */
    countryId?: string;
    /**
     *
     * @type {string}
     * @memberof HospitalViewModel
     */
    countryName?: string;
    /**
     *
     * @type {MarketingType}
     * @memberof HospitalViewModel
     */
    marketingType?: MarketingType;
    /**
     *
     * @type {boolean}
     * @memberof HospitalViewModel
     */
    consultationEnabled?: boolean;
    /**
     *
     * @type {number}
     * @memberof HospitalViewModel
     */
    consultationFee?: number;
    /**
     *
     * @type {number}
     * @memberof HospitalViewModel
     */
    articlesCount?: number;
    /**
     *
     * @type {number}
     * @memberof HospitalViewModel
     */
    packagesCount?: number;
    /**
     *
     * @type {number}
     * @memberof HospitalViewModel
     */
    equipmentsCount?: number;
    /**
     *
     * @type {number}
     * @memberof HospitalViewModel
     */
    reviewsCount?: number;
    /**
     *
     * @type {number}
     * @memberof HospitalViewModel
     */
    departmentsCount?: number;
    /**
     *
     * @type {number}
     * @memberof HospitalViewModel
     */
    specialtiesCount?: number;
    /**
     *
     * @type {number}
     * @memberof HospitalViewModel
     */
    accreditationsCount?: number;
    /**
     *
     * @type {number}
     * @memberof HospitalViewModel
     */
    doctorAffiliationsCount?: number;
    /**
     *
     * @type {number}
     * @memberof HospitalViewModel
     */
    managerAffiliationsCount?: number;
    /**
     *
     * @type {Array<AwardViewModel>}
     * @memberof HospitalViewModel
     */
    awards?: Array<AwardViewModel>;
    /**
     *
     * @type {Array<MediaViewModel>}
     * @memberof HospitalViewModel
     */
    medias?: Array<MediaViewModel>;
    /**
     *
     * @type {LocationViewModel}
     * @memberof HospitalViewModel
     */
    location?: LocationViewModel;
    /**
     *
     * @type {AuditableEntity}
     * @memberof HospitalViewModel
     */
    auditableEntity?: AuditableEntity;
}
/**
 *
 * @export
 * @interface HospitalsViewModel
 */
export interface HospitalsViewModel {
    /**
     *
     * @type {Array<HospitalItemViewModel>}
     * @memberof HospitalsViewModel
     */
    items?: Array<HospitalItemViewModel>;
    /**
     *
     * @type {PagedListMetaData}
     * @memberof HospitalsViewModel
     */
    metaData?: PagedListMetaData;
}
/**
 *
 * @export
 * @interface Location
 */
export interface Location {
    /**
     *
     * @type {string}
     * @memberof Location
     */
    country?: string;
    /**
     *
     * @type {string}
     * @memberof Location
     */
    state?: string;
    /**
     *
     * @type {string}
     * @memberof Location
     */
    county?: string;
    /**
     *
     * @type {string}
     * @memberof Location
     */
    city?: string;
    /**
     *
     * @type {string}
     * @memberof Location
     */
    zipCode?: string;
    /**
     *
     * @type {string}
     * @memberof Location
     */
    address?: string;
}
/**
 *
 * @export
 * @interface LocationViewModel
 */
export interface LocationViewModel {
    /**
     *
     * @type {number}
     * @memberof LocationViewModel
     */
    latitude?: number;
    /**
     *
     * @type {number}
     * @memberof LocationViewModel
     */
    longitude?: number;
    /**
     *
     * @type {string}
     * @memberof LocationViewModel
     */
    country?: string;
    /**
     *
     * @type {string}
     * @memberof LocationViewModel
     */
    state?: string;
    /**
     *
     * @type {string}
     * @memberof LocationViewModel
     */
    county?: string;
    /**
     *
     * @type {string}
     * @memberof LocationViewModel
     */
    city?: string;
    /**
     *
     * @type {string}
     * @memberof LocationViewModel
     */
    zipCode?: string;
    /**
     *
     * @type {string}
     * @memberof LocationViewModel
     */
    address?: string;
}
/**
 *
 * @export
 * @interface Manager
 */
export interface Manager {
    /**
     *
     * @type {Array<Account>}
     * @memberof Manager
     */
    accounts?: Array<Account>;
    /**
     *
     * @type {Array<ManagerAffiliation>}
     * @memberof Manager
     */
    affiliations?: Array<ManagerAffiliation>;
    /**
     *
     * @type {string}
     * @memberof Manager
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof Manager
     */
    userName?: string;
    /**
     *
     * @type {string}
     * @memberof Manager
     */
    email?: string;
    /**
     *
     * @type {string}
     * @memberof Manager
     */
    firstName?: string;
    /**
     *
     * @type {string}
     * @memberof Manager
     */
    lastName?: string;
    /**
     *
     * @type {string}
     * @memberof Manager
     */
    normalizedName?: string;
    /**
     *
     * @type {string}
     * @memberof Manager
     */
    phone?: string;
    /**
     *
     * @type {string}
     * @memberof Manager
     */
    photo?: string;
    /**
     *
     * @type {string}
     * @memberof Manager
     */
    photoThumbnail?: string;
    /**
     *
     * @type {Gender}
     * @memberof Manager
     */
    gender?: Gender;
    /**
     *
     * @type {Date}
     * @memberof Manager
     */
    dateOfBirth?: Date;
    /**
     *
     * @type {string}
     * @memberof Manager
     */
    timeZone?: string;
    /**
     *
     * @type {Array<Device>}
     * @memberof Manager
     */
    devices?: Array<Device>;
    /**
     *
     * @type {Array<Article>}
     * @memberof Manager
     */
    articles?: Array<Article>;
    /**
     *
     * @type {Array<QuestionComment>}
     * @memberof Manager
     */
    questionComments?: Array<QuestionComment>;
    /**
     *
     * @type {Array<UserLocation>}
     * @memberof Manager
     */
    locations?: Array<UserLocation>;
    /**
     *
     * @type {Array<UserLanguage>}
     * @memberof Manager
     */
    languages?: Array<UserLanguage>;
    /**
     *
     * @type {AuditableEntity}
     * @memberof Manager
     */
    auditableEntity?: AuditableEntity;
}
/**
 *
 * @export
 * @interface ManagerAffiliation
 */
export interface ManagerAffiliation {
    /**
     *
     * @type {string}
     * @memberof ManagerAffiliation
     */
    managerId?: string;
    /**
     *
     * @type {Manager}
     * @memberof ManagerAffiliation
     */
    manager?: Manager;
    /**
     *
     * @type {string}
     * @memberof ManagerAffiliation
     */
    hospitalId?: string;
    /**
     *
     * @type {Hospital}
     * @memberof ManagerAffiliation
     */
    hospital?: Hospital;
}
/**
 *
 * @export
 * @interface ManagerAffiliationViewModel
 */
export interface ManagerAffiliationViewModel {
    /**
     *
     * @type {string}
     * @memberof ManagerAffiliationViewModel
     */
    managerId?: string;
    /**
     *
     * @type {string}
     * @memberof ManagerAffiliationViewModel
     */
    managerName?: string;
    /**
     *
     * @type {string}
     * @memberof ManagerAffiliationViewModel
     */
    hospitalId?: string;
    /**
     *
     * @type {string}
     * @memberof ManagerAffiliationViewModel
     */
    hospitalName?: string;
    /**
     *
     * @type {string}
     * @memberof ManagerAffiliationViewModel
     */
    countryId?: string;
    /**
     *
     * @type {string}
     * @memberof ManagerAffiliationViewModel
     */
    countryName?: string;
    /**
     *
     * @type {string}
     * @memberof ManagerAffiliationViewModel
     */
    stateName?: string;
    /**
     *
     * @type {string}
     * @memberof ManagerAffiliationViewModel
     */
    cityName?: string;
}
/**
 *
 * @export
 * @interface ManagerViewModel
 */
export interface ManagerViewModel {
    /**
     *
     * @type {string}
     * @memberof ManagerViewModel
     */
    hospitalId?: string;
    /**
     *
     * @type {Array<ManagerAffiliationViewModel>}
     * @memberof ManagerViewModel
     */
    managerAffiliations?: Array<ManagerAffiliationViewModel>;
    /**
     *
     * @type {string}
     * @memberof ManagerViewModel
     */
    userType?: string;
    /**
     *
     * @type {Array<UserLanguageViewModel>}
     * @memberof ManagerViewModel
     */
    languages?: Array<UserLanguageViewModel>;
    /**
     *
     * @type {Array<UserLocationViewModel>}
     * @memberof ManagerViewModel
     */
    locations?: Array<UserLocationViewModel>;
    /**
     *
     * @type {string}
     * @memberof ManagerViewModel
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof ManagerViewModel
     */
    userName?: string;
    /**
     *
     * @type {string}
     * @memberof ManagerViewModel
     */
    firstName?: string;
    /**
     *
     * @type {string}
     * @memberof ManagerViewModel
     */
    lastName?: string;
    /**
     *
     * @type {string}
     * @memberof ManagerViewModel
     */
    fullname?: string;
    /**
     *
     * @type {string}
     * @memberof ManagerViewModel
     */
    phone?: string;
    /**
     *
     * @type {string}
     * @memberof ManagerViewModel
     */
    email?: string;
    /**
     *
     * @type {string}
     * @memberof ManagerViewModel
     */
    photo?: string;
    /**
     *
     * @type {string}
     * @memberof ManagerViewModel
     */
    photoThumbnail?: string;
    /**
     *
     * @type {Gender}
     * @memberof ManagerViewModel
     */
    gender?: Gender;
    /**
     *
     * @type {Date}
     * @memberof ManagerViewModel
     */
    dateOfBirth?: Date;
    /**
     *
     * @type {AuditableEntity}
     * @memberof ManagerViewModel
     */
    auditableEntity?: AuditableEntity;
}
/**
 *
 * @export
 * @interface ManagersViewModel
 */
export interface ManagersViewModel {
    /**
     *
     * @type {Array<UserItemViewModel>}
     * @memberof ManagersViewModel
     */
    items?: Array<UserItemViewModel>;
    /**
     *
     * @type {PagedListMetaData}
     * @memberof ManagersViewModel
     */
    metaData?: PagedListMetaData;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum MarketingType {
    Both = "Both",
    GeneralHealth = "GeneralHealth",
    Beauty = "Beauty"
}
/**
 *
 * @export
 * @interface Media
 */
export interface Media {
    /**
     *
     * @type {string}
     * @memberof Media
     */
    id?: string;
    /**
     *
     * @type {MediaType}
     * @memberof Media
     */
    mediaType?: MediaType;
    /**
     *
     * @type {string}
     * @memberof Media
     */
    url?: string;
    /**
     *
     * @type {string}
     * @memberof Media
     */
    thumbnailUrl?: string;
    /**
     *
     * @type {string}
     * @memberof Media
     */
    description?: string;
    /**
     *
     * @type {number}
     * @memberof Media
     */
    height?: number;
    /**
     *
     * @type {number}
     * @memberof Media
     */
    width?: number;
    /**
     *
     * @type {number}
     * @memberof Media
     */
    order?: number;
}
/**
 *
 * @export
 * @interface MediaSearchViewModel
 */
export interface MediaSearchViewModel {
    /**
     *
     * @type {string}
     * @memberof MediaSearchViewModel
     */
    id?: string;
    /**
     *
     * @type {number}
     * @memberof MediaSearchViewModel
     */
    mediaType?: number;
    /**
     *
     * @type {string}
     * @memberof MediaSearchViewModel
     */
    url?: string;
    /**
     *
     * @type {string}
     * @memberof MediaSearchViewModel
     */
    thumbnailUrl?: string;
    /**
     *
     * @type {string}
     * @memberof MediaSearchViewModel
     */
    description?: string;
    /**
     *
     * @type {number}
     * @memberof MediaSearchViewModel
     */
    order?: number;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum MediaType {
    Photo = "Photo",
    Video = "Video",
    Youtube = "Youtube",
    Document = "Document"
}
/**
 *
 * @export
 * @interface MediaViewModel
 */
export interface MediaViewModel {
    /**
     *
     * @type {string}
     * @memberof MediaViewModel
     */
    id?: string;
    /**
     *
     * @type {MediaType}
     * @memberof MediaViewModel
     */
    mediaType?: MediaType;
    /**
     *
     * @type {string}
     * @memberof MediaViewModel
     */
    url?: string;
    /**
     *
     * @type {string}
     * @memberof MediaViewModel
     */
    thumbnailUrl?: string;
    /**
     *
     * @type {string}
     * @memberof MediaViewModel
     */
    description?: string;
    /**
     *
     * @type {number}
     * @memberof MediaViewModel
     */
    order?: number;
}
/**
 *
 * @export
 * @interface PagedListMetaData
 */
export interface PagedListMetaData {
    /**
     *
     * @type {number}
     * @memberof PagedListMetaData
     */
    pageCount?: number;
    /**
     *
     * @type {number}
     * @memberof PagedListMetaData
     */
    totalItemCount?: number;
    /**
     *
     * @type {number}
     * @memberof PagedListMetaData
     */
    pageNumber?: number;
    /**
     *
     * @type {number}
     * @memberof PagedListMetaData
     */
    pageSize?: number;
    /**
     *
     * @type {boolean}
     * @memberof PagedListMetaData
     */
    hasPreviousPage?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof PagedListMetaData
     */
    hasNextPage?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof PagedListMetaData
     */
    isFirstPage?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof PagedListMetaData
     */
    isLastPage?: boolean;
    /**
     *
     * @type {number}
     * @memberof PagedListMetaData
     */
    firstItemOnPage?: number;
    /**
     *
     * @type {number}
     * @memberof PagedListMetaData
     */
    lastItemOnPage?: number;
}
/**
 *
 * @export
 * @interface PartnerItemViewModel
 */
export interface PartnerItemViewModel {
    /**
     *
     * @type {number}
     * @memberof PartnerItemViewModel
     */
    referralCount?: number;
    /**
     *
     * @type {string}
     * @memberof PartnerItemViewModel
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof PartnerItemViewModel
     */
    userName?: string;
    /**
     *
     * @type {string}
     * @memberof PartnerItemViewModel
     */
    firstName?: string;
    /**
     *
     * @type {string}
     * @memberof PartnerItemViewModel
     */
    lastName?: string;
    /**
     *
     * @type {string}
     * @memberof PartnerItemViewModel
     */
    fullname?: string;
    /**
     *
     * @type {string}
     * @memberof PartnerItemViewModel
     */
    phone?: string;
    /**
     *
     * @type {string}
     * @memberof PartnerItemViewModel
     */
    email?: string;
    /**
     *
     * @type {string}
     * @memberof PartnerItemViewModel
     */
    photo?: string;
    /**
     *
     * @type {string}
     * @memberof PartnerItemViewModel
     */
    photoThumbnail?: string;
    /**
     *
     * @type {Gender}
     * @memberof PartnerItemViewModel
     */
    gender?: Gender;
    /**
     *
     * @type {Date}
     * @memberof PartnerItemViewModel
     */
    dateOfBirth?: Date;
    /**
     *
     * @type {AuditableEntity}
     * @memberof PartnerItemViewModel
     */
    auditableEntity?: AuditableEntity;
}
/**
 *
 * @export
 * @interface PartnerViewModel
 */
export interface PartnerViewModel {
    /**
     *
     * @type {string}
     * @memberof PartnerViewModel
     */
    referralCode?: string;
    /**
     *
     * @type {number}
     * @memberof PartnerViewModel
     */
    referralCount?: number;
    /**
     *
     * @type {string}
     * @memberof PartnerViewModel
     */
    userType?: string;
    /**
     *
     * @type {Array<UserLanguageViewModel>}
     * @memberof PartnerViewModel
     */
    languages?: Array<UserLanguageViewModel>;
    /**
     *
     * @type {Array<UserLocationViewModel>}
     * @memberof PartnerViewModel
     */
    locations?: Array<UserLocationViewModel>;
    /**
     *
     * @type {string}
     * @memberof PartnerViewModel
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof PartnerViewModel
     */
    userName?: string;
    /**
     *
     * @type {string}
     * @memberof PartnerViewModel
     */
    firstName?: string;
    /**
     *
     * @type {string}
     * @memberof PartnerViewModel
     */
    lastName?: string;
    /**
     *
     * @type {string}
     * @memberof PartnerViewModel
     */
    fullname?: string;
    /**
     *
     * @type {string}
     * @memberof PartnerViewModel
     */
    phone?: string;
    /**
     *
     * @type {string}
     * @memberof PartnerViewModel
     */
    email?: string;
    /**
     *
     * @type {string}
     * @memberof PartnerViewModel
     */
    photo?: string;
    /**
     *
     * @type {string}
     * @memberof PartnerViewModel
     */
    photoThumbnail?: string;
    /**
     *
     * @type {Gender}
     * @memberof PartnerViewModel
     */
    gender?: Gender;
    /**
     *
     * @type {Date}
     * @memberof PartnerViewModel
     */
    dateOfBirth?: Date;
    /**
     *
     * @type {AuditableEntity}
     * @memberof PartnerViewModel
     */
    auditableEntity?: AuditableEntity;
}
/**
 *
 * @export
 * @interface PartnersViewModel
 */
export interface PartnersViewModel {
    /**
     *
     * @type {Array<PartnerItemViewModel>}
     * @memberof PartnersViewModel
     */
    items?: Array<PartnerItemViewModel>;
    /**
     *
     * @type {PagedListMetaData}
     * @memberof PartnersViewModel
     */
    metaData?: PagedListMetaData;
}
/**
 *
 * @export
 * @interface Patient
 */
export interface Patient {
    /**
     *
     * @type {string}
     * @memberof Patient
     */
    contact?: string;
    /**
     *
     * @type {string}
     * @memberof Patient
     */
    contactNumber?: string;
    /**
     *
     * @type {string}
     * @memberof Patient
     */
    nationality?: string;
    /**
     *
     * @type {Array<Question>}
     * @memberof Patient
     */
    questions?: Array<Question>;
    /**
     *
     * @type {Array<Booking>}
     * @memberof Patient
     */
    bookings?: Array<Booking>;
    /**
     *
     * @type {Array<Consultation>}
     * @memberof Patient
     */
    consultations?: Array<Consultation>;
    /**
     *
     * @type {Array<Payment>}
     * @memberof Patient
     */
    payments?: Array<Payment>;
    /**
     *
     * @type {Array<Customer>}
     * @memberof Patient
     */
    customers?: Array<Customer>;
    /**
     *
     * @type {Array<DoctorReview>}
     * @memberof Patient
     */
    doctorReviews?: Array<DoctorReview>;
    /**
     *
     * @type {Array<HospitalReview>}
     * @memberof Patient
     */
    hospitalReviews?: Array<HospitalReview>;
    /**
     *
     * @type {string}
     * @memberof Patient
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof Patient
     */
    userName?: string;
    /**
     *
     * @type {string}
     * @memberof Patient
     */
    email?: string;
    /**
     *
     * @type {string}
     * @memberof Patient
     */
    firstName?: string;
    /**
     *
     * @type {string}
     * @memberof Patient
     */
    lastName?: string;
    /**
     *
     * @type {string}
     * @memberof Patient
     */
    normalizedName?: string;
    /**
     *
     * @type {string}
     * @memberof Patient
     */
    phone?: string;
    /**
     *
     * @type {string}
     * @memberof Patient
     */
    photo?: string;
    /**
     *
     * @type {string}
     * @memberof Patient
     */
    photoThumbnail?: string;
    /**
     *
     * @type {Gender}
     * @memberof Patient
     */
    gender?: Gender;
    /**
     *
     * @type {Date}
     * @memberof Patient
     */
    dateOfBirth?: Date;
    /**
     *
     * @type {string}
     * @memberof Patient
     */
    timeZone?: string;
    /**
     *
     * @type {Array<Device>}
     * @memberof Patient
     */
    devices?: Array<Device>;
    /**
     *
     * @type {Array<Article>}
     * @memberof Patient
     */
    articles?: Array<Article>;
    /**
     *
     * @type {Array<QuestionComment>}
     * @memberof Patient
     */
    questionComments?: Array<QuestionComment>;
    /**
     *
     * @type {Array<UserLocation>}
     * @memberof Patient
     */
    locations?: Array<UserLocation>;
    /**
     *
     * @type {Array<UserLanguage>}
     * @memberof Patient
     */
    languages?: Array<UserLanguage>;
    /**
     *
     * @type {AuditableEntity}
     * @memberof Patient
     */
    auditableEntity?: AuditableEntity;
}
/**
 *
 * @export
 * @interface PatientItemViewModel
 */
export interface PatientItemViewModel {
    /**
     *
     * @type {string}
     * @memberof PatientItemViewModel
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof PatientItemViewModel
     */
    userName?: string;
    /**
     *
     * @type {string}
     * @memberof PatientItemViewModel
     */
    firstName?: string;
    /**
     *
     * @type {string}
     * @memberof PatientItemViewModel
     */
    lastName?: string;
    /**
     *
     * @type {string}
     * @memberof PatientItemViewModel
     */
    fullname?: string;
    /**
     *
     * @type {string}
     * @memberof PatientItemViewModel
     */
    phone?: string;
    /**
     *
     * @type {string}
     * @memberof PatientItemViewModel
     */
    email?: string;
    /**
     *
     * @type {string}
     * @memberof PatientItemViewModel
     */
    photo?: string;
    /**
     *
     * @type {string}
     * @memberof PatientItemViewModel
     */
    photoThumbnail?: string;
    /**
     *
     * @type {Gender}
     * @memberof PatientItemViewModel
     */
    gender?: Gender;
    /**
     *
     * @type {Date}
     * @memberof PatientItemViewModel
     */
    dateOfBirth?: Date;
    /**
     *
     * @type {AuditableEntity}
     * @memberof PatientItemViewModel
     */
    auditableEntity?: AuditableEntity;
}
/**
 *
 * @export
 * @interface PatientViewModel
 */
export interface PatientViewModel {
    /**
     *
     * @type {string}
     * @memberof PatientViewModel
     */
    contact?: string;
    /**
     *
     * @type {string}
     * @memberof PatientViewModel
     */
    contactNumber?: string;
    /**
     *
     * @type {string}
     * @memberof PatientViewModel
     */
    nationality?: string;
    /**
     *
     * @type {string}
     * @memberof PatientViewModel
     */
    userType?: string;
    /**
     *
     * @type {Array<UserLanguageViewModel>}
     * @memberof PatientViewModel
     */
    languages?: Array<UserLanguageViewModel>;
    /**
     *
     * @type {Array<UserLocationViewModel>}
     * @memberof PatientViewModel
     */
    locations?: Array<UserLocationViewModel>;
    /**
     *
     * @type {string}
     * @memberof PatientViewModel
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof PatientViewModel
     */
    userName?: string;
    /**
     *
     * @type {string}
     * @memberof PatientViewModel
     */
    firstName?: string;
    /**
     *
     * @type {string}
     * @memberof PatientViewModel
     */
    lastName?: string;
    /**
     *
     * @type {string}
     * @memberof PatientViewModel
     */
    fullname?: string;
    /**
     *
     * @type {string}
     * @memberof PatientViewModel
     */
    phone?: string;
    /**
     *
     * @type {string}
     * @memberof PatientViewModel
     */
    email?: string;
    /**
     *
     * @type {string}
     * @memberof PatientViewModel
     */
    photo?: string;
    /**
     *
     * @type {string}
     * @memberof PatientViewModel
     */
    photoThumbnail?: string;
    /**
     *
     * @type {Gender}
     * @memberof PatientViewModel
     */
    gender?: Gender;
    /**
     *
     * @type {Date}
     * @memberof PatientViewModel
     */
    dateOfBirth?: Date;
    /**
     *
     * @type {AuditableEntity}
     * @memberof PatientViewModel
     */
    auditableEntity?: AuditableEntity;
}
/**
 *
 * @export
 * @interface PatientsViewModel
 */
export interface PatientsViewModel {
    /**
     *
     * @type {Array<PatientItemViewModel>}
     * @memberof PatientsViewModel
     */
    items?: Array<PatientItemViewModel>;
    /**
     *
     * @type {PagedListMetaData}
     * @memberof PatientsViewModel
     */
    metaData?: PagedListMetaData;
}
/**
 *
 * @export
 * @interface Payment
 */
export interface Payment {
    /**
     *
     * @type {string}
     * @memberof Payment
     */
    id?: string;
    /**
     *
     * @type {PaymentMethod}
     * @memberof Payment
     */
    paymentMethod?: PaymentMethod;
    /**
     *
     * @type {string}
     * @memberof Payment
     */
    patientId?: string;
    /**
     *
     * @type {Patient}
     * @memberof Payment
     */
    patient?: Patient;
    /**
     *
     * @type {string}
     * @memberof Payment
     */
    customerId?: string;
    /**
     *
     * @type {Customer}
     * @memberof Payment
     */
    customer?: Customer;
    /**
     *
     * @type {string}
     * @memberof Payment
     */
    chargeId?: string;
    /**
     *
     * @type {string}
     * @memberof Payment
     */
    refundId?: string;
    /**
     *
     * @type {ChargeStatus}
     * @memberof Payment
     */
    chargeStatus?: ChargeStatus;
    /**
     *
     * @type {RefundStatus}
     * @memberof Payment
     */
    refundStatus?: RefundStatus;
    /**
     *
     * @type {PaymentStatus}
     * @memberof Payment
     */
    paymentStatus?: PaymentStatus;
    /**
     *
     * @type {boolean}
     * @memberof Payment
     */
    isFullPayment?: boolean;
    /**
     *
     * @type {string}
     * @memberof Payment
     */
    currency?: string;
    /**
     *
     * @type {number}
     * @memberof Payment
     */
    fee?: number;
    /**
     *
     * @type {number}
     * @memberof Payment
     */
    applicationFee?: number;
    /**
     *
     * @type {string}
     * @memberof Payment
     */
    cardBrand?: string;
    /**
     *
     * @type {string}
     * @memberof Payment
     */
    cardLast4Digits?: string;
    /**
     *
     * @type {Array<ChangeLog>}
     * @memberof Payment
     */
    chargeStatusChangeLogs?: Array<ChangeLog>;
    /**
     *
     * @type {Array<ChangeLog>}
     * @memberof Payment
     */
    refundStatusChangeLogs?: Array<ChangeLog>;
    /**
     *
     * @type {Array<ChangeLog>}
     * @memberof Payment
     */
    paymentStatusChangeLogs?: Array<ChangeLog>;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum PaymentMethod {
    Stripe = "Stripe",
    Paypal = "Paypal",
    BankTransfer = "BankTransfer"
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum PaymentStatus {
    Unpaid = "Unpaid",
    Paid = "Paid",
    RefundRequested = "RefundRequested",
    Refunded = "Refunded"
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum Platform {
    Web = "Web",
    IOS = "iOS",
    Android = "Android"
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum Procedure {
    Treatment = "Treatment",
    Diagnostic = "Diagnostic"
}
/**
 *
 * @export
 * @interface Question
 */
export interface Question {
    /**
     *
     * @type {string}
     * @memberof Question
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof Question
     */
    title?: string;
    /**
     *
     * @type {string}
     * @memberof Question
     */
    normalizedTitle?: string;
    /**
     *
     * @type {string}
     * @memberof Question
     */
    body?: string;
    /**
     *
     * @type {QuestionType}
     * @memberof Question
     */
    questionType?: QuestionType;
    /**
     *
     * @type {QuestionStatus}
     * @memberof Question
     */
    questionStatus?: QuestionStatus;
    /**
     *
     * @type {string}
     * @memberof Question
     */
    patientId?: string;
    /**
     *
     * @type {Patient}
     * @memberof Question
     */
    patient?: Patient;
    /**
     *
     * @type {string}
     * @memberof Question
     */
    hospitalId?: string;
    /**
     *
     * @type {Hospital}
     * @memberof Question
     */
    hospital?: Hospital;
    /**
     *
     * @type {string}
     * @memberof Question
     */
    dealPackageId?: string;
    /**
     *
     * @type {DealPackage}
     * @memberof Question
     */
    dealPackage?: DealPackage;
    /**
     *
     * @type {number}
     * @memberof Question
     */
    quantity?: number;
    /**
     *
     * @type {Array<QuestionComment>}
     * @memberof Question
     */
    questionComments?: Array<QuestionComment>;
    /**
     *
     * @type {Array<Media>}
     * @memberof Question
     */
    medias?: Array<Media>;
    /**
     *
     * @type {AuditableEntity}
     * @memberof Question
     */
    auditableEntity?: AuditableEntity;
}
/**
 *
 * @export
 * @interface QuestionComment
 */
export interface QuestionComment {
    /**
     *
     * @type {string}
     * @memberof QuestionComment
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof QuestionComment
     */
    userId?: string;
    /**
     *
     * @type {User}
     * @memberof QuestionComment
     */
    user?: User;
    /**
     *
     * @type {string}
     * @memberof QuestionComment
     */
    questionId?: string;
    /**
     *
     * @type {Question}
     * @memberof QuestionComment
     */
    question?: Question;
    /**
     *
     * @type {string}
     * @memberof QuestionComment
     */
    body?: string;
    /**
     *
     * @type {Array<Media>}
     * @memberof QuestionComment
     */
    medias?: Array<Media>;
    /**
     *
     * @type {AuditableEntity}
     * @memberof QuestionComment
     */
    auditableEntity?: AuditableEntity;
}
/**
 *
 * @export
 * @interface QuestionCommentItemViewModel
 */
export interface QuestionCommentItemViewModel {
    /**
     *
     * @type {string}
     * @memberof QuestionCommentItemViewModel
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof QuestionCommentItemViewModel
     */
    userId?: string;
    /**
     *
     * @type {string}
     * @memberof QuestionCommentItemViewModel
     */
    userName?: string;
    /**
     *
     * @type {string}
     * @memberof QuestionCommentItemViewModel
     */
    fullName?: string;
    /**
     *
     * @type {string}
     * @memberof QuestionCommentItemViewModel
     */
    questionId?: string;
    /**
     *
     * @type {string}
     * @memberof QuestionCommentItemViewModel
     */
    questionTitle?: string;
    /**
     *
     * @type {string}
     * @memberof QuestionCommentItemViewModel
     */
    body?: string;
    /**
     *
     * @type {AuditableEntity}
     * @memberof QuestionCommentItemViewModel
     */
    auditableEntity?: AuditableEntity;
}
/**
 *
 * @export
 * @interface QuestionCommentViewModel
 */
export interface QuestionCommentViewModel {
    /**
     *
     * @type {Array<MediaViewModel>}
     * @memberof QuestionCommentViewModel
     */
    medias?: Array<MediaViewModel>;
    /**
     *
     * @type {string}
     * @memberof QuestionCommentViewModel
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof QuestionCommentViewModel
     */
    userId?: string;
    /**
     *
     * @type {string}
     * @memberof QuestionCommentViewModel
     */
    userName?: string;
    /**
     *
     * @type {string}
     * @memberof QuestionCommentViewModel
     */
    fullName?: string;
    /**
     *
     * @type {string}
     * @memberof QuestionCommentViewModel
     */
    questionId?: string;
    /**
     *
     * @type {string}
     * @memberof QuestionCommentViewModel
     */
    questionTitle?: string;
    /**
     *
     * @type {string}
     * @memberof QuestionCommentViewModel
     */
    body?: string;
    /**
     *
     * @type {AuditableEntity}
     * @memberof QuestionCommentViewModel
     */
    auditableEntity?: AuditableEntity;
}
/**
 *
 * @export
 * @interface QuestionCommentsViewModel
 */
export interface QuestionCommentsViewModel {
    /**
     *
     * @type {Array<QuestionCommentItemViewModel>}
     * @memberof QuestionCommentsViewModel
     */
    items?: Array<QuestionCommentItemViewModel>;
    /**
     *
     * @type {PagedListMetaData}
     * @memberof QuestionCommentsViewModel
     */
    metaData?: PagedListMetaData;
}
/**
 *
 * @export
 * @interface QuestionItemViewModel
 */
export interface QuestionItemViewModel {
    /**
     *
     * @type {string}
     * @memberof QuestionItemViewModel
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof QuestionItemViewModel
     */
    title?: string;
    /**
     *
     * @type {string}
     * @memberof QuestionItemViewModel
     */
    userId?: string;
    /**
     *
     * @type {string}
     * @memberof QuestionItemViewModel
     */
    userName?: string;
    /**
     *
     * @type {string}
     * @memberof QuestionItemViewModel
     */
    fullName?: string;
    /**
     *
     * @type {string}
     * @memberof QuestionItemViewModel
     */
    hospitalId?: string;
    /**
     *
     * @type {string}
     * @memberof QuestionItemViewModel
     */
    hospitalName?: string;
    /**
     *
     * @type {QuestionType}
     * @memberof QuestionItemViewModel
     */
    questionType?: QuestionType;
    /**
     *
     * @type {QuestionStatus}
     * @memberof QuestionItemViewModel
     */
    questionStatus?: QuestionStatus;
    /**
     *
     * @type {number}
     * @memberof QuestionItemViewModel
     */
    questionCommentsCount?: number;
    /**
     *
     * @type {string}
     * @memberof QuestionItemViewModel
     */
    dealId?: string;
    /**
     *
     * @type {string}
     * @memberof QuestionItemViewModel
     */
    dealName?: string;
    /**
     *
     * @type {string}
     * @memberof QuestionItemViewModel
     */
    dealPackageId?: string;
    /**
     *
     * @type {RefundPolicy}
     * @memberof QuestionItemViewModel
     */
    refundPolicy?: RefundPolicy;
    /**
     *
     * @type {number}
     * @memberof QuestionItemViewModel
     */
    quantity?: number;
    /**
     *
     * @type {AuditableEntity}
     * @memberof QuestionItemViewModel
     */
    auditableEntity?: AuditableEntity;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum QuestionStatus {
    New = "New",
    Answered = "Answered",
    Replied = "Replied",
    Archived = "Archived"
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum QuestionType {
    General = "General",
    Health = "Health",
    Treatment = "Treatment",
    Travel = "Travel",
    Consult = "Consult"
}
/**
 *
 * @export
 * @interface QuestionViewModel
 */
export interface QuestionViewModel {
    /**
     *
     * @type {string}
     * @memberof QuestionViewModel
     */
    body?: string;
    /**
     *
     * @type {Array<MediaViewModel>}
     * @memberof QuestionViewModel
     */
    medias?: Array<MediaViewModel>;
    /**
     *
     * @type {string}
     * @memberof QuestionViewModel
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof QuestionViewModel
     */
    title?: string;
    /**
     *
     * @type {string}
     * @memberof QuestionViewModel
     */
    userId?: string;
    /**
     *
     * @type {string}
     * @memberof QuestionViewModel
     */
    userName?: string;
    /**
     *
     * @type {string}
     * @memberof QuestionViewModel
     */
    fullName?: string;
    /**
     *
     * @type {string}
     * @memberof QuestionViewModel
     */
    hospitalId?: string;
    /**
     *
     * @type {string}
     * @memberof QuestionViewModel
     */
    hospitalName?: string;
    /**
     *
     * @type {QuestionType}
     * @memberof QuestionViewModel
     */
    questionType?: QuestionType;
    /**
     *
     * @type {QuestionStatus}
     * @memberof QuestionViewModel
     */
    questionStatus?: QuestionStatus;
    /**
     *
     * @type {number}
     * @memberof QuestionViewModel
     */
    questionCommentsCount?: number;
    /**
     *
     * @type {string}
     * @memberof QuestionViewModel
     */
    dealId?: string;
    /**
     *
     * @type {string}
     * @memberof QuestionViewModel
     */
    dealName?: string;
    /**
     *
     * @type {string}
     * @memberof QuestionViewModel
     */
    dealPackageId?: string;
    /**
     *
     * @type {RefundPolicy}
     * @memberof QuestionViewModel
     */
    refundPolicy?: RefundPolicy;
    /**
     *
     * @type {number}
     * @memberof QuestionViewModel
     */
    quantity?: number;
    /**
     *
     * @type {AuditableEntity}
     * @memberof QuestionViewModel
     */
    auditableEntity?: AuditableEntity;
}
/**
 *
 * @export
 * @interface QuestionsViewModel
 */
export interface QuestionsViewModel {
    /**
     *
     * @type {Array<QuestionItemViewModel>}
     * @memberof QuestionsViewModel
     */
    items?: Array<QuestionItemViewModel>;
    /**
     *
     * @type {PagedListMetaData}
     * @memberof QuestionsViewModel
     */
    metaData?: PagedListMetaData;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum RefundPolicy {
    NonRefundable = "NonRefundable",
    Refundable = "Refundable",
    PartialRefundable = "PartialRefundable"
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum RefundStatus {
    Pending = "Pending",
    Succeeded = "Succeeded",
    Failed = "Failed"
}
/**
 *
 * @export
 * @interface RejectBookingCommand
 */
export interface RejectBookingCommand {
    /**
     *
     * @type {RejectReason}
     * @memberof RejectBookingCommand
     */
    rejectReason?: RejectReason;
    /**
     *
     * @type {string}
     * @memberof RejectBookingCommand
     */
    rejectComment?: string;
}
/**
 *
 * @export
 * @interface RejectConsultationCommand
 */
export interface RejectConsultationCommand {
    /**
     *
     * @type {RejectReason}
     * @memberof RejectConsultationCommand
     */
    rejectReason?: RejectReason;
    /**
     *
     * @type {string}
     * @memberof RejectConsultationCommand
     */
    rejectComment?: string;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum RejectReason {
    AssessmentNotCompleted = "AssessmentNotCompleted",
    PaymentNotCompleted = "PaymentNotCompleted",
    ScheduleNotAvailable = "ScheduleNotAvailable",
    OtherReason = "OtherReason"
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum ReviewCategory {
    Services = "Services",
    Hospitality = "Hospitality",
    Transfer = "Transfer",
    Etc = "Etc"
}
/**
 *
 * @export
 * @interface SearchMetaData
 */
export interface SearchMetaData {
    /**
     *
     * @type {number}
     * @memberof SearchMetaData
     */
    pageCount?: number;
    /**
     *
     * @type {number}
     * @memberof SearchMetaData
     */
    totalItemCount?: number;
    /**
     *
     * @type {number}
     * @memberof SearchMetaData
     */
    pageNumber?: number;
    /**
     *
     * @type {number}
     * @memberof SearchMetaData
     */
    pageSize?: number;
}
/**
 *
 * @export
 * @interface Service
 */
export interface Service {
    /**
     *
     * @type {string}
     * @memberof Service
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof Service
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof Service
     */
    normalizedName?: string;
    /**
     *
     * @type {string}
     * @memberof Service
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof Service
     */
    normalizedDescription?: string;
    /**
     *
     * @type {string}
     * @memberof Service
     */
    hospitalId?: string;
    /**
     *
     * @type {string}
     * @memberof Service
     */
    specialtyId?: string;
    /**
     *
     * @type {string}
     * @memberof Service
     */
    packageServiceId?: string;
    /**
     *
     * @type {HospitalSpecialty}
     * @memberof Service
     */
    hospitalSpecialty?: HospitalSpecialty;
    /**
     *
     * @type {Procedure}
     * @memberof Service
     */
    procedure?: Procedure;
    /**
     *
     * @type {string}
     * @memberof Service
     */
    serviceCategoryId?: string;
    /**
     *
     * @type {number}
     * @memberof Service
     */
    minPrice?: number;
    /**
     *
     * @type {number}
     * @memberof Service
     */
    maxPrice?: number;
    /**
     *
     * @type {boolean}
     * @memberof Service
     */
    priceReuqest?: boolean;
    /**
     *
     * @type {number}
     * @memberof Service
     */
    order?: number;
    /**
     *
     * @type {Array<DealPackageService>}
     * @memberof Service
     */
    dealPackageServices?: Array<DealPackageService>;
    /**
     *
     * @type {AuditableEntity}
     * @memberof Service
     */
    auditableEntity?: AuditableEntity;
}
/**
 *
 * @export
 * @interface ServiceCategoriesViewModel
 */
export interface ServiceCategoriesViewModel {
    /**
     *
     * @type {Array<ServiceCategoryItemViewModel>}
     * @memberof ServiceCategoriesViewModel
     */
    items?: Array<ServiceCategoryItemViewModel>;
    /**
     *
     * @type {PagedListMetaData}
     * @memberof ServiceCategoriesViewModel
     */
    metaData?: PagedListMetaData;
}
/**
 *
 * @export
 * @interface ServiceCategoryItemViewModel
 */
export interface ServiceCategoryItemViewModel {
    /**
     *
     * @type {string}
     * @memberof ServiceCategoryItemViewModel
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceCategoryItemViewModel
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceCategoryItemViewModel
     */
    normalizedName?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceCategoryItemViewModel
     */
    description?: string;
    /**
     *
     * @type {number}
     * @memberof ServiceCategoryItemViewModel
     */
    order?: number;
    /**
     *
     * @type {number}
     * @memberof ServiceCategoryItemViewModel
     */
    serviceCount?: number;
    /**
     *
     * @type {Array<ServiceItemViewModel>}
     * @memberof ServiceCategoryItemViewModel
     */
    services?: Array<ServiceItemViewModel>;
}
/**
 *
 * @export
 * @interface ServiceCategoryViewModel
 */
export interface ServiceCategoryViewModel {
    /**
     *
     * @type {string}
     * @memberof ServiceCategoryViewModel
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceCategoryViewModel
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceCategoryViewModel
     */
    normalizedName?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceCategoryViewModel
     */
    description?: string;
    /**
     *
     * @type {number}
     * @memberof ServiceCategoryViewModel
     */
    order?: number;
    /**
     *
     * @type {number}
     * @memberof ServiceCategoryViewModel
     */
    serviceCount?: number;
    /**
     *
     * @type {Array<ServiceItemViewModel>}
     * @memberof ServiceCategoryViewModel
     */
    services?: Array<ServiceItemViewModel>;
}
/**
 *
 * @export
 * @interface ServiceItemViewModel
 */
export interface ServiceItemViewModel {
    /**
     *
     * @type {string}
     * @memberof ServiceItemViewModel
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceItemViewModel
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceItemViewModel
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceItemViewModel
     */
    hospitalId?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceItemViewModel
     */
    hospitalName?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceItemViewModel
     */
    specialtyTypeId?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceItemViewModel
     */
    specialtyTypeName?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceItemViewModel
     */
    specialtyId?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceItemViewModel
     */
    specialtyName?: string;
    /**
     *
     * @type {MarketingType}
     * @memberof ServiceItemViewModel
     */
    marketingType?: MarketingType;
    /**
     *
     * @type {Procedure}
     * @memberof ServiceItemViewModel
     */
    procedure?: Procedure;
    /**
     *
     * @type {number}
     * @memberof ServiceItemViewModel
     */
    minPrice?: number;
    /**
     *
     * @type {number}
     * @memberof ServiceItemViewModel
     */
    maxPrice?: number;
    /**
     *
     * @type {boolean}
     * @memberof ServiceItemViewModel
     */
    priceReuqest?: boolean;
    /**
     *
     * @type {number}
     * @memberof ServiceItemViewModel
     */
    order?: number;
    /**
     *
     * @type {AuditableEntity}
     * @memberof ServiceItemViewModel
     */
    auditableEntity?: AuditableEntity;
}
/**
 *
 * @export
 * @interface ServiceSearchViewModel
 */
export interface ServiceSearchViewModel {
    /**
     *
     * @type {string}
     * @memberof ServiceSearchViewModel
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceSearchViewModel
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceSearchViewModel
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceSearchViewModel
     */
    specialtyId?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceSearchViewModel
     */
    specialtyName?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceSearchViewModel
     */
    specialtyTypeId?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceSearchViewModel
     */
    specialtyTypeName?: string;
    /**
     *
     * @type {number}
     * @memberof ServiceSearchViewModel
     */
    procedure?: number;
    /**
     *
     * @type {number}
     * @memberof ServiceSearchViewModel
     */
    order?: number;
}
/**
 *
 * @export
 * @interface ServiceViewModel
 */
export interface ServiceViewModel {
    /**
     *
     * @type {string}
     * @memberof ServiceViewModel
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceViewModel
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceViewModel
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceViewModel
     */
    hospitalId?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceViewModel
     */
    hospitalName?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceViewModel
     */
    specialtyTypeId?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceViewModel
     */
    specialtyTypeName?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceViewModel
     */
    specialtyId?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceViewModel
     */
    specialtyName?: string;
    /**
     *
     * @type {MarketingType}
     * @memberof ServiceViewModel
     */
    marketingType?: MarketingType;
    /**
     *
     * @type {Procedure}
     * @memberof ServiceViewModel
     */
    procedure?: Procedure;
    /**
     *
     * @type {number}
     * @memberof ServiceViewModel
     */
    minPrice?: number;
    /**
     *
     * @type {number}
     * @memberof ServiceViewModel
     */
    maxPrice?: number;
    /**
     *
     * @type {boolean}
     * @memberof ServiceViewModel
     */
    priceReuqest?: boolean;
    /**
     *
     * @type {number}
     * @memberof ServiceViewModel
     */
    order?: number;
    /**
     *
     * @type {AuditableEntity}
     * @memberof ServiceViewModel
     */
    auditableEntity?: AuditableEntity;
}
/**
 *
 * @export
 * @interface ServicesViewModel
 */
export interface ServicesViewModel {
    /**
     *
     * @type {Array<ServiceItemViewModel>}
     * @memberof ServicesViewModel
     */
    items?: Array<ServiceItemViewModel>;
    /**
     *
     * @type {PagedListMetaData}
     * @memberof ServicesViewModel
     */
    metaData?: PagedListMetaData;
}
/**
 *
 * @export
 * @interface SpecialtiesViewModel
 */
export interface SpecialtiesViewModel {
    /**
     *
     * @type {Array<SpecialtyItemViewModel>}
     * @memberof SpecialtiesViewModel
     */
    items?: Array<SpecialtyItemViewModel>;
    /**
     *
     * @type {PagedListMetaData}
     * @memberof SpecialtiesViewModel
     */
    metaData?: PagedListMetaData;
}
/**
 *
 * @export
 * @interface Specialty
 */
export interface Specialty {
    /**
     *
     * @type {string}
     * @memberof Specialty
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof Specialty
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof Specialty
     */
    normalizedName?: string;
    /**
     *
     * @type {string}
     * @memberof Specialty
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof Specialty
     */
    specialtyTypeId?: string;
    /**
     *
     * @type {SpecialtyType}
     * @memberof Specialty
     */
    specialtyType?: SpecialtyType;
    /**
     *
     * @type {Array<HospitalSpecialty>}
     * @memberof Specialty
     */
    hospitalSpecialties?: Array<HospitalSpecialty>;
    /**
     *
     * @type {Array<DoctorSpecialty>}
     * @memberof Specialty
     */
    doctorSpecialties?: Array<DoctorSpecialty>;
    /**
     *
     * @type {AuditableEntity}
     * @memberof Specialty
     */
    auditableEntity?: AuditableEntity;
}
/**
 *
 * @export
 * @interface SpecialtyItemViewModel
 */
export interface SpecialtyItemViewModel {
    /**
     *
     * @type {string}
     * @memberof SpecialtyItemViewModel
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof SpecialtyItemViewModel
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof SpecialtyItemViewModel
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof SpecialtyItemViewModel
     */
    specialtyTypeId?: string;
    /**
     *
     * @type {string}
     * @memberof SpecialtyItemViewModel
     */
    specialtyTypeName?: string;
    /**
     *
     * @type {AuditableEntity}
     * @memberof SpecialtyItemViewModel
     */
    auditableEntity?: AuditableEntity;
}
/**
 *
 * @export
 * @interface SpecialtySearchResultViewModel
 */
export interface SpecialtySearchResultViewModel {
    /**
     *
     * @type {Array<SpecialtySearchViewModel>}
     * @memberof SpecialtySearchResultViewModel
     */
    items?: Array<SpecialtySearchViewModel>;
    /**
     *
     * @type {SearchMetaData}
     * @memberof SpecialtySearchResultViewModel
     */
    metaData?: SearchMetaData;
}
/**
 *
 * @export
 * @interface SpecialtySearchViewModel
 */
export interface SpecialtySearchViewModel {
    /**
     *
     * @type {Array<HospitalSearchItemViewModel>}
     * @memberof SpecialtySearchViewModel
     */
    hospitals?: Array<HospitalSearchItemViewModel>;
    /**
     *
     * @type {string}
     * @memberof SpecialtySearchViewModel
     */
    specialtyId?: string;
    /**
     *
     * @type {string}
     * @memberof SpecialtySearchViewModel
     */
    specialtyName?: string;
    /**
     *
     * @type {string}
     * @memberof SpecialtySearchViewModel
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof SpecialtySearchViewModel
     */
    specialtyTypeId?: string;
    /**
     *
     * @type {string}
     * @memberof SpecialtySearchViewModel
     */
    specialtyTypeName?: string;
    /**
     *
     * @type {string}
     * @memberof SpecialtySearchViewModel
     */
    specialtyTypeCategoryId?: string;
    /**
     *
     * @type {string}
     * @memberof SpecialtySearchViewModel
     */
    specialtyTypeCategoryName?: string;
    /**
     *
     * @type {number}
     * @memberof SpecialtySearchViewModel
     */
    marketingType?: number;
    /**
     *
     * @type {number}
     * @memberof SpecialtySearchViewModel
     */
    order?: number;
}
/**
 *
 * @export
 * @interface SpecialtyType
 */
export interface SpecialtyType {
    /**
     *
     * @type {string}
     * @memberof SpecialtyType
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof SpecialtyType
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof SpecialtyType
     */
    normalizedName?: string;
    /**
     *
     * @type {string}
     * @memberof SpecialtyType
     */
    description?: string;
    /**
     *
     * @type {MarketingType}
     * @memberof SpecialtyType
     */
    marketingType?: MarketingType;
    /**
     *
     * @type {string}
     * @memberof SpecialtyType
     */
    specialtyTypeCategoryId?: string;
    /**
     *
     * @type {Array<Specialty>}
     * @memberof SpecialtyType
     */
    specialties?: Array<Specialty>;
    /**
     *
     * @type {AuditableEntity}
     * @memberof SpecialtyType
     */
    auditableEntity?: AuditableEntity;
}
/**
 *
 * @export
 * @interface SpecialtyTypeCategoriesViewModel
 */
export interface SpecialtyTypeCategoriesViewModel {
    /**
     *
     * @type {Array<SpecialtyTypeCategoryItemViewModel>}
     * @memberof SpecialtyTypeCategoriesViewModel
     */
    items?: Array<SpecialtyTypeCategoryItemViewModel>;
    /**
     *
     * @type {PagedListMetaData}
     * @memberof SpecialtyTypeCategoriesViewModel
     */
    metaData?: PagedListMetaData;
}
/**
 *
 * @export
 * @interface SpecialtyTypeCategoryItemViewModel
 */
export interface SpecialtyTypeCategoryItemViewModel {
    /**
     *
     * @type {string}
     * @memberof SpecialtyTypeCategoryItemViewModel
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof SpecialtyTypeCategoryItemViewModel
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof SpecialtyTypeCategoryItemViewModel
     */
    description?: string;
    /**
     *
     * @type {number}
     * @memberof SpecialtyTypeCategoryItemViewModel
     */
    order?: number;
    /**
     *
     * @type {number}
     * @memberof SpecialtyTypeCategoryItemViewModel
     */
    specialtyTypeCount?: number;
    /**
     *
     * @type {Array<SpecialtyTypeItemViewModel>}
     * @memberof SpecialtyTypeCategoryItemViewModel
     */
    specialtyTypes?: Array<SpecialtyTypeItemViewModel>;
}
/**
 *
 * @export
 * @interface SpecialtyTypeCategoryViewModel
 */
export interface SpecialtyTypeCategoryViewModel {
    /**
     *
     * @type {string}
     * @memberof SpecialtyTypeCategoryViewModel
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof SpecialtyTypeCategoryViewModel
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof SpecialtyTypeCategoryViewModel
     */
    description?: string;
    /**
     *
     * @type {number}
     * @memberof SpecialtyTypeCategoryViewModel
     */
    order?: number;
    /**
     *
     * @type {number}
     * @memberof SpecialtyTypeCategoryViewModel
     */
    specialtyTypeCount?: number;
    /**
     *
     * @type {Array<SpecialtyTypeItemViewModel>}
     * @memberof SpecialtyTypeCategoryViewModel
     */
    specialtyTypes?: Array<SpecialtyTypeItemViewModel>;
}
/**
 *
 * @export
 * @interface SpecialtyTypeItemViewModel
 */
export interface SpecialtyTypeItemViewModel {
    /**
     *
     * @type {string}
     * @memberof SpecialtyTypeItemViewModel
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof SpecialtyTypeItemViewModel
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof SpecialtyTypeItemViewModel
     */
    description?: string;
    /**
     *
     * @type {MarketingType}
     * @memberof SpecialtyTypeItemViewModel
     */
    marketingType?: MarketingType;
    /**
     *
     * @type {number}
     * @memberof SpecialtyTypeItemViewModel
     */
    specialtyCount?: number;
    /**
     *
     * @type {number}
     * @memberof SpecialtyTypeItemViewModel
     */
    hospitalSpecialtyCount?: number;
    /**
     *
     * @type {number}
     * @memberof SpecialtyTypeItemViewModel
     */
    serviceCount?: number;
    /**
     *
     * @type {Date}
     * @memberof SpecialtyTypeItemViewModel
     */
    created?: Date;
}
/**
 *
 * @export
 * @interface SpecialtyTypeViewModel
 */
export interface SpecialtyTypeViewModel {
    /**
     *
     * @type {string}
     * @memberof SpecialtyTypeViewModel
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof SpecialtyTypeViewModel
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof SpecialtyTypeViewModel
     */
    description?: string;
    /**
     *
     * @type {MarketingType}
     * @memberof SpecialtyTypeViewModel
     */
    marketingType?: MarketingType;
    /**
     *
     * @type {number}
     * @memberof SpecialtyTypeViewModel
     */
    specialtyCount?: number;
    /**
     *
     * @type {number}
     * @memberof SpecialtyTypeViewModel
     */
    hospitalSpecialtyCount?: number;
    /**
     *
     * @type {number}
     * @memberof SpecialtyTypeViewModel
     */
    serviceCount?: number;
    /**
     *
     * @type {Date}
     * @memberof SpecialtyTypeViewModel
     */
    created?: Date;
}
/**
 *
 * @export
 * @interface SpecialtyTypesViewModel
 */
export interface SpecialtyTypesViewModel {
    /**
     *
     * @type {Array<SpecialtyTypeItemViewModel>}
     * @memberof SpecialtyTypesViewModel
     */
    items?: Array<SpecialtyTypeItemViewModel>;
    /**
     *
     * @type {PagedListMetaData}
     * @memberof SpecialtyTypesViewModel
     */
    metaData?: PagedListMetaData;
}
/**
 *
 * @export
 * @interface SpecialtyViewModel
 */
export interface SpecialtyViewModel {
    /**
     *
     * @type {string}
     * @memberof SpecialtyViewModel
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof SpecialtyViewModel
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof SpecialtyViewModel
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof SpecialtyViewModel
     */
    specialtyTypeId?: string;
    /**
     *
     * @type {string}
     * @memberof SpecialtyViewModel
     */
    specialtyTypeName?: string;
    /**
     *
     * @type {AuditableEntity}
     * @memberof SpecialtyViewModel
     */
    auditableEntity?: AuditableEntity;
}
/**
 *
 * @export
 * @interface Tag
 */
export interface Tag {
    /**
     *
     * @type {string}
     * @memberof Tag
     */
    tagId?: string;
    /**
     *
     * @type {string}
     * @memberof Tag
     */
    normalizedTagId?: string;
    /**
     *
     * @type {Array<ArticleTag>}
     * @memberof Tag
     */
    articleTags?: Array<ArticleTag>;
    /**
     *
     * @type {Array<YoutubeTag>}
     * @memberof Tag
     */
    youtubeTags?: Array<YoutubeTag>;
}
/**
 *
 * @export
 * @interface UpdateArticleCommand
 */
export interface UpdateArticleCommand {
    /**
     *
     * @type {string}
     * @memberof UpdateArticleCommand
     */
    title?: string;
    /**
     *
     * @type {string}
     * @memberof UpdateArticleCommand
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof UpdateArticleCommand
     */
    body?: string;
    /**
     *
     * @type {ArticleStatus}
     * @memberof UpdateArticleCommand
     */
    status?: ArticleStatus;
    /**
     *
     * @type {MarketingType}
     * @memberof UpdateArticleCommand
     */
    marketingType?: MarketingType;
    /**
     *
     * @type {Array<ArticleTagItemViewModel>}
     * @memberof UpdateArticleCommand
     */
    articleTags?: Array<ArticleTagItemViewModel>;
    /**
     *
     * @type {Array<MediaViewModel>}
     * @memberof UpdateArticleCommand
     */
    medias?: Array<MediaViewModel>;
}
/**
 *
 * @export
 * @interface UpdateBookingCommand
 */
export interface UpdateBookingCommand {
    /**
     *
     * @type {number}
     * @memberof UpdateBookingCommand
     */
    quantity?: number;
    /**
     *
     * @type {string}
     * @memberof UpdateBookingCommand
     */
    firstName?: string;
    /**
     *
     * @type {string}
     * @memberof UpdateBookingCommand
     */
    lastName?: string;
    /**
     *
     * @type {string}
     * @memberof UpdateBookingCommand
     */
    email?: string;
    /**
     *
     * @type {string}
     * @memberof UpdateBookingCommand
     */
    phone?: string;
    /**
     *
     * @type {Date}
     * @memberof UpdateBookingCommand
     */
    approximateDateStart?: Date;
    /**
     *
     * @type {Date}
     * @memberof UpdateBookingCommand
     */
    approximateDateEnd?: Date;
    /**
     *
     * @type {string}
     * @memberof UpdateBookingCommand
     */
    comment?: string;
}
/**
 *
 * @export
 * @interface UpdateCHAdminCommand
 */
export interface UpdateCHAdminCommand {
    /**
     *
     * @type {string}
     * @memberof UpdateCHAdminCommand
     */
    firstName?: string;
    /**
     *
     * @type {string}
     * @memberof UpdateCHAdminCommand
     */
    lastName?: string;
    /**
     *
     * @type {string}
     * @memberof UpdateCHAdminCommand
     */
    photo?: string;
    /**
     *
     * @type {string}
     * @memberof UpdateCHAdminCommand
     */
    photoThumbnail?: string;
    /**
     *
     * @type {Gender}
     * @memberof UpdateCHAdminCommand
     */
    gender?: Gender;
    /**
     *
     * @type {Date}
     * @memberof UpdateCHAdminCommand
     */
    dateOfBirth?: Date;
    /**
     *
     * @type {Array<UserLanguageViewModel>}
     * @memberof UpdateCHAdminCommand
     */
    languages?: Array<UserLanguageViewModel>;
    /**
     *
     * @type {Array<UserLocationViewModel>}
     * @memberof UpdateCHAdminCommand
     */
    locations?: Array<UserLocationViewModel>;
}
/**
 *
 * @export
 * @interface UpdateCHManagerCommand
 */
export interface UpdateCHManagerCommand {
    /**
     *
     * @type {string}
     * @memberof UpdateCHManagerCommand
     */
    firstName?: string;
    /**
     *
     * @type {string}
     * @memberof UpdateCHManagerCommand
     */
    lastName?: string;
    /**
     *
     * @type {string}
     * @memberof UpdateCHManagerCommand
     */
    photo?: string;
    /**
     *
     * @type {string}
     * @memberof UpdateCHManagerCommand
     */
    photoThumbnail?: string;
    /**
     *
     * @type {Gender}
     * @memberof UpdateCHManagerCommand
     */
    gender?: Gender;
    /**
     *
     * @type {Date}
     * @memberof UpdateCHManagerCommand
     */
    dateOfBirth?: Date;
    /**
     *
     * @type {Array<UserLanguageViewModel>}
     * @memberof UpdateCHManagerCommand
     */
    languages?: Array<UserLanguageViewModel>;
    /**
     *
     * @type {Array<UserLocationViewModel>}
     * @memberof UpdateCHManagerCommand
     */
    locations?: Array<UserLocationViewModel>;
}
/**
 *
 * @export
 * @interface UpdateConsultationCommand
 */
export interface UpdateConsultationCommand {
    /**
     *
     * @type {string}
     * @memberof UpdateConsultationCommand
     */
    specialtyId?: string;
    /**
     *
     * @type {string}
     * @memberof UpdateConsultationCommand
     */
    doctorId?: string;
    /**
     *
     * @type {string}
     * @memberof UpdateConsultationCommand
     */
    language?: string;
    /**
     *
     * @type {boolean}
     * @memberof UpdateConsultationCommand
     */
    isAccountHolder?: boolean;
    /**
     *
     * @type {string}
     * @memberof UpdateConsultationCommand
     */
    firstName?: string;
    /**
     *
     * @type {string}
     * @memberof UpdateConsultationCommand
     */
    lastName?: string;
    /**
     *
     * @type {string}
     * @memberof UpdateConsultationCommand
     */
    email?: string;
    /**
     *
     * @type {Date}
     * @memberof UpdateConsultationCommand
     */
    dateOfBirth?: Date;
    /**
     *
     * @type {Gender}
     * @memberof UpdateConsultationCommand
     */
    gender?: Gender;
    /**
     *
     * @type {string}
     * @memberof UpdateConsultationCommand
     */
    comment?: string;
    /**
     *
     * @type {Date}
     * @memberof UpdateConsultationCommand
     */
    approximateDateStart?: Date;
    /**
     *
     * @type {Date}
     * @memberof UpdateConsultationCommand
     */
    approximateDateEnd?: Date;
}
/**
 *
 * @export
 * @interface UpdateCountryCommand
 */
export interface UpdateCountryCommand {
    /**
     *
     * @type {string}
     * @memberof UpdateCountryCommand
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof UpdateCountryCommand
     */
    description?: string;
    /**
     *
     * @type {Array<MediaViewModel>}
     * @memberof UpdateCountryCommand
     */
    medias?: Array<MediaViewModel>;
}
/**
 *
 * @export
 * @interface UpdateDealCommand
 */
export interface UpdateDealCommand {
    /**
     *
     * @type {string}
     * @memberof UpdateDealCommand
     */
    photo?: string;
    /**
     *
     * @type {string}
     * @memberof UpdateDealCommand
     */
    photoThumbnail?: string;
    /**
     *
     * @type {string}
     * @memberof UpdateDealCommand
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof UpdateDealCommand
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof UpdateDealCommand
     */
    normalizedName?: string;
    /**
     *
     * @type {string}
     * @memberof UpdateDealCommand
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof UpdateDealCommand
     */
    hospitalId?: string;
    /**
     *
     * @type {string}
     * @memberof UpdateDealCommand
     */
    hospitalName?: string;
    /**
     *
     * @type {MarketingType}
     * @memberof UpdateDealCommand
     */
    marketingType?: MarketingType;
    /**
     *
     * @type {Array<DealPackageItemViewModel>}
     * @memberof UpdateDealCommand
     */
    dealPackages?: Array<DealPackageItemViewModel>;
    /**
     *
     * @type {AuditableEntity}
     * @memberof UpdateDealCommand
     */
    auditableEntity?: AuditableEntity;
}
/**
 *
 * @export
 * @interface UpdateDealPackageCommand
 */
export interface UpdateDealPackageCommand {
    /**
     *
     * @type {string}
     * @memberof UpdateDealPackageCommand
     */
    dealName?: string;
    /**
     *
     * @type {string}
     * @memberof UpdateDealPackageCommand
     */
    hospitalId?: string;
    /**
     *
     * @type {string}
     * @memberof UpdateDealPackageCommand
     */
    hospitalName?: string;
    /**
     *
     * @type {RefundPolicy}
     * @memberof UpdateDealPackageCommand
     */
    refundPolicy?: RefundPolicy;
    /**
     *
     * @type {string}
     * @memberof UpdateDealPackageCommand
     */
    additionalServices?: string;
    /**
     *
     * @type {string}
     * @memberof UpdateDealPackageCommand
     */
    accomodation?: string;
    /**
     *
     * @type {string}
     * @memberof UpdateDealPackageCommand
     */
    transfer?: string;
    /**
     *
     * @type {string}
     * @memberof UpdateDealPackageCommand
     */
    bonus?: string;
    /**
     *
     * @type {number}
     * @memberof UpdateDealPackageCommand
     */
    price?: number;
    /**
     *
     * @type {number}
     * @memberof UpdateDealPackageCommand
     */
    serviceCount?: number;
    /**
     *
     * @type {Array<DealPackageServiceItemViewModel>}
     * @memberof UpdateDealPackageCommand
     */
    dealPackageServices?: Array<DealPackageServiceItemViewModel>;
    /**
     *
     * @type {AuditableEntity}
     * @memberof UpdateDealPackageCommand
     */
    auditableEntity?: AuditableEntity;
}
/**
 *
 * @export
 * @interface UpdateDepartmentCommand
 */
export interface UpdateDepartmentCommand {
    /**
     *
     * @type {string}
     * @memberof UpdateDepartmentCommand
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof UpdateDepartmentCommand
     */
    additionalInfo?: string;
}
/**
 *
 * @export
 * @interface UpdateDeviceCommand
 */
export interface UpdateDeviceCommand {
    /**
     *
     * @type {boolean}
     * @memberof UpdateDeviceCommand
     */
    appAlert?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof UpdateDeviceCommand
     */
    eventAlert?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof UpdateDeviceCommand
     */
    noticeAlert?: boolean;
}
/**
 *
 * @export
 * @interface UpdateDoctorCertificateCommand
 */
export interface UpdateDoctorCertificateCommand {
    /**
     *
     * @type {string}
     * @memberof UpdateDoctorCertificateCommand
     */
    certificate?: string;
    /**
     *
     * @type {Date}
     * @memberof UpdateDoctorCertificateCommand
     */
    activeFrom?: Date;
    /**
     *
     * @type {Date}
     * @memberof UpdateDoctorCertificateCommand
     */
    activeTo?: Date;
}
/**
 *
 * @export
 * @interface UpdateDoctorCommand
 */
export interface UpdateDoctorCommand {
    /**
     *
     * @type {Date}
     * @memberof UpdateDoctorCommand
     */
    startPracticeDate?: Date;
    /**
     *
     * @type {string}
     * @memberof UpdateDoctorCommand
     */
    overview?: string;
    /**
     *
     * @type {boolean}
     * @memberof UpdateDoctorCommand
     */
    consultationEnabled?: boolean;
    /**
     *
     * @type {number}
     * @memberof UpdateDoctorCommand
     */
    consultationFee?: number;
    /**
     *
     * @type {Array<DoctorEducationItemViewModel>}
     * @memberof UpdateDoctorCommand
     */
    doctorEducations?: Array<DoctorEducationItemViewModel>;
    /**
     *
     * @type {Array<DoctorPortfolioItemViewModel>}
     * @memberof UpdateDoctorCommand
     */
    doctorPortfolios?: Array<DoctorPortfolioItemViewModel>;
    /**
     *
     * @type {Array<DoctorSpecialtyItemViewModel>}
     * @memberof UpdateDoctorCommand
     */
    doctorSpecialties?: Array<DoctorSpecialtyItemViewModel>;
    /**
     *
     * @type {Array<DoctorCertificateItemViewModel>}
     * @memberof UpdateDoctorCommand
     */
    doctorCertificates?: Array<DoctorCertificateItemViewModel>;
    /**
     *
     * @type {Array<AwardViewModel>}
     * @memberof UpdateDoctorCommand
     */
    doctorAwards?: Array<AwardViewModel>;
    /**
     *
     * @type {string}
     * @memberof UpdateDoctorCommand
     */
    firstName?: string;
    /**
     *
     * @type {string}
     * @memberof UpdateDoctorCommand
     */
    lastName?: string;
    /**
     *
     * @type {string}
     * @memberof UpdateDoctorCommand
     */
    photo?: string;
    /**
     *
     * @type {string}
     * @memberof UpdateDoctorCommand
     */
    photoThumbnail?: string;
    /**
     *
     * @type {Gender}
     * @memberof UpdateDoctorCommand
     */
    gender?: Gender;
    /**
     *
     * @type {Date}
     * @memberof UpdateDoctorCommand
     */
    dateOfBirth?: Date;
    /**
     *
     * @type {Array<UserLanguageViewModel>}
     * @memberof UpdateDoctorCommand
     */
    languages?: Array<UserLanguageViewModel>;
    /**
     *
     * @type {Array<UserLocationViewModel>}
     * @memberof UpdateDoctorCommand
     */
    locations?: Array<UserLocationViewModel>;
}
/**
 *
 * @export
 * @interface UpdateDoctorReviewCommand
 */
export interface UpdateDoctorReviewCommand {
    /**
     *
     * @type {string}
     * @memberof UpdateDoctorReviewCommand
     */
    body?: string;
    /**
     *
     * @type {boolean}
     * @memberof UpdateDoctorReviewCommand
     */
    recommended?: boolean;
    /**
     *
     * @type {ReviewCategory}
     * @memberof UpdateDoctorReviewCommand
     */
    reviewCategory?: ReviewCategory;
    /**
     *
     * @type {number}
     * @memberof UpdateDoctorReviewCommand
     */
    rate?: number;
}
/**
 *
 * @export
 * @interface UpdateEquipmentCommand
 */
export interface UpdateEquipmentCommand {
    /**
     *
     * @type {string}
     * @memberof UpdateEquipmentCommand
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof UpdateEquipmentCommand
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof UpdateEquipmentCommand
     */
    hospitalName?: string;
    /**
     *
     * @type {Array<MediaViewModel>}
     * @memberof UpdateEquipmentCommand
     */
    medias?: Array<MediaViewModel>;
    /**
     *
     * @type {AuditableEntity}
     * @memberof UpdateEquipmentCommand
     */
    auditableEntity?: AuditableEntity;
}
/**
 *
 * @export
 * @interface UpdateHospitalCommand
 */
export interface UpdateHospitalCommand {
    /**
     *
     * @type {Array<HospitalSpecialtyItemViewModel>}
     * @memberof UpdateHospitalCommand
     */
    specialties?: Array<HospitalSpecialtyItemViewModel>;
    /**
     *
     * @type {string}
     * @memberof UpdateHospitalCommand
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof UpdateHospitalCommand
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof UpdateHospitalCommand
     */
    logo?: string;
    /**
     *
     * @type {string}
     * @memberof UpdateHospitalCommand
     */
    overview?: string;
    /**
     *
     * @type {number}
     * @memberof UpdateHospitalCommand
     */
    bedsCount?: number;
    /**
     *
     * @type {number}
     * @memberof UpdateHospitalCommand
     */
    operationRoomsCount?: number;
    /**
     *
     * @type {number}
     * @memberof UpdateHospitalCommand
     */
    icuBedsCount?: number;
    /**
     *
     * @type {number}
     * @memberof UpdateHospitalCommand
     */
    medicalStaffCount?: number;
    /**
     *
     * @type {string}
     * @memberof UpdateHospitalCommand
     */
    countryName?: string;
    /**
     *
     * @type {MarketingType}
     * @memberof UpdateHospitalCommand
     */
    marketingType?: MarketingType;
    /**
     *
     * @type {boolean}
     * @memberof UpdateHospitalCommand
     */
    consultationEnabled?: boolean;
    /**
     *
     * @type {number}
     * @memberof UpdateHospitalCommand
     */
    consultationFee?: number;
    /**
     *
     * @type {number}
     * @memberof UpdateHospitalCommand
     */
    articlesCount?: number;
    /**
     *
     * @type {number}
     * @memberof UpdateHospitalCommand
     */
    packagesCount?: number;
    /**
     *
     * @type {number}
     * @memberof UpdateHospitalCommand
     */
    equipmentsCount?: number;
    /**
     *
     * @type {number}
     * @memberof UpdateHospitalCommand
     */
    reviewsCount?: number;
    /**
     *
     * @type {number}
     * @memberof UpdateHospitalCommand
     */
    departmentsCount?: number;
    /**
     *
     * @type {number}
     * @memberof UpdateHospitalCommand
     */
    specialtiesCount?: number;
    /**
     *
     * @type {number}
     * @memberof UpdateHospitalCommand
     */
    accreditationsCount?: number;
    /**
     *
     * @type {number}
     * @memberof UpdateHospitalCommand
     */
    doctorAffiliationsCount?: number;
    /**
     *
     * @type {number}
     * @memberof UpdateHospitalCommand
     */
    managerAffiliationsCount?: number;
    /**
     *
     * @type {Array<AwardViewModel>}
     * @memberof UpdateHospitalCommand
     */
    awards?: Array<AwardViewModel>;
    /**
     *
     * @type {Array<MediaViewModel>}
     * @memberof UpdateHospitalCommand
     */
    medias?: Array<MediaViewModel>;
    /**
     *
     * @type {LocationViewModel}
     * @memberof UpdateHospitalCommand
     */
    location?: LocationViewModel;
    /**
     *
     * @type {AuditableEntity}
     * @memberof UpdateHospitalCommand
     */
    auditableEntity?: AuditableEntity;
}
/**
 *
 * @export
 * @interface UpdateHospitalReviewCommand
 */
export interface UpdateHospitalReviewCommand {
    /**
     *
     * @type {string}
     * @memberof UpdateHospitalReviewCommand
     */
    body?: string;
    /**
     *
     * @type {boolean}
     * @memberof UpdateHospitalReviewCommand
     */
    recommended?: boolean;
    /**
     *
     * @type {ReviewCategory}
     * @memberof UpdateHospitalReviewCommand
     */
    reviewCategory?: ReviewCategory;
    /**
     *
     * @type {number}
     * @memberof UpdateHospitalReviewCommand
     */
    rate?: number;
}
/**
 *
 * @export
 * @interface UpdateHospitalSpecialtySequenceCommand
 */
export interface UpdateHospitalSpecialtySequenceCommand {
    /**
     *
     * @type {Array<string>}
     * @memberof UpdateHospitalSpecialtySequenceCommand
     */
    hospitalSpecialtySequence?: Array<string>;
}
/**
 *
 * @export
 * @interface UpdateManagerCommand
 */
export interface UpdateManagerCommand {
    /**
     *
     * @type {string}
     * @memberof UpdateManagerCommand
     */
    hospitalId?: string;
    /**
     *
     * @type {string}
     * @memberof UpdateManagerCommand
     */
    firstName?: string;
    /**
     *
     * @type {string}
     * @memberof UpdateManagerCommand
     */
    lastName?: string;
    /**
     *
     * @type {string}
     * @memberof UpdateManagerCommand
     */
    photo?: string;
    /**
     *
     * @type {string}
     * @memberof UpdateManagerCommand
     */
    photoThumbnail?: string;
    /**
     *
     * @type {Gender}
     * @memberof UpdateManagerCommand
     */
    gender?: Gender;
    /**
     *
     * @type {Date}
     * @memberof UpdateManagerCommand
     */
    dateOfBirth?: Date;
    /**
     *
     * @type {Array<UserLanguageViewModel>}
     * @memberof UpdateManagerCommand
     */
    languages?: Array<UserLanguageViewModel>;
    /**
     *
     * @type {Array<UserLocationViewModel>}
     * @memberof UpdateManagerCommand
     */
    locations?: Array<UserLocationViewModel>;
}
/**
 *
 * @export
 * @interface UpdatePartnerCommand
 */
export interface UpdatePartnerCommand {
    /**
     *
     * @type {string}
     * @memberof UpdatePartnerCommand
     */
    firstName?: string;
    /**
     *
     * @type {string}
     * @memberof UpdatePartnerCommand
     */
    lastName?: string;
    /**
     *
     * @type {string}
     * @memberof UpdatePartnerCommand
     */
    photo?: string;
    /**
     *
     * @type {string}
     * @memberof UpdatePartnerCommand
     */
    photoThumbnail?: string;
    /**
     *
     * @type {Gender}
     * @memberof UpdatePartnerCommand
     */
    gender?: Gender;
    /**
     *
     * @type {Date}
     * @memberof UpdatePartnerCommand
     */
    dateOfBirth?: Date;
    /**
     *
     * @type {Array<UserLanguageViewModel>}
     * @memberof UpdatePartnerCommand
     */
    languages?: Array<UserLanguageViewModel>;
    /**
     *
     * @type {Array<UserLocationViewModel>}
     * @memberof UpdatePartnerCommand
     */
    locations?: Array<UserLocationViewModel>;
}
/**
 *
 * @export
 * @interface UpdatePatientCommand
 */
export interface UpdatePatientCommand {
    /**
     *
     * @type {string}
     * @memberof UpdatePatientCommand
     */
    firstName?: string;
    /**
     *
     * @type {string}
     * @memberof UpdatePatientCommand
     */
    lastName?: string;
    /**
     *
     * @type {string}
     * @memberof UpdatePatientCommand
     */
    photo?: string;
    /**
     *
     * @type {string}
     * @memberof UpdatePatientCommand
     */
    photoThumbnail?: string;
    /**
     *
     * @type {Gender}
     * @memberof UpdatePatientCommand
     */
    gender?: Gender;
    /**
     *
     * @type {Date}
     * @memberof UpdatePatientCommand
     */
    dateOfBirth?: Date;
    /**
     *
     * @type {Array<UserLanguageViewModel>}
     * @memberof UpdatePatientCommand
     */
    languages?: Array<UserLanguageViewModel>;
    /**
     *
     * @type {Array<UserLocationViewModel>}
     * @memberof UpdatePatientCommand
     */
    locations?: Array<UserLocationViewModel>;
}
/**
 *
 * @export
 * @interface UpdateQuestionCommand
 */
export interface UpdateQuestionCommand {
    /**
     *
     * @type {string}
     * @memberof UpdateQuestionCommand
     */
    title?: string;
    /**
     *
     * @type {string}
     * @memberof UpdateQuestionCommand
     */
    body?: string;
    /**
     *
     * @type {QuestionType}
     * @memberof UpdateQuestionCommand
     */
    questionType?: QuestionType;
    /**
     *
     * @type {QuestionStatus}
     * @memberof UpdateQuestionCommand
     */
    questionStatus?: QuestionStatus;
    /**
     *
     * @type {Array<MediaViewModel>}
     * @memberof UpdateQuestionCommand
     */
    medias?: Array<MediaViewModel>;
}
/**
 *
 * @export
 * @interface UpdateQuestionCommentCommand
 */
export interface UpdateQuestionCommentCommand {
    /**
     *
     * @type {string}
     * @memberof UpdateQuestionCommentCommand
     */
    body?: string;
    /**
     *
     * @type {Array<MediaViewModel>}
     * @memberof UpdateQuestionCommentCommand
     */
    medias?: Array<MediaViewModel>;
}
/**
 *
 * @export
 * @interface UpdateServiceCategoryCommand
 */
export interface UpdateServiceCategoryCommand {
    /**
     *
     * @type {number}
     * @memberof UpdateServiceCategoryCommand
     */
    order?: number;
    /**
     *
     * @type {Array<string>}
     * @memberof UpdateServiceCategoryCommand
     */
    selectedServices?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof UpdateServiceCategoryCommand
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof UpdateServiceCategoryCommand
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof UpdateServiceCategoryCommand
     */
    normalizedName?: string;
    /**
     *
     * @type {string}
     * @memberof UpdateServiceCategoryCommand
     */
    description?: string;
    /**
     *
     * @type {number}
     * @memberof UpdateServiceCategoryCommand
     */
    serviceCount?: number;
    /**
     *
     * @type {Array<ServiceItemViewModel>}
     * @memberof UpdateServiceCategoryCommand
     */
    services?: Array<ServiceItemViewModel>;
}
/**
 *
 * @export
 * @interface UpdateServiceCommand
 */
export interface UpdateServiceCommand {
    /**
     *
     * @type {string}
     * @memberof UpdateServiceCommand
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof UpdateServiceCommand
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof UpdateServiceCommand
     */
    hospitalName?: string;
    /**
     *
     * @type {string}
     * @memberof UpdateServiceCommand
     */
    specialtyTypeId?: string;
    /**
     *
     * @type {string}
     * @memberof UpdateServiceCommand
     */
    specialtyTypeName?: string;
    /**
     *
     * @type {string}
     * @memberof UpdateServiceCommand
     */
    specialtyName?: string;
    /**
     *
     * @type {MarketingType}
     * @memberof UpdateServiceCommand
     */
    marketingType?: MarketingType;
    /**
     *
     * @type {Procedure}
     * @memberof UpdateServiceCommand
     */
    procedure?: Procedure;
    /**
     *
     * @type {number}
     * @memberof UpdateServiceCommand
     */
    minPrice?: number;
    /**
     *
     * @type {number}
     * @memberof UpdateServiceCommand
     */
    maxPrice?: number;
    /**
     *
     * @type {boolean}
     * @memberof UpdateServiceCommand
     */
    priceReuqest?: boolean;
    /**
     *
     * @type {number}
     * @memberof UpdateServiceCommand
     */
    order?: number;
    /**
     *
     * @type {AuditableEntity}
     * @memberof UpdateServiceCommand
     */
    auditableEntity?: AuditableEntity;
}
/**
 *
 * @export
 * @interface UpdateServiceSequenceCommand
 */
export interface UpdateServiceSequenceCommand {
    /**
     *
     * @type {Array<string>}
     * @memberof UpdateServiceSequenceCommand
     */
    serviceSequence?: Array<string>;
}
/**
 *
 * @export
 * @interface UpdateSpecialtyCommand
 */
export interface UpdateSpecialtyCommand {
    /**
     *
     * @type {string}
     * @memberof UpdateSpecialtyCommand
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof UpdateSpecialtyCommand
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof UpdateSpecialtyCommand
     */
    specialtyTypeId?: string;
    /**
     *
     * @type {string}
     * @memberof UpdateSpecialtyCommand
     */
    specialtyTypeName?: string;
    /**
     *
     * @type {AuditableEntity}
     * @memberof UpdateSpecialtyCommand
     */
    auditableEntity?: AuditableEntity;
}
/**
 *
 * @export
 * @interface UpdateSpecialtyTypeCategoryCommand
 */
export interface UpdateSpecialtyTypeCategoryCommand {
    /**
     *
     * @type {number}
     * @memberof UpdateSpecialtyTypeCategoryCommand
     */
    order?: number;
    /**
     *
     * @type {Array<string>}
     * @memberof UpdateSpecialtyTypeCategoryCommand
     */
    selectedSpecialtyTypes?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof UpdateSpecialtyTypeCategoryCommand
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof UpdateSpecialtyTypeCategoryCommand
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof UpdateSpecialtyTypeCategoryCommand
     */
    description?: string;
    /**
     *
     * @type {number}
     * @memberof UpdateSpecialtyTypeCategoryCommand
     */
    specialtyTypeCount?: number;
    /**
     *
     * @type {Array<SpecialtyTypeItemViewModel>}
     * @memberof UpdateSpecialtyTypeCategoryCommand
     */
    specialtyTypes?: Array<SpecialtyTypeItemViewModel>;
}
/**
 *
 * @export
 * @interface UpdateSpecialtyTypeCommand
 */
export interface UpdateSpecialtyTypeCommand {
    /**
     *
     * @type {string}
     * @memberof UpdateSpecialtyTypeCommand
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof UpdateSpecialtyTypeCommand
     */
    description?: string;
    /**
     *
     * @type {MarketingType}
     * @memberof UpdateSpecialtyTypeCommand
     */
    marketingType?: MarketingType;
    /**
     *
     * @type {number}
     * @memberof UpdateSpecialtyTypeCommand
     */
    specialtyCount?: number;
    /**
     *
     * @type {number}
     * @memberof UpdateSpecialtyTypeCommand
     */
    hospitalSpecialtyCount?: number;
    /**
     *
     * @type {number}
     * @memberof UpdateSpecialtyTypeCommand
     */
    serviceCount?: number;
    /**
     *
     * @type {Date}
     * @memberof UpdateSpecialtyTypeCommand
     */
    created?: Date;
}
/**
 *
 * @export
 * @interface UpdateYoutubeCommand
 */
export interface UpdateYoutubeCommand {
    /**
     *
     * @type {string}
     * @memberof UpdateYoutubeCommand
     */
    title?: string;
    /**
     *
     * @type {string}
     * @memberof UpdateYoutubeCommand
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof UpdateYoutubeCommand
     */
    url?: string;
    /**
     *
     * @type {Array<YoutubeTagItemViewModel>}
     * @memberof UpdateYoutubeCommand
     */
    youtubeTags?: Array<YoutubeTagItemViewModel>;
    /**
     *
     * @type {MarketingType}
     * @memberof UpdateYoutubeCommand
     */
    marketingType?: MarketingType;
}
/**
 *
 * @export
 * @interface User
 */
export interface User {
    /**
     *
     * @type {string}
     * @memberof User
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    userName?: string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    email?: string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    firstName?: string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    lastName?: string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    normalizedName?: string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    phone?: string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    photo?: string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    photoThumbnail?: string;
    /**
     *
     * @type {Gender}
     * @memberof User
     */
    gender?: Gender;
    /**
     *
     * @type {Date}
     * @memberof User
     */
    dateOfBirth?: Date;
    /**
     *
     * @type {string}
     * @memberof User
     */
    timeZone?: string;
    /**
     *
     * @type {Array<Device>}
     * @memberof User
     */
    devices?: Array<Device>;
    /**
     *
     * @type {Array<Article>}
     * @memberof User
     */
    articles?: Array<Article>;
    /**
     *
     * @type {Array<QuestionComment>}
     * @memberof User
     */
    questionComments?: Array<QuestionComment>;
    /**
     *
     * @type {Array<UserLocation>}
     * @memberof User
     */
    locations?: Array<UserLocation>;
    /**
     *
     * @type {Array<UserLanguage>}
     * @memberof User
     */
    languages?: Array<UserLanguage>;
    /**
     *
     * @type {AuditableEntity}
     * @memberof User
     */
    auditableEntity?: AuditableEntity;
}
/**
 *
 * @export
 * @interface UserItemViewModel
 */
export interface UserItemViewModel {
    /**
     *
     * @type {string}
     * @memberof UserItemViewModel
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof UserItemViewModel
     */
    userName?: string;
    /**
     *
     * @type {string}
     * @memberof UserItemViewModel
     */
    firstName?: string;
    /**
     *
     * @type {string}
     * @memberof UserItemViewModel
     */
    lastName?: string;
    /**
     *
     * @type {string}
     * @memberof UserItemViewModel
     */
    fullname?: string;
    /**
     *
     * @type {string}
     * @memberof UserItemViewModel
     */
    phone?: string;
    /**
     *
     * @type {string}
     * @memberof UserItemViewModel
     */
    email?: string;
    /**
     *
     * @type {string}
     * @memberof UserItemViewModel
     */
    photo?: string;
    /**
     *
     * @type {string}
     * @memberof UserItemViewModel
     */
    photoThumbnail?: string;
    /**
     *
     * @type {Gender}
     * @memberof UserItemViewModel
     */
    gender?: Gender;
    /**
     *
     * @type {Date}
     * @memberof UserItemViewModel
     */
    dateOfBirth?: Date;
    /**
     *
     * @type {AuditableEntity}
     * @memberof UserItemViewModel
     */
    auditableEntity?: AuditableEntity;
}
/**
 *
 * @export
 * @interface UserLanguage
 */
export interface UserLanguage {
    /**
     *
     * @type {string}
     * @memberof UserLanguage
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof UserLanguage
     */
    language?: string;
}
/**
 *
 * @export
 * @interface UserLanguageViewModel
 */
export interface UserLanguageViewModel {
    /**
     *
     * @type {string}
     * @memberof UserLanguageViewModel
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof UserLanguageViewModel
     */
    language?: string;
}
/**
 *
 * @export
 * @interface UserLocation
 */
export interface UserLocation {
    /**
     *
     * @type {string}
     * @memberof UserLocation
     */
    country?: string;
    /**
     *
     * @type {string}
     * @memberof UserLocation
     */
    state?: string;
    /**
     *
     * @type {string}
     * @memberof UserLocation
     */
    county?: string;
    /**
     *
     * @type {string}
     * @memberof UserLocation
     */
    city?: string;
    /**
     *
     * @type {string}
     * @memberof UserLocation
     */
    zipCode?: string;
    /**
     *
     * @type {string}
     * @memberof UserLocation
     */
    address?: string;
    /**
     *
     * @type {UserLocationType}
     * @memberof UserLocation
     */
    locationType?: UserLocationType;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum UserLocationType {
    LivesIn = "LivesIn",
    BirthPlace = "BirthPlace"
}
/**
 *
 * @export
 * @interface UserLocationViewModel
 */
export interface UserLocationViewModel {
    /**
     *
     * @type {UserLocationType}
     * @memberof UserLocationViewModel
     */
    locationType?: UserLocationType;
    /**
     *
     * @type {number}
     * @memberof UserLocationViewModel
     */
    latitude?: number;
    /**
     *
     * @type {number}
     * @memberof UserLocationViewModel
     */
    longitude?: number;
    /**
     *
     * @type {string}
     * @memberof UserLocationViewModel
     */
    country?: string;
    /**
     *
     * @type {string}
     * @memberof UserLocationViewModel
     */
    state?: string;
    /**
     *
     * @type {string}
     * @memberof UserLocationViewModel
     */
    county?: string;
    /**
     *
     * @type {string}
     * @memberof UserLocationViewModel
     */
    city?: string;
    /**
     *
     * @type {string}
     * @memberof UserLocationViewModel
     */
    zipCode?: string;
    /**
     *
     * @type {string}
     * @memberof UserLocationViewModel
     */
    address?: string;
}
/**
 *
 * @export
 * @interface UserViewModel
 */
export interface UserViewModel {
    /**
     *
     * @type {string}
     * @memberof UserViewModel
     */
    userType?: string;
    /**
     *
     * @type {Array<UserLanguageViewModel>}
     * @memberof UserViewModel
     */
    languages?: Array<UserLanguageViewModel>;
    /**
     *
     * @type {Array<UserLocationViewModel>}
     * @memberof UserViewModel
     */
    locations?: Array<UserLocationViewModel>;
    /**
     *
     * @type {string}
     * @memberof UserViewModel
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof UserViewModel
     */
    userName?: string;
    /**
     *
     * @type {string}
     * @memberof UserViewModel
     */
    firstName?: string;
    /**
     *
     * @type {string}
     * @memberof UserViewModel
     */
    lastName?: string;
    /**
     *
     * @type {string}
     * @memberof UserViewModel
     */
    fullname?: string;
    /**
     *
     * @type {string}
     * @memberof UserViewModel
     */
    phone?: string;
    /**
     *
     * @type {string}
     * @memberof UserViewModel
     */
    email?: string;
    /**
     *
     * @type {string}
     * @memberof UserViewModel
     */
    photo?: string;
    /**
     *
     * @type {string}
     * @memberof UserViewModel
     */
    photoThumbnail?: string;
    /**
     *
     * @type {Gender}
     * @memberof UserViewModel
     */
    gender?: Gender;
    /**
     *
     * @type {Date}
     * @memberof UserViewModel
     */
    dateOfBirth?: Date;
    /**
     *
     * @type {AuditableEntity}
     * @memberof UserViewModel
     */
    auditableEntity?: AuditableEntity;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum VendorType {
    Stripe = "Stripe",
    WeChat = "WeChat"
}
/**
 *
 * @export
 * @interface Youtube
 */
export interface Youtube {
    /**
     *
     * @type {string}
     * @memberof Youtube
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof Youtube
     */
    title?: string;
    /**
     *
     * @type {string}
     * @memberof Youtube
     */
    normalizedTitle?: string;
    /**
     *
     * @type {string}
     * @memberof Youtube
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof Youtube
     */
    url?: string;
    /**
     *
     * @type {Array<YoutubeTag>}
     * @memberof Youtube
     */
    youtubeTags?: Array<YoutubeTag>;
    /**
     *
     * @type {MarketingType}
     * @memberof Youtube
     */
    marketingType?: MarketingType;
    /**
     *
     * @type {AuditableEntity}
     * @memberof Youtube
     */
    auditableEntity?: AuditableEntity;
}
/**
 *
 * @export
 * @interface YoutubeItemViewModel
 */
export interface YoutubeItemViewModel {
    /**
     *
     * @type {string}
     * @memberof YoutubeItemViewModel
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof YoutubeItemViewModel
     */
    title?: string;
    /**
     *
     * @type {string}
     * @memberof YoutubeItemViewModel
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof YoutubeItemViewModel
     */
    url?: string;
    /**
     *
     * @type {Array<YoutubeTagItemViewModel>}
     * @memberof YoutubeItemViewModel
     */
    youtubeTags?: Array<YoutubeTagItemViewModel>;
    /**
     *
     * @type {MarketingType}
     * @memberof YoutubeItemViewModel
     */
    marketingType?: MarketingType;
    /**
     *
     * @type {AuditableEntity}
     * @memberof YoutubeItemViewModel
     */
    auditableEntity?: AuditableEntity;
}
/**
 *
 * @export
 * @interface YoutubeTag
 */
export interface YoutubeTag {
    /**
     *
     * @type {string}
     * @memberof YoutubeTag
     */
    youtubeId?: string;
    /**
     *
     * @type {Youtube}
     * @memberof YoutubeTag
     */
    youtube?: Youtube;
    /**
     *
     * @type {string}
     * @memberof YoutubeTag
     */
    tagId?: string;
    /**
     *
     * @type {Tag}
     * @memberof YoutubeTag
     */
    tag?: Tag;
    /**
     *
     * @type {number}
     * @memberof YoutubeTag
     */
    order?: number;
}
/**
 *
 * @export
 * @interface YoutubeTagItemViewModel
 */
export interface YoutubeTagItemViewModel {
    /**
     *
     * @type {string}
     * @memberof YoutubeTagItemViewModel
     */
    youtubeId?: string;
    /**
     *
     * @type {string}
     * @memberof YoutubeTagItemViewModel
     */
    tagId?: string;
    /**
     *
     * @type {number}
     * @memberof YoutubeTagItemViewModel
     */
    order?: number;
}
/**
 *
 * @export
 * @interface YoutubeViewModel
 */
export interface YoutubeViewModel {
    /**
     *
     * @type {string}
     * @memberof YoutubeViewModel
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof YoutubeViewModel
     */
    title?: string;
    /**
     *
     * @type {string}
     * @memberof YoutubeViewModel
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof YoutubeViewModel
     */
    url?: string;
    /**
     *
     * @type {Array<YoutubeTagItemViewModel>}
     * @memberof YoutubeViewModel
     */
    youtubeTags?: Array<YoutubeTagItemViewModel>;
    /**
     *
     * @type {MarketingType}
     * @memberof YoutubeViewModel
     */
    marketingType?: MarketingType;
    /**
     *
     * @type {AuditableEntity}
     * @memberof YoutubeViewModel
     */
    auditableEntity?: AuditableEntity;
}
/**
 *
 * @export
 * @interface YoutubesViewModel
 */
export interface YoutubesViewModel {
    /**
     *
     * @type {Array<YoutubeItemViewModel>}
     * @memberof YoutubesViewModel
     */
    items?: Array<YoutubeItemViewModel>;
    /**
     *
     * @type {PagedListMetaData}
     * @memberof YoutubesViewModel
     */
    metaData?: PagedListMetaData;
}
/**
 * AffiliationsApi - axios parameter creator
 * @export
 */
export declare const AffiliationsApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Sample request:        DELETE /api/v1/hospitals/1/doctors/1
     * @summary Remove link between the doctor and the hospital.
     * @param {string} hospitalId
     * @param {string} doctorId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsHospitalIdDoctorsDoctorIdDelete(hospitalId: string, doctorId: string, options?: any): RequestArgs;
    /**
     * Sample request:        POST /api/v1/hospitals/1/doctors/1
     * @summary Link a doctor to a hospital.
     * @param {string} hospitalId
     * @param {string} doctorId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsHospitalIdDoctorsDoctorIdPost(hospitalId: string, doctorId: string, options?: any): RequestArgs;
    /**
     * Sample request:        DELETE /api/v1/hospitals/1/managers/1
     * @summary Remove link between the manager and the hospital.
     * @param {string} hospitalId
     * @param {string} managerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsHospitalIdManagersManagerIdDelete(hospitalId: string, managerId: string, options?: any): RequestArgs;
    /**
     * Sample request:        POST /api/v1/hospitals/1/managers/1
     * @summary Link a manager to a hospital.
     * @param {string} hospitalId
     * @param {string} managerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsHospitalIdManagersManagerIdPost(hospitalId: string, managerId: string, options?: any): RequestArgs;
};
/**
 * AffiliationsApi - functional programming interface
 * @export
 */
export declare const AffiliationsApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Sample request:        DELETE /api/v1/hospitals/1/doctors/1
     * @summary Remove link between the doctor and the hospital.
     * @param {string} hospitalId
     * @param {string} doctorId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsHospitalIdDoctorsDoctorIdDelete(hospitalId: string, doctorId: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<boolean>;
    /**
     * Sample request:        POST /api/v1/hospitals/1/doctors/1
     * @summary Link a doctor to a hospital.
     * @param {string} hospitalId
     * @param {string} doctorId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsHospitalIdDoctorsDoctorIdPost(hospitalId: string, doctorId: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<DoctorAffiliationViewModel>;
    /**
     * Sample request:        DELETE /api/v1/hospitals/1/managers/1
     * @summary Remove link between the manager and the hospital.
     * @param {string} hospitalId
     * @param {string} managerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsHospitalIdManagersManagerIdDelete(hospitalId: string, managerId: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<boolean>;
    /**
     * Sample request:        POST /api/v1/hospitals/1/managers/1
     * @summary Link a manager to a hospital.
     * @param {string} hospitalId
     * @param {string} managerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsHospitalIdManagersManagerIdPost(hospitalId: string, managerId: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<ManagerAffiliationViewModel>;
};
/**
 * AffiliationsApi - factory interface
 * @export
 */
export declare const AffiliationsApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * Sample request:        DELETE /api/v1/hospitals/1/doctors/1
     * @summary Remove link between the doctor and the hospital.
     * @param {string} hospitalId
     * @param {string} doctorId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsHospitalIdDoctorsDoctorIdDelete(hospitalId: string, doctorId: string, options?: any): AxiosPromise<boolean>;
    /**
     * Sample request:        POST /api/v1/hospitals/1/doctors/1
     * @summary Link a doctor to a hospital.
     * @param {string} hospitalId
     * @param {string} doctorId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsHospitalIdDoctorsDoctorIdPost(hospitalId: string, doctorId: string, options?: any): AxiosPromise<DoctorAffiliationViewModel>;
    /**
     * Sample request:        DELETE /api/v1/hospitals/1/managers/1
     * @summary Remove link between the manager and the hospital.
     * @param {string} hospitalId
     * @param {string} managerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsHospitalIdManagersManagerIdDelete(hospitalId: string, managerId: string, options?: any): AxiosPromise<boolean>;
    /**
     * Sample request:        POST /api/v1/hospitals/1/managers/1
     * @summary Link a manager to a hospital.
     * @param {string} hospitalId
     * @param {string} managerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsHospitalIdManagersManagerIdPost(hospitalId: string, managerId: string, options?: any): AxiosPromise<ManagerAffiliationViewModel>;
};
/**
 * AffiliationsApi - object-oriented interface
 * @export
 * @class AffiliationsApi
 * @extends {BaseAPI}
 */
export declare class AffiliationsApi extends BaseAPI {
    /**
     * Sample request:        DELETE /api/v1/hospitals/1/doctors/1
     * @summary Remove link between the doctor and the hospital.
     * @param {string} hospitalId
     * @param {string} doctorId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AffiliationsApi
     */
    apiV1HospitalsHospitalIdDoctorsDoctorIdDelete(hospitalId: string, doctorId: string, options?: any): AxiosPromise<boolean>;
    /**
     * Sample request:        POST /api/v1/hospitals/1/doctors/1
     * @summary Link a doctor to a hospital.
     * @param {string} hospitalId
     * @param {string} doctorId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AffiliationsApi
     */
    apiV1HospitalsHospitalIdDoctorsDoctorIdPost(hospitalId: string, doctorId: string, options?: any): AxiosPromise<DoctorAffiliationViewModel>;
    /**
     * Sample request:        DELETE /api/v1/hospitals/1/managers/1
     * @summary Remove link between the manager and the hospital.
     * @param {string} hospitalId
     * @param {string} managerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AffiliationsApi
     */
    apiV1HospitalsHospitalIdManagersManagerIdDelete(hospitalId: string, managerId: string, options?: any): AxiosPromise<boolean>;
    /**
     * Sample request:        POST /api/v1/hospitals/1/managers/1
     * @summary Link a manager to a hospital.
     * @param {string} hospitalId
     * @param {string} managerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AffiliationsApi
     */
    apiV1HospitalsHospitalIdManagersManagerIdPost(hospitalId: string, managerId: string, options?: any): AxiosPromise<ManagerAffiliationViewModel>;
}
/**
 * ArticlesApi - axios parameter creator
 * @export
 */
export declare const ArticlesApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Sample request:        GET /api/v1/hospitals/1/articles
     * @summary Get all articles.
     * @param {string} [id]
     * @param {string} [title]
     * @param {string} [description]
     * @param {object} [status]
     * @param {object} [marketingType]
     * @param {string} [userId]
     * @param {string} [userName]
     * @param {string} [hospitalId]
     * @param {string} [hospitalName]
     * @param {string} [countryId]
     * @param {string} [tag]
     * @param {string} [exceptHospitalId]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsArticlesGet(id?: string | undefined, title?: string | undefined, description?: string | undefined, status?: object | undefined, marketingType?: object | undefined, userId?: string | undefined, userName?: string | undefined, hospitalId?: string | undefined, hospitalName?: string | undefined, countryId?: string | undefined, tag?: string | undefined, exceptHospitalId?: string | undefined, page?: number | undefined, limit?: number | undefined, lastRetrieved?: Date | undefined, current?: boolean | undefined, options?: any): RequestArgs;
    /**
     * Sample request:        DELETE /api/v1/hospitals/1/articles/1
     * @summary Delete article.
     * @param {string} hospitalId
     * @param {string} articleId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsHospitalIdArticlesArticleIdDelete(hospitalId: string, articleId: string, options?: any): RequestArgs;
    /**
     * Sample request:        GET /api/v1/hospitals/1/articles/1
     * @summary Get article.
     * @param {string} hospitalId
     * @param {string} articleId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsHospitalIdArticlesArticleIdGet(hospitalId: string, articleId: string, options?: any): RequestArgs;
    /**
     * Sample request:        PUT /api/v1/hospitals/1/articles/1      {          \"title\": \"Samsung Hospital Article\",          \"description\": \"This is an article.\",          \"body\": \"updated article body here\",          \"status\": \"Draft\",          \"hospitalId\": 1,          \"tags\": [            {              \"value\": \"articletag1\",              \"order\": 0            },            {              \"value\": \"articletag2\",              \"order\": 0            }          ],          \"medias\": [            {              \"mediaType\": \"Photo\",              \"url\": \"string\",              \"thumbnailUrl\": \"string\",              \"description\": \"string\",              \"order\": 0            }          ]      }
     * @summary Update article.
     * @param {string} hospitalId
     * @param {string} articleId
     * @param {UpdateArticleCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsHospitalIdArticlesArticleIdPut(hospitalId: string, articleId: string, body?: UpdateArticleCommand | undefined, options?: any): RequestArgs;
    /**
     * Sample request:        POST /api/v1/hospitals/1/articles      {          \"title\": \"Samsung Hospital Article\",          \"description\": \"This is an article.\",          \"body\": \"article body here\",          \"status\": \"Draft\",          \"hospitalId\": 1,          \"tags\": [            {              \"value\": \"string\",              \"order\": 0              }          ],          \"medias\": [            {              \"mediaType\": \"Photo\",              \"url\": \"string\",              \"thumbnailUrl\": \"string\",              \"description\": \"string\",              \"order\": 0            }          ]      }
     * @summary Create an article.
     * @param {string} hospitalId
     * @param {CreateArticleCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsHospitalIdArticlesPost(hospitalId: string, body?: CreateArticleCommand | undefined, options?: any): RequestArgs;
};
/**
 * ArticlesApi - functional programming interface
 * @export
 */
export declare const ArticlesApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Sample request:        GET /api/v1/hospitals/1/articles
     * @summary Get all articles.
     * @param {string} [id]
     * @param {string} [title]
     * @param {string} [description]
     * @param {object} [status]
     * @param {object} [marketingType]
     * @param {string} [userId]
     * @param {string} [userName]
     * @param {string} [hospitalId]
     * @param {string} [hospitalName]
     * @param {string} [countryId]
     * @param {string} [tag]
     * @param {string} [exceptHospitalId]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsArticlesGet(id?: string | undefined, title?: string | undefined, description?: string | undefined, status?: object | undefined, marketingType?: object | undefined, userId?: string | undefined, userName?: string | undefined, hospitalId?: string | undefined, hospitalName?: string | undefined, countryId?: string | undefined, tag?: string | undefined, exceptHospitalId?: string | undefined, page?: number | undefined, limit?: number | undefined, lastRetrieved?: Date | undefined, current?: boolean | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<ArticlesViewModel>;
    /**
     * Sample request:        DELETE /api/v1/hospitals/1/articles/1
     * @summary Delete article.
     * @param {string} hospitalId
     * @param {string} articleId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsHospitalIdArticlesArticleIdDelete(hospitalId: string, articleId: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<boolean>;
    /**
     * Sample request:        GET /api/v1/hospitals/1/articles/1
     * @summary Get article.
     * @param {string} hospitalId
     * @param {string} articleId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsHospitalIdArticlesArticleIdGet(hospitalId: string, articleId: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<ArticleViewModel>;
    /**
     * Sample request:        PUT /api/v1/hospitals/1/articles/1      {          \"title\": \"Samsung Hospital Article\",          \"description\": \"This is an article.\",          \"body\": \"updated article body here\",          \"status\": \"Draft\",          \"hospitalId\": 1,          \"tags\": [            {              \"value\": \"articletag1\",              \"order\": 0            },            {              \"value\": \"articletag2\",              \"order\": 0            }          ],          \"medias\": [            {              \"mediaType\": \"Photo\",              \"url\": \"string\",              \"thumbnailUrl\": \"string\",              \"description\": \"string\",              \"order\": 0            }          ]      }
     * @summary Update article.
     * @param {string} hospitalId
     * @param {string} articleId
     * @param {UpdateArticleCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsHospitalIdArticlesArticleIdPut(hospitalId: string, articleId: string, body?: UpdateArticleCommand | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<boolean>;
    /**
     * Sample request:        POST /api/v1/hospitals/1/articles      {          \"title\": \"Samsung Hospital Article\",          \"description\": \"This is an article.\",          \"body\": \"article body here\",          \"status\": \"Draft\",          \"hospitalId\": 1,          \"tags\": [            {              \"value\": \"string\",              \"order\": 0              }          ],          \"medias\": [            {              \"mediaType\": \"Photo\",              \"url\": \"string\",              \"thumbnailUrl\": \"string\",              \"description\": \"string\",              \"order\": 0            }          ]      }
     * @summary Create an article.
     * @param {string} hospitalId
     * @param {CreateArticleCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsHospitalIdArticlesPost(hospitalId: string, body?: CreateArticleCommand | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<string>;
};
/**
 * ArticlesApi - factory interface
 * @export
 */
export declare const ArticlesApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * Sample request:        GET /api/v1/hospitals/1/articles
     * @summary Get all articles.
     * @param {string} [id]
     * @param {string} [title]
     * @param {string} [description]
     * @param {object} [status]
     * @param {object} [marketingType]
     * @param {string} [userId]
     * @param {string} [userName]
     * @param {string} [hospitalId]
     * @param {string} [hospitalName]
     * @param {string} [countryId]
     * @param {string} [tag]
     * @param {string} [exceptHospitalId]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsArticlesGet(id?: string | undefined, title?: string | undefined, description?: string | undefined, status?: object | undefined, marketingType?: object | undefined, userId?: string | undefined, userName?: string | undefined, hospitalId?: string | undefined, hospitalName?: string | undefined, countryId?: string | undefined, tag?: string | undefined, exceptHospitalId?: string | undefined, page?: number | undefined, limit?: number | undefined, lastRetrieved?: Date | undefined, current?: boolean | undefined, options?: any): AxiosPromise<ArticlesViewModel>;
    /**
     * Sample request:        DELETE /api/v1/hospitals/1/articles/1
     * @summary Delete article.
     * @param {string} hospitalId
     * @param {string} articleId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsHospitalIdArticlesArticleIdDelete(hospitalId: string, articleId: string, options?: any): AxiosPromise<boolean>;
    /**
     * Sample request:        GET /api/v1/hospitals/1/articles/1
     * @summary Get article.
     * @param {string} hospitalId
     * @param {string} articleId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsHospitalIdArticlesArticleIdGet(hospitalId: string, articleId: string, options?: any): AxiosPromise<ArticleViewModel>;
    /**
     * Sample request:        PUT /api/v1/hospitals/1/articles/1      {          \"title\": \"Samsung Hospital Article\",          \"description\": \"This is an article.\",          \"body\": \"updated article body here\",          \"status\": \"Draft\",          \"hospitalId\": 1,          \"tags\": [            {              \"value\": \"articletag1\",              \"order\": 0            },            {              \"value\": \"articletag2\",              \"order\": 0            }          ],          \"medias\": [            {              \"mediaType\": \"Photo\",              \"url\": \"string\",              \"thumbnailUrl\": \"string\",              \"description\": \"string\",              \"order\": 0            }          ]      }
     * @summary Update article.
     * @param {string} hospitalId
     * @param {string} articleId
     * @param {UpdateArticleCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsHospitalIdArticlesArticleIdPut(hospitalId: string, articleId: string, body?: UpdateArticleCommand | undefined, options?: any): AxiosPromise<boolean>;
    /**
     * Sample request:        POST /api/v1/hospitals/1/articles      {          \"title\": \"Samsung Hospital Article\",          \"description\": \"This is an article.\",          \"body\": \"article body here\",          \"status\": \"Draft\",          \"hospitalId\": 1,          \"tags\": [            {              \"value\": \"string\",              \"order\": 0              }          ],          \"medias\": [            {              \"mediaType\": \"Photo\",              \"url\": \"string\",              \"thumbnailUrl\": \"string\",              \"description\": \"string\",              \"order\": 0            }          ]      }
     * @summary Create an article.
     * @param {string} hospitalId
     * @param {CreateArticleCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsHospitalIdArticlesPost(hospitalId: string, body?: CreateArticleCommand | undefined, options?: any): AxiosPromise<string>;
};
/**
 * ArticlesApi - object-oriented interface
 * @export
 * @class ArticlesApi
 * @extends {BaseAPI}
 */
export declare class ArticlesApi extends BaseAPI {
    /**
     * Sample request:        GET /api/v1/hospitals/1/articles
     * @summary Get all articles.
     * @param {string} [id]
     * @param {string} [title]
     * @param {string} [description]
     * @param {object} [status]
     * @param {object} [marketingType]
     * @param {string} [userId]
     * @param {string} [userName]
     * @param {string} [hospitalId]
     * @param {string} [hospitalName]
     * @param {string} [countryId]
     * @param {string} [tag]
     * @param {string} [exceptHospitalId]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticlesApi
     */
    apiV1HospitalsArticlesGet(id?: string, title?: string, description?: string, status?: object, marketingType?: object, userId?: string, userName?: string, hospitalId?: string, hospitalName?: string, countryId?: string, tag?: string, exceptHospitalId?: string, page?: number, limit?: number, lastRetrieved?: Date, current?: boolean, options?: any): AxiosPromise<ArticlesViewModel>;
    /**
     * Sample request:        DELETE /api/v1/hospitals/1/articles/1
     * @summary Delete article.
     * @param {string} hospitalId
     * @param {string} articleId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticlesApi
     */
    apiV1HospitalsHospitalIdArticlesArticleIdDelete(hospitalId: string, articleId: string, options?: any): AxiosPromise<boolean>;
    /**
     * Sample request:        GET /api/v1/hospitals/1/articles/1
     * @summary Get article.
     * @param {string} hospitalId
     * @param {string} articleId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticlesApi
     */
    apiV1HospitalsHospitalIdArticlesArticleIdGet(hospitalId: string, articleId: string, options?: any): AxiosPromise<ArticleViewModel>;
    /**
     * Sample request:        PUT /api/v1/hospitals/1/articles/1      {          \"title\": \"Samsung Hospital Article\",          \"description\": \"This is an article.\",          \"body\": \"updated article body here\",          \"status\": \"Draft\",          \"hospitalId\": 1,          \"tags\": [            {              \"value\": \"articletag1\",              \"order\": 0            },            {              \"value\": \"articletag2\",              \"order\": 0            }          ],          \"medias\": [            {              \"mediaType\": \"Photo\",              \"url\": \"string\",              \"thumbnailUrl\": \"string\",              \"description\": \"string\",              \"order\": 0            }          ]      }
     * @summary Update article.
     * @param {string} hospitalId
     * @param {string} articleId
     * @param {UpdateArticleCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticlesApi
     */
    apiV1HospitalsHospitalIdArticlesArticleIdPut(hospitalId: string, articleId: string, body?: UpdateArticleCommand, options?: any): AxiosPromise<boolean>;
    /**
     * Sample request:        POST /api/v1/hospitals/1/articles      {          \"title\": \"Samsung Hospital Article\",          \"description\": \"This is an article.\",          \"body\": \"article body here\",          \"status\": \"Draft\",          \"hospitalId\": 1,          \"tags\": [            {              \"value\": \"string\",              \"order\": 0              }          ],          \"medias\": [            {              \"mediaType\": \"Photo\",              \"url\": \"string\",              \"thumbnailUrl\": \"string\",              \"description\": \"string\",              \"order\": 0            }          ]      }
     * @summary Create an article.
     * @param {string} hospitalId
     * @param {CreateArticleCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticlesApi
     */
    apiV1HospitalsHospitalIdArticlesPost(hospitalId: string, body?: CreateArticleCommand, options?: any): AxiosPromise<string>;
}
/**
 * BookingsApi - axios parameter creator
 * @export
 */
export declare const BookingsApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary Approve booking.
     * @param {string} bookingId
     * @param {ApproveBookingCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1BookingsBookingIdApprovePost(bookingId: string, body?: ApproveBookingCommand | undefined, options?: any): RequestArgs;
    /**
     *
     * @summary Cancel booking.
     * @param {string} bookingId
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1BookingsBookingIdCancelPost(bookingId: string, body?: object | undefined, options?: any): RequestArgs;
    /**
     *
     * @summary Delete booking.
     * @param {string} bookingId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1BookingsBookingIdDelete(bookingId: string, options?: any): RequestArgs;
    /**
     *
     * @summary Get booking.
     * @param {string} bookingId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1BookingsBookingIdGet(bookingId: string, options?: any): RequestArgs;
    /**
     *
     * @summary Update booking.
     * @param {string} bookingId
     * @param {UpdateBookingCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1BookingsBookingIdPut(bookingId: string, body?: UpdateBookingCommand | undefined, options?: any): RequestArgs;
    /**
     *
     * @summary Reject booking.
     * @param {string} bookingId
     * @param {RejectBookingCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1BookingsBookingIdRejectPost(bookingId: string, body?: RejectBookingCommand | undefined, options?: any): RequestArgs;
    /**
     *
     * @summary Get all bookings.
     * @param {string} [searchString]
     * @param {boolean} [isOpen]
     * @param {boolean} [isCompleted]
     * @param {object} [status]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1BookingsGet(searchString?: string | undefined, isOpen?: boolean | undefined, isCompleted?: boolean | undefined, status?: object | undefined, page?: number | undefined, limit?: number | undefined, lastRetrieved?: Date | undefined, current?: boolean | undefined, options?: any): RequestArgs;
    /**
     *
     * @summary Create booking.
     * @param {CreateBookingCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1BookingsPost(body?: CreateBookingCommand | undefined, options?: any): RequestArgs;
};
/**
 * BookingsApi - functional programming interface
 * @export
 */
export declare const BookingsApiFp: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary Approve booking.
     * @param {string} bookingId
     * @param {ApproveBookingCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1BookingsBookingIdApprovePost(bookingId: string, body?: ApproveBookingCommand | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<boolean>;
    /**
     *
     * @summary Cancel booking.
     * @param {string} bookingId
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1BookingsBookingIdCancelPost(bookingId: string, body?: object | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<boolean>;
    /**
     *
     * @summary Delete booking.
     * @param {string} bookingId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1BookingsBookingIdDelete(bookingId: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<boolean>;
    /**
     *
     * @summary Get booking.
     * @param {string} bookingId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1BookingsBookingIdGet(bookingId: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<BookingViewModel>;
    /**
     *
     * @summary Update booking.
     * @param {string} bookingId
     * @param {UpdateBookingCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1BookingsBookingIdPut(bookingId: string, body?: UpdateBookingCommand | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<boolean>;
    /**
     *
     * @summary Reject booking.
     * @param {string} bookingId
     * @param {RejectBookingCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1BookingsBookingIdRejectPost(bookingId: string, body?: RejectBookingCommand | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<boolean>;
    /**
     *
     * @summary Get all bookings.
     * @param {string} [searchString]
     * @param {boolean} [isOpen]
     * @param {boolean} [isCompleted]
     * @param {object} [status]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1BookingsGet(searchString?: string | undefined, isOpen?: boolean | undefined, isCompleted?: boolean | undefined, status?: object | undefined, page?: number | undefined, limit?: number | undefined, lastRetrieved?: Date | undefined, current?: boolean | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<BookingsViewModel>;
    /**
     *
     * @summary Create booking.
     * @param {CreateBookingCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1BookingsPost(body?: CreateBookingCommand | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<string>;
};
/**
 * BookingsApi - factory interface
 * @export
 */
export declare const BookingsApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     *
     * @summary Approve booking.
     * @param {string} bookingId
     * @param {ApproveBookingCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1BookingsBookingIdApprovePost(bookingId: string, body?: ApproveBookingCommand | undefined, options?: any): AxiosPromise<boolean>;
    /**
     *
     * @summary Cancel booking.
     * @param {string} bookingId
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1BookingsBookingIdCancelPost(bookingId: string, body?: object | undefined, options?: any): AxiosPromise<boolean>;
    /**
     *
     * @summary Delete booking.
     * @param {string} bookingId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1BookingsBookingIdDelete(bookingId: string, options?: any): AxiosPromise<boolean>;
    /**
     *
     * @summary Get booking.
     * @param {string} bookingId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1BookingsBookingIdGet(bookingId: string, options?: any): AxiosPromise<BookingViewModel>;
    /**
     *
     * @summary Update booking.
     * @param {string} bookingId
     * @param {UpdateBookingCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1BookingsBookingIdPut(bookingId: string, body?: UpdateBookingCommand | undefined, options?: any): AxiosPromise<boolean>;
    /**
     *
     * @summary Reject booking.
     * @param {string} bookingId
     * @param {RejectBookingCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1BookingsBookingIdRejectPost(bookingId: string, body?: RejectBookingCommand | undefined, options?: any): AxiosPromise<boolean>;
    /**
     *
     * @summary Get all bookings.
     * @param {string} [searchString]
     * @param {boolean} [isOpen]
     * @param {boolean} [isCompleted]
     * @param {object} [status]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1BookingsGet(searchString?: string | undefined, isOpen?: boolean | undefined, isCompleted?: boolean | undefined, status?: object | undefined, page?: number | undefined, limit?: number | undefined, lastRetrieved?: Date | undefined, current?: boolean | undefined, options?: any): AxiosPromise<BookingsViewModel>;
    /**
     *
     * @summary Create booking.
     * @param {CreateBookingCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1BookingsPost(body?: CreateBookingCommand | undefined, options?: any): AxiosPromise<string>;
};
/**
 * BookingsApi - object-oriented interface
 * @export
 * @class BookingsApi
 * @extends {BaseAPI}
 */
export declare class BookingsApi extends BaseAPI {
    /**
     *
     * @summary Approve booking.
     * @param {string} bookingId
     * @param {ApproveBookingCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookingsApi
     */
    apiV1BookingsBookingIdApprovePost(bookingId: string, body?: ApproveBookingCommand, options?: any): AxiosPromise<boolean>;
    /**
     *
     * @summary Cancel booking.
     * @param {string} bookingId
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookingsApi
     */
    apiV1BookingsBookingIdCancelPost(bookingId: string, body?: object, options?: any): AxiosPromise<boolean>;
    /**
     *
     * @summary Delete booking.
     * @param {string} bookingId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookingsApi
     */
    apiV1BookingsBookingIdDelete(bookingId: string, options?: any): AxiosPromise<boolean>;
    /**
     *
     * @summary Get booking.
     * @param {string} bookingId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookingsApi
     */
    apiV1BookingsBookingIdGet(bookingId: string, options?: any): AxiosPromise<BookingViewModel>;
    /**
     *
     * @summary Update booking.
     * @param {string} bookingId
     * @param {UpdateBookingCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookingsApi
     */
    apiV1BookingsBookingIdPut(bookingId: string, body?: UpdateBookingCommand, options?: any): AxiosPromise<boolean>;
    /**
     *
     * @summary Reject booking.
     * @param {string} bookingId
     * @param {RejectBookingCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookingsApi
     */
    apiV1BookingsBookingIdRejectPost(bookingId: string, body?: RejectBookingCommand, options?: any): AxiosPromise<boolean>;
    /**
     *
     * @summary Get all bookings.
     * @param {string} [searchString]
     * @param {boolean} [isOpen]
     * @param {boolean} [isCompleted]
     * @param {object} [status]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookingsApi
     */
    apiV1BookingsGet(searchString?: string, isOpen?: boolean, isCompleted?: boolean, status?: object, page?: number, limit?: number, lastRetrieved?: Date, current?: boolean, options?: any): AxiosPromise<BookingsViewModel>;
    /**
     *
     * @summary Create booking.
     * @param {CreateBookingCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookingsApi
     */
    apiV1BookingsPost(body?: CreateBookingCommand, options?: any): AxiosPromise<string>;
}
/**
 * CHAdminsApi - axios parameter creator
 * @export
 */
export declare const CHAdminsApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Sample request:        DELETE /api/v1/chadmins/1
     * @summary Delete cloud hospital admin user.
     * @param {string} chAdminId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ChadminsChAdminIdDelete(chAdminId: string, options?: any): RequestArgs;
    /**
     * Sample request:        GET /api/v1/chadmins/1
     * @summary Get cloud hospital admin user by id.
     * @param {string} chAdminId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ChadminsChAdminIdGet(chAdminId: string, options?: any): RequestArgs;
    /**
     * Sample request:        PUT /api/v1/chadmins/1      {          \"email\": \"adminupdate@icloudhospital.com\",          \"firstName\": \"Cloud\",          \"lastName\": \"Hospital\",          \"photo\": \"https://cloudhospitalblob.blob.core.windows.net/assets/Cloud_Hospital_Logo_blue.png\",          \"photoThumbnail\": \"https://cloudhospitalblob.blob.core.windows.net/assets/Cloud_Hospital_Logo_blue.png\",          \"gender\": \"NotSpecified\",          \"dateOfBirth\": \"2020-02-22T09:09:19.082Z\",          \"locations\": [              {                  \"locationType\": \"LivesIn\",                  \"latitude\": 0,                  \"longitude\": 0,                  \"country\": \"string\",                  \"state\": \"string\",                  \"county\": \"string\",                  \"city\": \"string\",                  \"zipCode\": \"string\",                  \"address\": \"string\"              }          ]      }
     * @summary Update cloud hospital admin user.
     * @param {string} chAdminId
     * @param {UpdateCHAdminCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ChadminsChAdminIdPut(chAdminId: string, body?: UpdateCHAdminCommand | undefined, options?: any): RequestArgs;
    /**
     * Sample request:        GET /api/v1/chadmin      {          \"pageQueryFilter\": {              \"page\": 1,              \"limit\": 20,              \"lastRetrived\": \"2020-02-05T08:40\"          },          \"searchString\": \"admin\"      }
     * @summary Get cloud hospital admin users.
     * @param {string} [id]
     * @param {string} [fullname]
     * @param {string} [email]
     * @param {object} [gender]
     * @param {Date} [dateOfBirth]
     * @param {Date} [created]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ChadminsGet(id?: string | undefined, fullname?: string | undefined, email?: string | undefined, gender?: object | undefined, dateOfBirth?: Date | undefined, created?: Date | undefined, page?: number | undefined, limit?: number | undefined, lastRetrieved?: Date | undefined, current?: boolean | undefined, options?: any): RequestArgs;
    /**
     * Sample request:        POST /api/v1/chadmins      {          \"firstName\": \"Cloud\",          \"lastName\": \"Hospital\",          \"photo\": \"https://cloudhospitalblob.blob.core.windows.net/assets/Cloud_Hospital_Logo_blue.png\",          \"photoThumbnail\": \"https://cloudhospitalblob.blob.core.windows.net/assets/Cloud_Hospital_Logo_blue.png\",          \"gender\": \"NotSpecified\",          \"dateOfBirth\": \"2020-02-22T09:09:19.082Z\",          \"locations\": [              {                  \"locationType\": \"LivesIn\",                  \"latitude\": 0,                  \"longitude\": 0,                  \"country\": \"string\",                  \"state\": \"string\",                  \"county\": \"string\",                  \"city\": \"string\",                  \"zipCode\": \"string\",                  \"address\": \"string\"              }          ]      }
     * @summary Create cloud hospital admin user.
     * @param {CreateCHAdminCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ChadminsPost(body?: CreateCHAdminCommand | undefined, options?: any): RequestArgs;
};
/**
 * CHAdminsApi - functional programming interface
 * @export
 */
export declare const CHAdminsApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Sample request:        DELETE /api/v1/chadmins/1
     * @summary Delete cloud hospital admin user.
     * @param {string} chAdminId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ChadminsChAdminIdDelete(chAdminId: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<boolean>;
    /**
     * Sample request:        GET /api/v1/chadmins/1
     * @summary Get cloud hospital admin user by id.
     * @param {string} chAdminId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ChadminsChAdminIdGet(chAdminId: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<CHAdminViewModel>;
    /**
     * Sample request:        PUT /api/v1/chadmins/1      {          \"email\": \"adminupdate@icloudhospital.com\",          \"firstName\": \"Cloud\",          \"lastName\": \"Hospital\",          \"photo\": \"https://cloudhospitalblob.blob.core.windows.net/assets/Cloud_Hospital_Logo_blue.png\",          \"photoThumbnail\": \"https://cloudhospitalblob.blob.core.windows.net/assets/Cloud_Hospital_Logo_blue.png\",          \"gender\": \"NotSpecified\",          \"dateOfBirth\": \"2020-02-22T09:09:19.082Z\",          \"locations\": [              {                  \"locationType\": \"LivesIn\",                  \"latitude\": 0,                  \"longitude\": 0,                  \"country\": \"string\",                  \"state\": \"string\",                  \"county\": \"string\",                  \"city\": \"string\",                  \"zipCode\": \"string\",                  \"address\": \"string\"              }          ]      }
     * @summary Update cloud hospital admin user.
     * @param {string} chAdminId
     * @param {UpdateCHAdminCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ChadminsChAdminIdPut(chAdminId: string, body?: UpdateCHAdminCommand | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<boolean>;
    /**
     * Sample request:        GET /api/v1/chadmin      {          \"pageQueryFilter\": {              \"page\": 1,              \"limit\": 20,              \"lastRetrived\": \"2020-02-05T08:40\"          },          \"searchString\": \"admin\"      }
     * @summary Get cloud hospital admin users.
     * @param {string} [id]
     * @param {string} [fullname]
     * @param {string} [email]
     * @param {object} [gender]
     * @param {Date} [dateOfBirth]
     * @param {Date} [created]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ChadminsGet(id?: string | undefined, fullname?: string | undefined, email?: string | undefined, gender?: object | undefined, dateOfBirth?: Date | undefined, created?: Date | undefined, page?: number | undefined, limit?: number | undefined, lastRetrieved?: Date | undefined, current?: boolean | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<CHAdminsViewModel>;
    /**
     * Sample request:        POST /api/v1/chadmins      {          \"firstName\": \"Cloud\",          \"lastName\": \"Hospital\",          \"photo\": \"https://cloudhospitalblob.blob.core.windows.net/assets/Cloud_Hospital_Logo_blue.png\",          \"photoThumbnail\": \"https://cloudhospitalblob.blob.core.windows.net/assets/Cloud_Hospital_Logo_blue.png\",          \"gender\": \"NotSpecified\",          \"dateOfBirth\": \"2020-02-22T09:09:19.082Z\",          \"locations\": [              {                  \"locationType\": \"LivesIn\",                  \"latitude\": 0,                  \"longitude\": 0,                  \"country\": \"string\",                  \"state\": \"string\",                  \"county\": \"string\",                  \"city\": \"string\",                  \"zipCode\": \"string\",                  \"address\": \"string\"              }          ]      }
     * @summary Create cloud hospital admin user.
     * @param {CreateCHAdminCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ChadminsPost(body?: CreateCHAdminCommand | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<string>;
};
/**
 * CHAdminsApi - factory interface
 * @export
 */
export declare const CHAdminsApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * Sample request:        DELETE /api/v1/chadmins/1
     * @summary Delete cloud hospital admin user.
     * @param {string} chAdminId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ChadminsChAdminIdDelete(chAdminId: string, options?: any): AxiosPromise<boolean>;
    /**
     * Sample request:        GET /api/v1/chadmins/1
     * @summary Get cloud hospital admin user by id.
     * @param {string} chAdminId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ChadminsChAdminIdGet(chAdminId: string, options?: any): AxiosPromise<CHAdminViewModel>;
    /**
     * Sample request:        PUT /api/v1/chadmins/1      {          \"email\": \"adminupdate@icloudhospital.com\",          \"firstName\": \"Cloud\",          \"lastName\": \"Hospital\",          \"photo\": \"https://cloudhospitalblob.blob.core.windows.net/assets/Cloud_Hospital_Logo_blue.png\",          \"photoThumbnail\": \"https://cloudhospitalblob.blob.core.windows.net/assets/Cloud_Hospital_Logo_blue.png\",          \"gender\": \"NotSpecified\",          \"dateOfBirth\": \"2020-02-22T09:09:19.082Z\",          \"locations\": [              {                  \"locationType\": \"LivesIn\",                  \"latitude\": 0,                  \"longitude\": 0,                  \"country\": \"string\",                  \"state\": \"string\",                  \"county\": \"string\",                  \"city\": \"string\",                  \"zipCode\": \"string\",                  \"address\": \"string\"              }          ]      }
     * @summary Update cloud hospital admin user.
     * @param {string} chAdminId
     * @param {UpdateCHAdminCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ChadminsChAdminIdPut(chAdminId: string, body?: UpdateCHAdminCommand | undefined, options?: any): AxiosPromise<boolean>;
    /**
     * Sample request:        GET /api/v1/chadmin      {          \"pageQueryFilter\": {              \"page\": 1,              \"limit\": 20,              \"lastRetrived\": \"2020-02-05T08:40\"          },          \"searchString\": \"admin\"      }
     * @summary Get cloud hospital admin users.
     * @param {string} [id]
     * @param {string} [fullname]
     * @param {string} [email]
     * @param {object} [gender]
     * @param {Date} [dateOfBirth]
     * @param {Date} [created]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ChadminsGet(id?: string | undefined, fullname?: string | undefined, email?: string | undefined, gender?: object | undefined, dateOfBirth?: Date | undefined, created?: Date | undefined, page?: number | undefined, limit?: number | undefined, lastRetrieved?: Date | undefined, current?: boolean | undefined, options?: any): AxiosPromise<CHAdminsViewModel>;
    /**
     * Sample request:        POST /api/v1/chadmins      {          \"firstName\": \"Cloud\",          \"lastName\": \"Hospital\",          \"photo\": \"https://cloudhospitalblob.blob.core.windows.net/assets/Cloud_Hospital_Logo_blue.png\",          \"photoThumbnail\": \"https://cloudhospitalblob.blob.core.windows.net/assets/Cloud_Hospital_Logo_blue.png\",          \"gender\": \"NotSpecified\",          \"dateOfBirth\": \"2020-02-22T09:09:19.082Z\",          \"locations\": [              {                  \"locationType\": \"LivesIn\",                  \"latitude\": 0,                  \"longitude\": 0,                  \"country\": \"string\",                  \"state\": \"string\",                  \"county\": \"string\",                  \"city\": \"string\",                  \"zipCode\": \"string\",                  \"address\": \"string\"              }          ]      }
     * @summary Create cloud hospital admin user.
     * @param {CreateCHAdminCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ChadminsPost(body?: CreateCHAdminCommand | undefined, options?: any): AxiosPromise<string>;
};
/**
 * CHAdminsApi - object-oriented interface
 * @export
 * @class CHAdminsApi
 * @extends {BaseAPI}
 */
export declare class CHAdminsApi extends BaseAPI {
    /**
     * Sample request:        DELETE /api/v1/chadmins/1
     * @summary Delete cloud hospital admin user.
     * @param {string} chAdminId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CHAdminsApi
     */
    apiV1ChadminsChAdminIdDelete(chAdminId: string, options?: any): AxiosPromise<boolean>;
    /**
     * Sample request:        GET /api/v1/chadmins/1
     * @summary Get cloud hospital admin user by id.
     * @param {string} chAdminId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CHAdminsApi
     */
    apiV1ChadminsChAdminIdGet(chAdminId: string, options?: any): AxiosPromise<CHAdminViewModel>;
    /**
     * Sample request:        PUT /api/v1/chadmins/1      {          \"email\": \"adminupdate@icloudhospital.com\",          \"firstName\": \"Cloud\",          \"lastName\": \"Hospital\",          \"photo\": \"https://cloudhospitalblob.blob.core.windows.net/assets/Cloud_Hospital_Logo_blue.png\",          \"photoThumbnail\": \"https://cloudhospitalblob.blob.core.windows.net/assets/Cloud_Hospital_Logo_blue.png\",          \"gender\": \"NotSpecified\",          \"dateOfBirth\": \"2020-02-22T09:09:19.082Z\",          \"locations\": [              {                  \"locationType\": \"LivesIn\",                  \"latitude\": 0,                  \"longitude\": 0,                  \"country\": \"string\",                  \"state\": \"string\",                  \"county\": \"string\",                  \"city\": \"string\",                  \"zipCode\": \"string\",                  \"address\": \"string\"              }          ]      }
     * @summary Update cloud hospital admin user.
     * @param {string} chAdminId
     * @param {UpdateCHAdminCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CHAdminsApi
     */
    apiV1ChadminsChAdminIdPut(chAdminId: string, body?: UpdateCHAdminCommand, options?: any): AxiosPromise<boolean>;
    /**
     * Sample request:        GET /api/v1/chadmin      {          \"pageQueryFilter\": {              \"page\": 1,              \"limit\": 20,              \"lastRetrived\": \"2020-02-05T08:40\"          },          \"searchString\": \"admin\"      }
     * @summary Get cloud hospital admin users.
     * @param {string} [id]
     * @param {string} [fullname]
     * @param {string} [email]
     * @param {object} [gender]
     * @param {Date} [dateOfBirth]
     * @param {Date} [created]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CHAdminsApi
     */
    apiV1ChadminsGet(id?: string, fullname?: string, email?: string, gender?: object, dateOfBirth?: Date, created?: Date, page?: number, limit?: number, lastRetrieved?: Date, current?: boolean, options?: any): AxiosPromise<CHAdminsViewModel>;
    /**
     * Sample request:        POST /api/v1/chadmins      {          \"firstName\": \"Cloud\",          \"lastName\": \"Hospital\",          \"photo\": \"https://cloudhospitalblob.blob.core.windows.net/assets/Cloud_Hospital_Logo_blue.png\",          \"photoThumbnail\": \"https://cloudhospitalblob.blob.core.windows.net/assets/Cloud_Hospital_Logo_blue.png\",          \"gender\": \"NotSpecified\",          \"dateOfBirth\": \"2020-02-22T09:09:19.082Z\",          \"locations\": [              {                  \"locationType\": \"LivesIn\",                  \"latitude\": 0,                  \"longitude\": 0,                  \"country\": \"string\",                  \"state\": \"string\",                  \"county\": \"string\",                  \"city\": \"string\",                  \"zipCode\": \"string\",                  \"address\": \"string\"              }          ]      }
     * @summary Create cloud hospital admin user.
     * @param {CreateCHAdminCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CHAdminsApi
     */
    apiV1ChadminsPost(body?: CreateCHAdminCommand, options?: any): AxiosPromise<string>;
}
/**
 * CHManagersApi - axios parameter creator
 * @export
 */
export declare const CHManagersApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Smaple request:        DELETE /api/v1/chmanagers/1
     * @summary Delete cloud hospital manager.
     * @param {string} chManagerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ChmanagersChManagerIdDelete(chManagerId: string, options?: any): RequestArgs;
    /**
     * Sample request:        GET /api/v1/chmanagers/1
     * @summary Get cloud hospital manager.
     * @param {string} managerId
     * @param {string} chManagerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ChmanagersChManagerIdGet(managerId: string, chManagerId: string, options?: any): RequestArgs;
    /**
     * Sample request:        PUT /api/v1/chmanagers/1      {          \"firstName\": \"cloud\",          \"lastName\": \"manager\",          \"photo\": \"string\",          \"locations\": [          {              \"locationType\": \"LivesIn\",              \"latitude\": 0,              \"longitude\": 0,              \"country\": \"string\",              \"state\": \"string\",              \"county\": \"string\",              \"city\": \"string\",              \"zipCode\": \"string\",              \"address\": \"string\"              }          ]      }
     * @summary Update cloud hospital manager.
     * @param {string} chManagerId
     * @param {UpdateCHManagerCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ChmanagersChManagerIdPut(chManagerId: string, body?: UpdateCHManagerCommand | undefined, options?: any): RequestArgs;
    /**
     * Sample request:        GET /api/v1/chmanagers      {          \"pageQueryFilter\": {              \"page\": 1,              \"limit\": 20,              \"lastRetrived\": \"2020-02-05T08:40\"          },          \"searchString\": \"chmanager\"      }
     * @summary Get cloud hospital managers.
     * @param {string} [id]
     * @param {string} [fullname]
     * @param {string} [email]
     * @param {object} [gender]
     * @param {Date} [dateOfBirth]
     * @param {Date} [created]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ChmanagersGet(id?: string | undefined, fullname?: string | undefined, email?: string | undefined, gender?: object | undefined, dateOfBirth?: Date | undefined, created?: Date | undefined, page?: number | undefined, limit?: number | undefined, lastRetrieved?: Date | undefined, current?: boolean | undefined, options?: any): RequestArgs;
    /**
     * Sample request:        POST /api/v1/chmanagers      {          \"userName\": \"chmanager\",          \"email\": \"chmanger@icloudhospital.com\",          \"firstName\": \"cloud\",          \"lastName\": \"manager\",          \"photo\": \"string\",          \"photoThumbnail\": \"string\",          \"gender\": \"NotSpecified\",          \"dateOfBirth\": \"2020-02-22T15:28:09.897Z\",          \"locations\": [             {             \"locationType\": \"LivesIn\",             \"latitude\": 0,             \"longitude\": 0,             \"country\": \"string\",             \"state\": \"string\",             \"county\": \"string\",             \"city\": \"string\",             \"zipCode\": \"string\",             \"address\": \"string\"             }          ]       }
     * @summary Create cloud hospital manager.
     * @param {CreateCHManagerCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ChmanagersPost(body?: CreateCHManagerCommand | undefined, options?: any): RequestArgs;
};
/**
 * CHManagersApi - functional programming interface
 * @export
 */
export declare const CHManagersApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Smaple request:        DELETE /api/v1/chmanagers/1
     * @summary Delete cloud hospital manager.
     * @param {string} chManagerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ChmanagersChManagerIdDelete(chManagerId: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<boolean>;
    /**
     * Sample request:        GET /api/v1/chmanagers/1
     * @summary Get cloud hospital manager.
     * @param {string} managerId
     * @param {string} chManagerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ChmanagersChManagerIdGet(managerId: string, chManagerId: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<CHManagerViewModel>;
    /**
     * Sample request:        PUT /api/v1/chmanagers/1      {          \"firstName\": \"cloud\",          \"lastName\": \"manager\",          \"photo\": \"string\",          \"locations\": [          {              \"locationType\": \"LivesIn\",              \"latitude\": 0,              \"longitude\": 0,              \"country\": \"string\",              \"state\": \"string\",              \"county\": \"string\",              \"city\": \"string\",              \"zipCode\": \"string\",              \"address\": \"string\"              }          ]      }
     * @summary Update cloud hospital manager.
     * @param {string} chManagerId
     * @param {UpdateCHManagerCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ChmanagersChManagerIdPut(chManagerId: string, body?: UpdateCHManagerCommand | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<boolean>;
    /**
     * Sample request:        GET /api/v1/chmanagers      {          \"pageQueryFilter\": {              \"page\": 1,              \"limit\": 20,              \"lastRetrived\": \"2020-02-05T08:40\"          },          \"searchString\": \"chmanager\"      }
     * @summary Get cloud hospital managers.
     * @param {string} [id]
     * @param {string} [fullname]
     * @param {string} [email]
     * @param {object} [gender]
     * @param {Date} [dateOfBirth]
     * @param {Date} [created]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ChmanagersGet(id?: string | undefined, fullname?: string | undefined, email?: string | undefined, gender?: object | undefined, dateOfBirth?: Date | undefined, created?: Date | undefined, page?: number | undefined, limit?: number | undefined, lastRetrieved?: Date | undefined, current?: boolean | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<CHManagersViewModel>;
    /**
     * Sample request:        POST /api/v1/chmanagers      {          \"userName\": \"chmanager\",          \"email\": \"chmanger@icloudhospital.com\",          \"firstName\": \"cloud\",          \"lastName\": \"manager\",          \"photo\": \"string\",          \"photoThumbnail\": \"string\",          \"gender\": \"NotSpecified\",          \"dateOfBirth\": \"2020-02-22T15:28:09.897Z\",          \"locations\": [             {             \"locationType\": \"LivesIn\",             \"latitude\": 0,             \"longitude\": 0,             \"country\": \"string\",             \"state\": \"string\",             \"county\": \"string\",             \"city\": \"string\",             \"zipCode\": \"string\",             \"address\": \"string\"             }          ]       }
     * @summary Create cloud hospital manager.
     * @param {CreateCHManagerCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ChmanagersPost(body?: CreateCHManagerCommand | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<string>;
};
/**
 * CHManagersApi - factory interface
 * @export
 */
export declare const CHManagersApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * Smaple request:        DELETE /api/v1/chmanagers/1
     * @summary Delete cloud hospital manager.
     * @param {string} chManagerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ChmanagersChManagerIdDelete(chManagerId: string, options?: any): AxiosPromise<boolean>;
    /**
     * Sample request:        GET /api/v1/chmanagers/1
     * @summary Get cloud hospital manager.
     * @param {string} managerId
     * @param {string} chManagerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ChmanagersChManagerIdGet(managerId: string, chManagerId: string, options?: any): AxiosPromise<CHManagerViewModel>;
    /**
     * Sample request:        PUT /api/v1/chmanagers/1      {          \"firstName\": \"cloud\",          \"lastName\": \"manager\",          \"photo\": \"string\",          \"locations\": [          {              \"locationType\": \"LivesIn\",              \"latitude\": 0,              \"longitude\": 0,              \"country\": \"string\",              \"state\": \"string\",              \"county\": \"string\",              \"city\": \"string\",              \"zipCode\": \"string\",              \"address\": \"string\"              }          ]      }
     * @summary Update cloud hospital manager.
     * @param {string} chManagerId
     * @param {UpdateCHManagerCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ChmanagersChManagerIdPut(chManagerId: string, body?: UpdateCHManagerCommand | undefined, options?: any): AxiosPromise<boolean>;
    /**
     * Sample request:        GET /api/v1/chmanagers      {          \"pageQueryFilter\": {              \"page\": 1,              \"limit\": 20,              \"lastRetrived\": \"2020-02-05T08:40\"          },          \"searchString\": \"chmanager\"      }
     * @summary Get cloud hospital managers.
     * @param {string} [id]
     * @param {string} [fullname]
     * @param {string} [email]
     * @param {object} [gender]
     * @param {Date} [dateOfBirth]
     * @param {Date} [created]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ChmanagersGet(id?: string | undefined, fullname?: string | undefined, email?: string | undefined, gender?: object | undefined, dateOfBirth?: Date | undefined, created?: Date | undefined, page?: number | undefined, limit?: number | undefined, lastRetrieved?: Date | undefined, current?: boolean | undefined, options?: any): AxiosPromise<CHManagersViewModel>;
    /**
     * Sample request:        POST /api/v1/chmanagers      {          \"userName\": \"chmanager\",          \"email\": \"chmanger@icloudhospital.com\",          \"firstName\": \"cloud\",          \"lastName\": \"manager\",          \"photo\": \"string\",          \"photoThumbnail\": \"string\",          \"gender\": \"NotSpecified\",          \"dateOfBirth\": \"2020-02-22T15:28:09.897Z\",          \"locations\": [             {             \"locationType\": \"LivesIn\",             \"latitude\": 0,             \"longitude\": 0,             \"country\": \"string\",             \"state\": \"string\",             \"county\": \"string\",             \"city\": \"string\",             \"zipCode\": \"string\",             \"address\": \"string\"             }          ]       }
     * @summary Create cloud hospital manager.
     * @param {CreateCHManagerCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ChmanagersPost(body?: CreateCHManagerCommand | undefined, options?: any): AxiosPromise<string>;
};
/**
 * CHManagersApi - object-oriented interface
 * @export
 * @class CHManagersApi
 * @extends {BaseAPI}
 */
export declare class CHManagersApi extends BaseAPI {
    /**
     * Smaple request:        DELETE /api/v1/chmanagers/1
     * @summary Delete cloud hospital manager.
     * @param {string} chManagerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CHManagersApi
     */
    apiV1ChmanagersChManagerIdDelete(chManagerId: string, options?: any): AxiosPromise<boolean>;
    /**
     * Sample request:        GET /api/v1/chmanagers/1
     * @summary Get cloud hospital manager.
     * @param {string} managerId
     * @param {string} chManagerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CHManagersApi
     */
    apiV1ChmanagersChManagerIdGet(managerId: string, chManagerId: string, options?: any): AxiosPromise<CHManagerViewModel>;
    /**
     * Sample request:        PUT /api/v1/chmanagers/1      {          \"firstName\": \"cloud\",          \"lastName\": \"manager\",          \"photo\": \"string\",          \"locations\": [          {              \"locationType\": \"LivesIn\",              \"latitude\": 0,              \"longitude\": 0,              \"country\": \"string\",              \"state\": \"string\",              \"county\": \"string\",              \"city\": \"string\",              \"zipCode\": \"string\",              \"address\": \"string\"              }          ]      }
     * @summary Update cloud hospital manager.
     * @param {string} chManagerId
     * @param {UpdateCHManagerCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CHManagersApi
     */
    apiV1ChmanagersChManagerIdPut(chManagerId: string, body?: UpdateCHManagerCommand, options?: any): AxiosPromise<boolean>;
    /**
     * Sample request:        GET /api/v1/chmanagers      {          \"pageQueryFilter\": {              \"page\": 1,              \"limit\": 20,              \"lastRetrived\": \"2020-02-05T08:40\"          },          \"searchString\": \"chmanager\"      }
     * @summary Get cloud hospital managers.
     * @param {string} [id]
     * @param {string} [fullname]
     * @param {string} [email]
     * @param {object} [gender]
     * @param {Date} [dateOfBirth]
     * @param {Date} [created]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CHManagersApi
     */
    apiV1ChmanagersGet(id?: string, fullname?: string, email?: string, gender?: object, dateOfBirth?: Date, created?: Date, page?: number, limit?: number, lastRetrieved?: Date, current?: boolean, options?: any): AxiosPromise<CHManagersViewModel>;
    /**
     * Sample request:        POST /api/v1/chmanagers      {          \"userName\": \"chmanager\",          \"email\": \"chmanger@icloudhospital.com\",          \"firstName\": \"cloud\",          \"lastName\": \"manager\",          \"photo\": \"string\",          \"photoThumbnail\": \"string\",          \"gender\": \"NotSpecified\",          \"dateOfBirth\": \"2020-02-22T15:28:09.897Z\",          \"locations\": [             {             \"locationType\": \"LivesIn\",             \"latitude\": 0,             \"longitude\": 0,             \"country\": \"string\",             \"state\": \"string\",             \"county\": \"string\",             \"city\": \"string\",             \"zipCode\": \"string\",             \"address\": \"string\"             }          ]       }
     * @summary Create cloud hospital manager.
     * @param {CreateCHManagerCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CHManagersApi
     */
    apiV1ChmanagersPost(body?: CreateCHManagerCommand, options?: any): AxiosPromise<string>;
}
/**
 * ConsultationsApi - axios parameter creator
 * @export
 */
export declare const ConsultationsApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary Approve consultation.
     * @param {string} consultationId
     * @param {ApproveConsultationCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ConsultationsConsultationIdApprovePost(consultationId: string, body?: ApproveConsultationCommand | undefined, options?: any): RequestArgs;
    /**
     *
     * @summary Cancel consultation.
     * @param {string} consultationId
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ConsultationsConsultationIdCancelPost(consultationId: string, body?: object | undefined, options?: any): RequestArgs;
    /**
     *
     * @summary Delete consultation.
     * @param {string} consultationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ConsultationsConsultationIdDelete(consultationId: string, options?: any): RequestArgs;
    /**
     *
     * @summary Get consultation.
     * @param {string} consultationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ConsultationsConsultationIdGet(consultationId: string, options?: any): RequestArgs;
    /**
     *
     * @summary Update consultation.
     * @param {string} consultationId
     * @param {UpdateConsultationCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ConsultationsConsultationIdPut(consultationId: string, body?: UpdateConsultationCommand | undefined, options?: any): RequestArgs;
    /**
     *
     * @summary Reject consultation.
     * @param {string} consultationId
     * @param {RejectConsultationCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ConsultationsConsultationIdRejectPost(consultationId: string, body?: RejectConsultationCommand | undefined, options?: any): RequestArgs;
    /**
     *
     * @summary Get all consultations.
     * @param {string} [searchString]
     * @param {boolean} [isOpen]
     * @param {boolean} [isCompleted]
     * @param {object} [status]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ConsultationsGet(searchString?: string | undefined, isOpen?: boolean | undefined, isCompleted?: boolean | undefined, status?: object | undefined, page?: number | undefined, limit?: number | undefined, lastRetrieved?: Date | undefined, current?: boolean | undefined, options?: any): RequestArgs;
    /**
     *
     * @summary Create deal consultation.
     * @param {CreateConsultationCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ConsultationsPost(body?: CreateConsultationCommand | undefined, options?: any): RequestArgs;
};
/**
 * ConsultationsApi - functional programming interface
 * @export
 */
export declare const ConsultationsApiFp: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary Approve consultation.
     * @param {string} consultationId
     * @param {ApproveConsultationCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ConsultationsConsultationIdApprovePost(consultationId: string, body?: ApproveConsultationCommand | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<boolean>;
    /**
     *
     * @summary Cancel consultation.
     * @param {string} consultationId
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ConsultationsConsultationIdCancelPost(consultationId: string, body?: object | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<boolean>;
    /**
     *
     * @summary Delete consultation.
     * @param {string} consultationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ConsultationsConsultationIdDelete(consultationId: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<boolean>;
    /**
     *
     * @summary Get consultation.
     * @param {string} consultationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ConsultationsConsultationIdGet(consultationId: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<ConsultationViewModel>;
    /**
     *
     * @summary Update consultation.
     * @param {string} consultationId
     * @param {UpdateConsultationCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ConsultationsConsultationIdPut(consultationId: string, body?: UpdateConsultationCommand | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<boolean>;
    /**
     *
     * @summary Reject consultation.
     * @param {string} consultationId
     * @param {RejectConsultationCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ConsultationsConsultationIdRejectPost(consultationId: string, body?: RejectConsultationCommand | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<boolean>;
    /**
     *
     * @summary Get all consultations.
     * @param {string} [searchString]
     * @param {boolean} [isOpen]
     * @param {boolean} [isCompleted]
     * @param {object} [status]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ConsultationsGet(searchString?: string | undefined, isOpen?: boolean | undefined, isCompleted?: boolean | undefined, status?: object | undefined, page?: number | undefined, limit?: number | undefined, lastRetrieved?: Date | undefined, current?: boolean | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<ConsultationsViewModel>;
    /**
     *
     * @summary Create deal consultation.
     * @param {CreateConsultationCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ConsultationsPost(body?: CreateConsultationCommand | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<string>;
};
/**
 * ConsultationsApi - factory interface
 * @export
 */
export declare const ConsultationsApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     *
     * @summary Approve consultation.
     * @param {string} consultationId
     * @param {ApproveConsultationCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ConsultationsConsultationIdApprovePost(consultationId: string, body?: ApproveConsultationCommand | undefined, options?: any): AxiosPromise<boolean>;
    /**
     *
     * @summary Cancel consultation.
     * @param {string} consultationId
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ConsultationsConsultationIdCancelPost(consultationId: string, body?: object | undefined, options?: any): AxiosPromise<boolean>;
    /**
     *
     * @summary Delete consultation.
     * @param {string} consultationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ConsultationsConsultationIdDelete(consultationId: string, options?: any): AxiosPromise<boolean>;
    /**
     *
     * @summary Get consultation.
     * @param {string} consultationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ConsultationsConsultationIdGet(consultationId: string, options?: any): AxiosPromise<ConsultationViewModel>;
    /**
     *
     * @summary Update consultation.
     * @param {string} consultationId
     * @param {UpdateConsultationCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ConsultationsConsultationIdPut(consultationId: string, body?: UpdateConsultationCommand | undefined, options?: any): AxiosPromise<boolean>;
    /**
     *
     * @summary Reject consultation.
     * @param {string} consultationId
     * @param {RejectConsultationCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ConsultationsConsultationIdRejectPost(consultationId: string, body?: RejectConsultationCommand | undefined, options?: any): AxiosPromise<boolean>;
    /**
     *
     * @summary Get all consultations.
     * @param {string} [searchString]
     * @param {boolean} [isOpen]
     * @param {boolean} [isCompleted]
     * @param {object} [status]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ConsultationsGet(searchString?: string | undefined, isOpen?: boolean | undefined, isCompleted?: boolean | undefined, status?: object | undefined, page?: number | undefined, limit?: number | undefined, lastRetrieved?: Date | undefined, current?: boolean | undefined, options?: any): AxiosPromise<ConsultationsViewModel>;
    /**
     *
     * @summary Create deal consultation.
     * @param {CreateConsultationCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ConsultationsPost(body?: CreateConsultationCommand | undefined, options?: any): AxiosPromise<string>;
};
/**
 * ConsultationsApi - object-oriented interface
 * @export
 * @class ConsultationsApi
 * @extends {BaseAPI}
 */
export declare class ConsultationsApi extends BaseAPI {
    /**
     *
     * @summary Approve consultation.
     * @param {string} consultationId
     * @param {ApproveConsultationCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsultationsApi
     */
    apiV1ConsultationsConsultationIdApprovePost(consultationId: string, body?: ApproveConsultationCommand, options?: any): AxiosPromise<boolean>;
    /**
     *
     * @summary Cancel consultation.
     * @param {string} consultationId
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsultationsApi
     */
    apiV1ConsultationsConsultationIdCancelPost(consultationId: string, body?: object, options?: any): AxiosPromise<boolean>;
    /**
     *
     * @summary Delete consultation.
     * @param {string} consultationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsultationsApi
     */
    apiV1ConsultationsConsultationIdDelete(consultationId: string, options?: any): AxiosPromise<boolean>;
    /**
     *
     * @summary Get consultation.
     * @param {string} consultationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsultationsApi
     */
    apiV1ConsultationsConsultationIdGet(consultationId: string, options?: any): AxiosPromise<ConsultationViewModel>;
    /**
     *
     * @summary Update consultation.
     * @param {string} consultationId
     * @param {UpdateConsultationCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsultationsApi
     */
    apiV1ConsultationsConsultationIdPut(consultationId: string, body?: UpdateConsultationCommand, options?: any): AxiosPromise<boolean>;
    /**
     *
     * @summary Reject consultation.
     * @param {string} consultationId
     * @param {RejectConsultationCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsultationsApi
     */
    apiV1ConsultationsConsultationIdRejectPost(consultationId: string, body?: RejectConsultationCommand, options?: any): AxiosPromise<boolean>;
    /**
     *
     * @summary Get all consultations.
     * @param {string} [searchString]
     * @param {boolean} [isOpen]
     * @param {boolean} [isCompleted]
     * @param {object} [status]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsultationsApi
     */
    apiV1ConsultationsGet(searchString?: string, isOpen?: boolean, isCompleted?: boolean, status?: object, page?: number, limit?: number, lastRetrieved?: Date, current?: boolean, options?: any): AxiosPromise<ConsultationsViewModel>;
    /**
     *
     * @summary Create deal consultation.
     * @param {CreateConsultationCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsultationsApi
     */
    apiV1ConsultationsPost(body?: CreateConsultationCommand, options?: any): AxiosPromise<string>;
}
/**
 * CountriesApi - axios parameter creator
 * @export
 */
export declare const CountriesApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Sample request:        DELETE /api/v1/countries/1
     * @summary Delete country.
     * @param {string} countryId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1CountriesCountryIdDelete(countryId: string, options?: any): RequestArgs;
    /**
     * Sample request:        GET /api/v1/countries/1
     * @summary Get country.
     * @param {string} countryId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1CountriesCountryIdGet(countryId: string, options?: any): RequestArgs;
    /**
     * Sample request:        PUT /api/v1/countries/1      {          \"name\": \"USA\",          \"description\": \"United States of America\"          \"medias\": [            {              \"mediaType\": 0,              \"url\": \"https://cloudhospitalblob.blob.core.windows.net/imagecontainer/SouthKorea.png\",              \"thumbnailUrl\": \"https://cloudhospitalblob.blob.core.windows.net/thumbnailcontainer/SouthKorea.png\"              \"description\": \"string\",              \"order\": 0            },            {              \"mediaType\": 1,              \"url\": \"string\",              \"description\": \"string\",              \"order\": 1            }          ],      }
     * @summary Update country.
     * @param {string} countryId
     * @param {UpdateCountryCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1CountriesCountryIdPut(countryId: string, body?: UpdateCountryCommand | undefined, options?: any): RequestArgs;
    /**
     * Sample request:        GET /api/v1/countries      {          \"countryPageQueryFilter\": {              \"page\": 1,              \"limit\": 20,              \"lastRetrived\": \"2020-02-05T08:40\"          }      }
     * @summary Get all countries.
     * @param {string} [id]
     * @param {string} [name]
     * @param {string} [description]
     * @param {Date} [createdDate]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1CountriesGet(id?: string | undefined, name?: string | undefined, description?: string | undefined, createdDate?: Date | undefined, page?: number | undefined, limit?: number | undefined, lastRetrieved?: Date | undefined, current?: boolean | undefined, options?: any): RequestArgs;
    /**
     * Sample request:        POST /api/v1/countries      {          \"name\": \"Korea\",          \"description\": \"Republic of Korea\",          \"medias\": [              {                  \"mediaType\": \"Photo\",                  \"url\": \"https://cloudhospitalblob.blob.core.windows.net/imagecontainer/SouthKorea.png\",                  \"thumbnailUrl\": \"https://cloudhospitalblob.blob.core.windows.net/thumbnailcontainer/SouthKorea.png\",                  \"description\": \"string\"              }          ]      }
     * @summary Create a country.
     * @param {CreateCountryCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1CountriesPost(body?: CreateCountryCommand | undefined, options?: any): RequestArgs;
};
/**
 * CountriesApi - functional programming interface
 * @export
 */
export declare const CountriesApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Sample request:        DELETE /api/v1/countries/1
     * @summary Delete country.
     * @param {string} countryId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1CountriesCountryIdDelete(countryId: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<boolean>;
    /**
     * Sample request:        GET /api/v1/countries/1
     * @summary Get country.
     * @param {string} countryId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1CountriesCountryIdGet(countryId: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<CountryViewModel>;
    /**
     * Sample request:        PUT /api/v1/countries/1      {          \"name\": \"USA\",          \"description\": \"United States of America\"          \"medias\": [            {              \"mediaType\": 0,              \"url\": \"https://cloudhospitalblob.blob.core.windows.net/imagecontainer/SouthKorea.png\",              \"thumbnailUrl\": \"https://cloudhospitalblob.blob.core.windows.net/thumbnailcontainer/SouthKorea.png\"              \"description\": \"string\",              \"order\": 0            },            {              \"mediaType\": 1,              \"url\": \"string\",              \"description\": \"string\",              \"order\": 1            }          ],      }
     * @summary Update country.
     * @param {string} countryId
     * @param {UpdateCountryCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1CountriesCountryIdPut(countryId: string, body?: UpdateCountryCommand | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<boolean>;
    /**
     * Sample request:        GET /api/v1/countries      {          \"countryPageQueryFilter\": {              \"page\": 1,              \"limit\": 20,              \"lastRetrived\": \"2020-02-05T08:40\"          }      }
     * @summary Get all countries.
     * @param {string} [id]
     * @param {string} [name]
     * @param {string} [description]
     * @param {Date} [createdDate]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1CountriesGet(id?: string | undefined, name?: string | undefined, description?: string | undefined, createdDate?: Date | undefined, page?: number | undefined, limit?: number | undefined, lastRetrieved?: Date | undefined, current?: boolean | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<CountriesViewModel>;
    /**
     * Sample request:        POST /api/v1/countries      {          \"name\": \"Korea\",          \"description\": \"Republic of Korea\",          \"medias\": [              {                  \"mediaType\": \"Photo\",                  \"url\": \"https://cloudhospitalblob.blob.core.windows.net/imagecontainer/SouthKorea.png\",                  \"thumbnailUrl\": \"https://cloudhospitalblob.blob.core.windows.net/thumbnailcontainer/SouthKorea.png\",                  \"description\": \"string\"              }          ]      }
     * @summary Create a country.
     * @param {CreateCountryCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1CountriesPost(body?: CreateCountryCommand | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<string>;
};
/**
 * CountriesApi - factory interface
 * @export
 */
export declare const CountriesApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * Sample request:        DELETE /api/v1/countries/1
     * @summary Delete country.
     * @param {string} countryId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1CountriesCountryIdDelete(countryId: string, options?: any): AxiosPromise<boolean>;
    /**
     * Sample request:        GET /api/v1/countries/1
     * @summary Get country.
     * @param {string} countryId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1CountriesCountryIdGet(countryId: string, options?: any): AxiosPromise<CountryViewModel>;
    /**
     * Sample request:        PUT /api/v1/countries/1      {          \"name\": \"USA\",          \"description\": \"United States of America\"          \"medias\": [            {              \"mediaType\": 0,              \"url\": \"https://cloudhospitalblob.blob.core.windows.net/imagecontainer/SouthKorea.png\",              \"thumbnailUrl\": \"https://cloudhospitalblob.blob.core.windows.net/thumbnailcontainer/SouthKorea.png\"              \"description\": \"string\",              \"order\": 0            },            {              \"mediaType\": 1,              \"url\": \"string\",              \"description\": \"string\",              \"order\": 1            }          ],      }
     * @summary Update country.
     * @param {string} countryId
     * @param {UpdateCountryCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1CountriesCountryIdPut(countryId: string, body?: UpdateCountryCommand | undefined, options?: any): AxiosPromise<boolean>;
    /**
     * Sample request:        GET /api/v1/countries      {          \"countryPageQueryFilter\": {              \"page\": 1,              \"limit\": 20,              \"lastRetrived\": \"2020-02-05T08:40\"          }      }
     * @summary Get all countries.
     * @param {string} [id]
     * @param {string} [name]
     * @param {string} [description]
     * @param {Date} [createdDate]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1CountriesGet(id?: string | undefined, name?: string | undefined, description?: string | undefined, createdDate?: Date | undefined, page?: number | undefined, limit?: number | undefined, lastRetrieved?: Date | undefined, current?: boolean | undefined, options?: any): AxiosPromise<CountriesViewModel>;
    /**
     * Sample request:        POST /api/v1/countries      {          \"name\": \"Korea\",          \"description\": \"Republic of Korea\",          \"medias\": [              {                  \"mediaType\": \"Photo\",                  \"url\": \"https://cloudhospitalblob.blob.core.windows.net/imagecontainer/SouthKorea.png\",                  \"thumbnailUrl\": \"https://cloudhospitalblob.blob.core.windows.net/thumbnailcontainer/SouthKorea.png\",                  \"description\": \"string\"              }          ]      }
     * @summary Create a country.
     * @param {CreateCountryCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1CountriesPost(body?: CreateCountryCommand | undefined, options?: any): AxiosPromise<string>;
};
/**
 * CountriesApi - object-oriented interface
 * @export
 * @class CountriesApi
 * @extends {BaseAPI}
 */
export declare class CountriesApi extends BaseAPI {
    /**
     * Sample request:        DELETE /api/v1/countries/1
     * @summary Delete country.
     * @param {string} countryId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CountriesApi
     */
    apiV1CountriesCountryIdDelete(countryId: string, options?: any): AxiosPromise<boolean>;
    /**
     * Sample request:        GET /api/v1/countries/1
     * @summary Get country.
     * @param {string} countryId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CountriesApi
     */
    apiV1CountriesCountryIdGet(countryId: string, options?: any): AxiosPromise<CountryViewModel>;
    /**
     * Sample request:        PUT /api/v1/countries/1      {          \"name\": \"USA\",          \"description\": \"United States of America\"          \"medias\": [            {              \"mediaType\": 0,              \"url\": \"https://cloudhospitalblob.blob.core.windows.net/imagecontainer/SouthKorea.png\",              \"thumbnailUrl\": \"https://cloudhospitalblob.blob.core.windows.net/thumbnailcontainer/SouthKorea.png\"              \"description\": \"string\",              \"order\": 0            },            {              \"mediaType\": 1,              \"url\": \"string\",              \"description\": \"string\",              \"order\": 1            }          ],      }
     * @summary Update country.
     * @param {string} countryId
     * @param {UpdateCountryCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CountriesApi
     */
    apiV1CountriesCountryIdPut(countryId: string, body?: UpdateCountryCommand, options?: any): AxiosPromise<boolean>;
    /**
     * Sample request:        GET /api/v1/countries      {          \"countryPageQueryFilter\": {              \"page\": 1,              \"limit\": 20,              \"lastRetrived\": \"2020-02-05T08:40\"          }      }
     * @summary Get all countries.
     * @param {string} [id]
     * @param {string} [name]
     * @param {string} [description]
     * @param {Date} [createdDate]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CountriesApi
     */
    apiV1CountriesGet(id?: string, name?: string, description?: string, createdDate?: Date, page?: number, limit?: number, lastRetrieved?: Date, current?: boolean, options?: any): AxiosPromise<CountriesViewModel>;
    /**
     * Sample request:        POST /api/v1/countries      {          \"name\": \"Korea\",          \"description\": \"Republic of Korea\",          \"medias\": [              {                  \"mediaType\": \"Photo\",                  \"url\": \"https://cloudhospitalblob.blob.core.windows.net/imagecontainer/SouthKorea.png\",                  \"thumbnailUrl\": \"https://cloudhospitalblob.blob.core.windows.net/thumbnailcontainer/SouthKorea.png\",                  \"description\": \"string\"              }          ]      }
     * @summary Create a country.
     * @param {CreateCountryCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CountriesApi
     */
    apiV1CountriesPost(body?: CreateCountryCommand, options?: any): AxiosPromise<string>;
}
/**
 * DealPackagesApi - axios parameter creator
 * @export
 */
export declare const DealPackagesApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary Delete deal package.
     * @param {string} dealId
     * @param {string} packageId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DealsDealIdPackagesPackageIdDelete(dealId: string, packageId: string, options?: any): RequestArgs;
    /**
     *
     * @summary Get deal package.
     * @param {string} dealId
     * @param {string} packageId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DealsDealIdPackagesPackageIdGet(dealId: string, packageId: string, options?: any): RequestArgs;
    /**
     *
     * @summary Update deal package.
     * @param {string} dealId
     * @param {string} packageId
     * @param {UpdateDealPackageCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DealsDealIdPackagesPackageIdPut(dealId: string, packageId: string, body?: UpdateDealPackageCommand | undefined, options?: any): RequestArgs;
    /**
     *
     * @summary Create deal package.
     * @param {string} dealId
     * @param {CreateDealPackageCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DealsDealIdPackagesPost(dealId: string, body?: CreateDealPackageCommand | undefined, options?: any): RequestArgs;
};
/**
 * DealPackagesApi - functional programming interface
 * @export
 */
export declare const DealPackagesApiFp: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary Delete deal package.
     * @param {string} dealId
     * @param {string} packageId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DealsDealIdPackagesPackageIdDelete(dealId: string, packageId: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<boolean>;
    /**
     *
     * @summary Get deal package.
     * @param {string} dealId
     * @param {string} packageId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DealsDealIdPackagesPackageIdGet(dealId: string, packageId: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<DealPackageViewModel>;
    /**
     *
     * @summary Update deal package.
     * @param {string} dealId
     * @param {string} packageId
     * @param {UpdateDealPackageCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DealsDealIdPackagesPackageIdPut(dealId: string, packageId: string, body?: UpdateDealPackageCommand | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<boolean>;
    /**
     *
     * @summary Create deal package.
     * @param {string} dealId
     * @param {CreateDealPackageCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DealsDealIdPackagesPost(dealId: string, body?: CreateDealPackageCommand | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<string>;
};
/**
 * DealPackagesApi - factory interface
 * @export
 */
export declare const DealPackagesApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     *
     * @summary Delete deal package.
     * @param {string} dealId
     * @param {string} packageId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DealsDealIdPackagesPackageIdDelete(dealId: string, packageId: string, options?: any): AxiosPromise<boolean>;
    /**
     *
     * @summary Get deal package.
     * @param {string} dealId
     * @param {string} packageId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DealsDealIdPackagesPackageIdGet(dealId: string, packageId: string, options?: any): AxiosPromise<DealPackageViewModel>;
    /**
     *
     * @summary Update deal package.
     * @param {string} dealId
     * @param {string} packageId
     * @param {UpdateDealPackageCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DealsDealIdPackagesPackageIdPut(dealId: string, packageId: string, body?: UpdateDealPackageCommand | undefined, options?: any): AxiosPromise<boolean>;
    /**
     *
     * @summary Create deal package.
     * @param {string} dealId
     * @param {CreateDealPackageCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DealsDealIdPackagesPost(dealId: string, body?: CreateDealPackageCommand | undefined, options?: any): AxiosPromise<string>;
};
/**
 * DealPackagesApi - object-oriented interface
 * @export
 * @class DealPackagesApi
 * @extends {BaseAPI}
 */
export declare class DealPackagesApi extends BaseAPI {
    /**
     *
     * @summary Delete deal package.
     * @param {string} dealId
     * @param {string} packageId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DealPackagesApi
     */
    apiV1DealsDealIdPackagesPackageIdDelete(dealId: string, packageId: string, options?: any): AxiosPromise<boolean>;
    /**
     *
     * @summary Get deal package.
     * @param {string} dealId
     * @param {string} packageId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DealPackagesApi
     */
    apiV1DealsDealIdPackagesPackageIdGet(dealId: string, packageId: string, options?: any): AxiosPromise<DealPackageViewModel>;
    /**
     *
     * @summary Update deal package.
     * @param {string} dealId
     * @param {string} packageId
     * @param {UpdateDealPackageCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DealPackagesApi
     */
    apiV1DealsDealIdPackagesPackageIdPut(dealId: string, packageId: string, body?: UpdateDealPackageCommand, options?: any): AxiosPromise<boolean>;
    /**
     *
     * @summary Create deal package.
     * @param {string} dealId
     * @param {CreateDealPackageCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DealPackagesApi
     */
    apiV1DealsDealIdPackagesPost(dealId: string, body?: CreateDealPackageCommand, options?: any): AxiosPromise<string>;
}
/**
 * DealsApi - axios parameter creator
 * @export
 */
export declare const DealsApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary Delete deal.
     * @param {string} dealId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DealsDealIdDelete(dealId: string, options?: any): RequestArgs;
    /**
     *
     * @summary Get deal.
     * @param {string} dealId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DealsDealIdGet(dealId: string, options?: any): RequestArgs;
    /**
     *
     * @summary Update deal.
     * @param {string} dealId
     * @param {UpdateDealCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DealsDealIdPut(dealId: string, body?: UpdateDealCommand | undefined, options?: any): RequestArgs;
    /**
     *
     * @summary Get all deals.
     * @param {string} [id]
     * @param {string} [name]
     * @param {object} [marketingType]
     * @param {string} [countryId]
     * @param {string} [hospitalId]
     * @param {string} [hospitalName]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DealsGet(id?: string | undefined, name?: string | undefined, marketingType?: object | undefined, countryId?: string | undefined, hospitalId?: string | undefined, hospitalName?: string | undefined, page?: number | undefined, limit?: number | undefined, lastRetrieved?: Date | undefined, current?: boolean | undefined, options?: any): RequestArgs;
    /**
     *
     * @summary Create deal.
     * @param {CreateDealCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DealsPost(body?: CreateDealCommand | undefined, options?: any): RequestArgs;
};
/**
 * DealsApi - functional programming interface
 * @export
 */
export declare const DealsApiFp: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary Delete deal.
     * @param {string} dealId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DealsDealIdDelete(dealId: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<boolean>;
    /**
     *
     * @summary Get deal.
     * @param {string} dealId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DealsDealIdGet(dealId: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<DealViewModel>;
    /**
     *
     * @summary Update deal.
     * @param {string} dealId
     * @param {UpdateDealCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DealsDealIdPut(dealId: string, body?: UpdateDealCommand | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<boolean>;
    /**
     *
     * @summary Get all deals.
     * @param {string} [id]
     * @param {string} [name]
     * @param {object} [marketingType]
     * @param {string} [countryId]
     * @param {string} [hospitalId]
     * @param {string} [hospitalName]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DealsGet(id?: string | undefined, name?: string | undefined, marketingType?: object | undefined, countryId?: string | undefined, hospitalId?: string | undefined, hospitalName?: string | undefined, page?: number | undefined, limit?: number | undefined, lastRetrieved?: Date | undefined, current?: boolean | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<DealsViewModel>;
    /**
     *
     * @summary Create deal.
     * @param {CreateDealCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DealsPost(body?: CreateDealCommand | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<string>;
};
/**
 * DealsApi - factory interface
 * @export
 */
export declare const DealsApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     *
     * @summary Delete deal.
     * @param {string} dealId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DealsDealIdDelete(dealId: string, options?: any): AxiosPromise<boolean>;
    /**
     *
     * @summary Get deal.
     * @param {string} dealId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DealsDealIdGet(dealId: string, options?: any): AxiosPromise<DealViewModel>;
    /**
     *
     * @summary Update deal.
     * @param {string} dealId
     * @param {UpdateDealCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DealsDealIdPut(dealId: string, body?: UpdateDealCommand | undefined, options?: any): AxiosPromise<boolean>;
    /**
     *
     * @summary Get all deals.
     * @param {string} [id]
     * @param {string} [name]
     * @param {object} [marketingType]
     * @param {string} [countryId]
     * @param {string} [hospitalId]
     * @param {string} [hospitalName]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DealsGet(id?: string | undefined, name?: string | undefined, marketingType?: object | undefined, countryId?: string | undefined, hospitalId?: string | undefined, hospitalName?: string | undefined, page?: number | undefined, limit?: number | undefined, lastRetrieved?: Date | undefined, current?: boolean | undefined, options?: any): AxiosPromise<DealsViewModel>;
    /**
     *
     * @summary Create deal.
     * @param {CreateDealCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DealsPost(body?: CreateDealCommand | undefined, options?: any): AxiosPromise<string>;
};
/**
 * DealsApi - object-oriented interface
 * @export
 * @class DealsApi
 * @extends {BaseAPI}
 */
export declare class DealsApi extends BaseAPI {
    /**
     *
     * @summary Delete deal.
     * @param {string} dealId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DealsApi
     */
    apiV1DealsDealIdDelete(dealId: string, options?: any): AxiosPromise<boolean>;
    /**
     *
     * @summary Get deal.
     * @param {string} dealId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DealsApi
     */
    apiV1DealsDealIdGet(dealId: string, options?: any): AxiosPromise<DealViewModel>;
    /**
     *
     * @summary Update deal.
     * @param {string} dealId
     * @param {UpdateDealCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DealsApi
     */
    apiV1DealsDealIdPut(dealId: string, body?: UpdateDealCommand, options?: any): AxiosPromise<boolean>;
    /**
     *
     * @summary Get all deals.
     * @param {string} [id]
     * @param {string} [name]
     * @param {object} [marketingType]
     * @param {string} [countryId]
     * @param {string} [hospitalId]
     * @param {string} [hospitalName]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DealsApi
     */
    apiV1DealsGet(id?: string, name?: string, marketingType?: object, countryId?: string, hospitalId?: string, hospitalName?: string, page?: number, limit?: number, lastRetrieved?: Date, current?: boolean, options?: any): AxiosPromise<DealsViewModel>;
    /**
     *
     * @summary Create deal.
     * @param {CreateDealCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DealsApi
     */
    apiV1DealsPost(body?: CreateDealCommand, options?: any): AxiosPromise<string>;
}
/**
 * DepartmentApi - axios parameter creator
 * @export
 */
export declare const DepartmentApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Sample request:        GET /api/v1/hospitals/departments
     * @summary Get all department.
     * @param {string} [id]
     * @param {string} [hospitalId]
     * @param {string} [hospitalName]
     * @param {string} [name]
     * @param {string} [additionalInfo]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsDepartmentsGet(id?: string | undefined, hospitalId?: string | undefined, hospitalName?: string | undefined, name?: string | undefined, additionalInfo?: string | undefined, page?: number | undefined, limit?: number | undefined, lastRetrieved?: Date | undefined, current?: boolean | undefined, options?: any): RequestArgs;
    /**
     * Sample request:        DELETE /api/v1/hospitals/1/departments/1
     * @summary Delete department.
     * @param {string} hospitalId
     * @param {string} departmentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsHospitalIdDepartmentsDepartmentIdDelete(hospitalId: string, departmentId: string, options?: any): RequestArgs;
    /**
     * Sample request:        GET /api/v1/hospitals/1/departments/1
     * @summary Get department.
     * @param {string} hospitalId
     * @param {string} departmentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsHospitalIdDepartmentsDepartmentIdGet(hospitalId: string, departmentId: string, options?: any): RequestArgs;
    /**
     * Sample request:        POST /api/v1/hospitals/1/departments/1
     * @summary Create department.
     * @param {string} hospitalId
     * @param {string} departmentId
     * @param {CreateDepartmentCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsHospitalIdDepartmentsDepartmentIdPost(hospitalId: string, departmentId: string, body?: CreateDepartmentCommand | undefined, options?: any): RequestArgs;
    /**
     * Sample request:
     * @summary Update department.
     * @param {string} hospitalId
     * @param {string} departmentId
     * @param {UpdateDepartmentCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsHospitalIdDepartmentsDepartmentIdPut(hospitalId: string, departmentId: string, body?: UpdateDepartmentCommand | undefined, options?: any): RequestArgs;
};
/**
 * DepartmentApi - functional programming interface
 * @export
 */
export declare const DepartmentApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Sample request:        GET /api/v1/hospitals/departments
     * @summary Get all department.
     * @param {string} [id]
     * @param {string} [hospitalId]
     * @param {string} [hospitalName]
     * @param {string} [name]
     * @param {string} [additionalInfo]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsDepartmentsGet(id?: string | undefined, hospitalId?: string | undefined, hospitalName?: string | undefined, name?: string | undefined, additionalInfo?: string | undefined, page?: number | undefined, limit?: number | undefined, lastRetrieved?: Date | undefined, current?: boolean | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<DepartmentsViewModel>;
    /**
     * Sample request:        DELETE /api/v1/hospitals/1/departments/1
     * @summary Delete department.
     * @param {string} hospitalId
     * @param {string} departmentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsHospitalIdDepartmentsDepartmentIdDelete(hospitalId: string, departmentId: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<boolean>;
    /**
     * Sample request:        GET /api/v1/hospitals/1/departments/1
     * @summary Get department.
     * @param {string} hospitalId
     * @param {string} departmentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsHospitalIdDepartmentsDepartmentIdGet(hospitalId: string, departmentId: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<DepartmentViewModel>;
    /**
     * Sample request:        POST /api/v1/hospitals/1/departments/1
     * @summary Create department.
     * @param {string} hospitalId
     * @param {string} departmentId
     * @param {CreateDepartmentCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsHospitalIdDepartmentsDepartmentIdPost(hospitalId: string, departmentId: string, body?: CreateDepartmentCommand | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Department>;
    /**
     * Sample request:
     * @summary Update department.
     * @param {string} hospitalId
     * @param {string} departmentId
     * @param {UpdateDepartmentCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsHospitalIdDepartmentsDepartmentIdPut(hospitalId: string, departmentId: string, body?: UpdateDepartmentCommand | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<boolean>;
};
/**
 * DepartmentApi - factory interface
 * @export
 */
export declare const DepartmentApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * Sample request:        GET /api/v1/hospitals/departments
     * @summary Get all department.
     * @param {string} [id]
     * @param {string} [hospitalId]
     * @param {string} [hospitalName]
     * @param {string} [name]
     * @param {string} [additionalInfo]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsDepartmentsGet(id?: string | undefined, hospitalId?: string | undefined, hospitalName?: string | undefined, name?: string | undefined, additionalInfo?: string | undefined, page?: number | undefined, limit?: number | undefined, lastRetrieved?: Date | undefined, current?: boolean | undefined, options?: any): AxiosPromise<DepartmentsViewModel>;
    /**
     * Sample request:        DELETE /api/v1/hospitals/1/departments/1
     * @summary Delete department.
     * @param {string} hospitalId
     * @param {string} departmentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsHospitalIdDepartmentsDepartmentIdDelete(hospitalId: string, departmentId: string, options?: any): AxiosPromise<boolean>;
    /**
     * Sample request:        GET /api/v1/hospitals/1/departments/1
     * @summary Get department.
     * @param {string} hospitalId
     * @param {string} departmentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsHospitalIdDepartmentsDepartmentIdGet(hospitalId: string, departmentId: string, options?: any): AxiosPromise<DepartmentViewModel>;
    /**
     * Sample request:        POST /api/v1/hospitals/1/departments/1
     * @summary Create department.
     * @param {string} hospitalId
     * @param {string} departmentId
     * @param {CreateDepartmentCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsHospitalIdDepartmentsDepartmentIdPost(hospitalId: string, departmentId: string, body?: CreateDepartmentCommand | undefined, options?: any): AxiosPromise<Department>;
    /**
     * Sample request:
     * @summary Update department.
     * @param {string} hospitalId
     * @param {string} departmentId
     * @param {UpdateDepartmentCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsHospitalIdDepartmentsDepartmentIdPut(hospitalId: string, departmentId: string, body?: UpdateDepartmentCommand | undefined, options?: any): AxiosPromise<boolean>;
};
/**
 * DepartmentApi - object-oriented interface
 * @export
 * @class DepartmentApi
 * @extends {BaseAPI}
 */
export declare class DepartmentApi extends BaseAPI {
    /**
     * Sample request:        GET /api/v1/hospitals/departments
     * @summary Get all department.
     * @param {string} [id]
     * @param {string} [hospitalId]
     * @param {string} [hospitalName]
     * @param {string} [name]
     * @param {string} [additionalInfo]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentApi
     */
    apiV1HospitalsDepartmentsGet(id?: string, hospitalId?: string, hospitalName?: string, name?: string, additionalInfo?: string, page?: number, limit?: number, lastRetrieved?: Date, current?: boolean, options?: any): AxiosPromise<DepartmentsViewModel>;
    /**
     * Sample request:        DELETE /api/v1/hospitals/1/departments/1
     * @summary Delete department.
     * @param {string} hospitalId
     * @param {string} departmentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentApi
     */
    apiV1HospitalsHospitalIdDepartmentsDepartmentIdDelete(hospitalId: string, departmentId: string, options?: any): AxiosPromise<boolean>;
    /**
     * Sample request:        GET /api/v1/hospitals/1/departments/1
     * @summary Get department.
     * @param {string} hospitalId
     * @param {string} departmentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentApi
     */
    apiV1HospitalsHospitalIdDepartmentsDepartmentIdGet(hospitalId: string, departmentId: string, options?: any): AxiosPromise<DepartmentViewModel>;
    /**
     * Sample request:        POST /api/v1/hospitals/1/departments/1
     * @summary Create department.
     * @param {string} hospitalId
     * @param {string} departmentId
     * @param {CreateDepartmentCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentApi
     */
    apiV1HospitalsHospitalIdDepartmentsDepartmentIdPost(hospitalId: string, departmentId: string, body?: CreateDepartmentCommand, options?: any): AxiosPromise<Department>;
    /**
     * Sample request:
     * @summary Update department.
     * @param {string} hospitalId
     * @param {string} departmentId
     * @param {UpdateDepartmentCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentApi
     */
    apiV1HospitalsHospitalIdDepartmentsDepartmentIdPut(hospitalId: string, departmentId: string, body?: UpdateDepartmentCommand, options?: any): AxiosPromise<boolean>;
}
/**
 * DevicesApi - axios parameter creator
 * @export
 */
export declare const DevicesApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary Delete device.
     * @param {string} deviceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DevicesDeviceIdDelete(deviceId: string, options?: any): RequestArgs;
    /**
     *
     * @summary Get device.
     * @param {string} deviceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DevicesDeviceIdGet(deviceId: string, options?: any): RequestArgs;
    /**
     *
     * @summary Create device login.
     * @param {string} deviceId
     * @param {CreateDeviceLoginCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DevicesDeviceIdLoginsPost(deviceId: string, body?: CreateDeviceLoginCommand | undefined, options?: any): RequestArgs;
    /**
     *
     * @summary Update device.
     * @param {string} deviceId
     * @param {UpdateDeviceCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DevicesDeviceIdPut(deviceId: string, body?: UpdateDeviceCommand | undefined, options?: any): RequestArgs;
    /**
     *
     * @summary Create device.
     * @param {CreateDeviceCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DevicesPost(body?: CreateDeviceCommand | undefined, options?: any): RequestArgs;
};
/**
 * DevicesApi - functional programming interface
 * @export
 */
export declare const DevicesApiFp: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary Delete device.
     * @param {string} deviceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DevicesDeviceIdDelete(deviceId: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<boolean>;
    /**
     *
     * @summary Get device.
     * @param {string} deviceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DevicesDeviceIdGet(deviceId: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<DeviceViewModel>;
    /**
     *
     * @summary Create device login.
     * @param {string} deviceId
     * @param {CreateDeviceLoginCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DevicesDeviceIdLoginsPost(deviceId: string, body?: CreateDeviceLoginCommand | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<string>;
    /**
     *
     * @summary Update device.
     * @param {string} deviceId
     * @param {UpdateDeviceCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DevicesDeviceIdPut(deviceId: string, body?: UpdateDeviceCommand | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<boolean>;
    /**
     *
     * @summary Create device.
     * @param {CreateDeviceCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DevicesPost(body?: CreateDeviceCommand | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<string>;
};
/**
 * DevicesApi - factory interface
 * @export
 */
export declare const DevicesApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     *
     * @summary Delete device.
     * @param {string} deviceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DevicesDeviceIdDelete(deviceId: string, options?: any): AxiosPromise<boolean>;
    /**
     *
     * @summary Get device.
     * @param {string} deviceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DevicesDeviceIdGet(deviceId: string, options?: any): AxiosPromise<DeviceViewModel>;
    /**
     *
     * @summary Create device login.
     * @param {string} deviceId
     * @param {CreateDeviceLoginCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DevicesDeviceIdLoginsPost(deviceId: string, body?: CreateDeviceLoginCommand | undefined, options?: any): AxiosPromise<string>;
    /**
     *
     * @summary Update device.
     * @param {string} deviceId
     * @param {UpdateDeviceCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DevicesDeviceIdPut(deviceId: string, body?: UpdateDeviceCommand | undefined, options?: any): AxiosPromise<boolean>;
    /**
     *
     * @summary Create device.
     * @param {CreateDeviceCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DevicesPost(body?: CreateDeviceCommand | undefined, options?: any): AxiosPromise<string>;
};
/**
 * DevicesApi - object-oriented interface
 * @export
 * @class DevicesApi
 * @extends {BaseAPI}
 */
export declare class DevicesApi extends BaseAPI {
    /**
     *
     * @summary Delete device.
     * @param {string} deviceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    apiV1DevicesDeviceIdDelete(deviceId: string, options?: any): AxiosPromise<boolean>;
    /**
     *
     * @summary Get device.
     * @param {string} deviceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    apiV1DevicesDeviceIdGet(deviceId: string, options?: any): AxiosPromise<DeviceViewModel>;
    /**
     *
     * @summary Create device login.
     * @param {string} deviceId
     * @param {CreateDeviceLoginCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    apiV1DevicesDeviceIdLoginsPost(deviceId: string, body?: CreateDeviceLoginCommand, options?: any): AxiosPromise<string>;
    /**
     *
     * @summary Update device.
     * @param {string} deviceId
     * @param {UpdateDeviceCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    apiV1DevicesDeviceIdPut(deviceId: string, body?: UpdateDeviceCommand, options?: any): AxiosPromise<boolean>;
    /**
     *
     * @summary Create device.
     * @param {CreateDeviceCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    apiV1DevicesPost(body?: CreateDeviceCommand, options?: any): AxiosPromise<string>;
}
/**
 * DoctorCertificatesApi - axios parameter creator
 * @export
 */
export declare const DoctorCertificatesApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Sample request:        GET /api/v1/doctors/certificates
     * @summary Get all certificates.
     * @param {string} [id]
     * @param {string} [doctorId]
     * @param {string} [doctorName]
     * @param {string} [certificate]
     * @param {Date} [activeFrom]
     * @param {Date} [activeTo]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DoctorsCertificatesGet(id?: string | undefined, doctorId?: string | undefined, doctorName?: string | undefined, certificate?: string | undefined, activeFrom?: Date | undefined, activeTo?: Date | undefined, page?: number | undefined, limit?: number | undefined, lastRetrieved?: Date | undefined, current?: boolean | undefined, options?: any): RequestArgs;
    /**
     * Sample request:        DELETE /api/v1/doctors/1/certificates/1
     * @summary Delete certificate.
     * @param {string} doctorId
     * @param {string} certificateId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DoctorsDoctorIdCertificatesCertificateIdDelete(doctorId: string, certificateId: string, options?: any): RequestArgs;
    /**
     * Sample request:        GET /api/v1/doctors/1/certificates/1
     * @summary Get certificate.
     * @param {string} doctorId
     * @param {string} certificateId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DoctorsDoctorIdCertificatesCertificateIdGet(doctorId: string, certificateId: string, options?: any): RequestArgs;
    /**
     * Sample request:
     * @summary Update department.
     * @param {string} doctorId
     * @param {string} certificateId
     * @param {UpdateDoctorCertificateCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DoctorsDoctorIdCertificatesCertificateIdPut(doctorId: string, certificateId: string, body?: UpdateDoctorCertificateCommand | undefined, options?: any): RequestArgs;
    /**
     * Sample request:        POST /api/v1/doctors/1/certificates/1
     * @summary Create certificate.
     * @param {string} doctorId
     * @param {CreateDoctorCertificateCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DoctorsDoctorIdCertificatesPost(doctorId: string, body?: CreateDoctorCertificateCommand | undefined, options?: any): RequestArgs;
};
/**
 * DoctorCertificatesApi - functional programming interface
 * @export
 */
export declare const DoctorCertificatesApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Sample request:        GET /api/v1/doctors/certificates
     * @summary Get all certificates.
     * @param {string} [id]
     * @param {string} [doctorId]
     * @param {string} [doctorName]
     * @param {string} [certificate]
     * @param {Date} [activeFrom]
     * @param {Date} [activeTo]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DoctorsCertificatesGet(id?: string | undefined, doctorId?: string | undefined, doctorName?: string | undefined, certificate?: string | undefined, activeFrom?: Date | undefined, activeTo?: Date | undefined, page?: number | undefined, limit?: number | undefined, lastRetrieved?: Date | undefined, current?: boolean | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<DoctorCertificatesViewModel>;
    /**
     * Sample request:        DELETE /api/v1/doctors/1/certificates/1
     * @summary Delete certificate.
     * @param {string} doctorId
     * @param {string} certificateId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DoctorsDoctorIdCertificatesCertificateIdDelete(doctorId: string, certificateId: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<boolean>;
    /**
     * Sample request:        GET /api/v1/doctors/1/certificates/1
     * @summary Get certificate.
     * @param {string} doctorId
     * @param {string} certificateId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DoctorsDoctorIdCertificatesCertificateIdGet(doctorId: string, certificateId: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<DoctorCertificateViewModel>;
    /**
     * Sample request:
     * @summary Update department.
     * @param {string} doctorId
     * @param {string} certificateId
     * @param {UpdateDoctorCertificateCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DoctorsDoctorIdCertificatesCertificateIdPut(doctorId: string, certificateId: string, body?: UpdateDoctorCertificateCommand | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<boolean>;
    /**
     * Sample request:        POST /api/v1/doctors/1/certificates/1
     * @summary Create certificate.
     * @param {string} doctorId
     * @param {CreateDoctorCertificateCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DoctorsDoctorIdCertificatesPost(doctorId: string, body?: CreateDoctorCertificateCommand | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<DoctorCertificate>;
};
/**
 * DoctorCertificatesApi - factory interface
 * @export
 */
export declare const DoctorCertificatesApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * Sample request:        GET /api/v1/doctors/certificates
     * @summary Get all certificates.
     * @param {string} [id]
     * @param {string} [doctorId]
     * @param {string} [doctorName]
     * @param {string} [certificate]
     * @param {Date} [activeFrom]
     * @param {Date} [activeTo]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DoctorsCertificatesGet(id?: string | undefined, doctorId?: string | undefined, doctorName?: string | undefined, certificate?: string | undefined, activeFrom?: Date | undefined, activeTo?: Date | undefined, page?: number | undefined, limit?: number | undefined, lastRetrieved?: Date | undefined, current?: boolean | undefined, options?: any): AxiosPromise<DoctorCertificatesViewModel>;
    /**
     * Sample request:        DELETE /api/v1/doctors/1/certificates/1
     * @summary Delete certificate.
     * @param {string} doctorId
     * @param {string} certificateId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DoctorsDoctorIdCertificatesCertificateIdDelete(doctorId: string, certificateId: string, options?: any): AxiosPromise<boolean>;
    /**
     * Sample request:        GET /api/v1/doctors/1/certificates/1
     * @summary Get certificate.
     * @param {string} doctorId
     * @param {string} certificateId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DoctorsDoctorIdCertificatesCertificateIdGet(doctorId: string, certificateId: string, options?: any): AxiosPromise<DoctorCertificateViewModel>;
    /**
     * Sample request:
     * @summary Update department.
     * @param {string} doctorId
     * @param {string} certificateId
     * @param {UpdateDoctorCertificateCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DoctorsDoctorIdCertificatesCertificateIdPut(doctorId: string, certificateId: string, body?: UpdateDoctorCertificateCommand | undefined, options?: any): AxiosPromise<boolean>;
    /**
     * Sample request:        POST /api/v1/doctors/1/certificates/1
     * @summary Create certificate.
     * @param {string} doctorId
     * @param {CreateDoctorCertificateCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DoctorsDoctorIdCertificatesPost(doctorId: string, body?: CreateDoctorCertificateCommand | undefined, options?: any): AxiosPromise<DoctorCertificate>;
};
/**
 * DoctorCertificatesApi - object-oriented interface
 * @export
 * @class DoctorCertificatesApi
 * @extends {BaseAPI}
 */
export declare class DoctorCertificatesApi extends BaseAPI {
    /**
     * Sample request:        GET /api/v1/doctors/certificates
     * @summary Get all certificates.
     * @param {string} [id]
     * @param {string} [doctorId]
     * @param {string} [doctorName]
     * @param {string} [certificate]
     * @param {Date} [activeFrom]
     * @param {Date} [activeTo]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DoctorCertificatesApi
     */
    apiV1DoctorsCertificatesGet(id?: string, doctorId?: string, doctorName?: string, certificate?: string, activeFrom?: Date, activeTo?: Date, page?: number, limit?: number, lastRetrieved?: Date, current?: boolean, options?: any): AxiosPromise<DoctorCertificatesViewModel>;
    /**
     * Sample request:        DELETE /api/v1/doctors/1/certificates/1
     * @summary Delete certificate.
     * @param {string} doctorId
     * @param {string} certificateId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DoctorCertificatesApi
     */
    apiV1DoctorsDoctorIdCertificatesCertificateIdDelete(doctorId: string, certificateId: string, options?: any): AxiosPromise<boolean>;
    /**
     * Sample request:        GET /api/v1/doctors/1/certificates/1
     * @summary Get certificate.
     * @param {string} doctorId
     * @param {string} certificateId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DoctorCertificatesApi
     */
    apiV1DoctorsDoctorIdCertificatesCertificateIdGet(doctorId: string, certificateId: string, options?: any): AxiosPromise<DoctorCertificateViewModel>;
    /**
     * Sample request:
     * @summary Update department.
     * @param {string} doctorId
     * @param {string} certificateId
     * @param {UpdateDoctorCertificateCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DoctorCertificatesApi
     */
    apiV1DoctorsDoctorIdCertificatesCertificateIdPut(doctorId: string, certificateId: string, body?: UpdateDoctorCertificateCommand, options?: any): AxiosPromise<boolean>;
    /**
     * Sample request:        POST /api/v1/doctors/1/certificates/1
     * @summary Create certificate.
     * @param {string} doctorId
     * @param {CreateDoctorCertificateCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DoctorCertificatesApi
     */
    apiV1DoctorsDoctorIdCertificatesPost(doctorId: string, body?: CreateDoctorCertificateCommand, options?: any): AxiosPromise<DoctorCertificate>;
}
/**
 * DoctorReviewsApi - axios parameter creator
 * @export
 */
export declare const DoctorReviewsApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Sample request:        DELETE /api/v1/doctors/1/reviews/1
     * @summary Delete review.
     * @param {string} doctorId
     * @param {string} patientId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DoctorsDoctorIdReviewsPatientIdDelete(doctorId: string, patientId: string, options?: any): RequestArgs;
    /**
     * Sample request:        GET /api/v1/doctors/1/reviews/1
     * @summary Get review.
     * @param {string} doctorId
     * @param {string} patientId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DoctorsDoctorIdReviewsPatientIdGet(doctorId: string, patientId: string, options?: any): RequestArgs;
    /**
     * Sample request:
     * @summary Update review.
     * @param {string} doctorId
     * @param {string} patientId
     * @param {UpdateDoctorReviewCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DoctorsDoctorIdReviewsPatientIdPut(doctorId: string, patientId: string, body?: UpdateDoctorReviewCommand | undefined, options?: any): RequestArgs;
    /**
     * Sample request:        POST /api/v1/doctors/1/reviews/1
     * @summary Create review.
     * @param {string} doctorId
     * @param {string} patientId
     * @param {CreateDoctorReviewCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DoctorsDoctorIdReviewsPost(doctorId: string, patientId: string, body?: CreateDoctorReviewCommand | undefined, options?: any): RequestArgs;
    /**
     * Sample request:        GET /api/v1/doctors/reviews
     * @summary Get all reviews.
     * @param {string} [doctorId]
     * @param {string} [doctorName]
     * @param {string} [patientId]
     * @param {string} [patientName]
     * @param {string} [body]
     * @param {boolean} [recommended]
     * @param {object} [reviewCategory]
     * @param {number} [rate]
     * @param {Date} [created]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DoctorsReviewsGet(doctorId?: string | undefined, doctorName?: string | undefined, patientId?: string | undefined, patientName?: string | undefined, body?: string | undefined, recommended?: boolean | undefined, reviewCategory?: object | undefined, rate?: number | undefined, created?: Date | undefined, page?: number | undefined, limit?: number | undefined, lastRetrieved?: Date | undefined, current?: boolean | undefined, options?: any): RequestArgs;
};
/**
 * DoctorReviewsApi - functional programming interface
 * @export
 */
export declare const DoctorReviewsApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Sample request:        DELETE /api/v1/doctors/1/reviews/1
     * @summary Delete review.
     * @param {string} doctorId
     * @param {string} patientId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DoctorsDoctorIdReviewsPatientIdDelete(doctorId: string, patientId: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<boolean>;
    /**
     * Sample request:        GET /api/v1/doctors/1/reviews/1
     * @summary Get review.
     * @param {string} doctorId
     * @param {string} patientId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DoctorsDoctorIdReviewsPatientIdGet(doctorId: string, patientId: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<DoctorReviewViewModel>;
    /**
     * Sample request:
     * @summary Update review.
     * @param {string} doctorId
     * @param {string} patientId
     * @param {UpdateDoctorReviewCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DoctorsDoctorIdReviewsPatientIdPut(doctorId: string, patientId: string, body?: UpdateDoctorReviewCommand | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<boolean>;
    /**
     * Sample request:        POST /api/v1/doctors/1/reviews/1
     * @summary Create review.
     * @param {string} doctorId
     * @param {string} patientId
     * @param {CreateDoctorReviewCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DoctorsDoctorIdReviewsPost(doctorId: string, patientId: string, body?: CreateDoctorReviewCommand | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<DoctorReview>;
    /**
     * Sample request:        GET /api/v1/doctors/reviews
     * @summary Get all reviews.
     * @param {string} [doctorId]
     * @param {string} [doctorName]
     * @param {string} [patientId]
     * @param {string} [patientName]
     * @param {string} [body]
     * @param {boolean} [recommended]
     * @param {object} [reviewCategory]
     * @param {number} [rate]
     * @param {Date} [created]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DoctorsReviewsGet(doctorId?: string | undefined, doctorName?: string | undefined, patientId?: string | undefined, patientName?: string | undefined, body?: string | undefined, recommended?: boolean | undefined, reviewCategory?: object | undefined, rate?: number | undefined, created?: Date | undefined, page?: number | undefined, limit?: number | undefined, lastRetrieved?: Date | undefined, current?: boolean | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<DoctorReviewsViewModel>;
};
/**
 * DoctorReviewsApi - factory interface
 * @export
 */
export declare const DoctorReviewsApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * Sample request:        DELETE /api/v1/doctors/1/reviews/1
     * @summary Delete review.
     * @param {string} doctorId
     * @param {string} patientId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DoctorsDoctorIdReviewsPatientIdDelete(doctorId: string, patientId: string, options?: any): AxiosPromise<boolean>;
    /**
     * Sample request:        GET /api/v1/doctors/1/reviews/1
     * @summary Get review.
     * @param {string} doctorId
     * @param {string} patientId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DoctorsDoctorIdReviewsPatientIdGet(doctorId: string, patientId: string, options?: any): AxiosPromise<DoctorReviewViewModel>;
    /**
     * Sample request:
     * @summary Update review.
     * @param {string} doctorId
     * @param {string} patientId
     * @param {UpdateDoctorReviewCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DoctorsDoctorIdReviewsPatientIdPut(doctorId: string, patientId: string, body?: UpdateDoctorReviewCommand | undefined, options?: any): AxiosPromise<boolean>;
    /**
     * Sample request:        POST /api/v1/doctors/1/reviews/1
     * @summary Create review.
     * @param {string} doctorId
     * @param {string} patientId
     * @param {CreateDoctorReviewCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DoctorsDoctorIdReviewsPost(doctorId: string, patientId: string, body?: CreateDoctorReviewCommand | undefined, options?: any): AxiosPromise<DoctorReview>;
    /**
     * Sample request:        GET /api/v1/doctors/reviews
     * @summary Get all reviews.
     * @param {string} [doctorId]
     * @param {string} [doctorName]
     * @param {string} [patientId]
     * @param {string} [patientName]
     * @param {string} [body]
     * @param {boolean} [recommended]
     * @param {object} [reviewCategory]
     * @param {number} [rate]
     * @param {Date} [created]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DoctorsReviewsGet(doctorId?: string | undefined, doctorName?: string | undefined, patientId?: string | undefined, patientName?: string | undefined, body?: string | undefined, recommended?: boolean | undefined, reviewCategory?: object | undefined, rate?: number | undefined, created?: Date | undefined, page?: number | undefined, limit?: number | undefined, lastRetrieved?: Date | undefined, current?: boolean | undefined, options?: any): AxiosPromise<DoctorReviewsViewModel>;
};
/**
 * DoctorReviewsApi - object-oriented interface
 * @export
 * @class DoctorReviewsApi
 * @extends {BaseAPI}
 */
export declare class DoctorReviewsApi extends BaseAPI {
    /**
     * Sample request:        DELETE /api/v1/doctors/1/reviews/1
     * @summary Delete review.
     * @param {string} doctorId
     * @param {string} patientId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DoctorReviewsApi
     */
    apiV1DoctorsDoctorIdReviewsPatientIdDelete(doctorId: string, patientId: string, options?: any): AxiosPromise<boolean>;
    /**
     * Sample request:        GET /api/v1/doctors/1/reviews/1
     * @summary Get review.
     * @param {string} doctorId
     * @param {string} patientId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DoctorReviewsApi
     */
    apiV1DoctorsDoctorIdReviewsPatientIdGet(doctorId: string, patientId: string, options?: any): AxiosPromise<DoctorReviewViewModel>;
    /**
     * Sample request:
     * @summary Update review.
     * @param {string} doctorId
     * @param {string} patientId
     * @param {UpdateDoctorReviewCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DoctorReviewsApi
     */
    apiV1DoctorsDoctorIdReviewsPatientIdPut(doctorId: string, patientId: string, body?: UpdateDoctorReviewCommand, options?: any): AxiosPromise<boolean>;
    /**
     * Sample request:        POST /api/v1/doctors/1/reviews/1
     * @summary Create review.
     * @param {string} doctorId
     * @param {string} patientId
     * @param {CreateDoctorReviewCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DoctorReviewsApi
     */
    apiV1DoctorsDoctorIdReviewsPost(doctorId: string, patientId: string, body?: CreateDoctorReviewCommand, options?: any): AxiosPromise<DoctorReview>;
    /**
     * Sample request:        GET /api/v1/doctors/reviews
     * @summary Get all reviews.
     * @param {string} [doctorId]
     * @param {string} [doctorName]
     * @param {string} [patientId]
     * @param {string} [patientName]
     * @param {string} [body]
     * @param {boolean} [recommended]
     * @param {object} [reviewCategory]
     * @param {number} [rate]
     * @param {Date} [created]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DoctorReviewsApi
     */
    apiV1DoctorsReviewsGet(doctorId?: string, doctorName?: string, patientId?: string, patientName?: string, body?: string, recommended?: boolean, reviewCategory?: object, rate?: number, created?: Date, page?: number, limit?: number, lastRetrieved?: Date, current?: boolean, options?: any): AxiosPromise<DoctorReviewsViewModel>;
}
/**
 * DoctorSpecialtiesApi - axios parameter creator
 * @export
 */
export declare const DoctorSpecialtiesApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Sample request:        POST /api/v1/doctors/1/specialty/1
     * @summary Link a doctor to a specialty.
     * @param {string} doctorId
     * @param {string} specialtyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DoctorsDoctorIdSpecialtySpecialtyIdPost(doctorId: string, specialtyId: string, options?: any): RequestArgs;
    /**
     * Sample request:        DELETE /api/v1/doctors/1/specialty/1
     * @summary Remove link between the doctor and the specialty.
     * @param {string} doctorId
     * @param {string} specailtyId
     * @param {string} hospitalId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DoctorsHospitalIdDoctorsDoctorIdDelete(doctorId: string, specailtyId: string, hospitalId: string, options?: any): RequestArgs;
};
/**
 * DoctorSpecialtiesApi - functional programming interface
 * @export
 */
export declare const DoctorSpecialtiesApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Sample request:        POST /api/v1/doctors/1/specialty/1
     * @summary Link a doctor to a specialty.
     * @param {string} doctorId
     * @param {string} specialtyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DoctorsDoctorIdSpecialtySpecialtyIdPost(doctorId: string, specialtyId: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<DoctorSpecialtyViewModel>;
    /**
     * Sample request:        DELETE /api/v1/doctors/1/specialty/1
     * @summary Remove link between the doctor and the specialty.
     * @param {string} doctorId
     * @param {string} specailtyId
     * @param {string} hospitalId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DoctorsHospitalIdDoctorsDoctorIdDelete(doctorId: string, specailtyId: string, hospitalId: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<boolean>;
};
/**
 * DoctorSpecialtiesApi - factory interface
 * @export
 */
export declare const DoctorSpecialtiesApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * Sample request:        POST /api/v1/doctors/1/specialty/1
     * @summary Link a doctor to a specialty.
     * @param {string} doctorId
     * @param {string} specialtyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DoctorsDoctorIdSpecialtySpecialtyIdPost(doctorId: string, specialtyId: string, options?: any): AxiosPromise<DoctorSpecialtyViewModel>;
    /**
     * Sample request:        DELETE /api/v1/doctors/1/specialty/1
     * @summary Remove link between the doctor and the specialty.
     * @param {string} doctorId
     * @param {string} specailtyId
     * @param {string} hospitalId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DoctorsHospitalIdDoctorsDoctorIdDelete(doctorId: string, specailtyId: string, hospitalId: string, options?: any): AxiosPromise<boolean>;
};
/**
 * DoctorSpecialtiesApi - object-oriented interface
 * @export
 * @class DoctorSpecialtiesApi
 * @extends {BaseAPI}
 */
export declare class DoctorSpecialtiesApi extends BaseAPI {
    /**
     * Sample request:        POST /api/v1/doctors/1/specialty/1
     * @summary Link a doctor to a specialty.
     * @param {string} doctorId
     * @param {string} specialtyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DoctorSpecialtiesApi
     */
    apiV1DoctorsDoctorIdSpecialtySpecialtyIdPost(doctorId: string, specialtyId: string, options?: any): AxiosPromise<DoctorSpecialtyViewModel>;
    /**
     * Sample request:        DELETE /api/v1/doctors/1/specialty/1
     * @summary Remove link between the doctor and the specialty.
     * @param {string} doctorId
     * @param {string} specailtyId
     * @param {string} hospitalId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DoctorSpecialtiesApi
     */
    apiV1DoctorsHospitalIdDoctorsDoctorIdDelete(doctorId: string, specailtyId: string, hospitalId: string, options?: any): AxiosPromise<boolean>;
}
/**
 * DoctorsApi - axios parameter creator
 * @export
 */
export declare const DoctorsApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Sample request:        DELETE /api/v1/doctors/1
     * @summary Delete doctor.
     * @param {string} doctorId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DoctorsDoctorIdDelete(doctorId: string, options?: any): RequestArgs;
    /**
     * Sample request:        GET /api/v1/doctors/1
     * @summary Get hospital doctor.
     * @param {string} doctorId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DoctorsDoctorIdGet(doctorId: string, options?: any): RequestArgs;
    /**
     * Sample request:        PUT /api/v1/doctors/1      {          \"firstName\": \"string\",          \"lastName\": \"string\",          \"photo\": \"string\",          \"locations\": [            {              \"locationType\": \"LivesIn\",              \"latitude\": 0,              \"longitude\": 0,              \"country\": \"string\",              \"state\": \"string\",              \"county\": \"string\",              \"city\": \"string\",              \"zipCode\": \"string\",              \"address\": \"string\"            }          ]      }
     * @summary Update hospital doctor.
     * @param {string} doctorId
     * @param {UpdateDoctorCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DoctorsDoctorIdPut(doctorId: string, body?: UpdateDoctorCommand | undefined, options?: any): RequestArgs;
    /**
     *
     * @summary Get all hospital doctors.
     * @param {string} [countryId]
     * @param {string} [hospitalId]
     * @param {object} [marketingType]
     * @param {string} [specialtyId]
     * @param {string} [specialtyTypeId]
     * @param {boolean} [consultationEnabled]
     * @param {string} [id]
     * @param {string} [fullname]
     * @param {string} [email]
     * @param {object} [gender]
     * @param {Date} [dateOfBirth]
     * @param {Date} [created]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DoctorsGet(countryId?: string | undefined, hospitalId?: string | undefined, marketingType?: object | undefined, specialtyId?: string | undefined, specialtyTypeId?: string | undefined, consultationEnabled?: boolean | undefined, id?: string | undefined, fullname?: string | undefined, email?: string | undefined, gender?: object | undefined, dateOfBirth?: Date | undefined, created?: Date | undefined, page?: number | undefined, limit?: number | undefined, lastRetrieved?: Date | undefined, current?: boolean | undefined, options?: any): RequestArgs;
    /**
     * Sample request:        POST /api/v1/doctors      {          \"userName\": \"cloudDoctor\",          \"email\": \"doctor@icloudhospital.com\",          \"hospitalId\": 1,          \"firstName\": \"cloud\",          \"lastName\": \"doctor\",          \"photo\": \"string\",          \"photoThumbnail\": \"string\",          \"gender\": \"NotSpecified\",          \"dateOfBirth\": \"2020-02-22T17:57:32.048Z\",          \"locations\": [            {              \"locationType\": \"LivesIn\",              \"latitude\": 0,              \"longitude\": 0,              \"country\": \"string\",              \"state\": \"string\",              \"county\": \"string\",              \"city\": \"string\",              \"zipCode\": \"string\",              \"address\": \"string\"            }          ]      }
     * @summary Create hospital doctor.
     * @param {CreateDoctorCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DoctorsPost(body?: CreateDoctorCommand | undefined, options?: any): RequestArgs;
};
/**
 * DoctorsApi - functional programming interface
 * @export
 */
export declare const DoctorsApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Sample request:        DELETE /api/v1/doctors/1
     * @summary Delete doctor.
     * @param {string} doctorId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DoctorsDoctorIdDelete(doctorId: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<boolean>;
    /**
     * Sample request:        GET /api/v1/doctors/1
     * @summary Get hospital doctor.
     * @param {string} doctorId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DoctorsDoctorIdGet(doctorId: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<DoctorViewModel>;
    /**
     * Sample request:        PUT /api/v1/doctors/1      {          \"firstName\": \"string\",          \"lastName\": \"string\",          \"photo\": \"string\",          \"locations\": [            {              \"locationType\": \"LivesIn\",              \"latitude\": 0,              \"longitude\": 0,              \"country\": \"string\",              \"state\": \"string\",              \"county\": \"string\",              \"city\": \"string\",              \"zipCode\": \"string\",              \"address\": \"string\"            }          ]      }
     * @summary Update hospital doctor.
     * @param {string} doctorId
     * @param {UpdateDoctorCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DoctorsDoctorIdPut(doctorId: string, body?: UpdateDoctorCommand | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<boolean>;
    /**
     *
     * @summary Get all hospital doctors.
     * @param {string} [countryId]
     * @param {string} [hospitalId]
     * @param {object} [marketingType]
     * @param {string} [specialtyId]
     * @param {string} [specialtyTypeId]
     * @param {boolean} [consultationEnabled]
     * @param {string} [id]
     * @param {string} [fullname]
     * @param {string} [email]
     * @param {object} [gender]
     * @param {Date} [dateOfBirth]
     * @param {Date} [created]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DoctorsGet(countryId?: string | undefined, hospitalId?: string | undefined, marketingType?: object | undefined, specialtyId?: string | undefined, specialtyTypeId?: string | undefined, consultationEnabled?: boolean | undefined, id?: string | undefined, fullname?: string | undefined, email?: string | undefined, gender?: object | undefined, dateOfBirth?: Date | undefined, created?: Date | undefined, page?: number | undefined, limit?: number | undefined, lastRetrieved?: Date | undefined, current?: boolean | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<DoctorsViewModel>;
    /**
     * Sample request:        POST /api/v1/doctors      {          \"userName\": \"cloudDoctor\",          \"email\": \"doctor@icloudhospital.com\",          \"hospitalId\": 1,          \"firstName\": \"cloud\",          \"lastName\": \"doctor\",          \"photo\": \"string\",          \"photoThumbnail\": \"string\",          \"gender\": \"NotSpecified\",          \"dateOfBirth\": \"2020-02-22T17:57:32.048Z\",          \"locations\": [            {              \"locationType\": \"LivesIn\",              \"latitude\": 0,              \"longitude\": 0,              \"country\": \"string\",              \"state\": \"string\",              \"county\": \"string\",              \"city\": \"string\",              \"zipCode\": \"string\",              \"address\": \"string\"            }          ]      }
     * @summary Create hospital doctor.
     * @param {CreateDoctorCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DoctorsPost(body?: CreateDoctorCommand | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<string>;
};
/**
 * DoctorsApi - factory interface
 * @export
 */
export declare const DoctorsApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * Sample request:        DELETE /api/v1/doctors/1
     * @summary Delete doctor.
     * @param {string} doctorId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DoctorsDoctorIdDelete(doctorId: string, options?: any): AxiosPromise<boolean>;
    /**
     * Sample request:        GET /api/v1/doctors/1
     * @summary Get hospital doctor.
     * @param {string} doctorId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DoctorsDoctorIdGet(doctorId: string, options?: any): AxiosPromise<DoctorViewModel>;
    /**
     * Sample request:        PUT /api/v1/doctors/1      {          \"firstName\": \"string\",          \"lastName\": \"string\",          \"photo\": \"string\",          \"locations\": [            {              \"locationType\": \"LivesIn\",              \"latitude\": 0,              \"longitude\": 0,              \"country\": \"string\",              \"state\": \"string\",              \"county\": \"string\",              \"city\": \"string\",              \"zipCode\": \"string\",              \"address\": \"string\"            }          ]      }
     * @summary Update hospital doctor.
     * @param {string} doctorId
     * @param {UpdateDoctorCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DoctorsDoctorIdPut(doctorId: string, body?: UpdateDoctorCommand | undefined, options?: any): AxiosPromise<boolean>;
    /**
     *
     * @summary Get all hospital doctors.
     * @param {string} [countryId]
     * @param {string} [hospitalId]
     * @param {object} [marketingType]
     * @param {string} [specialtyId]
     * @param {string} [specialtyTypeId]
     * @param {boolean} [consultationEnabled]
     * @param {string} [id]
     * @param {string} [fullname]
     * @param {string} [email]
     * @param {object} [gender]
     * @param {Date} [dateOfBirth]
     * @param {Date} [created]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DoctorsGet(countryId?: string | undefined, hospitalId?: string | undefined, marketingType?: object | undefined, specialtyId?: string | undefined, specialtyTypeId?: string | undefined, consultationEnabled?: boolean | undefined, id?: string | undefined, fullname?: string | undefined, email?: string | undefined, gender?: object | undefined, dateOfBirth?: Date | undefined, created?: Date | undefined, page?: number | undefined, limit?: number | undefined, lastRetrieved?: Date | undefined, current?: boolean | undefined, options?: any): AxiosPromise<DoctorsViewModel>;
    /**
     * Sample request:        POST /api/v1/doctors      {          \"userName\": \"cloudDoctor\",          \"email\": \"doctor@icloudhospital.com\",          \"hospitalId\": 1,          \"firstName\": \"cloud\",          \"lastName\": \"doctor\",          \"photo\": \"string\",          \"photoThumbnail\": \"string\",          \"gender\": \"NotSpecified\",          \"dateOfBirth\": \"2020-02-22T17:57:32.048Z\",          \"locations\": [            {              \"locationType\": \"LivesIn\",              \"latitude\": 0,              \"longitude\": 0,              \"country\": \"string\",              \"state\": \"string\",              \"county\": \"string\",              \"city\": \"string\",              \"zipCode\": \"string\",              \"address\": \"string\"            }          ]      }
     * @summary Create hospital doctor.
     * @param {CreateDoctorCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DoctorsPost(body?: CreateDoctorCommand | undefined, options?: any): AxiosPromise<string>;
};
/**
 * DoctorsApi - object-oriented interface
 * @export
 * @class DoctorsApi
 * @extends {BaseAPI}
 */
export declare class DoctorsApi extends BaseAPI {
    /**
     * Sample request:        DELETE /api/v1/doctors/1
     * @summary Delete doctor.
     * @param {string} doctorId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DoctorsApi
     */
    apiV1DoctorsDoctorIdDelete(doctorId: string, options?: any): AxiosPromise<boolean>;
    /**
     * Sample request:        GET /api/v1/doctors/1
     * @summary Get hospital doctor.
     * @param {string} doctorId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DoctorsApi
     */
    apiV1DoctorsDoctorIdGet(doctorId: string, options?: any): AxiosPromise<DoctorViewModel>;
    /**
     * Sample request:        PUT /api/v1/doctors/1      {          \"firstName\": \"string\",          \"lastName\": \"string\",          \"photo\": \"string\",          \"locations\": [            {              \"locationType\": \"LivesIn\",              \"latitude\": 0,              \"longitude\": 0,              \"country\": \"string\",              \"state\": \"string\",              \"county\": \"string\",              \"city\": \"string\",              \"zipCode\": \"string\",              \"address\": \"string\"            }          ]      }
     * @summary Update hospital doctor.
     * @param {string} doctorId
     * @param {UpdateDoctorCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DoctorsApi
     */
    apiV1DoctorsDoctorIdPut(doctorId: string, body?: UpdateDoctorCommand, options?: any): AxiosPromise<boolean>;
    /**
     *
     * @summary Get all hospital doctors.
     * @param {string} [countryId]
     * @param {string} [hospitalId]
     * @param {object} [marketingType]
     * @param {string} [specialtyId]
     * @param {string} [specialtyTypeId]
     * @param {boolean} [consultationEnabled]
     * @param {string} [id]
     * @param {string} [fullname]
     * @param {string} [email]
     * @param {object} [gender]
     * @param {Date} [dateOfBirth]
     * @param {Date} [created]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DoctorsApi
     */
    apiV1DoctorsGet(countryId?: string, hospitalId?: string, marketingType?: object, specialtyId?: string, specialtyTypeId?: string, consultationEnabled?: boolean, id?: string, fullname?: string, email?: string, gender?: object, dateOfBirth?: Date, created?: Date, page?: number, limit?: number, lastRetrieved?: Date, current?: boolean, options?: any): AxiosPromise<DoctorsViewModel>;
    /**
     * Sample request:        POST /api/v1/doctors      {          \"userName\": \"cloudDoctor\",          \"email\": \"doctor@icloudhospital.com\",          \"hospitalId\": 1,          \"firstName\": \"cloud\",          \"lastName\": \"doctor\",          \"photo\": \"string\",          \"photoThumbnail\": \"string\",          \"gender\": \"NotSpecified\",          \"dateOfBirth\": \"2020-02-22T17:57:32.048Z\",          \"locations\": [            {              \"locationType\": \"LivesIn\",              \"latitude\": 0,              \"longitude\": 0,              \"country\": \"string\",              \"state\": \"string\",              \"county\": \"string\",              \"city\": \"string\",              \"zipCode\": \"string\",              \"address\": \"string\"            }          ]      }
     * @summary Create hospital doctor.
     * @param {CreateDoctorCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DoctorsApi
     */
    apiV1DoctorsPost(body?: CreateDoctorCommand, options?: any): AxiosPromise<string>;
}
/**
 * EquipmentsApi - axios parameter creator
 * @export
 */
export declare const EquipmentsApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Sample request:        GET /api/v1/hospitals/1/equipments      {          \"pageQueryFilter\": {              \"page\": 1,              \"limit\": 20,              \"lastRetrived\": \"2020-02-05T08:40\"          },          \"searchString\": \"Medical\"      }
     * @summary Get all equipments.
     * @param {string} [id]
     * @param {string} [name]
     * @param {string} [description]
     * @param {string} [hospitalId]
     * @param {string} [hospitalName]
     * @param {Date} [created]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsEquipmentsGet(id?: string | undefined, name?: string | undefined, description?: string | undefined, hospitalId?: string | undefined, hospitalName?: string | undefined, created?: Date | undefined, page?: number | undefined, limit?: number | undefined, lastRetrieved?: Date | undefined, current?: boolean | undefined, options?: any): RequestArgs;
    /**
     * Sample request:        DELETE /api/v1/hospitals/1/equipments/1
     * @summary Delete equipment.
     * @param {string} hospitalId
     * @param {string} equipmentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsHospitalIdEquipmentsEquipmentIdDelete(hospitalId: string, equipmentId: string, options?: any): RequestArgs;
    /**
     * Sample request:        GET /api/v1/hospitals/1/equipments/1
     * @summary Get equipment.
     * @param {string} hospitalId
     * @param {string} equipmentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsHospitalIdEquipmentsEquipmentIdGet(hospitalId: string, equipmentId: string, options?: any): RequestArgs;
    /**
     * Sample request:        PUT /api/v1/hospitals/1/equipments/1      {          \"description\": \"Upgraded medical equipment\"      }
     * @summary Update equipment.
     * @param {string} hospitalId
     * @param {string} equipmentId
     * @param {UpdateEquipmentCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsHospitalIdEquipmentsEquipmentIdPut(hospitalId: string, equipmentId: string, body?: UpdateEquipmentCommand | undefined, options?: any): RequestArgs;
    /**
     * Sample request:        POST /api/v1/hospitals/1/equipments      {          \"name\": \"Afroasia ltd\",          \"description\": \"Medical equipment\",          \"medias\": [            {              \"mediaType\": 0,              \"url\": \"imageurl\",              \"description\": \"string\",                      \"order\": 0            }          ]      }
     * @summary Create an equipment and add to a hospital.
     * @param {string} hospitalId
     * @param {CreateEquipmentCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsHospitalIdEquipmentsPost(hospitalId: string, body?: CreateEquipmentCommand | undefined, options?: any): RequestArgs;
};
/**
 * EquipmentsApi - functional programming interface
 * @export
 */
export declare const EquipmentsApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Sample request:        GET /api/v1/hospitals/1/equipments      {          \"pageQueryFilter\": {              \"page\": 1,              \"limit\": 20,              \"lastRetrived\": \"2020-02-05T08:40\"          },          \"searchString\": \"Medical\"      }
     * @summary Get all equipments.
     * @param {string} [id]
     * @param {string} [name]
     * @param {string} [description]
     * @param {string} [hospitalId]
     * @param {string} [hospitalName]
     * @param {Date} [created]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsEquipmentsGet(id?: string | undefined, name?: string | undefined, description?: string | undefined, hospitalId?: string | undefined, hospitalName?: string | undefined, created?: Date | undefined, page?: number | undefined, limit?: number | undefined, lastRetrieved?: Date | undefined, current?: boolean | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<EquipmentsViewModel>;
    /**
     * Sample request:        DELETE /api/v1/hospitals/1/equipments/1
     * @summary Delete equipment.
     * @param {string} hospitalId
     * @param {string} equipmentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsHospitalIdEquipmentsEquipmentIdDelete(hospitalId: string, equipmentId: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<boolean>;
    /**
     * Sample request:        GET /api/v1/hospitals/1/equipments/1
     * @summary Get equipment.
     * @param {string} hospitalId
     * @param {string} equipmentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsHospitalIdEquipmentsEquipmentIdGet(hospitalId: string, equipmentId: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<EquipmentViewModel>;
    /**
     * Sample request:        PUT /api/v1/hospitals/1/equipments/1      {          \"description\": \"Upgraded medical equipment\"      }
     * @summary Update equipment.
     * @param {string} hospitalId
     * @param {string} equipmentId
     * @param {UpdateEquipmentCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsHospitalIdEquipmentsEquipmentIdPut(hospitalId: string, equipmentId: string, body?: UpdateEquipmentCommand | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<boolean>;
    /**
     * Sample request:        POST /api/v1/hospitals/1/equipments      {          \"name\": \"Afroasia ltd\",          \"description\": \"Medical equipment\",          \"medias\": [            {              \"mediaType\": 0,              \"url\": \"imageurl\",              \"description\": \"string\",                      \"order\": 0            }          ]      }
     * @summary Create an equipment and add to a hospital.
     * @param {string} hospitalId
     * @param {CreateEquipmentCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsHospitalIdEquipmentsPost(hospitalId: string, body?: CreateEquipmentCommand | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<string>;
};
/**
 * EquipmentsApi - factory interface
 * @export
 */
export declare const EquipmentsApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * Sample request:        GET /api/v1/hospitals/1/equipments      {          \"pageQueryFilter\": {              \"page\": 1,              \"limit\": 20,              \"lastRetrived\": \"2020-02-05T08:40\"          },          \"searchString\": \"Medical\"      }
     * @summary Get all equipments.
     * @param {string} [id]
     * @param {string} [name]
     * @param {string} [description]
     * @param {string} [hospitalId]
     * @param {string} [hospitalName]
     * @param {Date} [created]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsEquipmentsGet(id?: string | undefined, name?: string | undefined, description?: string | undefined, hospitalId?: string | undefined, hospitalName?: string | undefined, created?: Date | undefined, page?: number | undefined, limit?: number | undefined, lastRetrieved?: Date | undefined, current?: boolean | undefined, options?: any): AxiosPromise<EquipmentsViewModel>;
    /**
     * Sample request:        DELETE /api/v1/hospitals/1/equipments/1
     * @summary Delete equipment.
     * @param {string} hospitalId
     * @param {string} equipmentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsHospitalIdEquipmentsEquipmentIdDelete(hospitalId: string, equipmentId: string, options?: any): AxiosPromise<boolean>;
    /**
     * Sample request:        GET /api/v1/hospitals/1/equipments/1
     * @summary Get equipment.
     * @param {string} hospitalId
     * @param {string} equipmentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsHospitalIdEquipmentsEquipmentIdGet(hospitalId: string, equipmentId: string, options?: any): AxiosPromise<EquipmentViewModel>;
    /**
     * Sample request:        PUT /api/v1/hospitals/1/equipments/1      {          \"description\": \"Upgraded medical equipment\"      }
     * @summary Update equipment.
     * @param {string} hospitalId
     * @param {string} equipmentId
     * @param {UpdateEquipmentCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsHospitalIdEquipmentsEquipmentIdPut(hospitalId: string, equipmentId: string, body?: UpdateEquipmentCommand | undefined, options?: any): AxiosPromise<boolean>;
    /**
     * Sample request:        POST /api/v1/hospitals/1/equipments      {          \"name\": \"Afroasia ltd\",          \"description\": \"Medical equipment\",          \"medias\": [            {              \"mediaType\": 0,              \"url\": \"imageurl\",              \"description\": \"string\",                      \"order\": 0            }          ]      }
     * @summary Create an equipment and add to a hospital.
     * @param {string} hospitalId
     * @param {CreateEquipmentCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsHospitalIdEquipmentsPost(hospitalId: string, body?: CreateEquipmentCommand | undefined, options?: any): AxiosPromise<string>;
};
/**
 * EquipmentsApi - object-oriented interface
 * @export
 * @class EquipmentsApi
 * @extends {BaseAPI}
 */
export declare class EquipmentsApi extends BaseAPI {
    /**
     * Sample request:        GET /api/v1/hospitals/1/equipments      {          \"pageQueryFilter\": {              \"page\": 1,              \"limit\": 20,              \"lastRetrived\": \"2020-02-05T08:40\"          },          \"searchString\": \"Medical\"      }
     * @summary Get all equipments.
     * @param {string} [id]
     * @param {string} [name]
     * @param {string} [description]
     * @param {string} [hospitalId]
     * @param {string} [hospitalName]
     * @param {Date} [created]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EquipmentsApi
     */
    apiV1HospitalsEquipmentsGet(id?: string, name?: string, description?: string, hospitalId?: string, hospitalName?: string, created?: Date, page?: number, limit?: number, lastRetrieved?: Date, current?: boolean, options?: any): AxiosPromise<EquipmentsViewModel>;
    /**
     * Sample request:        DELETE /api/v1/hospitals/1/equipments/1
     * @summary Delete equipment.
     * @param {string} hospitalId
     * @param {string} equipmentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EquipmentsApi
     */
    apiV1HospitalsHospitalIdEquipmentsEquipmentIdDelete(hospitalId: string, equipmentId: string, options?: any): AxiosPromise<boolean>;
    /**
     * Sample request:        GET /api/v1/hospitals/1/equipments/1
     * @summary Get equipment.
     * @param {string} hospitalId
     * @param {string} equipmentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EquipmentsApi
     */
    apiV1HospitalsHospitalIdEquipmentsEquipmentIdGet(hospitalId: string, equipmentId: string, options?: any): AxiosPromise<EquipmentViewModel>;
    /**
     * Sample request:        PUT /api/v1/hospitals/1/equipments/1      {          \"description\": \"Upgraded medical equipment\"      }
     * @summary Update equipment.
     * @param {string} hospitalId
     * @param {string} equipmentId
     * @param {UpdateEquipmentCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EquipmentsApi
     */
    apiV1HospitalsHospitalIdEquipmentsEquipmentIdPut(hospitalId: string, equipmentId: string, body?: UpdateEquipmentCommand, options?: any): AxiosPromise<boolean>;
    /**
     * Sample request:        POST /api/v1/hospitals/1/equipments      {          \"name\": \"Afroasia ltd\",          \"description\": \"Medical equipment\",          \"medias\": [            {              \"mediaType\": 0,              \"url\": \"imageurl\",              \"description\": \"string\",                      \"order\": 0            }          ]      }
     * @summary Create an equipment and add to a hospital.
     * @param {string} hospitalId
     * @param {CreateEquipmentCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EquipmentsApi
     */
    apiV1HospitalsHospitalIdEquipmentsPost(hospitalId: string, body?: CreateEquipmentCommand, options?: any): AxiosPromise<string>;
}
/**
 * HospitalReviewsApi - axios parameter creator
 * @export
 */
export declare const HospitalReviewsApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Sample request:        DELETE /api/v1/hospitals/1/reviews/1
     * @summary Delete review.
     * @param {string} hospitalId
     * @param {string} patientId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsHospitalIdReviewsPatientIdDelete(hospitalId: string, patientId: string, options?: any): RequestArgs;
    /**
     * Sample request:        GET /api/v1/hospitals/1/reviews/1
     * @summary Get review.
     * @param {string} hospitalId
     * @param {string} patientId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsHospitalIdReviewsPatientIdGet(hospitalId: string, patientId: string, options?: any): RequestArgs;
    /**
     * Sample request:
     * @summary Update review.
     * @param {string} hospitalId
     * @param {string} patientId
     * @param {UpdateHospitalReviewCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsHospitalIdReviewsPatientIdPut(hospitalId: string, patientId: string, body?: UpdateHospitalReviewCommand | undefined, options?: any): RequestArgs;
    /**
     * Sample request:        POST /api/v1/hospitals/1/reviews/1
     * @summary Create review.
     * @param {string} hospitalId
     * @param {string} patientId
     * @param {CreateHospitalReviewCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsHospitalIdReviewsPost(hospitalId: string, patientId: string, body?: CreateHospitalReviewCommand | undefined, options?: any): RequestArgs;
    /**
     * Sample request:        GET /api/v1/hospitals/reviews
     * @summary Get all reviews.
     * @param {string} [patientId]
     * @param {string} [patientName]
     * @param {string} [hospitalId]
     * @param {string} [hospitalName]
     * @param {string} [body]
     * @param {boolean} [recommended]
     * @param {object} [reviewCategory]
     * @param {number} [rate]
     * @param {Date} [created]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsReviewsGet(patientId?: string | undefined, patientName?: string | undefined, hospitalId?: string | undefined, hospitalName?: string | undefined, body?: string | undefined, recommended?: boolean | undefined, reviewCategory?: object | undefined, rate?: number | undefined, created?: Date | undefined, page?: number | undefined, limit?: number | undefined, lastRetrieved?: Date | undefined, current?: boolean | undefined, options?: any): RequestArgs;
};
/**
 * HospitalReviewsApi - functional programming interface
 * @export
 */
export declare const HospitalReviewsApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Sample request:        DELETE /api/v1/hospitals/1/reviews/1
     * @summary Delete review.
     * @param {string} hospitalId
     * @param {string} patientId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsHospitalIdReviewsPatientIdDelete(hospitalId: string, patientId: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<boolean>;
    /**
     * Sample request:        GET /api/v1/hospitals/1/reviews/1
     * @summary Get review.
     * @param {string} hospitalId
     * @param {string} patientId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsHospitalIdReviewsPatientIdGet(hospitalId: string, patientId: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<HospitalReviewViewModel>;
    /**
     * Sample request:
     * @summary Update review.
     * @param {string} hospitalId
     * @param {string} patientId
     * @param {UpdateHospitalReviewCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsHospitalIdReviewsPatientIdPut(hospitalId: string, patientId: string, body?: UpdateHospitalReviewCommand | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<boolean>;
    /**
     * Sample request:        POST /api/v1/hospitals/1/reviews/1
     * @summary Create review.
     * @param {string} hospitalId
     * @param {string} patientId
     * @param {CreateHospitalReviewCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsHospitalIdReviewsPost(hospitalId: string, patientId: string, body?: CreateHospitalReviewCommand | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<HospitalReview>;
    /**
     * Sample request:        GET /api/v1/hospitals/reviews
     * @summary Get all reviews.
     * @param {string} [patientId]
     * @param {string} [patientName]
     * @param {string} [hospitalId]
     * @param {string} [hospitalName]
     * @param {string} [body]
     * @param {boolean} [recommended]
     * @param {object} [reviewCategory]
     * @param {number} [rate]
     * @param {Date} [created]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsReviewsGet(patientId?: string | undefined, patientName?: string | undefined, hospitalId?: string | undefined, hospitalName?: string | undefined, body?: string | undefined, recommended?: boolean | undefined, reviewCategory?: object | undefined, rate?: number | undefined, created?: Date | undefined, page?: number | undefined, limit?: number | undefined, lastRetrieved?: Date | undefined, current?: boolean | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<HospitalReviewsViewModel>;
};
/**
 * HospitalReviewsApi - factory interface
 * @export
 */
export declare const HospitalReviewsApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * Sample request:        DELETE /api/v1/hospitals/1/reviews/1
     * @summary Delete review.
     * @param {string} hospitalId
     * @param {string} patientId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsHospitalIdReviewsPatientIdDelete(hospitalId: string, patientId: string, options?: any): AxiosPromise<boolean>;
    /**
     * Sample request:        GET /api/v1/hospitals/1/reviews/1
     * @summary Get review.
     * @param {string} hospitalId
     * @param {string} patientId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsHospitalIdReviewsPatientIdGet(hospitalId: string, patientId: string, options?: any): AxiosPromise<HospitalReviewViewModel>;
    /**
     * Sample request:
     * @summary Update review.
     * @param {string} hospitalId
     * @param {string} patientId
     * @param {UpdateHospitalReviewCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsHospitalIdReviewsPatientIdPut(hospitalId: string, patientId: string, body?: UpdateHospitalReviewCommand | undefined, options?: any): AxiosPromise<boolean>;
    /**
     * Sample request:        POST /api/v1/hospitals/1/reviews/1
     * @summary Create review.
     * @param {string} hospitalId
     * @param {string} patientId
     * @param {CreateHospitalReviewCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsHospitalIdReviewsPost(hospitalId: string, patientId: string, body?: CreateHospitalReviewCommand | undefined, options?: any): AxiosPromise<HospitalReview>;
    /**
     * Sample request:        GET /api/v1/hospitals/reviews
     * @summary Get all reviews.
     * @param {string} [patientId]
     * @param {string} [patientName]
     * @param {string} [hospitalId]
     * @param {string} [hospitalName]
     * @param {string} [body]
     * @param {boolean} [recommended]
     * @param {object} [reviewCategory]
     * @param {number} [rate]
     * @param {Date} [created]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsReviewsGet(patientId?: string | undefined, patientName?: string | undefined, hospitalId?: string | undefined, hospitalName?: string | undefined, body?: string | undefined, recommended?: boolean | undefined, reviewCategory?: object | undefined, rate?: number | undefined, created?: Date | undefined, page?: number | undefined, limit?: number | undefined, lastRetrieved?: Date | undefined, current?: boolean | undefined, options?: any): AxiosPromise<HospitalReviewsViewModel>;
};
/**
 * HospitalReviewsApi - object-oriented interface
 * @export
 * @class HospitalReviewsApi
 * @extends {BaseAPI}
 */
export declare class HospitalReviewsApi extends BaseAPI {
    /**
     * Sample request:        DELETE /api/v1/hospitals/1/reviews/1
     * @summary Delete review.
     * @param {string} hospitalId
     * @param {string} patientId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HospitalReviewsApi
     */
    apiV1HospitalsHospitalIdReviewsPatientIdDelete(hospitalId: string, patientId: string, options?: any): AxiosPromise<boolean>;
    /**
     * Sample request:        GET /api/v1/hospitals/1/reviews/1
     * @summary Get review.
     * @param {string} hospitalId
     * @param {string} patientId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HospitalReviewsApi
     */
    apiV1HospitalsHospitalIdReviewsPatientIdGet(hospitalId: string, patientId: string, options?: any): AxiosPromise<HospitalReviewViewModel>;
    /**
     * Sample request:
     * @summary Update review.
     * @param {string} hospitalId
     * @param {string} patientId
     * @param {UpdateHospitalReviewCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HospitalReviewsApi
     */
    apiV1HospitalsHospitalIdReviewsPatientIdPut(hospitalId: string, patientId: string, body?: UpdateHospitalReviewCommand, options?: any): AxiosPromise<boolean>;
    /**
     * Sample request:        POST /api/v1/hospitals/1/reviews/1
     * @summary Create review.
     * @param {string} hospitalId
     * @param {string} patientId
     * @param {CreateHospitalReviewCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HospitalReviewsApi
     */
    apiV1HospitalsHospitalIdReviewsPost(hospitalId: string, patientId: string, body?: CreateHospitalReviewCommand, options?: any): AxiosPromise<HospitalReview>;
    /**
     * Sample request:        GET /api/v1/hospitals/reviews
     * @summary Get all reviews.
     * @param {string} [patientId]
     * @param {string} [patientName]
     * @param {string} [hospitalId]
     * @param {string} [hospitalName]
     * @param {string} [body]
     * @param {boolean} [recommended]
     * @param {object} [reviewCategory]
     * @param {number} [rate]
     * @param {Date} [created]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HospitalReviewsApi
     */
    apiV1HospitalsReviewsGet(patientId?: string, patientName?: string, hospitalId?: string, hospitalName?: string, body?: string, recommended?: boolean, reviewCategory?: object, rate?: number, created?: Date, page?: number, limit?: number, lastRetrieved?: Date, current?: boolean, options?: any): AxiosPromise<HospitalReviewsViewModel>;
}
/**
 * HospitalSpecialtiesApi - axios parameter creator
 * @export
 */
export declare const HospitalSpecialtiesApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Sample request:        DELETE /api/v1/hospitals/1/specialties/1
     * @summary Delete hospitalSpecialty.
     * @param {string} hospitalId
     * @param {string} specialtyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdDelete(hospitalId: string, specialtyId: string, options?: any): RequestArgs;
    /**
     * Sample request:        POST /api/v1/hospitals/1/specialties/1
     * @summary Create hospitalSpecialty.
     * @param {string} hospitalId
     * @param {string} specialtyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdPost(hospitalId: string, specialtyId: string, options?: any): RequestArgs;
    /**
     * Sample request:        PUT /api/v1/hospitals/1/specialtysequence      {          \"specialtyType\": \"Endocrinology\",          \"hospitalSpecialtySequence\": [14, 30, 5, 7]      }
     * @summary Update hospitalSpecialty sequence.
     * @param {string} hospitalId
     * @param {string} specialtyTypeId
     * @param {UpdateHospitalSpecialtySequenceCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsHospitalIdSpecialtysequencePut(hospitalId: string, specialtyTypeId: string, body?: UpdateHospitalSpecialtySequenceCommand | undefined, options?: any): RequestArgs;
    /**
     * Sample request:        GET /api/v1/hospitals/specialties
     * @summary Get all hospitalSpecialties.
     * @param {string} [hospitalId]
     * @param {string} [hospitalName]
     * @param {string} [specialtyId]
     * @param {string} [specialtyName]
     * @param {string} [specialtyTypeId]
     * @param {object} [marketingType]
     * @param {Date} [created]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsSpecialtiesGet(hospitalId?: string | undefined, hospitalName?: string | undefined, specialtyId?: string | undefined, specialtyName?: string | undefined, specialtyTypeId?: string | undefined, marketingType?: object | undefined, created?: Date | undefined, page?: number | undefined, limit?: number | undefined, lastRetrieved?: Date | undefined, current?: boolean | undefined, options?: any): RequestArgs;
};
/**
 * HospitalSpecialtiesApi - functional programming interface
 * @export
 */
export declare const HospitalSpecialtiesApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Sample request:        DELETE /api/v1/hospitals/1/specialties/1
     * @summary Delete hospitalSpecialty.
     * @param {string} hospitalId
     * @param {string} specialtyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdDelete(hospitalId: string, specialtyId: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<boolean>;
    /**
     * Sample request:        POST /api/v1/hospitals/1/specialties/1
     * @summary Create hospitalSpecialty.
     * @param {string} hospitalId
     * @param {string} specialtyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdPost(hospitalId: string, specialtyId: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<HospitalSpecialtyViewModel>;
    /**
     * Sample request:        PUT /api/v1/hospitals/1/specialtysequence      {          \"specialtyType\": \"Endocrinology\",          \"hospitalSpecialtySequence\": [14, 30, 5, 7]      }
     * @summary Update hospitalSpecialty sequence.
     * @param {string} hospitalId
     * @param {string} specialtyTypeId
     * @param {UpdateHospitalSpecialtySequenceCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsHospitalIdSpecialtysequencePut(hospitalId: string, specialtyTypeId: string, body?: UpdateHospitalSpecialtySequenceCommand | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<boolean>;
    /**
     * Sample request:        GET /api/v1/hospitals/specialties
     * @summary Get all hospitalSpecialties.
     * @param {string} [hospitalId]
     * @param {string} [hospitalName]
     * @param {string} [specialtyId]
     * @param {string} [specialtyName]
     * @param {string} [specialtyTypeId]
     * @param {object} [marketingType]
     * @param {Date} [created]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsSpecialtiesGet(hospitalId?: string | undefined, hospitalName?: string | undefined, specialtyId?: string | undefined, specialtyName?: string | undefined, specialtyTypeId?: string | undefined, marketingType?: object | undefined, created?: Date | undefined, page?: number | undefined, limit?: number | undefined, lastRetrieved?: Date | undefined, current?: boolean | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<HospitalSpecialtiesViewModel>;
};
/**
 * HospitalSpecialtiesApi - factory interface
 * @export
 */
export declare const HospitalSpecialtiesApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * Sample request:        DELETE /api/v1/hospitals/1/specialties/1
     * @summary Delete hospitalSpecialty.
     * @param {string} hospitalId
     * @param {string} specialtyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdDelete(hospitalId: string, specialtyId: string, options?: any): AxiosPromise<boolean>;
    /**
     * Sample request:        POST /api/v1/hospitals/1/specialties/1
     * @summary Create hospitalSpecialty.
     * @param {string} hospitalId
     * @param {string} specialtyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdPost(hospitalId: string, specialtyId: string, options?: any): AxiosPromise<HospitalSpecialtyViewModel>;
    /**
     * Sample request:        PUT /api/v1/hospitals/1/specialtysequence      {          \"specialtyType\": \"Endocrinology\",          \"hospitalSpecialtySequence\": [14, 30, 5, 7]      }
     * @summary Update hospitalSpecialty sequence.
     * @param {string} hospitalId
     * @param {string} specialtyTypeId
     * @param {UpdateHospitalSpecialtySequenceCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsHospitalIdSpecialtysequencePut(hospitalId: string, specialtyTypeId: string, body?: UpdateHospitalSpecialtySequenceCommand | undefined, options?: any): AxiosPromise<boolean>;
    /**
     * Sample request:        GET /api/v1/hospitals/specialties
     * @summary Get all hospitalSpecialties.
     * @param {string} [hospitalId]
     * @param {string} [hospitalName]
     * @param {string} [specialtyId]
     * @param {string} [specialtyName]
     * @param {string} [specialtyTypeId]
     * @param {object} [marketingType]
     * @param {Date} [created]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsSpecialtiesGet(hospitalId?: string | undefined, hospitalName?: string | undefined, specialtyId?: string | undefined, specialtyName?: string | undefined, specialtyTypeId?: string | undefined, marketingType?: object | undefined, created?: Date | undefined, page?: number | undefined, limit?: number | undefined, lastRetrieved?: Date | undefined, current?: boolean | undefined, options?: any): AxiosPromise<HospitalSpecialtiesViewModel>;
};
/**
 * HospitalSpecialtiesApi - object-oriented interface
 * @export
 * @class HospitalSpecialtiesApi
 * @extends {BaseAPI}
 */
export declare class HospitalSpecialtiesApi extends BaseAPI {
    /**
     * Sample request:        DELETE /api/v1/hospitals/1/specialties/1
     * @summary Delete hospitalSpecialty.
     * @param {string} hospitalId
     * @param {string} specialtyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HospitalSpecialtiesApi
     */
    apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdDelete(hospitalId: string, specialtyId: string, options?: any): AxiosPromise<boolean>;
    /**
     * Sample request:        POST /api/v1/hospitals/1/specialties/1
     * @summary Create hospitalSpecialty.
     * @param {string} hospitalId
     * @param {string} specialtyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HospitalSpecialtiesApi
     */
    apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdPost(hospitalId: string, specialtyId: string, options?: any): AxiosPromise<HospitalSpecialtyViewModel>;
    /**
     * Sample request:        PUT /api/v1/hospitals/1/specialtysequence      {          \"specialtyType\": \"Endocrinology\",          \"hospitalSpecialtySequence\": [14, 30, 5, 7]      }
     * @summary Update hospitalSpecialty sequence.
     * @param {string} hospitalId
     * @param {string} specialtyTypeId
     * @param {UpdateHospitalSpecialtySequenceCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HospitalSpecialtiesApi
     */
    apiV1HospitalsHospitalIdSpecialtysequencePut(hospitalId: string, specialtyTypeId: string, body?: UpdateHospitalSpecialtySequenceCommand, options?: any): AxiosPromise<boolean>;
    /**
     * Sample request:        GET /api/v1/hospitals/specialties
     * @summary Get all hospitalSpecialties.
     * @param {string} [hospitalId]
     * @param {string} [hospitalName]
     * @param {string} [specialtyId]
     * @param {string} [specialtyName]
     * @param {string} [specialtyTypeId]
     * @param {object} [marketingType]
     * @param {Date} [created]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HospitalSpecialtiesApi
     */
    apiV1HospitalsSpecialtiesGet(hospitalId?: string, hospitalName?: string, specialtyId?: string, specialtyName?: string, specialtyTypeId?: string, marketingType?: object, created?: Date, page?: number, limit?: number, lastRetrieved?: Date, current?: boolean, options?: any): AxiosPromise<HospitalSpecialtiesViewModel>;
}
/**
 * HospitalsApi - axios parameter creator
 * @export
 */
export declare const HospitalsApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     *
     * @param {string} [id]
     * @param {string} [name]
     * @param {string} [description]
     * @param {string} [countryId]
     * @param {Date} [created]
     * @param {object} [marketingType]
     * @param {string} [specialtyTypeId]
     * @param {string} [specialtyId]
     * @param {string} [serviceId]
     * @param {boolean} [showHidden]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsCurrentGet(id?: string | undefined, name?: string | undefined, description?: string | undefined, countryId?: string | undefined, created?: Date | undefined, marketingType?: object | undefined, specialtyTypeId?: string | undefined, specialtyId?: string | undefined, serviceId?: string | undefined, showHidden?: boolean | undefined, page?: number | undefined, limit?: number | undefined, lastRetrieved?: Date | undefined, current?: boolean | undefined, options?: any): RequestArgs;
    /**
     * Sample request:        GET /api/v1/hospitals      {          \"pageQueryFilter\": {              \"page\": 1,              \"limit\": 20,              \"lastRetrived\": \"2020-02-05T08:40\"          },          \"searchString\": \"Samsung\"      }
     * @summary Get all hospitals.
     * @param {string} [id]
     * @param {string} [name]
     * @param {string} [description]
     * @param {string} [countryId]
     * @param {Date} [created]
     * @param {object} [marketingType]
     * @param {string} [specialtyTypeId]
     * @param {string} [specialtyId]
     * @param {string} [serviceId]
     * @param {boolean} [showHidden]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsGet(id?: string | undefined, name?: string | undefined, description?: string | undefined, countryId?: string | undefined, created?: Date | undefined, marketingType?: object | undefined, specialtyTypeId?: string | undefined, specialtyId?: string | undefined, serviceId?: string | undefined, showHidden?: boolean | undefined, page?: number | undefined, limit?: number | undefined, lastRetrieved?: Date | undefined, current?: boolean | undefined, options?: any): RequestArgs;
    /**
     * Sample request:        DELETE /api/v1/hospitals/1
     * @summary Delete hospital.
     * @param {string} hospitalId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsHospitalIdDelete(hospitalId: string, options?: any): RequestArgs;
    /**
     * Sample request:        GET /api/v1/hospitals/1
     * @summary Get hospita.
     * @param {string} hospitalId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsHospitalIdGet(hospitalId: string, options?: any): RequestArgs;
    /**
     * Sameple request:        PUT /api/v1/hospitals      {          \"overview\": \"Overview of Samsung Medical Center\",          \"bedsCount\": 2436,          \"operationRoomsCount\": 44,          \"icuBedsCount\": 122,          \"departmentsCount\": 200,          \"medicalStaffCount\": 1200,      }
     * @summary Update hospital.
     * @param {string} hospitalId
     * @param {UpdateHospitalCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsHospitalIdPut(hospitalId: string, body?: UpdateHospitalCommand | undefined, options?: any): RequestArgs;
    /**
     * Sample request:        POST /api/v1/hospitals      {          \"name\": \"Samsung Medical Center\",          \"description\": \"Comprehensive Cancer Center in Seoul, South Korea is nationally ranked in 1 adult specialty.\",          \"logo\": \"http://www.samsunghospital.com/home/main/index.do\",          \"overview\": \"Overview of Samsung Medical Center\",          \"bedsCount\": 1436,          \"operationRoomsCount\": 34,          \"icuBedsCount\": 12,          \"departmentsCount\": 20,          \"medicalStaffCount\": 600,          \"countryId\": 1,          \"awards\": [            {              \"name\": \"Award1\",              \"image\": \"string\",              \"date\": \"2020-02-05T09:29:19.240Z\"            },            {              \"name\": \"Award2\",              \"image\": \"string\",              \"date\": \"2020-02-05T09:29:19.240Z\"            }          ],          \"medias\": [            {              \"mediaType\": \"Photo\",              \"url\": \"https://cloudhospitalblob.blob.core.windows.net/imagecontainer/SamsungMedicalCenter.jpg\",              \"thumbnailUrl\": \"https://cloudhospitalblob.blob.core.windows.net/thumbnailcontainer/SamsungMedicalCenter.jpg\",              \"description\": \"string\",              \"order\": 0            },            {              \"mediaType\": \"Video\",              \"url\": \"string\",              \"description\": \"string\",              \"order\": 1            }          ],          \"location\": {            \"latitude\": 37.4881568,            \"longitude\": 127.0855952,            \"country\": \"Korea\",            \"state\": \"string\",            \"county\": \"Gangnamgu\",            \"city\": \"Seoul\",            \"zipCode\": \"12345\",            \"address\": \"Il-won ro 81\"          }      }
     * @summary Create a hospital.
     * @param {CreateHospitalCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsPost(body?: CreateHospitalCommand | undefined, options?: any): RequestArgs;
};
/**
 * HospitalsApi - functional programming interface
 * @export
 */
export declare const HospitalsApiFp: (configuration?: Configuration | undefined) => {
    /**
     *
     * @param {string} [id]
     * @param {string} [name]
     * @param {string} [description]
     * @param {string} [countryId]
     * @param {Date} [created]
     * @param {object} [marketingType]
     * @param {string} [specialtyTypeId]
     * @param {string} [specialtyId]
     * @param {string} [serviceId]
     * @param {boolean} [showHidden]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsCurrentGet(id?: string | undefined, name?: string | undefined, description?: string | undefined, countryId?: string | undefined, created?: Date | undefined, marketingType?: object | undefined, specialtyTypeId?: string | undefined, specialtyId?: string | undefined, serviceId?: string | undefined, showHidden?: boolean | undefined, page?: number | undefined, limit?: number | undefined, lastRetrieved?: Date | undefined, current?: boolean | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<HospitalsViewModel>;
    /**
     * Sample request:        GET /api/v1/hospitals      {          \"pageQueryFilter\": {              \"page\": 1,              \"limit\": 20,              \"lastRetrived\": \"2020-02-05T08:40\"          },          \"searchString\": \"Samsung\"      }
     * @summary Get all hospitals.
     * @param {string} [id]
     * @param {string} [name]
     * @param {string} [description]
     * @param {string} [countryId]
     * @param {Date} [created]
     * @param {object} [marketingType]
     * @param {string} [specialtyTypeId]
     * @param {string} [specialtyId]
     * @param {string} [serviceId]
     * @param {boolean} [showHidden]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsGet(id?: string | undefined, name?: string | undefined, description?: string | undefined, countryId?: string | undefined, created?: Date | undefined, marketingType?: object | undefined, specialtyTypeId?: string | undefined, specialtyId?: string | undefined, serviceId?: string | undefined, showHidden?: boolean | undefined, page?: number | undefined, limit?: number | undefined, lastRetrieved?: Date | undefined, current?: boolean | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<HospitalsViewModel>;
    /**
     * Sample request:        DELETE /api/v1/hospitals/1
     * @summary Delete hospital.
     * @param {string} hospitalId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsHospitalIdDelete(hospitalId: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<boolean>;
    /**
     * Sample request:        GET /api/v1/hospitals/1
     * @summary Get hospita.
     * @param {string} hospitalId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsHospitalIdGet(hospitalId: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<HospitalViewModel>;
    /**
     * Sameple request:        PUT /api/v1/hospitals      {          \"overview\": \"Overview of Samsung Medical Center\",          \"bedsCount\": 2436,          \"operationRoomsCount\": 44,          \"icuBedsCount\": 122,          \"departmentsCount\": 200,          \"medicalStaffCount\": 1200,      }
     * @summary Update hospital.
     * @param {string} hospitalId
     * @param {UpdateHospitalCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsHospitalIdPut(hospitalId: string, body?: UpdateHospitalCommand | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<boolean>;
    /**
     * Sample request:        POST /api/v1/hospitals      {          \"name\": \"Samsung Medical Center\",          \"description\": \"Comprehensive Cancer Center in Seoul, South Korea is nationally ranked in 1 adult specialty.\",          \"logo\": \"http://www.samsunghospital.com/home/main/index.do\",          \"overview\": \"Overview of Samsung Medical Center\",          \"bedsCount\": 1436,          \"operationRoomsCount\": 34,          \"icuBedsCount\": 12,          \"departmentsCount\": 20,          \"medicalStaffCount\": 600,          \"countryId\": 1,          \"awards\": [            {              \"name\": \"Award1\",              \"image\": \"string\",              \"date\": \"2020-02-05T09:29:19.240Z\"            },            {              \"name\": \"Award2\",              \"image\": \"string\",              \"date\": \"2020-02-05T09:29:19.240Z\"            }          ],          \"medias\": [            {              \"mediaType\": \"Photo\",              \"url\": \"https://cloudhospitalblob.blob.core.windows.net/imagecontainer/SamsungMedicalCenter.jpg\",              \"thumbnailUrl\": \"https://cloudhospitalblob.blob.core.windows.net/thumbnailcontainer/SamsungMedicalCenter.jpg\",              \"description\": \"string\",              \"order\": 0            },            {              \"mediaType\": \"Video\",              \"url\": \"string\",              \"description\": \"string\",              \"order\": 1            }          ],          \"location\": {            \"latitude\": 37.4881568,            \"longitude\": 127.0855952,            \"country\": \"Korea\",            \"state\": \"string\",            \"county\": \"Gangnamgu\",            \"city\": \"Seoul\",            \"zipCode\": \"12345\",            \"address\": \"Il-won ro 81\"          }      }
     * @summary Create a hospital.
     * @param {CreateHospitalCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsPost(body?: CreateHospitalCommand | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<string>;
};
/**
 * HospitalsApi - factory interface
 * @export
 */
export declare const HospitalsApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     *
     * @param {string} [id]
     * @param {string} [name]
     * @param {string} [description]
     * @param {string} [countryId]
     * @param {Date} [created]
     * @param {object} [marketingType]
     * @param {string} [specialtyTypeId]
     * @param {string} [specialtyId]
     * @param {string} [serviceId]
     * @param {boolean} [showHidden]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsCurrentGet(id?: string | undefined, name?: string | undefined, description?: string | undefined, countryId?: string | undefined, created?: Date | undefined, marketingType?: object | undefined, specialtyTypeId?: string | undefined, specialtyId?: string | undefined, serviceId?: string | undefined, showHidden?: boolean | undefined, page?: number | undefined, limit?: number | undefined, lastRetrieved?: Date | undefined, current?: boolean | undefined, options?: any): AxiosPromise<HospitalsViewModel>;
    /**
     * Sample request:        GET /api/v1/hospitals      {          \"pageQueryFilter\": {              \"page\": 1,              \"limit\": 20,              \"lastRetrived\": \"2020-02-05T08:40\"          },          \"searchString\": \"Samsung\"      }
     * @summary Get all hospitals.
     * @param {string} [id]
     * @param {string} [name]
     * @param {string} [description]
     * @param {string} [countryId]
     * @param {Date} [created]
     * @param {object} [marketingType]
     * @param {string} [specialtyTypeId]
     * @param {string} [specialtyId]
     * @param {string} [serviceId]
     * @param {boolean} [showHidden]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsGet(id?: string | undefined, name?: string | undefined, description?: string | undefined, countryId?: string | undefined, created?: Date | undefined, marketingType?: object | undefined, specialtyTypeId?: string | undefined, specialtyId?: string | undefined, serviceId?: string | undefined, showHidden?: boolean | undefined, page?: number | undefined, limit?: number | undefined, lastRetrieved?: Date | undefined, current?: boolean | undefined, options?: any): AxiosPromise<HospitalsViewModel>;
    /**
     * Sample request:        DELETE /api/v1/hospitals/1
     * @summary Delete hospital.
     * @param {string} hospitalId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsHospitalIdDelete(hospitalId: string, options?: any): AxiosPromise<boolean>;
    /**
     * Sample request:        GET /api/v1/hospitals/1
     * @summary Get hospita.
     * @param {string} hospitalId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsHospitalIdGet(hospitalId: string, options?: any): AxiosPromise<HospitalViewModel>;
    /**
     * Sameple request:        PUT /api/v1/hospitals      {          \"overview\": \"Overview of Samsung Medical Center\",          \"bedsCount\": 2436,          \"operationRoomsCount\": 44,          \"icuBedsCount\": 122,          \"departmentsCount\": 200,          \"medicalStaffCount\": 1200,      }
     * @summary Update hospital.
     * @param {string} hospitalId
     * @param {UpdateHospitalCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsHospitalIdPut(hospitalId: string, body?: UpdateHospitalCommand | undefined, options?: any): AxiosPromise<boolean>;
    /**
     * Sample request:        POST /api/v1/hospitals      {          \"name\": \"Samsung Medical Center\",          \"description\": \"Comprehensive Cancer Center in Seoul, South Korea is nationally ranked in 1 adult specialty.\",          \"logo\": \"http://www.samsunghospital.com/home/main/index.do\",          \"overview\": \"Overview of Samsung Medical Center\",          \"bedsCount\": 1436,          \"operationRoomsCount\": 34,          \"icuBedsCount\": 12,          \"departmentsCount\": 20,          \"medicalStaffCount\": 600,          \"countryId\": 1,          \"awards\": [            {              \"name\": \"Award1\",              \"image\": \"string\",              \"date\": \"2020-02-05T09:29:19.240Z\"            },            {              \"name\": \"Award2\",              \"image\": \"string\",              \"date\": \"2020-02-05T09:29:19.240Z\"            }          ],          \"medias\": [            {              \"mediaType\": \"Photo\",              \"url\": \"https://cloudhospitalblob.blob.core.windows.net/imagecontainer/SamsungMedicalCenter.jpg\",              \"thumbnailUrl\": \"https://cloudhospitalblob.blob.core.windows.net/thumbnailcontainer/SamsungMedicalCenter.jpg\",              \"description\": \"string\",              \"order\": 0            },            {              \"mediaType\": \"Video\",              \"url\": \"string\",              \"description\": \"string\",              \"order\": 1            }          ],          \"location\": {            \"latitude\": 37.4881568,            \"longitude\": 127.0855952,            \"country\": \"Korea\",            \"state\": \"string\",            \"county\": \"Gangnamgu\",            \"city\": \"Seoul\",            \"zipCode\": \"12345\",            \"address\": \"Il-won ro 81\"          }      }
     * @summary Create a hospital.
     * @param {CreateHospitalCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsPost(body?: CreateHospitalCommand | undefined, options?: any): AxiosPromise<string>;
};
/**
 * HospitalsApi - object-oriented interface
 * @export
 * @class HospitalsApi
 * @extends {BaseAPI}
 */
export declare class HospitalsApi extends BaseAPI {
    /**
     *
     * @param {string} [id]
     * @param {string} [name]
     * @param {string} [description]
     * @param {string} [countryId]
     * @param {Date} [created]
     * @param {object} [marketingType]
     * @param {string} [specialtyTypeId]
     * @param {string} [specialtyId]
     * @param {string} [serviceId]
     * @param {boolean} [showHidden]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HospitalsApi
     */
    apiV1HospitalsCurrentGet(id?: string, name?: string, description?: string, countryId?: string, created?: Date, marketingType?: object, specialtyTypeId?: string, specialtyId?: string, serviceId?: string, showHidden?: boolean, page?: number, limit?: number, lastRetrieved?: Date, current?: boolean, options?: any): AxiosPromise<HospitalsViewModel>;
    /**
     * Sample request:        GET /api/v1/hospitals      {          \"pageQueryFilter\": {              \"page\": 1,              \"limit\": 20,              \"lastRetrived\": \"2020-02-05T08:40\"          },          \"searchString\": \"Samsung\"      }
     * @summary Get all hospitals.
     * @param {string} [id]
     * @param {string} [name]
     * @param {string} [description]
     * @param {string} [countryId]
     * @param {Date} [created]
     * @param {object} [marketingType]
     * @param {string} [specialtyTypeId]
     * @param {string} [specialtyId]
     * @param {string} [serviceId]
     * @param {boolean} [showHidden]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HospitalsApi
     */
    apiV1HospitalsGet(id?: string, name?: string, description?: string, countryId?: string, created?: Date, marketingType?: object, specialtyTypeId?: string, specialtyId?: string, serviceId?: string, showHidden?: boolean, page?: number, limit?: number, lastRetrieved?: Date, current?: boolean, options?: any): AxiosPromise<HospitalsViewModel>;
    /**
     * Sample request:        DELETE /api/v1/hospitals/1
     * @summary Delete hospital.
     * @param {string} hospitalId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HospitalsApi
     */
    apiV1HospitalsHospitalIdDelete(hospitalId: string, options?: any): AxiosPromise<boolean>;
    /**
     * Sample request:        GET /api/v1/hospitals/1
     * @summary Get hospita.
     * @param {string} hospitalId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HospitalsApi
     */
    apiV1HospitalsHospitalIdGet(hospitalId: string, options?: any): AxiosPromise<HospitalViewModel>;
    /**
     * Sameple request:        PUT /api/v1/hospitals      {          \"overview\": \"Overview of Samsung Medical Center\",          \"bedsCount\": 2436,          \"operationRoomsCount\": 44,          \"icuBedsCount\": 122,          \"departmentsCount\": 200,          \"medicalStaffCount\": 1200,      }
     * @summary Update hospital.
     * @param {string} hospitalId
     * @param {UpdateHospitalCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HospitalsApi
     */
    apiV1HospitalsHospitalIdPut(hospitalId: string, body?: UpdateHospitalCommand, options?: any): AxiosPromise<boolean>;
    /**
     * Sample request:        POST /api/v1/hospitals      {          \"name\": \"Samsung Medical Center\",          \"description\": \"Comprehensive Cancer Center in Seoul, South Korea is nationally ranked in 1 adult specialty.\",          \"logo\": \"http://www.samsunghospital.com/home/main/index.do\",          \"overview\": \"Overview of Samsung Medical Center\",          \"bedsCount\": 1436,          \"operationRoomsCount\": 34,          \"icuBedsCount\": 12,          \"departmentsCount\": 20,          \"medicalStaffCount\": 600,          \"countryId\": 1,          \"awards\": [            {              \"name\": \"Award1\",              \"image\": \"string\",              \"date\": \"2020-02-05T09:29:19.240Z\"            },            {              \"name\": \"Award2\",              \"image\": \"string\",              \"date\": \"2020-02-05T09:29:19.240Z\"            }          ],          \"medias\": [            {              \"mediaType\": \"Photo\",              \"url\": \"https://cloudhospitalblob.blob.core.windows.net/imagecontainer/SamsungMedicalCenter.jpg\",              \"thumbnailUrl\": \"https://cloudhospitalblob.blob.core.windows.net/thumbnailcontainer/SamsungMedicalCenter.jpg\",              \"description\": \"string\",              \"order\": 0            },            {              \"mediaType\": \"Video\",              \"url\": \"string\",              \"description\": \"string\",              \"order\": 1            }          ],          \"location\": {            \"latitude\": 37.4881568,            \"longitude\": 127.0855952,            \"country\": \"Korea\",            \"state\": \"string\",            \"county\": \"Gangnamgu\",            \"city\": \"Seoul\",            \"zipCode\": \"12345\",            \"address\": \"Il-won ro 81\"          }      }
     * @summary Create a hospital.
     * @param {CreateHospitalCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HospitalsApi
     */
    apiV1HospitalsPost(body?: CreateHospitalCommand, options?: any): AxiosPromise<string>;
}
/**
 * IdentityApi - axios parameter creator
 * @export
 */
export declare const IdentityApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Smaple request:        GET /api/v1/identity
     * @summary Get current user\'s Identity claims.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IdentityGet(options?: any): RequestArgs;
};
/**
 * IdentityApi - functional programming interface
 * @export
 */
export declare const IdentityApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Smaple request:        GET /api/v1/identity
     * @summary Get current user\'s Identity claims.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IdentityGet(options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>;
};
/**
 * IdentityApi - factory interface
 * @export
 */
export declare const IdentityApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * Smaple request:        GET /api/v1/identity
     * @summary Get current user\'s Identity claims.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1IdentityGet(options?: any): AxiosPromise<void>;
};
/**
 * IdentityApi - object-oriented interface
 * @export
 * @class IdentityApi
 * @extends {BaseAPI}
 */
export declare class IdentityApi extends BaseAPI {
    /**
     * Smaple request:        GET /api/v1/identity
     * @summary Get current user\'s Identity claims.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityApi
     */
    apiV1IdentityGet(options?: any): AxiosPromise<void>;
}
/**
 * ImagesApi - axios parameter creator
 * @export
 */
export declare const ImagesApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ImagesPost(options?: any): RequestArgs;
};
/**
 * ImagesApi - functional programming interface
 * @export
 */
export declare const ImagesApiFp: (configuration?: Configuration | undefined) => {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ImagesPost(options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>;
};
/**
 * ImagesApi - factory interface
 * @export
 */
export declare const ImagesApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ImagesPost(options?: any): AxiosPromise<void>;
};
/**
 * ImagesApi - object-oriented interface
 * @export
 * @class ImagesApi
 * @extends {BaseAPI}
 */
export declare class ImagesApi extends BaseAPI {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImagesApi
     */
    apiV1ImagesPost(options?: any): AxiosPromise<void>;
}
/**
 * ManagersApi - axios parameter creator
 * @export
 */
export declare const ManagersApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Sample request:        GET /api/v1/managers      {          \"pageQueryFilter\": {              \"page\": 1,              \"limit\": 20,              \"lastRetrived\": \"2020-02-05T08:40\"          },          \"searchString\": \"manager\"      }
     * @summary Get all hospital managers.
     * @param {string} [id]
     * @param {string} [fullname]
     * @param {string} [email]
     * @param {object} [gender]
     * @param {Date} [dateOfBirth]
     * @param {Date} [created]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {string} [hospitalId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ManagersGet(id?: string | undefined, fullname?: string | undefined, email?: string | undefined, gender?: object | undefined, dateOfBirth?: Date | undefined, created?: Date | undefined, page?: number | undefined, limit?: number | undefined, lastRetrieved?: Date | undefined, current?: boolean | undefined, hospitalId?: string | undefined, options?: any): RequestArgs;
    /**
     * Sample request:        DELETE /api/v1/managers/1
     * @summary Delete hospital manager.
     * @param {string} managerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ManagersManagerIdDelete(managerId: string, options?: any): RequestArgs;
    /**
     * Sample request:        GET /api/v1/managers/1
     * @summary Get hospital manager.
     * @param {string} managerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ManagersManagerIdGet(managerId: string, options?: any): RequestArgs;
    /**
     * Sample request:        PUT /api/v1/managers/1      {          \"firstName\": \"string\",          \"lastName\": \"string\",          \"photo\": \"string\",          \"locations\": [            {              \"locationType\": \"LivesIn\",              \"latitude\": 0,              \"longitude\": 0,              \"country\": \"string\",              \"state\": \"string\",              \"county\": \"string\",              \"city\": \"string\",              \"zipCode\": \"string\",              \"address\": \"string\"            }          ]      }
     * @summary Update hospital manager.
     * @param {string} managerId
     * @param {UpdateManagerCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ManagersManagerIdPut(managerId: string, body?: UpdateManagerCommand | undefined, options?: any): RequestArgs;
    /**
     * Sample request:        POST /api/v1/managers      {          \"userName\": \"manager\",          \"email\": \"manger@icloudhospital.com\",          \"hospitalId\": 1,          \"firstName\": \"cloud\",          \"lastName\": \"manager\",          \"photo\": \"string\",          \"photoThumbnail\": \"string\",          \"gender\": \"NotSpecified\",          \"dateOfBirth\": \"2020-02-22T15:28:09.897Z\",          \"locations\": [            {              \"locationType\": \"LivesIn\",              \"latitude\": 0,              \"longitude\": 0,              \"country\": \"string\",              \"state\": \"string\",              \"county\": \"string\",              \"city\": \"string\",              \"zipCode\": \"string\",              \"address\": \"string\"            }          ]      }
     * @summary Create hospital manager.
     * @param {CreateManagerCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ManagersPost(body?: CreateManagerCommand | undefined, options?: any): RequestArgs;
};
/**
 * ManagersApi - functional programming interface
 * @export
 */
export declare const ManagersApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Sample request:        GET /api/v1/managers      {          \"pageQueryFilter\": {              \"page\": 1,              \"limit\": 20,              \"lastRetrived\": \"2020-02-05T08:40\"          },          \"searchString\": \"manager\"      }
     * @summary Get all hospital managers.
     * @param {string} [id]
     * @param {string} [fullname]
     * @param {string} [email]
     * @param {object} [gender]
     * @param {Date} [dateOfBirth]
     * @param {Date} [created]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {string} [hospitalId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ManagersGet(id?: string | undefined, fullname?: string | undefined, email?: string | undefined, gender?: object | undefined, dateOfBirth?: Date | undefined, created?: Date | undefined, page?: number | undefined, limit?: number | undefined, lastRetrieved?: Date | undefined, current?: boolean | undefined, hospitalId?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<ManagersViewModel>;
    /**
     * Sample request:        DELETE /api/v1/managers/1
     * @summary Delete hospital manager.
     * @param {string} managerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ManagersManagerIdDelete(managerId: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<boolean>;
    /**
     * Sample request:        GET /api/v1/managers/1
     * @summary Get hospital manager.
     * @param {string} managerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ManagersManagerIdGet(managerId: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<ManagerViewModel>;
    /**
     * Sample request:        PUT /api/v1/managers/1      {          \"firstName\": \"string\",          \"lastName\": \"string\",          \"photo\": \"string\",          \"locations\": [            {              \"locationType\": \"LivesIn\",              \"latitude\": 0,              \"longitude\": 0,              \"country\": \"string\",              \"state\": \"string\",              \"county\": \"string\",              \"city\": \"string\",              \"zipCode\": \"string\",              \"address\": \"string\"            }          ]      }
     * @summary Update hospital manager.
     * @param {string} managerId
     * @param {UpdateManagerCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ManagersManagerIdPut(managerId: string, body?: UpdateManagerCommand | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<boolean>;
    /**
     * Sample request:        POST /api/v1/managers      {          \"userName\": \"manager\",          \"email\": \"manger@icloudhospital.com\",          \"hospitalId\": 1,          \"firstName\": \"cloud\",          \"lastName\": \"manager\",          \"photo\": \"string\",          \"photoThumbnail\": \"string\",          \"gender\": \"NotSpecified\",          \"dateOfBirth\": \"2020-02-22T15:28:09.897Z\",          \"locations\": [            {              \"locationType\": \"LivesIn\",              \"latitude\": 0,              \"longitude\": 0,              \"country\": \"string\",              \"state\": \"string\",              \"county\": \"string\",              \"city\": \"string\",              \"zipCode\": \"string\",              \"address\": \"string\"            }          ]      }
     * @summary Create hospital manager.
     * @param {CreateManagerCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ManagersPost(body?: CreateManagerCommand | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<string>;
};
/**
 * ManagersApi - factory interface
 * @export
 */
export declare const ManagersApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * Sample request:        GET /api/v1/managers      {          \"pageQueryFilter\": {              \"page\": 1,              \"limit\": 20,              \"lastRetrived\": \"2020-02-05T08:40\"          },          \"searchString\": \"manager\"      }
     * @summary Get all hospital managers.
     * @param {string} [id]
     * @param {string} [fullname]
     * @param {string} [email]
     * @param {object} [gender]
     * @param {Date} [dateOfBirth]
     * @param {Date} [created]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {string} [hospitalId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ManagersGet(id?: string | undefined, fullname?: string | undefined, email?: string | undefined, gender?: object | undefined, dateOfBirth?: Date | undefined, created?: Date | undefined, page?: number | undefined, limit?: number | undefined, lastRetrieved?: Date | undefined, current?: boolean | undefined, hospitalId?: string | undefined, options?: any): AxiosPromise<ManagersViewModel>;
    /**
     * Sample request:        DELETE /api/v1/managers/1
     * @summary Delete hospital manager.
     * @param {string} managerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ManagersManagerIdDelete(managerId: string, options?: any): AxiosPromise<boolean>;
    /**
     * Sample request:        GET /api/v1/managers/1
     * @summary Get hospital manager.
     * @param {string} managerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ManagersManagerIdGet(managerId: string, options?: any): AxiosPromise<ManagerViewModel>;
    /**
     * Sample request:        PUT /api/v1/managers/1      {          \"firstName\": \"string\",          \"lastName\": \"string\",          \"photo\": \"string\",          \"locations\": [            {              \"locationType\": \"LivesIn\",              \"latitude\": 0,              \"longitude\": 0,              \"country\": \"string\",              \"state\": \"string\",              \"county\": \"string\",              \"city\": \"string\",              \"zipCode\": \"string\",              \"address\": \"string\"            }          ]      }
     * @summary Update hospital manager.
     * @param {string} managerId
     * @param {UpdateManagerCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ManagersManagerIdPut(managerId: string, body?: UpdateManagerCommand | undefined, options?: any): AxiosPromise<boolean>;
    /**
     * Sample request:        POST /api/v1/managers      {          \"userName\": \"manager\",          \"email\": \"manger@icloudhospital.com\",          \"hospitalId\": 1,          \"firstName\": \"cloud\",          \"lastName\": \"manager\",          \"photo\": \"string\",          \"photoThumbnail\": \"string\",          \"gender\": \"NotSpecified\",          \"dateOfBirth\": \"2020-02-22T15:28:09.897Z\",          \"locations\": [            {              \"locationType\": \"LivesIn\",              \"latitude\": 0,              \"longitude\": 0,              \"country\": \"string\",              \"state\": \"string\",              \"county\": \"string\",              \"city\": \"string\",              \"zipCode\": \"string\",              \"address\": \"string\"            }          ]      }
     * @summary Create hospital manager.
     * @param {CreateManagerCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ManagersPost(body?: CreateManagerCommand | undefined, options?: any): AxiosPromise<string>;
};
/**
 * ManagersApi - object-oriented interface
 * @export
 * @class ManagersApi
 * @extends {BaseAPI}
 */
export declare class ManagersApi extends BaseAPI {
    /**
     * Sample request:        GET /api/v1/managers      {          \"pageQueryFilter\": {              \"page\": 1,              \"limit\": 20,              \"lastRetrived\": \"2020-02-05T08:40\"          },          \"searchString\": \"manager\"      }
     * @summary Get all hospital managers.
     * @param {string} [id]
     * @param {string} [fullname]
     * @param {string} [email]
     * @param {object} [gender]
     * @param {Date} [dateOfBirth]
     * @param {Date} [created]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {string} [hospitalId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagersApi
     */
    apiV1ManagersGet(id?: string, fullname?: string, email?: string, gender?: object, dateOfBirth?: Date, created?: Date, page?: number, limit?: number, lastRetrieved?: Date, current?: boolean, hospitalId?: string, options?: any): AxiosPromise<ManagersViewModel>;
    /**
     * Sample request:        DELETE /api/v1/managers/1
     * @summary Delete hospital manager.
     * @param {string} managerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagersApi
     */
    apiV1ManagersManagerIdDelete(managerId: string, options?: any): AxiosPromise<boolean>;
    /**
     * Sample request:        GET /api/v1/managers/1
     * @summary Get hospital manager.
     * @param {string} managerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagersApi
     */
    apiV1ManagersManagerIdGet(managerId: string, options?: any): AxiosPromise<ManagerViewModel>;
    /**
     * Sample request:        PUT /api/v1/managers/1      {          \"firstName\": \"string\",          \"lastName\": \"string\",          \"photo\": \"string\",          \"locations\": [            {              \"locationType\": \"LivesIn\",              \"latitude\": 0,              \"longitude\": 0,              \"country\": \"string\",              \"state\": \"string\",              \"county\": \"string\",              \"city\": \"string\",              \"zipCode\": \"string\",              \"address\": \"string\"            }          ]      }
     * @summary Update hospital manager.
     * @param {string} managerId
     * @param {UpdateManagerCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagersApi
     */
    apiV1ManagersManagerIdPut(managerId: string, body?: UpdateManagerCommand, options?: any): AxiosPromise<boolean>;
    /**
     * Sample request:        POST /api/v1/managers      {          \"userName\": \"manager\",          \"email\": \"manger@icloudhospital.com\",          \"hospitalId\": 1,          \"firstName\": \"cloud\",          \"lastName\": \"manager\",          \"photo\": \"string\",          \"photoThumbnail\": \"string\",          \"gender\": \"NotSpecified\",          \"dateOfBirth\": \"2020-02-22T15:28:09.897Z\",          \"locations\": [            {              \"locationType\": \"LivesIn\",              \"latitude\": 0,              \"longitude\": 0,              \"country\": \"string\",              \"state\": \"string\",              \"county\": \"string\",              \"city\": \"string\",              \"zipCode\": \"string\",              \"address\": \"string\"            }          ]      }
     * @summary Create hospital manager.
     * @param {CreateManagerCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagersApi
     */
    apiV1ManagersPost(body?: CreateManagerCommand, options?: any): AxiosPromise<string>;
}
/**
 * MoviesApi - axios parameter creator
 * @export
 */
export declare const MoviesApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1MoviesPost(options?: any): RequestArgs;
};
/**
 * MoviesApi - functional programming interface
 * @export
 */
export declare const MoviesApiFp: (configuration?: Configuration | undefined) => {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1MoviesPost(options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>;
};
/**
 * MoviesApi - factory interface
 * @export
 */
export declare const MoviesApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1MoviesPost(options?: any): AxiosPromise<void>;
};
/**
 * MoviesApi - object-oriented interface
 * @export
 * @class MoviesApi
 * @extends {BaseAPI}
 */
export declare class MoviesApi extends BaseAPI {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MoviesApi
     */
    apiV1MoviesPost(options?: any): AxiosPromise<void>;
}
/**
 * PartnersApi - axios parameter creator
 * @export
 */
export declare const PartnersApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Sample request:        GET /api/v1/partners      {          \"pageQueryFilter\": {              \"page\": 1,              \"limit\": 20,              \"lastRetrived\": \"2020-02-05T08:40\"          },          \"searchString\": \"patner\"      }
     * @summary Get all partners.
     * @param {string} [id]
     * @param {string} [fullname]
     * @param {string} [email]
     * @param {object} [gender]
     * @param {Date} [dateOfBirth]
     * @param {Date} [created]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PartnersGet(id?: string | undefined, fullname?: string | undefined, email?: string | undefined, gender?: object | undefined, dateOfBirth?: Date | undefined, created?: Date | undefined, page?: number | undefined, limit?: number | undefined, lastRetrieved?: Date | undefined, current?: boolean | undefined, options?: any): RequestArgs;
    /**
     * Sample request:        DELETE /api/v1/partners/1
     * @summary Delete patner.
     * @param {string} partnerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PartnersPartnerIdDelete(partnerId: string, options?: any): RequestArgs;
    /**
     * Sample request:        GET /api/v1/patners/1
     * @summary Get partner.
     * @param {string} partnerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PartnersPartnerIdGet(partnerId: string, options?: any): RequestArgs;
    /**
     * Sample request:        PUT /api/v1/patners/1      {          firstName\": \"string\",          \"lastName\": \"string\",          \"photo\": \"string\",          \"locations\": [            {              \"locationType\": \"LivesIn\",              \"latitude\": 0,              \"longitude\": 0,              \"country\": \"string\",              \"state\": \"string\",              \"county\": \"string\",              \"city\": \"string\",              \"zipCode\": \"string\",              \"address\": \"string\"            }          ]      }
     * @summary Update partner.
     * @param {string} partnerId
     * @param {UpdatePartnerCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PartnersPartnerIdPut(partnerId: string, body?: UpdatePartnerCommand | undefined, options?: any): RequestArgs;
    /**
     * Sample request:        POST /api/v1/partners      {          \"userName\": \"string\",          \"email\": \"string\",          \"firstName\": \"string\",          \"lastName\": \"string\",          \"photo\": \"string\",          \"photoThumbnail\": \"string\",          \"gender\": \"NotSpecified\",          \"dateOfBirth\": \"2020-02-22T18:04:18.025Z\",          \"locations\": [            {              \"locationType\": \"LivesIn\",              \"latitude\": 0,              \"longitude\": 0,              \"country\": \"string\",              \"state\": \"string\",              \"county\": \"string\",              \"city\": \"string\",              \"zipCode\": \"string\",              \"address\": \"string\"            }          ]      }
     * @summary Create partner.
     * @param {CreatePartnerCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PartnersPost(body?: CreatePartnerCommand | undefined, options?: any): RequestArgs;
};
/**
 * PartnersApi - functional programming interface
 * @export
 */
export declare const PartnersApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Sample request:        GET /api/v1/partners      {          \"pageQueryFilter\": {              \"page\": 1,              \"limit\": 20,              \"lastRetrived\": \"2020-02-05T08:40\"          },          \"searchString\": \"patner\"      }
     * @summary Get all partners.
     * @param {string} [id]
     * @param {string} [fullname]
     * @param {string} [email]
     * @param {object} [gender]
     * @param {Date} [dateOfBirth]
     * @param {Date} [created]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PartnersGet(id?: string | undefined, fullname?: string | undefined, email?: string | undefined, gender?: object | undefined, dateOfBirth?: Date | undefined, created?: Date | undefined, page?: number | undefined, limit?: number | undefined, lastRetrieved?: Date | undefined, current?: boolean | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<PartnersViewModel>;
    /**
     * Sample request:        DELETE /api/v1/partners/1
     * @summary Delete patner.
     * @param {string} partnerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PartnersPartnerIdDelete(partnerId: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<boolean>;
    /**
     * Sample request:        GET /api/v1/patners/1
     * @summary Get partner.
     * @param {string} partnerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PartnersPartnerIdGet(partnerId: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<PartnerViewModel>;
    /**
     * Sample request:        PUT /api/v1/patners/1      {          firstName\": \"string\",          \"lastName\": \"string\",          \"photo\": \"string\",          \"locations\": [            {              \"locationType\": \"LivesIn\",              \"latitude\": 0,              \"longitude\": 0,              \"country\": \"string\",              \"state\": \"string\",              \"county\": \"string\",              \"city\": \"string\",              \"zipCode\": \"string\",              \"address\": \"string\"            }          ]      }
     * @summary Update partner.
     * @param {string} partnerId
     * @param {UpdatePartnerCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PartnersPartnerIdPut(partnerId: string, body?: UpdatePartnerCommand | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<boolean>;
    /**
     * Sample request:        POST /api/v1/partners      {          \"userName\": \"string\",          \"email\": \"string\",          \"firstName\": \"string\",          \"lastName\": \"string\",          \"photo\": \"string\",          \"photoThumbnail\": \"string\",          \"gender\": \"NotSpecified\",          \"dateOfBirth\": \"2020-02-22T18:04:18.025Z\",          \"locations\": [            {              \"locationType\": \"LivesIn\",              \"latitude\": 0,              \"longitude\": 0,              \"country\": \"string\",              \"state\": \"string\",              \"county\": \"string\",              \"city\": \"string\",              \"zipCode\": \"string\",              \"address\": \"string\"            }          ]      }
     * @summary Create partner.
     * @param {CreatePartnerCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PartnersPost(body?: CreatePartnerCommand | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<string>;
};
/**
 * PartnersApi - factory interface
 * @export
 */
export declare const PartnersApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * Sample request:        GET /api/v1/partners      {          \"pageQueryFilter\": {              \"page\": 1,              \"limit\": 20,              \"lastRetrived\": \"2020-02-05T08:40\"          },          \"searchString\": \"patner\"      }
     * @summary Get all partners.
     * @param {string} [id]
     * @param {string} [fullname]
     * @param {string} [email]
     * @param {object} [gender]
     * @param {Date} [dateOfBirth]
     * @param {Date} [created]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PartnersGet(id?: string | undefined, fullname?: string | undefined, email?: string | undefined, gender?: object | undefined, dateOfBirth?: Date | undefined, created?: Date | undefined, page?: number | undefined, limit?: number | undefined, lastRetrieved?: Date | undefined, current?: boolean | undefined, options?: any): AxiosPromise<PartnersViewModel>;
    /**
     * Sample request:        DELETE /api/v1/partners/1
     * @summary Delete patner.
     * @param {string} partnerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PartnersPartnerIdDelete(partnerId: string, options?: any): AxiosPromise<boolean>;
    /**
     * Sample request:        GET /api/v1/patners/1
     * @summary Get partner.
     * @param {string} partnerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PartnersPartnerIdGet(partnerId: string, options?: any): AxiosPromise<PartnerViewModel>;
    /**
     * Sample request:        PUT /api/v1/patners/1      {          firstName\": \"string\",          \"lastName\": \"string\",          \"photo\": \"string\",          \"locations\": [            {              \"locationType\": \"LivesIn\",              \"latitude\": 0,              \"longitude\": 0,              \"country\": \"string\",              \"state\": \"string\",              \"county\": \"string\",              \"city\": \"string\",              \"zipCode\": \"string\",              \"address\": \"string\"            }          ]      }
     * @summary Update partner.
     * @param {string} partnerId
     * @param {UpdatePartnerCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PartnersPartnerIdPut(partnerId: string, body?: UpdatePartnerCommand | undefined, options?: any): AxiosPromise<boolean>;
    /**
     * Sample request:        POST /api/v1/partners      {          \"userName\": \"string\",          \"email\": \"string\",          \"firstName\": \"string\",          \"lastName\": \"string\",          \"photo\": \"string\",          \"photoThumbnail\": \"string\",          \"gender\": \"NotSpecified\",          \"dateOfBirth\": \"2020-02-22T18:04:18.025Z\",          \"locations\": [            {              \"locationType\": \"LivesIn\",              \"latitude\": 0,              \"longitude\": 0,              \"country\": \"string\",              \"state\": \"string\",              \"county\": \"string\",              \"city\": \"string\",              \"zipCode\": \"string\",              \"address\": \"string\"            }          ]      }
     * @summary Create partner.
     * @param {CreatePartnerCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PartnersPost(body?: CreatePartnerCommand | undefined, options?: any): AxiosPromise<string>;
};
/**
 * PartnersApi - object-oriented interface
 * @export
 * @class PartnersApi
 * @extends {BaseAPI}
 */
export declare class PartnersApi extends BaseAPI {
    /**
     * Sample request:        GET /api/v1/partners      {          \"pageQueryFilter\": {              \"page\": 1,              \"limit\": 20,              \"lastRetrived\": \"2020-02-05T08:40\"          },          \"searchString\": \"patner\"      }
     * @summary Get all partners.
     * @param {string} [id]
     * @param {string} [fullname]
     * @param {string} [email]
     * @param {object} [gender]
     * @param {Date} [dateOfBirth]
     * @param {Date} [created]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartnersApi
     */
    apiV1PartnersGet(id?: string, fullname?: string, email?: string, gender?: object, dateOfBirth?: Date, created?: Date, page?: number, limit?: number, lastRetrieved?: Date, current?: boolean, options?: any): AxiosPromise<PartnersViewModel>;
    /**
     * Sample request:        DELETE /api/v1/partners/1
     * @summary Delete patner.
     * @param {string} partnerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartnersApi
     */
    apiV1PartnersPartnerIdDelete(partnerId: string, options?: any): AxiosPromise<boolean>;
    /**
     * Sample request:        GET /api/v1/patners/1
     * @summary Get partner.
     * @param {string} partnerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartnersApi
     */
    apiV1PartnersPartnerIdGet(partnerId: string, options?: any): AxiosPromise<PartnerViewModel>;
    /**
     * Sample request:        PUT /api/v1/patners/1      {          firstName\": \"string\",          \"lastName\": \"string\",          \"photo\": \"string\",          \"locations\": [            {              \"locationType\": \"LivesIn\",              \"latitude\": 0,              \"longitude\": 0,              \"country\": \"string\",              \"state\": \"string\",              \"county\": \"string\",              \"city\": \"string\",              \"zipCode\": \"string\",              \"address\": \"string\"            }          ]      }
     * @summary Update partner.
     * @param {string} partnerId
     * @param {UpdatePartnerCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartnersApi
     */
    apiV1PartnersPartnerIdPut(partnerId: string, body?: UpdatePartnerCommand, options?: any): AxiosPromise<boolean>;
    /**
     * Sample request:        POST /api/v1/partners      {          \"userName\": \"string\",          \"email\": \"string\",          \"firstName\": \"string\",          \"lastName\": \"string\",          \"photo\": \"string\",          \"photoThumbnail\": \"string\",          \"gender\": \"NotSpecified\",          \"dateOfBirth\": \"2020-02-22T18:04:18.025Z\",          \"locations\": [            {              \"locationType\": \"LivesIn\",              \"latitude\": 0,              \"longitude\": 0,              \"country\": \"string\",              \"state\": \"string\",              \"county\": \"string\",              \"city\": \"string\",              \"zipCode\": \"string\",              \"address\": \"string\"            }          ]      }
     * @summary Create partner.
     * @param {CreatePartnerCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartnersApi
     */
    apiV1PartnersPost(body?: CreatePartnerCommand, options?: any): AxiosPromise<string>;
}
/**
 * PatientsApi - axios parameter creator
 * @export
 */
export declare const PatientsApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Sample request:        GET /api/v1/patients      {          \"pageQueryFilter\": {              \"page\": 1,              \"limit\": 20,              \"lastRetrived\": \"2020-02-05T08:40\"          },          \"searchString\": \"patient\"      }
     * @summary Get all patients.
     * @param {string} [id]
     * @param {string} [fullname]
     * @param {string} [email]
     * @param {object} [gender]
     * @param {Date} [dateOfBirth]
     * @param {Date} [created]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PatientsGet(id?: string | undefined, fullname?: string | undefined, email?: string | undefined, gender?: object | undefined, dateOfBirth?: Date | undefined, created?: Date | undefined, page?: number | undefined, limit?: number | undefined, lastRetrieved?: Date | undefined, current?: boolean | undefined, options?: any): RequestArgs;
    /**
     * Sample request:        DELETE /api/v1/patients/1
     * @summary Delete patient.
     * @param {string} patientId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PatientsPatientIdDelete(patientId: string, options?: any): RequestArgs;
    /**
     * Sample request:        GET /api/v1/patients/1
     * @summary Get patient.
     * @param {string} patientId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PatientsPatientIdGet(patientId: string, options?: any): RequestArgs;
    /**
     * Sample request:        PUT /api/v1/patients/1      {          \"referralCode\": \"string\",          \"firstName\": \"patient\",          \"lastName\": \"cloud\",          \"photo\": \"string\",          \"locations\": [            {              \"locationType\": \"LivesIn\",              \"latitude\": 0,              \"longitude\": 0,              \"country\": \"string\",              \"state\": \"string\",              \"county\": \"string\",              \"city\": \"string\",              \"zipCode\": \"string\",              \"address\": \"string\"            }          ]      }
     * @summary Update patient.
     * @param {string} patientId
     * @param {UpdatePatientCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PatientsPatientIdPut(patientId: string, body?: UpdatePatientCommand | undefined, options?: any): RequestArgs;
    /**
     * Sample request:        POST /api/v1/patients      {          \"referralCode\": \"123456\",          \"email\": \"patient@icloudhospital.com\",          \"firstName\": \"patient\",          \"lastName\": \"cloud\",          \"photo\": \"string\",          \"locations\": [            {              \"locationType\": \"LivesIn\",              \"latitude\": 0,              \"longitude\": 0,              \"country\": \"string\",              \"state\": \"string\",              \"county\": \"string\",              \"city\": \"string\",              \"zipCode\": \"string\",              \"address\": \"string\"            }          ]      }
     * @summary Create patient.
     * @param {CreatePatientCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PatientsPost(body?: CreatePatientCommand | undefined, options?: any): RequestArgs;
};
/**
 * PatientsApi - functional programming interface
 * @export
 */
export declare const PatientsApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Sample request:        GET /api/v1/patients      {          \"pageQueryFilter\": {              \"page\": 1,              \"limit\": 20,              \"lastRetrived\": \"2020-02-05T08:40\"          },          \"searchString\": \"patient\"      }
     * @summary Get all patients.
     * @param {string} [id]
     * @param {string} [fullname]
     * @param {string} [email]
     * @param {object} [gender]
     * @param {Date} [dateOfBirth]
     * @param {Date} [created]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PatientsGet(id?: string | undefined, fullname?: string | undefined, email?: string | undefined, gender?: object | undefined, dateOfBirth?: Date | undefined, created?: Date | undefined, page?: number | undefined, limit?: number | undefined, lastRetrieved?: Date | undefined, current?: boolean | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<PatientsViewModel>;
    /**
     * Sample request:        DELETE /api/v1/patients/1
     * @summary Delete patient.
     * @param {string} patientId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PatientsPatientIdDelete(patientId: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<boolean>;
    /**
     * Sample request:        GET /api/v1/patients/1
     * @summary Get patient.
     * @param {string} patientId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PatientsPatientIdGet(patientId: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<PatientViewModel>;
    /**
     * Sample request:        PUT /api/v1/patients/1      {          \"referralCode\": \"string\",          \"firstName\": \"patient\",          \"lastName\": \"cloud\",          \"photo\": \"string\",          \"locations\": [            {              \"locationType\": \"LivesIn\",              \"latitude\": 0,              \"longitude\": 0,              \"country\": \"string\",              \"state\": \"string\",              \"county\": \"string\",              \"city\": \"string\",              \"zipCode\": \"string\",              \"address\": \"string\"            }          ]      }
     * @summary Update patient.
     * @param {string} patientId
     * @param {UpdatePatientCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PatientsPatientIdPut(patientId: string, body?: UpdatePatientCommand | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<boolean>;
    /**
     * Sample request:        POST /api/v1/patients      {          \"referralCode\": \"123456\",          \"email\": \"patient@icloudhospital.com\",          \"firstName\": \"patient\",          \"lastName\": \"cloud\",          \"photo\": \"string\",          \"locations\": [            {              \"locationType\": \"LivesIn\",              \"latitude\": 0,              \"longitude\": 0,              \"country\": \"string\",              \"state\": \"string\",              \"county\": \"string\",              \"city\": \"string\",              \"zipCode\": \"string\",              \"address\": \"string\"            }          ]      }
     * @summary Create patient.
     * @param {CreatePatientCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PatientsPost(body?: CreatePatientCommand | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<string>;
};
/**
 * PatientsApi - factory interface
 * @export
 */
export declare const PatientsApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * Sample request:        GET /api/v1/patients      {          \"pageQueryFilter\": {              \"page\": 1,              \"limit\": 20,              \"lastRetrived\": \"2020-02-05T08:40\"          },          \"searchString\": \"patient\"      }
     * @summary Get all patients.
     * @param {string} [id]
     * @param {string} [fullname]
     * @param {string} [email]
     * @param {object} [gender]
     * @param {Date} [dateOfBirth]
     * @param {Date} [created]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PatientsGet(id?: string | undefined, fullname?: string | undefined, email?: string | undefined, gender?: object | undefined, dateOfBirth?: Date | undefined, created?: Date | undefined, page?: number | undefined, limit?: number | undefined, lastRetrieved?: Date | undefined, current?: boolean | undefined, options?: any): AxiosPromise<PatientsViewModel>;
    /**
     * Sample request:        DELETE /api/v1/patients/1
     * @summary Delete patient.
     * @param {string} patientId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PatientsPatientIdDelete(patientId: string, options?: any): AxiosPromise<boolean>;
    /**
     * Sample request:        GET /api/v1/patients/1
     * @summary Get patient.
     * @param {string} patientId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PatientsPatientIdGet(patientId: string, options?: any): AxiosPromise<PatientViewModel>;
    /**
     * Sample request:        PUT /api/v1/patients/1      {          \"referralCode\": \"string\",          \"firstName\": \"patient\",          \"lastName\": \"cloud\",          \"photo\": \"string\",          \"locations\": [            {              \"locationType\": \"LivesIn\",              \"latitude\": 0,              \"longitude\": 0,              \"country\": \"string\",              \"state\": \"string\",              \"county\": \"string\",              \"city\": \"string\",              \"zipCode\": \"string\",              \"address\": \"string\"            }          ]      }
     * @summary Update patient.
     * @param {string} patientId
     * @param {UpdatePatientCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PatientsPatientIdPut(patientId: string, body?: UpdatePatientCommand | undefined, options?: any): AxiosPromise<boolean>;
    /**
     * Sample request:        POST /api/v1/patients      {          \"referralCode\": \"123456\",          \"email\": \"patient@icloudhospital.com\",          \"firstName\": \"patient\",          \"lastName\": \"cloud\",          \"photo\": \"string\",          \"locations\": [            {              \"locationType\": \"LivesIn\",              \"latitude\": 0,              \"longitude\": 0,              \"country\": \"string\",              \"state\": \"string\",              \"county\": \"string\",              \"city\": \"string\",              \"zipCode\": \"string\",              \"address\": \"string\"            }          ]      }
     * @summary Create patient.
     * @param {CreatePatientCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PatientsPost(body?: CreatePatientCommand | undefined, options?: any): AxiosPromise<string>;
};
/**
 * PatientsApi - object-oriented interface
 * @export
 * @class PatientsApi
 * @extends {BaseAPI}
 */
export declare class PatientsApi extends BaseAPI {
    /**
     * Sample request:        GET /api/v1/patients      {          \"pageQueryFilter\": {              \"page\": 1,              \"limit\": 20,              \"lastRetrived\": \"2020-02-05T08:40\"          },          \"searchString\": \"patient\"      }
     * @summary Get all patients.
     * @param {string} [id]
     * @param {string} [fullname]
     * @param {string} [email]
     * @param {object} [gender]
     * @param {Date} [dateOfBirth]
     * @param {Date} [created]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientsApi
     */
    apiV1PatientsGet(id?: string, fullname?: string, email?: string, gender?: object, dateOfBirth?: Date, created?: Date, page?: number, limit?: number, lastRetrieved?: Date, current?: boolean, options?: any): AxiosPromise<PatientsViewModel>;
    /**
     * Sample request:        DELETE /api/v1/patients/1
     * @summary Delete patient.
     * @param {string} patientId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientsApi
     */
    apiV1PatientsPatientIdDelete(patientId: string, options?: any): AxiosPromise<boolean>;
    /**
     * Sample request:        GET /api/v1/patients/1
     * @summary Get patient.
     * @param {string} patientId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientsApi
     */
    apiV1PatientsPatientIdGet(patientId: string, options?: any): AxiosPromise<PatientViewModel>;
    /**
     * Sample request:        PUT /api/v1/patients/1      {          \"referralCode\": \"string\",          \"firstName\": \"patient\",          \"lastName\": \"cloud\",          \"photo\": \"string\",          \"locations\": [            {              \"locationType\": \"LivesIn\",              \"latitude\": 0,              \"longitude\": 0,              \"country\": \"string\",              \"state\": \"string\",              \"county\": \"string\",              \"city\": \"string\",              \"zipCode\": \"string\",              \"address\": \"string\"            }          ]      }
     * @summary Update patient.
     * @param {string} patientId
     * @param {UpdatePatientCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientsApi
     */
    apiV1PatientsPatientIdPut(patientId: string, body?: UpdatePatientCommand, options?: any): AxiosPromise<boolean>;
    /**
     * Sample request:        POST /api/v1/patients      {          \"referralCode\": \"123456\",          \"email\": \"patient@icloudhospital.com\",          \"firstName\": \"patient\",          \"lastName\": \"cloud\",          \"photo\": \"string\",          \"locations\": [            {              \"locationType\": \"LivesIn\",              \"latitude\": 0,              \"longitude\": 0,              \"country\": \"string\",              \"state\": \"string\",              \"county\": \"string\",              \"city\": \"string\",              \"zipCode\": \"string\",              \"address\": \"string\"            }          ]      }
     * @summary Create patient.
     * @param {CreatePatientCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientsApi
     */
    apiV1PatientsPost(body?: CreatePatientCommand, options?: any): AxiosPromise<string>;
}
/**
 * ProfilesApi - axios parameter creator
 * @export
 */
export declare const ProfilesApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Sample request:        POST /api/v1/profiles/changeEmail      {          \"email\": \"user@example.com\"      }
     * @summary Change user\'s email on both Identity and Api.
     * @param {ChangeEmailCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ProfilesChangeemailPost(body?: ChangeEmailCommand | undefined, options?: any): RequestArgs;
    /**
     *
     * @param {ConfirmEmailCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ProfilesConfirmemailPost(body?: ConfirmEmailCommand | undefined, options?: any): RequestArgs;
    /**
     * Sample request:        GET /api/v1/profiles
     * @summary Get current user\'s profile.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ProfilesGet(options?: any): RequestArgs;
};
/**
 * ProfilesApi - functional programming interface
 * @export
 */
export declare const ProfilesApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Sample request:        POST /api/v1/profiles/changeEmail      {          \"email\": \"user@example.com\"      }
     * @summary Change user\'s email on both Identity and Api.
     * @param {ChangeEmailCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ProfilesChangeemailPost(body?: ChangeEmailCommand | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<boolean>;
    /**
     *
     * @param {ConfirmEmailCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ProfilesConfirmemailPost(body?: ConfirmEmailCommand | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<boolean>;
    /**
     * Sample request:        GET /api/v1/profiles
     * @summary Get current user\'s profile.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ProfilesGet(options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<UserViewModel>;
};
/**
 * ProfilesApi - factory interface
 * @export
 */
export declare const ProfilesApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * Sample request:        POST /api/v1/profiles/changeEmail      {          \"email\": \"user@example.com\"      }
     * @summary Change user\'s email on both Identity and Api.
     * @param {ChangeEmailCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ProfilesChangeemailPost(body?: ChangeEmailCommand | undefined, options?: any): AxiosPromise<boolean>;
    /**
     *
     * @param {ConfirmEmailCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ProfilesConfirmemailPost(body?: ConfirmEmailCommand | undefined, options?: any): AxiosPromise<boolean>;
    /**
     * Sample request:        GET /api/v1/profiles
     * @summary Get current user\'s profile.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ProfilesGet(options?: any): AxiosPromise<UserViewModel>;
};
/**
 * ProfilesApi - object-oriented interface
 * @export
 * @class ProfilesApi
 * @extends {BaseAPI}
 */
export declare class ProfilesApi extends BaseAPI {
    /**
     * Sample request:        POST /api/v1/profiles/changeEmail      {          \"email\": \"user@example.com\"      }
     * @summary Change user\'s email on both Identity and Api.
     * @param {ChangeEmailCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApi
     */
    apiV1ProfilesChangeemailPost(body?: ChangeEmailCommand, options?: any): AxiosPromise<boolean>;
    /**
     *
     * @param {ConfirmEmailCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApi
     */
    apiV1ProfilesConfirmemailPost(body?: ConfirmEmailCommand, options?: any): AxiosPromise<boolean>;
    /**
     * Sample request:        GET /api/v1/profiles
     * @summary Get current user\'s profile.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApi
     */
    apiV1ProfilesGet(options?: any): AxiosPromise<UserViewModel>;
}
/**
 * QuestionCommentsApi - axios parameter creator
 * @export
 */
export declare const QuestionCommentsApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Sample request:        GET /api/v1/questionComment
     * @summary Get all questionComment.
     * @param {string} questionId
     * @param {string} [id]
     * @param {string} [userId]
     * @param {string} [questionId2]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1QuestionsQuestionIdQuestioncommentsGet(questionId: string, id?: string | undefined, userId?: string | undefined, questionId2?: string | undefined, page?: number | undefined, limit?: number | undefined, lastRetrieved?: Date | undefined, current?: boolean | undefined, options?: any): RequestArgs;
    /**
     * Sample request:        POST /api/v1/questions/1/questionComment      {          \"description\": \"This is a questionComment.\",          \"body\": \"questionComment body here\",          \"status\": \"Draft\",          \"hospitalId\": 1,          \"medias\": [            {              \"mediaType\": \"Photo\",              \"url\": \"string\",              \"thumbnailUrl\": \"string\",              \"description\": \"string\",              \"order\": 0            }          ]      }
     * @summary Create an questionComment.
     * @param {string} questionId
     * @param {CreateQuestionCommentCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1QuestionsQuestionIdQuestioncommentsPost(questionId: string, body?: CreateQuestionCommentCommand | undefined, options?: any): RequestArgs;
    /**
     * Sample request:        DELETE /api/v1/questions/1/questionComments/1
     * @summary Delete questionComment.
     * @param {string} questionId
     * @param {string} questionCommentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1QuestionsQuestionIdQuestioncommentsQuestionCommentIdDelete(questionId: string, questionCommentId: string, options?: any): RequestArgs;
    /**
     * Sample request:        GET /api/v1/questionComment/1
     * @summary Get questionComment.
     * @param {string} questionId
     * @param {string} questionCommentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1QuestionsQuestionIdQuestioncommentsQuestionCommentIdGet(questionId: string, questionCommentId: string, options?: any): RequestArgs;
    /**
     * Sample request:        PUT /api/v1/questions/1/questionComments/1      {          \"QuestionTitle\": \"Question title\",          \"body\": \"updated questionComment body here\"      }
     * @summary Update questionComment.
     * @param {string} questionId
     * @param {string} questionCommentId
     * @param {UpdateQuestionCommentCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1QuestionsQuestionIdQuestioncommentsQuestionCommentIdPut(questionId: string, questionCommentId: string, body?: UpdateQuestionCommentCommand | undefined, options?: any): RequestArgs;
};
/**
 * QuestionCommentsApi - functional programming interface
 * @export
 */
export declare const QuestionCommentsApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Sample request:        GET /api/v1/questionComment
     * @summary Get all questionComment.
     * @param {string} questionId
     * @param {string} [id]
     * @param {string} [userId]
     * @param {string} [questionId2]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1QuestionsQuestionIdQuestioncommentsGet(questionId: string, id?: string | undefined, userId?: string | undefined, questionId2?: string | undefined, page?: number | undefined, limit?: number | undefined, lastRetrieved?: Date | undefined, current?: boolean | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<QuestionCommentsViewModel>;
    /**
     * Sample request:        POST /api/v1/questions/1/questionComment      {          \"description\": \"This is a questionComment.\",          \"body\": \"questionComment body here\",          \"status\": \"Draft\",          \"hospitalId\": 1,          \"medias\": [            {              \"mediaType\": \"Photo\",              \"url\": \"string\",              \"thumbnailUrl\": \"string\",              \"description\": \"string\",              \"order\": 0            }          ]      }
     * @summary Create an questionComment.
     * @param {string} questionId
     * @param {CreateQuestionCommentCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1QuestionsQuestionIdQuestioncommentsPost(questionId: string, body?: CreateQuestionCommentCommand | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<string>;
    /**
     * Sample request:        DELETE /api/v1/questions/1/questionComments/1
     * @summary Delete questionComment.
     * @param {string} questionId
     * @param {string} questionCommentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1QuestionsQuestionIdQuestioncommentsQuestionCommentIdDelete(questionId: string, questionCommentId: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<boolean>;
    /**
     * Sample request:        GET /api/v1/questionComment/1
     * @summary Get questionComment.
     * @param {string} questionId
     * @param {string} questionCommentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1QuestionsQuestionIdQuestioncommentsQuestionCommentIdGet(questionId: string, questionCommentId: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<QuestionCommentViewModel>;
    /**
     * Sample request:        PUT /api/v1/questions/1/questionComments/1      {          \"QuestionTitle\": \"Question title\",          \"body\": \"updated questionComment body here\"      }
     * @summary Update questionComment.
     * @param {string} questionId
     * @param {string} questionCommentId
     * @param {UpdateQuestionCommentCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1QuestionsQuestionIdQuestioncommentsQuestionCommentIdPut(questionId: string, questionCommentId: string, body?: UpdateQuestionCommentCommand | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<boolean>;
};
/**
 * QuestionCommentsApi - factory interface
 * @export
 */
export declare const QuestionCommentsApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * Sample request:        GET /api/v1/questionComment
     * @summary Get all questionComment.
     * @param {string} questionId
     * @param {string} [id]
     * @param {string} [userId]
     * @param {string} [questionId2]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1QuestionsQuestionIdQuestioncommentsGet(questionId: string, id?: string | undefined, userId?: string | undefined, questionId2?: string | undefined, page?: number | undefined, limit?: number | undefined, lastRetrieved?: Date | undefined, current?: boolean | undefined, options?: any): AxiosPromise<QuestionCommentsViewModel>;
    /**
     * Sample request:        POST /api/v1/questions/1/questionComment      {          \"description\": \"This is a questionComment.\",          \"body\": \"questionComment body here\",          \"status\": \"Draft\",          \"hospitalId\": 1,          \"medias\": [            {              \"mediaType\": \"Photo\",              \"url\": \"string\",              \"thumbnailUrl\": \"string\",              \"description\": \"string\",              \"order\": 0            }          ]      }
     * @summary Create an questionComment.
     * @param {string} questionId
     * @param {CreateQuestionCommentCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1QuestionsQuestionIdQuestioncommentsPost(questionId: string, body?: CreateQuestionCommentCommand | undefined, options?: any): AxiosPromise<string>;
    /**
     * Sample request:        DELETE /api/v1/questions/1/questionComments/1
     * @summary Delete questionComment.
     * @param {string} questionId
     * @param {string} questionCommentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1QuestionsQuestionIdQuestioncommentsQuestionCommentIdDelete(questionId: string, questionCommentId: string, options?: any): AxiosPromise<boolean>;
    /**
     * Sample request:        GET /api/v1/questionComment/1
     * @summary Get questionComment.
     * @param {string} questionId
     * @param {string} questionCommentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1QuestionsQuestionIdQuestioncommentsQuestionCommentIdGet(questionId: string, questionCommentId: string, options?: any): AxiosPromise<QuestionCommentViewModel>;
    /**
     * Sample request:        PUT /api/v1/questions/1/questionComments/1      {          \"QuestionTitle\": \"Question title\",          \"body\": \"updated questionComment body here\"      }
     * @summary Update questionComment.
     * @param {string} questionId
     * @param {string} questionCommentId
     * @param {UpdateQuestionCommentCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1QuestionsQuestionIdQuestioncommentsQuestionCommentIdPut(questionId: string, questionCommentId: string, body?: UpdateQuestionCommentCommand | undefined, options?: any): AxiosPromise<boolean>;
};
/**
 * QuestionCommentsApi - object-oriented interface
 * @export
 * @class QuestionCommentsApi
 * @extends {BaseAPI}
 */
export declare class QuestionCommentsApi extends BaseAPI {
    /**
     * Sample request:        GET /api/v1/questionComment
     * @summary Get all questionComment.
     * @param {string} questionId
     * @param {string} [id]
     * @param {string} [userId]
     * @param {string} [questionId2]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionCommentsApi
     */
    apiV1QuestionsQuestionIdQuestioncommentsGet(questionId: string, id?: string, userId?: string, questionId2?: string, page?: number, limit?: number, lastRetrieved?: Date, current?: boolean, options?: any): AxiosPromise<QuestionCommentsViewModel>;
    /**
     * Sample request:        POST /api/v1/questions/1/questionComment      {          \"description\": \"This is a questionComment.\",          \"body\": \"questionComment body here\",          \"status\": \"Draft\",          \"hospitalId\": 1,          \"medias\": [            {              \"mediaType\": \"Photo\",              \"url\": \"string\",              \"thumbnailUrl\": \"string\",              \"description\": \"string\",              \"order\": 0            }          ]      }
     * @summary Create an questionComment.
     * @param {string} questionId
     * @param {CreateQuestionCommentCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionCommentsApi
     */
    apiV1QuestionsQuestionIdQuestioncommentsPost(questionId: string, body?: CreateQuestionCommentCommand, options?: any): AxiosPromise<string>;
    /**
     * Sample request:        DELETE /api/v1/questions/1/questionComments/1
     * @summary Delete questionComment.
     * @param {string} questionId
     * @param {string} questionCommentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionCommentsApi
     */
    apiV1QuestionsQuestionIdQuestioncommentsQuestionCommentIdDelete(questionId: string, questionCommentId: string, options?: any): AxiosPromise<boolean>;
    /**
     * Sample request:        GET /api/v1/questionComment/1
     * @summary Get questionComment.
     * @param {string} questionId
     * @param {string} questionCommentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionCommentsApi
     */
    apiV1QuestionsQuestionIdQuestioncommentsQuestionCommentIdGet(questionId: string, questionCommentId: string, options?: any): AxiosPromise<QuestionCommentViewModel>;
    /**
     * Sample request:        PUT /api/v1/questions/1/questionComments/1      {          \"QuestionTitle\": \"Question title\",          \"body\": \"updated questionComment body here\"      }
     * @summary Update questionComment.
     * @param {string} questionId
     * @param {string} questionCommentId
     * @param {UpdateQuestionCommentCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionCommentsApi
     */
    apiV1QuestionsQuestionIdQuestioncommentsQuestionCommentIdPut(questionId: string, questionCommentId: string, body?: UpdateQuestionCommentCommand, options?: any): AxiosPromise<boolean>;
}
/**
 * QuestionsApi - axios parameter creator
 * @export
 */
export declare const QuestionsApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Sample request:        POST /api/v1/hospitals/1/questions      {          \"title\": \"Hospital question\",          \"description\": \"This is a question.\",          \"body\": \"question body here\",          \"status\": \"Draft\",          \"hospitalId\": 1,          \"tags\": [            {              \"value\": \"string\",              \"order\": 0              }          ],          \"medias\": [            {              \"mediaType\": \"Photo\",              \"url\": \"string\",              \"thumbnailUrl\": \"string\",              \"description\": \"string\",              \"order\": 0            }          ]      }
     * @summary Create an question.
     * @param {string} hospitalId
     * @param {CreateQuestionCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsHospitalIdQuestionsPost(hospitalId: string, body?: CreateQuestionCommand | undefined, options?: any): RequestArgs;
    /**
     * Sample request:        DELETE /api/v1/hospitals/1/questions/1
     * @summary Delete question.
     * @param {string} hospitalId
     * @param {string} questionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsHospitalIdQuestionsQuestionIdDelete(hospitalId: string, questionId: string, options?: any): RequestArgs;
    /**
     * Sample request:        GET /api/v1/hospitals/1/questions/1
     * @summary Get question.
     * @param {string} hospitalId
     * @param {string} questionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsHospitalIdQuestionsQuestionIdGet(hospitalId: string, questionId: string, options?: any): RequestArgs;
    /**
     * Sample request:        PUT /api/v1/hospitals/1/questions/1      {          \"title\": \"Samsung Hospital\",          \"description\": \"This is an question.\",          \"body\": \"updated question body here\",          \"status\": \"Draft\",          \"hospitalId\": 1,        ///                   \"medias\": [            {              \"mediaType\": \"Photo\",              \"url\": \"string\",              \"thumbnailUrl\": \"string\",              \"description\": \"string\",              \"order\": 0            }          ]      }
     * @summary Update question.
     * @param {string} hospitalId
     * @param {string} questionId
     * @param {UpdateQuestionCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsHospitalIdQuestionsQuestionIdPut(hospitalId: string, questionId: string, body?: UpdateQuestionCommand | undefined, options?: any): RequestArgs;
    /**
     * Sample request:        GET /api/v1/hospitals/1/questions
     * @summary Get all questions.
     * @param {string} [id]
     * @param {string} [title]
     * @param {string} [hospitalId]
     * @param {string} [patientId]
     * @param {object} [questionType]
     * @param {object} [questionStatus]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsQuestionsGet(id?: string | undefined, title?: string | undefined, hospitalId?: string | undefined, patientId?: string | undefined, questionType?: object | undefined, questionStatus?: object | undefined, page?: number | undefined, limit?: number | undefined, lastRetrieved?: Date | undefined, current?: boolean | undefined, options?: any): RequestArgs;
};
/**
 * QuestionsApi - functional programming interface
 * @export
 */
export declare const QuestionsApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Sample request:        POST /api/v1/hospitals/1/questions      {          \"title\": \"Hospital question\",          \"description\": \"This is a question.\",          \"body\": \"question body here\",          \"status\": \"Draft\",          \"hospitalId\": 1,          \"tags\": [            {              \"value\": \"string\",              \"order\": 0              }          ],          \"medias\": [            {              \"mediaType\": \"Photo\",              \"url\": \"string\",              \"thumbnailUrl\": \"string\",              \"description\": \"string\",              \"order\": 0            }          ]      }
     * @summary Create an question.
     * @param {string} hospitalId
     * @param {CreateQuestionCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsHospitalIdQuestionsPost(hospitalId: string, body?: CreateQuestionCommand | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<string>;
    /**
     * Sample request:        DELETE /api/v1/hospitals/1/questions/1
     * @summary Delete question.
     * @param {string} hospitalId
     * @param {string} questionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsHospitalIdQuestionsQuestionIdDelete(hospitalId: string, questionId: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<boolean>;
    /**
     * Sample request:        GET /api/v1/hospitals/1/questions/1
     * @summary Get question.
     * @param {string} hospitalId
     * @param {string} questionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsHospitalIdQuestionsQuestionIdGet(hospitalId: string, questionId: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<QuestionViewModel>;
    /**
     * Sample request:        PUT /api/v1/hospitals/1/questions/1      {          \"title\": \"Samsung Hospital\",          \"description\": \"This is an question.\",          \"body\": \"updated question body here\",          \"status\": \"Draft\",          \"hospitalId\": 1,        ///                   \"medias\": [            {              \"mediaType\": \"Photo\",              \"url\": \"string\",              \"thumbnailUrl\": \"string\",              \"description\": \"string\",              \"order\": 0            }          ]      }
     * @summary Update question.
     * @param {string} hospitalId
     * @param {string} questionId
     * @param {UpdateQuestionCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsHospitalIdQuestionsQuestionIdPut(hospitalId: string, questionId: string, body?: UpdateQuestionCommand | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<boolean>;
    /**
     * Sample request:        GET /api/v1/hospitals/1/questions
     * @summary Get all questions.
     * @param {string} [id]
     * @param {string} [title]
     * @param {string} [hospitalId]
     * @param {string} [patientId]
     * @param {object} [questionType]
     * @param {object} [questionStatus]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsQuestionsGet(id?: string | undefined, title?: string | undefined, hospitalId?: string | undefined, patientId?: string | undefined, questionType?: object | undefined, questionStatus?: object | undefined, page?: number | undefined, limit?: number | undefined, lastRetrieved?: Date | undefined, current?: boolean | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<QuestionsViewModel>;
};
/**
 * QuestionsApi - factory interface
 * @export
 */
export declare const QuestionsApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * Sample request:        POST /api/v1/hospitals/1/questions      {          \"title\": \"Hospital question\",          \"description\": \"This is a question.\",          \"body\": \"question body here\",          \"status\": \"Draft\",          \"hospitalId\": 1,          \"tags\": [            {              \"value\": \"string\",              \"order\": 0              }          ],          \"medias\": [            {              \"mediaType\": \"Photo\",              \"url\": \"string\",              \"thumbnailUrl\": \"string\",              \"description\": \"string\",              \"order\": 0            }          ]      }
     * @summary Create an question.
     * @param {string} hospitalId
     * @param {CreateQuestionCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsHospitalIdQuestionsPost(hospitalId: string, body?: CreateQuestionCommand | undefined, options?: any): AxiosPromise<string>;
    /**
     * Sample request:        DELETE /api/v1/hospitals/1/questions/1
     * @summary Delete question.
     * @param {string} hospitalId
     * @param {string} questionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsHospitalIdQuestionsQuestionIdDelete(hospitalId: string, questionId: string, options?: any): AxiosPromise<boolean>;
    /**
     * Sample request:        GET /api/v1/hospitals/1/questions/1
     * @summary Get question.
     * @param {string} hospitalId
     * @param {string} questionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsHospitalIdQuestionsQuestionIdGet(hospitalId: string, questionId: string, options?: any): AxiosPromise<QuestionViewModel>;
    /**
     * Sample request:        PUT /api/v1/hospitals/1/questions/1      {          \"title\": \"Samsung Hospital\",          \"description\": \"This is an question.\",          \"body\": \"updated question body here\",          \"status\": \"Draft\",          \"hospitalId\": 1,        ///                   \"medias\": [            {              \"mediaType\": \"Photo\",              \"url\": \"string\",              \"thumbnailUrl\": \"string\",              \"description\": \"string\",              \"order\": 0            }          ]      }
     * @summary Update question.
     * @param {string} hospitalId
     * @param {string} questionId
     * @param {UpdateQuestionCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsHospitalIdQuestionsQuestionIdPut(hospitalId: string, questionId: string, body?: UpdateQuestionCommand | undefined, options?: any): AxiosPromise<boolean>;
    /**
     * Sample request:        GET /api/v1/hospitals/1/questions
     * @summary Get all questions.
     * @param {string} [id]
     * @param {string} [title]
     * @param {string} [hospitalId]
     * @param {string} [patientId]
     * @param {object} [questionType]
     * @param {object} [questionStatus]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsQuestionsGet(id?: string | undefined, title?: string | undefined, hospitalId?: string | undefined, patientId?: string | undefined, questionType?: object | undefined, questionStatus?: object | undefined, page?: number | undefined, limit?: number | undefined, lastRetrieved?: Date | undefined, current?: boolean | undefined, options?: any): AxiosPromise<QuestionsViewModel>;
};
/**
 * QuestionsApi - object-oriented interface
 * @export
 * @class QuestionsApi
 * @extends {BaseAPI}
 */
export declare class QuestionsApi extends BaseAPI {
    /**
     * Sample request:        POST /api/v1/hospitals/1/questions      {          \"title\": \"Hospital question\",          \"description\": \"This is a question.\",          \"body\": \"question body here\",          \"status\": \"Draft\",          \"hospitalId\": 1,          \"tags\": [            {              \"value\": \"string\",              \"order\": 0              }          ],          \"medias\": [            {              \"mediaType\": \"Photo\",              \"url\": \"string\",              \"thumbnailUrl\": \"string\",              \"description\": \"string\",              \"order\": 0            }          ]      }
     * @summary Create an question.
     * @param {string} hospitalId
     * @param {CreateQuestionCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionsApi
     */
    apiV1HospitalsHospitalIdQuestionsPost(hospitalId: string, body?: CreateQuestionCommand, options?: any): AxiosPromise<string>;
    /**
     * Sample request:        DELETE /api/v1/hospitals/1/questions/1
     * @summary Delete question.
     * @param {string} hospitalId
     * @param {string} questionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionsApi
     */
    apiV1HospitalsHospitalIdQuestionsQuestionIdDelete(hospitalId: string, questionId: string, options?: any): AxiosPromise<boolean>;
    /**
     * Sample request:        GET /api/v1/hospitals/1/questions/1
     * @summary Get question.
     * @param {string} hospitalId
     * @param {string} questionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionsApi
     */
    apiV1HospitalsHospitalIdQuestionsQuestionIdGet(hospitalId: string, questionId: string, options?: any): AxiosPromise<QuestionViewModel>;
    /**
     * Sample request:        PUT /api/v1/hospitals/1/questions/1      {          \"title\": \"Samsung Hospital\",          \"description\": \"This is an question.\",          \"body\": \"updated question body here\",          \"status\": \"Draft\",          \"hospitalId\": 1,        ///                   \"medias\": [            {              \"mediaType\": \"Photo\",              \"url\": \"string\",              \"thumbnailUrl\": \"string\",              \"description\": \"string\",              \"order\": 0            }          ]      }
     * @summary Update question.
     * @param {string} hospitalId
     * @param {string} questionId
     * @param {UpdateQuestionCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionsApi
     */
    apiV1HospitalsHospitalIdQuestionsQuestionIdPut(hospitalId: string, questionId: string, body?: UpdateQuestionCommand, options?: any): AxiosPromise<boolean>;
    /**
     * Sample request:        GET /api/v1/hospitals/1/questions
     * @summary Get all questions.
     * @param {string} [id]
     * @param {string} [title]
     * @param {string} [hospitalId]
     * @param {string} [patientId]
     * @param {object} [questionType]
     * @param {object} [questionStatus]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionsApi
     */
    apiV1HospitalsQuestionsGet(id?: string, title?: string, hospitalId?: string, patientId?: string, questionType?: object, questionStatus?: object, page?: number, limit?: number, lastRetrieved?: Date, current?: boolean, options?: any): AxiosPromise<QuestionsViewModel>;
}
/**
 * SearchApi - axios parameter creator
 * @export
 */
export declare const SearchApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     *
     * @param {string} [searchTerm]
     * @param {boolean} [countOnly]
     * @param {string} [countryId]
     * @param {string} [hospitalId]
     * @param {object} [marketingType]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SearchDealsGet(searchTerm?: string | undefined, countOnly?: boolean | undefined, countryId?: string | undefined, hospitalId?: string | undefined, marketingType?: object | undefined, page?: number | undefined, limit?: number | undefined, lastRetrieved?: Date | undefined, current?: boolean | undefined, options?: any): RequestArgs;
    /**
     *
     * @param {string} [searchTerm]
     * @param {boolean} [countOnly]
     * @param {string} [countryId]
     * @param {string} [hospitalId]
     * @param {object} [marketingType]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SearchDoctorsGet(searchTerm?: string | undefined, countOnly?: boolean | undefined, countryId?: string | undefined, hospitalId?: string | undefined, marketingType?: object | undefined, page?: number | undefined, limit?: number | undefined, lastRetrieved?: Date | undefined, current?: boolean | undefined, options?: any): RequestArgs;
    /**
     *
     * @param {string} [searchTerm]
     * @param {boolean} [countOnly]
     * @param {string} [countryId]
     * @param {string} [hospitalId]
     * @param {object} [marketingType]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SearchEquipmentsGet(searchTerm?: string | undefined, countOnly?: boolean | undefined, countryId?: string | undefined, hospitalId?: string | undefined, marketingType?: object | undefined, page?: number | undefined, limit?: number | undefined, lastRetrieved?: Date | undefined, current?: boolean | undefined, options?: any): RequestArgs;
    /**
     *
     * @param {string} [searchTerm]
     * @param {boolean} [countOnly]
     * @param {string} [countryId]
     * @param {string} [hospitalId]
     * @param {object} [marketingType]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SearchGetcountGet(searchTerm?: string | undefined, countOnly?: boolean | undefined, countryId?: string | undefined, hospitalId?: string | undefined, marketingType?: object | undefined, page?: number | undefined, limit?: number | undefined, lastRetrieved?: Date | undefined, current?: boolean | undefined, options?: any): RequestArgs;
    /**
     *
     * @param {string} [searchTerm]
     * @param {boolean} [countOnly]
     * @param {string} [countryId]
     * @param {string} [hospitalId]
     * @param {object} [marketingType]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SearchHospitalsGet(searchTerm?: string | undefined, countOnly?: boolean | undefined, countryId?: string | undefined, hospitalId?: string | undefined, marketingType?: object | undefined, page?: number | undefined, limit?: number | undefined, lastRetrieved?: Date | undefined, current?: boolean | undefined, options?: any): RequestArgs;
    /**
     *
     * @param {string} [searchTerm]
     * @param {boolean} [countOnly]
     * @param {string} [countryId]
     * @param {string} [hospitalId]
     * @param {object} [marketingType]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SearchSpecialtiesGet(searchTerm?: string | undefined, countOnly?: boolean | undefined, countryId?: string | undefined, hospitalId?: string | undefined, marketingType?: object | undefined, page?: number | undefined, limit?: number | undefined, lastRetrieved?: Date | undefined, current?: boolean | undefined, options?: any): RequestArgs;
};
/**
 * SearchApi - functional programming interface
 * @export
 */
export declare const SearchApiFp: (configuration?: Configuration | undefined) => {
    /**
     *
     * @param {string} [searchTerm]
     * @param {boolean} [countOnly]
     * @param {string} [countryId]
     * @param {string} [hospitalId]
     * @param {object} [marketingType]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SearchDealsGet(searchTerm?: string | undefined, countOnly?: boolean | undefined, countryId?: string | undefined, hospitalId?: string | undefined, marketingType?: object | undefined, page?: number | undefined, limit?: number | undefined, lastRetrieved?: Date | undefined, current?: boolean | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<DealSearchResultViewModel>;
    /**
     *
     * @param {string} [searchTerm]
     * @param {boolean} [countOnly]
     * @param {string} [countryId]
     * @param {string} [hospitalId]
     * @param {object} [marketingType]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SearchDoctorsGet(searchTerm?: string | undefined, countOnly?: boolean | undefined, countryId?: string | undefined, hospitalId?: string | undefined, marketingType?: object | undefined, page?: number | undefined, limit?: number | undefined, lastRetrieved?: Date | undefined, current?: boolean | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<DoctorSearchResultViewModel>;
    /**
     *
     * @param {string} [searchTerm]
     * @param {boolean} [countOnly]
     * @param {string} [countryId]
     * @param {string} [hospitalId]
     * @param {object} [marketingType]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SearchEquipmentsGet(searchTerm?: string | undefined, countOnly?: boolean | undefined, countryId?: string | undefined, hospitalId?: string | undefined, marketingType?: object | undefined, page?: number | undefined, limit?: number | undefined, lastRetrieved?: Date | undefined, current?: boolean | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<EquipmentSearchResultViewModel>;
    /**
     *
     * @param {string} [searchTerm]
     * @param {boolean} [countOnly]
     * @param {string} [countryId]
     * @param {string} [hospitalId]
     * @param {object} [marketingType]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SearchGetcountGet(searchTerm?: string | undefined, countOnly?: boolean | undefined, countryId?: string | undefined, hospitalId?: string | undefined, marketingType?: object | undefined, page?: number | undefined, limit?: number | undefined, lastRetrieved?: Date | undefined, current?: boolean | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<AzureSearchViewModel>;
    /**
     *
     * @param {string} [searchTerm]
     * @param {boolean} [countOnly]
     * @param {string} [countryId]
     * @param {string} [hospitalId]
     * @param {object} [marketingType]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SearchHospitalsGet(searchTerm?: string | undefined, countOnly?: boolean | undefined, countryId?: string | undefined, hospitalId?: string | undefined, marketingType?: object | undefined, page?: number | undefined, limit?: number | undefined, lastRetrieved?: Date | undefined, current?: boolean | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<HospitalSearchResultViewModel>;
    /**
     *
     * @param {string} [searchTerm]
     * @param {boolean} [countOnly]
     * @param {string} [countryId]
     * @param {string} [hospitalId]
     * @param {object} [marketingType]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SearchSpecialtiesGet(searchTerm?: string | undefined, countOnly?: boolean | undefined, countryId?: string | undefined, hospitalId?: string | undefined, marketingType?: object | undefined, page?: number | undefined, limit?: number | undefined, lastRetrieved?: Date | undefined, current?: boolean | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<SpecialtySearchResultViewModel>;
};
/**
 * SearchApi - factory interface
 * @export
 */
export declare const SearchApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     *
     * @param {string} [searchTerm]
     * @param {boolean} [countOnly]
     * @param {string} [countryId]
     * @param {string} [hospitalId]
     * @param {object} [marketingType]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SearchDealsGet(searchTerm?: string | undefined, countOnly?: boolean | undefined, countryId?: string | undefined, hospitalId?: string | undefined, marketingType?: object | undefined, page?: number | undefined, limit?: number | undefined, lastRetrieved?: Date | undefined, current?: boolean | undefined, options?: any): AxiosPromise<DealSearchResultViewModel>;
    /**
     *
     * @param {string} [searchTerm]
     * @param {boolean} [countOnly]
     * @param {string} [countryId]
     * @param {string} [hospitalId]
     * @param {object} [marketingType]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SearchDoctorsGet(searchTerm?: string | undefined, countOnly?: boolean | undefined, countryId?: string | undefined, hospitalId?: string | undefined, marketingType?: object | undefined, page?: number | undefined, limit?: number | undefined, lastRetrieved?: Date | undefined, current?: boolean | undefined, options?: any): AxiosPromise<DoctorSearchResultViewModel>;
    /**
     *
     * @param {string} [searchTerm]
     * @param {boolean} [countOnly]
     * @param {string} [countryId]
     * @param {string} [hospitalId]
     * @param {object} [marketingType]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SearchEquipmentsGet(searchTerm?: string | undefined, countOnly?: boolean | undefined, countryId?: string | undefined, hospitalId?: string | undefined, marketingType?: object | undefined, page?: number | undefined, limit?: number | undefined, lastRetrieved?: Date | undefined, current?: boolean | undefined, options?: any): AxiosPromise<EquipmentSearchResultViewModel>;
    /**
     *
     * @param {string} [searchTerm]
     * @param {boolean} [countOnly]
     * @param {string} [countryId]
     * @param {string} [hospitalId]
     * @param {object} [marketingType]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SearchGetcountGet(searchTerm?: string | undefined, countOnly?: boolean | undefined, countryId?: string | undefined, hospitalId?: string | undefined, marketingType?: object | undefined, page?: number | undefined, limit?: number | undefined, lastRetrieved?: Date | undefined, current?: boolean | undefined, options?: any): AxiosPromise<AzureSearchViewModel>;
    /**
     *
     * @param {string} [searchTerm]
     * @param {boolean} [countOnly]
     * @param {string} [countryId]
     * @param {string} [hospitalId]
     * @param {object} [marketingType]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SearchHospitalsGet(searchTerm?: string | undefined, countOnly?: boolean | undefined, countryId?: string | undefined, hospitalId?: string | undefined, marketingType?: object | undefined, page?: number | undefined, limit?: number | undefined, lastRetrieved?: Date | undefined, current?: boolean | undefined, options?: any): AxiosPromise<HospitalSearchResultViewModel>;
    /**
     *
     * @param {string} [searchTerm]
     * @param {boolean} [countOnly]
     * @param {string} [countryId]
     * @param {string} [hospitalId]
     * @param {object} [marketingType]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SearchSpecialtiesGet(searchTerm?: string | undefined, countOnly?: boolean | undefined, countryId?: string | undefined, hospitalId?: string | undefined, marketingType?: object | undefined, page?: number | undefined, limit?: number | undefined, lastRetrieved?: Date | undefined, current?: boolean | undefined, options?: any): AxiosPromise<SpecialtySearchResultViewModel>;
};
/**
 * SearchApi - object-oriented interface
 * @export
 * @class SearchApi
 * @extends {BaseAPI}
 */
export declare class SearchApi extends BaseAPI {
    /**
     *
     * @param {string} [searchTerm]
     * @param {boolean} [countOnly]
     * @param {string} [countryId]
     * @param {string} [hospitalId]
     * @param {object} [marketingType]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    apiV1SearchDealsGet(searchTerm?: string, countOnly?: boolean, countryId?: string, hospitalId?: string, marketingType?: object, page?: number, limit?: number, lastRetrieved?: Date, current?: boolean, options?: any): AxiosPromise<DealSearchResultViewModel>;
    /**
     *
     * @param {string} [searchTerm]
     * @param {boolean} [countOnly]
     * @param {string} [countryId]
     * @param {string} [hospitalId]
     * @param {object} [marketingType]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    apiV1SearchDoctorsGet(searchTerm?: string, countOnly?: boolean, countryId?: string, hospitalId?: string, marketingType?: object, page?: number, limit?: number, lastRetrieved?: Date, current?: boolean, options?: any): AxiosPromise<DoctorSearchResultViewModel>;
    /**
     *
     * @param {string} [searchTerm]
     * @param {boolean} [countOnly]
     * @param {string} [countryId]
     * @param {string} [hospitalId]
     * @param {object} [marketingType]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    apiV1SearchEquipmentsGet(searchTerm?: string, countOnly?: boolean, countryId?: string, hospitalId?: string, marketingType?: object, page?: number, limit?: number, lastRetrieved?: Date, current?: boolean, options?: any): AxiosPromise<EquipmentSearchResultViewModel>;
    /**
     *
     * @param {string} [searchTerm]
     * @param {boolean} [countOnly]
     * @param {string} [countryId]
     * @param {string} [hospitalId]
     * @param {object} [marketingType]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    apiV1SearchGetcountGet(searchTerm?: string, countOnly?: boolean, countryId?: string, hospitalId?: string, marketingType?: object, page?: number, limit?: number, lastRetrieved?: Date, current?: boolean, options?: any): AxiosPromise<AzureSearchViewModel>;
    /**
     *
     * @param {string} [searchTerm]
     * @param {boolean} [countOnly]
     * @param {string} [countryId]
     * @param {string} [hospitalId]
     * @param {object} [marketingType]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    apiV1SearchHospitalsGet(searchTerm?: string, countOnly?: boolean, countryId?: string, hospitalId?: string, marketingType?: object, page?: number, limit?: number, lastRetrieved?: Date, current?: boolean, options?: any): AxiosPromise<HospitalSearchResultViewModel>;
    /**
     *
     * @param {string} [searchTerm]
     * @param {boolean} [countOnly]
     * @param {string} [countryId]
     * @param {string} [hospitalId]
     * @param {object} [marketingType]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    apiV1SearchSpecialtiesGet(searchTerm?: string, countOnly?: boolean, countryId?: string, hospitalId?: string, marketingType?: object, page?: number, limit?: number, lastRetrieved?: Date, current?: boolean, options?: any): AxiosPromise<SpecialtySearchResultViewModel>;
}
/**
 * ServiceCategoriesApi - axios parameter creator
 * @export
 */
export declare const ServiceCategoriesApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Sample request:        GET /api/v1/ServiceCategories
     * @summary Get all ServiceCategories.
     * @param {string} [id]
     * @param {string} [name]
     * @param {string} [description]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ServicecategoriesGet(id?: string | undefined, name?: string | undefined, description?: string | undefined, page?: number | undefined, limit?: number | undefined, lastRetrieved?: Date | undefined, current?: boolean | undefined, options?: any): RequestArgs;
    /**
     * Sample request:        POST /api/v1/ServiceCategories      {          \"name\": \"Adults\",          \"description\": \"There are so many “-ologists“ that they can be hard to keep straight. However, this list could be a handy reference. This is not meant to be an exhaustive and all-inclusive list of what a specialist does, but it should provide you with a basic overview.\"      }
     * @summary Create ServiceCategory.
     * @param {CreateServiceCategoryCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ServicecategoriesPost(body?: CreateServiceCategoryCommand | undefined, options?: any): RequestArgs;
    /**
     * Sample request:        DELETE /api/v1/ServiceCategories/1
     * @summary Delete ServiceCategory.
     * @param {string} serviceCategoryId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ServicecategoriesServiceCategoryIdDelete(serviceCategoryId: string, options?: any): RequestArgs;
    /**
     * Sample request:        GET /api/v1/ServiceCategories/1
     * @summary Get ServiceCategory.
     * @param {string} serviceCategoryId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ServicecategoriesServiceCategoryIdGet(serviceCategoryId: string, options?: any): RequestArgs;
    /**
     * Sample request:        PUT /api/v1/ServiceCategories/1      {          \"name\": \"Adults\",          \"description\": \"There are so many “-ologists“ that they can be hard to keep straight. However, this list could be a handy reference. This is not meant to be an exhaustive and all-inclusive list of what a specialist does, but it should provide you with a basic overview.\"      }
     * @summary Update ServiceCategory
     * @param {string} serviceCategoryId
     * @param {UpdateServiceCategoryCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ServicecategoriesServiceCategoryIdPut(serviceCategoryId: string, body?: UpdateServiceCategoryCommand | undefined, options?: any): RequestArgs;
};
/**
 * ServiceCategoriesApi - functional programming interface
 * @export
 */
export declare const ServiceCategoriesApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Sample request:        GET /api/v1/ServiceCategories
     * @summary Get all ServiceCategories.
     * @param {string} [id]
     * @param {string} [name]
     * @param {string} [description]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ServicecategoriesGet(id?: string | undefined, name?: string | undefined, description?: string | undefined, page?: number | undefined, limit?: number | undefined, lastRetrieved?: Date | undefined, current?: boolean | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<ServiceCategoriesViewModel>;
    /**
     * Sample request:        POST /api/v1/ServiceCategories      {          \"name\": \"Adults\",          \"description\": \"There are so many “-ologists“ that they can be hard to keep straight. However, this list could be a handy reference. This is not meant to be an exhaustive and all-inclusive list of what a specialist does, but it should provide you with a basic overview.\"      }
     * @summary Create ServiceCategory.
     * @param {CreateServiceCategoryCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ServicecategoriesPost(body?: CreateServiceCategoryCommand | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<string>;
    /**
     * Sample request:        DELETE /api/v1/ServiceCategories/1
     * @summary Delete ServiceCategory.
     * @param {string} serviceCategoryId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ServicecategoriesServiceCategoryIdDelete(serviceCategoryId: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<boolean>;
    /**
     * Sample request:        GET /api/v1/ServiceCategories/1
     * @summary Get ServiceCategory.
     * @param {string} serviceCategoryId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ServicecategoriesServiceCategoryIdGet(serviceCategoryId: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<ServiceCategoryViewModel>;
    /**
     * Sample request:        PUT /api/v1/ServiceCategories/1      {          \"name\": \"Adults\",          \"description\": \"There are so many “-ologists“ that they can be hard to keep straight. However, this list could be a handy reference. This is not meant to be an exhaustive and all-inclusive list of what a specialist does, but it should provide you with a basic overview.\"      }
     * @summary Update ServiceCategory
     * @param {string} serviceCategoryId
     * @param {UpdateServiceCategoryCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ServicecategoriesServiceCategoryIdPut(serviceCategoryId: string, body?: UpdateServiceCategoryCommand | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<boolean>;
};
/**
 * ServiceCategoriesApi - factory interface
 * @export
 */
export declare const ServiceCategoriesApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * Sample request:        GET /api/v1/ServiceCategories
     * @summary Get all ServiceCategories.
     * @param {string} [id]
     * @param {string} [name]
     * @param {string} [description]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ServicecategoriesGet(id?: string | undefined, name?: string | undefined, description?: string | undefined, page?: number | undefined, limit?: number | undefined, lastRetrieved?: Date | undefined, current?: boolean | undefined, options?: any): AxiosPromise<ServiceCategoriesViewModel>;
    /**
     * Sample request:        POST /api/v1/ServiceCategories      {          \"name\": \"Adults\",          \"description\": \"There are so many “-ologists“ that they can be hard to keep straight. However, this list could be a handy reference. This is not meant to be an exhaustive and all-inclusive list of what a specialist does, but it should provide you with a basic overview.\"      }
     * @summary Create ServiceCategory.
     * @param {CreateServiceCategoryCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ServicecategoriesPost(body?: CreateServiceCategoryCommand | undefined, options?: any): AxiosPromise<string>;
    /**
     * Sample request:        DELETE /api/v1/ServiceCategories/1
     * @summary Delete ServiceCategory.
     * @param {string} serviceCategoryId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ServicecategoriesServiceCategoryIdDelete(serviceCategoryId: string, options?: any): AxiosPromise<boolean>;
    /**
     * Sample request:        GET /api/v1/ServiceCategories/1
     * @summary Get ServiceCategory.
     * @param {string} serviceCategoryId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ServicecategoriesServiceCategoryIdGet(serviceCategoryId: string, options?: any): AxiosPromise<ServiceCategoryViewModel>;
    /**
     * Sample request:        PUT /api/v1/ServiceCategories/1      {          \"name\": \"Adults\",          \"description\": \"There are so many “-ologists“ that they can be hard to keep straight. However, this list could be a handy reference. This is not meant to be an exhaustive and all-inclusive list of what a specialist does, but it should provide you with a basic overview.\"      }
     * @summary Update ServiceCategory
     * @param {string} serviceCategoryId
     * @param {UpdateServiceCategoryCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1ServicecategoriesServiceCategoryIdPut(serviceCategoryId: string, body?: UpdateServiceCategoryCommand | undefined, options?: any): AxiosPromise<boolean>;
};
/**
 * ServiceCategoriesApi - object-oriented interface
 * @export
 * @class ServiceCategoriesApi
 * @extends {BaseAPI}
 */
export declare class ServiceCategoriesApi extends BaseAPI {
    /**
     * Sample request:        GET /api/v1/ServiceCategories
     * @summary Get all ServiceCategories.
     * @param {string} [id]
     * @param {string} [name]
     * @param {string} [description]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceCategoriesApi
     */
    apiV1ServicecategoriesGet(id?: string, name?: string, description?: string, page?: number, limit?: number, lastRetrieved?: Date, current?: boolean, options?: any): AxiosPromise<ServiceCategoriesViewModel>;
    /**
     * Sample request:        POST /api/v1/ServiceCategories      {          \"name\": \"Adults\",          \"description\": \"There are so many “-ologists“ that they can be hard to keep straight. However, this list could be a handy reference. This is not meant to be an exhaustive and all-inclusive list of what a specialist does, but it should provide you with a basic overview.\"      }
     * @summary Create ServiceCategory.
     * @param {CreateServiceCategoryCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceCategoriesApi
     */
    apiV1ServicecategoriesPost(body?: CreateServiceCategoryCommand, options?: any): AxiosPromise<string>;
    /**
     * Sample request:        DELETE /api/v1/ServiceCategories/1
     * @summary Delete ServiceCategory.
     * @param {string} serviceCategoryId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceCategoriesApi
     */
    apiV1ServicecategoriesServiceCategoryIdDelete(serviceCategoryId: string, options?: any): AxiosPromise<boolean>;
    /**
     * Sample request:        GET /api/v1/ServiceCategories/1
     * @summary Get ServiceCategory.
     * @param {string} serviceCategoryId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceCategoriesApi
     */
    apiV1ServicecategoriesServiceCategoryIdGet(serviceCategoryId: string, options?: any): AxiosPromise<ServiceCategoryViewModel>;
    /**
     * Sample request:        PUT /api/v1/ServiceCategories/1      {          \"name\": \"Adults\",          \"description\": \"There are so many “-ologists“ that they can be hard to keep straight. However, this list could be a handy reference. This is not meant to be an exhaustive and all-inclusive list of what a specialist does, but it should provide you with a basic overview.\"      }
     * @summary Update ServiceCategory
     * @param {string} serviceCategoryId
     * @param {UpdateServiceCategoryCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceCategoriesApi
     */
    apiV1ServicecategoriesServiceCategoryIdPut(serviceCategoryId: string, body?: UpdateServiceCategoryCommand, options?: any): AxiosPromise<boolean>;
}
/**
 * ServicesApi - axios parameter creator
 * @export
 */
export declare const ServicesApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Sample request:        POST /api/v1/hospitals/1/specialties/1/services      {          \"name\": \"Heart check up\",          \"description\": \"Asan Hospital (Asan Medical Center) is the largest multidisciplinary medical center in South Korea, which can serve 2,700 patients at once.The key specialties in the hospital are organ transplant, oncology, cardiology, and cardiac surgery.Almost half of all heart transplants in South Korea are carried out (45%) at Asan.The success of organ transplants ranges from 90%. Every day, 11,800 outpatients and 2,550 inpatients are treated in Asan Hospital. Medical tourists from the USA, China, the UAE, Russia, Kazakhstan, and Mongolia choose Asan Hospital.\",          \"minPrice\": 2235,          \"maxPrice\": 2566,          \"priceReuqest\": false,          \"procedure\": \"Treatment\"      }
     * @summary Create service.
     * @param {string} hospitalId
     * @param {string} specialtyId
     * @param {CreateServiceCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdServicesPost(hospitalId: string, specialtyId: string, body?: CreateServiceCommand | undefined, options?: any): RequestArgs;
    /**
     * Sample request:        DELETE /api/v1/hospitals/1/specialties/1/services/1
     * @summary Delete service.
     * @param {string} hospitalId
     * @param {string} specialtyId
     * @param {string} serviceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdServicesServiceIdDelete(hospitalId: string, specialtyId: string, serviceId: string, options?: any): RequestArgs;
    /**
     * Sample request:        GET /api/v1/hospitals/1/specialties/1/services/1
     * @summary Get service.
     * @param {string} hospitalId
     * @param {string} specialtyId
     * @param {string} serviceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdServicesServiceIdGet(hospitalId: string, specialtyId: string, serviceId: string, options?: any): RequestArgs;
    /**
     * Sample request:        PUT /api/v1/hospitals/1/specialties/1/services/1      {          \"name\": \"Extended analysis of blood\",          \"description\": \"Extended analysis of blood description.\",          \"minPrice\": 1000,          \"maxPrice\": 2600,          \"priceReuqest\": false      }
     * @summary Update service.
     * @param {string} hospitalId
     * @param {string} specialtyId
     * @param {string} serviceId
     * @param {UpdateServiceCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdServicesServiceIdPut(hospitalId: string, specialtyId: string, serviceId: string, body?: UpdateServiceCommand | undefined, options?: any): RequestArgs;
    /**
     * Smaple request:        PUT /api/v1/hospitals/1/specialties/1/servicesquence      {          \"serviceSequence\": [1, 3, 5]      }
     * @summary Update service sequence.
     * @param {string} hospitalId
     * @param {string} specialtyId
     * @param {UpdateServiceSequenceCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdServicesquencePut(hospitalId: string, specialtyId: string, body?: UpdateServiceSequenceCommand | undefined, options?: any): RequestArgs;
    /**
     * Sample request:        GET /api/v1/hospitals/services
     * @summary Get all services.
     * @param {string} [id]
     * @param {string} [name]
     * @param {string} [description]
     * @param {string} [hospitalId]
     * @param {string} [hospitalName]
     * @param {string} [specialtyId]
     * @param {string} [specialtyTypeId]
     * @param {string} [specialtyTypeName]
     * @param {object} [marketingType]
     * @param {object} [procedure]
     * @param {Date} [created]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsServicesGet(id?: string | undefined, name?: string | undefined, description?: string | undefined, hospitalId?: string | undefined, hospitalName?: string | undefined, specialtyId?: string | undefined, specialtyTypeId?: string | undefined, specialtyTypeName?: string | undefined, marketingType?: object | undefined, procedure?: object | undefined, created?: Date | undefined, page?: number | undefined, limit?: number | undefined, lastRetrieved?: Date | undefined, current?: boolean | undefined, options?: any): RequestArgs;
};
/**
 * ServicesApi - functional programming interface
 * @export
 */
export declare const ServicesApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Sample request:        POST /api/v1/hospitals/1/specialties/1/services      {          \"name\": \"Heart check up\",          \"description\": \"Asan Hospital (Asan Medical Center) is the largest multidisciplinary medical center in South Korea, which can serve 2,700 patients at once.The key specialties in the hospital are organ transplant, oncology, cardiology, and cardiac surgery.Almost half of all heart transplants in South Korea are carried out (45%) at Asan.The success of organ transplants ranges from 90%. Every day, 11,800 outpatients and 2,550 inpatients are treated in Asan Hospital. Medical tourists from the USA, China, the UAE, Russia, Kazakhstan, and Mongolia choose Asan Hospital.\",          \"minPrice\": 2235,          \"maxPrice\": 2566,          \"priceReuqest\": false,          \"procedure\": \"Treatment\"      }
     * @summary Create service.
     * @param {string} hospitalId
     * @param {string} specialtyId
     * @param {CreateServiceCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdServicesPost(hospitalId: string, specialtyId: string, body?: CreateServiceCommand | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<string>;
    /**
     * Sample request:        DELETE /api/v1/hospitals/1/specialties/1/services/1
     * @summary Delete service.
     * @param {string} hospitalId
     * @param {string} specialtyId
     * @param {string} serviceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdServicesServiceIdDelete(hospitalId: string, specialtyId: string, serviceId: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<boolean>;
    /**
     * Sample request:        GET /api/v1/hospitals/1/specialties/1/services/1
     * @summary Get service.
     * @param {string} hospitalId
     * @param {string} specialtyId
     * @param {string} serviceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdServicesServiceIdGet(hospitalId: string, specialtyId: string, serviceId: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<ServiceViewModel>;
    /**
     * Sample request:        PUT /api/v1/hospitals/1/specialties/1/services/1      {          \"name\": \"Extended analysis of blood\",          \"description\": \"Extended analysis of blood description.\",          \"minPrice\": 1000,          \"maxPrice\": 2600,          \"priceReuqest\": false      }
     * @summary Update service.
     * @param {string} hospitalId
     * @param {string} specialtyId
     * @param {string} serviceId
     * @param {UpdateServiceCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdServicesServiceIdPut(hospitalId: string, specialtyId: string, serviceId: string, body?: UpdateServiceCommand | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<boolean>;
    /**
     * Smaple request:        PUT /api/v1/hospitals/1/specialties/1/servicesquence      {          \"serviceSequence\": [1, 3, 5]      }
     * @summary Update service sequence.
     * @param {string} hospitalId
     * @param {string} specialtyId
     * @param {UpdateServiceSequenceCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdServicesquencePut(hospitalId: string, specialtyId: string, body?: UpdateServiceSequenceCommand | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<boolean>;
    /**
     * Sample request:        GET /api/v1/hospitals/services
     * @summary Get all services.
     * @param {string} [id]
     * @param {string} [name]
     * @param {string} [description]
     * @param {string} [hospitalId]
     * @param {string} [hospitalName]
     * @param {string} [specialtyId]
     * @param {string} [specialtyTypeId]
     * @param {string} [specialtyTypeName]
     * @param {object} [marketingType]
     * @param {object} [procedure]
     * @param {Date} [created]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsServicesGet(id?: string | undefined, name?: string | undefined, description?: string | undefined, hospitalId?: string | undefined, hospitalName?: string | undefined, specialtyId?: string | undefined, specialtyTypeId?: string | undefined, specialtyTypeName?: string | undefined, marketingType?: object | undefined, procedure?: object | undefined, created?: Date | undefined, page?: number | undefined, limit?: number | undefined, lastRetrieved?: Date | undefined, current?: boolean | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<ServicesViewModel>;
};
/**
 * ServicesApi - factory interface
 * @export
 */
export declare const ServicesApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * Sample request:        POST /api/v1/hospitals/1/specialties/1/services      {          \"name\": \"Heart check up\",          \"description\": \"Asan Hospital (Asan Medical Center) is the largest multidisciplinary medical center in South Korea, which can serve 2,700 patients at once.The key specialties in the hospital are organ transplant, oncology, cardiology, and cardiac surgery.Almost half of all heart transplants in South Korea are carried out (45%) at Asan.The success of organ transplants ranges from 90%. Every day, 11,800 outpatients and 2,550 inpatients are treated in Asan Hospital. Medical tourists from the USA, China, the UAE, Russia, Kazakhstan, and Mongolia choose Asan Hospital.\",          \"minPrice\": 2235,          \"maxPrice\": 2566,          \"priceReuqest\": false,          \"procedure\": \"Treatment\"      }
     * @summary Create service.
     * @param {string} hospitalId
     * @param {string} specialtyId
     * @param {CreateServiceCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdServicesPost(hospitalId: string, specialtyId: string, body?: CreateServiceCommand | undefined, options?: any): AxiosPromise<string>;
    /**
     * Sample request:        DELETE /api/v1/hospitals/1/specialties/1/services/1
     * @summary Delete service.
     * @param {string} hospitalId
     * @param {string} specialtyId
     * @param {string} serviceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdServicesServiceIdDelete(hospitalId: string, specialtyId: string, serviceId: string, options?: any): AxiosPromise<boolean>;
    /**
     * Sample request:        GET /api/v1/hospitals/1/specialties/1/services/1
     * @summary Get service.
     * @param {string} hospitalId
     * @param {string} specialtyId
     * @param {string} serviceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdServicesServiceIdGet(hospitalId: string, specialtyId: string, serviceId: string, options?: any): AxiosPromise<ServiceViewModel>;
    /**
     * Sample request:        PUT /api/v1/hospitals/1/specialties/1/services/1      {          \"name\": \"Extended analysis of blood\",          \"description\": \"Extended analysis of blood description.\",          \"minPrice\": 1000,          \"maxPrice\": 2600,          \"priceReuqest\": false      }
     * @summary Update service.
     * @param {string} hospitalId
     * @param {string} specialtyId
     * @param {string} serviceId
     * @param {UpdateServiceCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdServicesServiceIdPut(hospitalId: string, specialtyId: string, serviceId: string, body?: UpdateServiceCommand | undefined, options?: any): AxiosPromise<boolean>;
    /**
     * Smaple request:        PUT /api/v1/hospitals/1/specialties/1/servicesquence      {          \"serviceSequence\": [1, 3, 5]      }
     * @summary Update service sequence.
     * @param {string} hospitalId
     * @param {string} specialtyId
     * @param {UpdateServiceSequenceCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdServicesquencePut(hospitalId: string, specialtyId: string, body?: UpdateServiceSequenceCommand | undefined, options?: any): AxiosPromise<boolean>;
    /**
     * Sample request:        GET /api/v1/hospitals/services
     * @summary Get all services.
     * @param {string} [id]
     * @param {string} [name]
     * @param {string} [description]
     * @param {string} [hospitalId]
     * @param {string} [hospitalName]
     * @param {string} [specialtyId]
     * @param {string} [specialtyTypeId]
     * @param {string} [specialtyTypeName]
     * @param {object} [marketingType]
     * @param {object} [procedure]
     * @param {Date} [created]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1HospitalsServicesGet(id?: string | undefined, name?: string | undefined, description?: string | undefined, hospitalId?: string | undefined, hospitalName?: string | undefined, specialtyId?: string | undefined, specialtyTypeId?: string | undefined, specialtyTypeName?: string | undefined, marketingType?: object | undefined, procedure?: object | undefined, created?: Date | undefined, page?: number | undefined, limit?: number | undefined, lastRetrieved?: Date | undefined, current?: boolean | undefined, options?: any): AxiosPromise<ServicesViewModel>;
};
/**
 * ServicesApi - object-oriented interface
 * @export
 * @class ServicesApi
 * @extends {BaseAPI}
 */
export declare class ServicesApi extends BaseAPI {
    /**
     * Sample request:        POST /api/v1/hospitals/1/specialties/1/services      {          \"name\": \"Heart check up\",          \"description\": \"Asan Hospital (Asan Medical Center) is the largest multidisciplinary medical center in South Korea, which can serve 2,700 patients at once.The key specialties in the hospital are organ transplant, oncology, cardiology, and cardiac surgery.Almost half of all heart transplants in South Korea are carried out (45%) at Asan.The success of organ transplants ranges from 90%. Every day, 11,800 outpatients and 2,550 inpatients are treated in Asan Hospital. Medical tourists from the USA, China, the UAE, Russia, Kazakhstan, and Mongolia choose Asan Hospital.\",          \"minPrice\": 2235,          \"maxPrice\": 2566,          \"priceReuqest\": false,          \"procedure\": \"Treatment\"      }
     * @summary Create service.
     * @param {string} hospitalId
     * @param {string} specialtyId
     * @param {CreateServiceCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServicesApi
     */
    apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdServicesPost(hospitalId: string, specialtyId: string, body?: CreateServiceCommand, options?: any): AxiosPromise<string>;
    /**
     * Sample request:        DELETE /api/v1/hospitals/1/specialties/1/services/1
     * @summary Delete service.
     * @param {string} hospitalId
     * @param {string} specialtyId
     * @param {string} serviceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServicesApi
     */
    apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdServicesServiceIdDelete(hospitalId: string, specialtyId: string, serviceId: string, options?: any): AxiosPromise<boolean>;
    /**
     * Sample request:        GET /api/v1/hospitals/1/specialties/1/services/1
     * @summary Get service.
     * @param {string} hospitalId
     * @param {string} specialtyId
     * @param {string} serviceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServicesApi
     */
    apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdServicesServiceIdGet(hospitalId: string, specialtyId: string, serviceId: string, options?: any): AxiosPromise<ServiceViewModel>;
    /**
     * Sample request:        PUT /api/v1/hospitals/1/specialties/1/services/1      {          \"name\": \"Extended analysis of blood\",          \"description\": \"Extended analysis of blood description.\",          \"minPrice\": 1000,          \"maxPrice\": 2600,          \"priceReuqest\": false      }
     * @summary Update service.
     * @param {string} hospitalId
     * @param {string} specialtyId
     * @param {string} serviceId
     * @param {UpdateServiceCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServicesApi
     */
    apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdServicesServiceIdPut(hospitalId: string, specialtyId: string, serviceId: string, body?: UpdateServiceCommand, options?: any): AxiosPromise<boolean>;
    /**
     * Smaple request:        PUT /api/v1/hospitals/1/specialties/1/servicesquence      {          \"serviceSequence\": [1, 3, 5]      }
     * @summary Update service sequence.
     * @param {string} hospitalId
     * @param {string} specialtyId
     * @param {UpdateServiceSequenceCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServicesApi
     */
    apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdServicesquencePut(hospitalId: string, specialtyId: string, body?: UpdateServiceSequenceCommand, options?: any): AxiosPromise<boolean>;
    /**
     * Sample request:        GET /api/v1/hospitals/services
     * @summary Get all services.
     * @param {string} [id]
     * @param {string} [name]
     * @param {string} [description]
     * @param {string} [hospitalId]
     * @param {string} [hospitalName]
     * @param {string} [specialtyId]
     * @param {string} [specialtyTypeId]
     * @param {string} [specialtyTypeName]
     * @param {object} [marketingType]
     * @param {object} [procedure]
     * @param {Date} [created]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServicesApi
     */
    apiV1HospitalsServicesGet(id?: string, name?: string, description?: string, hospitalId?: string, hospitalName?: string, specialtyId?: string, specialtyTypeId?: string, specialtyTypeName?: string, marketingType?: object, procedure?: object, created?: Date, page?: number, limit?: number, lastRetrieved?: Date, current?: boolean, options?: any): AxiosPromise<ServicesViewModel>;
}
/**
 * SpecialtiesApi - axios parameter creator
 * @export
 */
export declare const SpecialtiesApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Sample request:        GET /api/v1/specialties
     * @summary Get all specialties.
     * @param {string} [id]
     * @param {string} [name]
     * @param {string} [description]
     * @param {string} [specialtyTypeId]
     * @param {Date} [created]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SpecialtiesGet(id?: string | undefined, name?: string | undefined, description?: string | undefined, specialtyTypeId?: string | undefined, created?: Date | undefined, page?: number | undefined, limit?: number | undefined, lastRetrieved?: Date | undefined, current?: boolean | undefined, options?: any): RequestArgs;
    /**
     * Sample request:        POST /api/v1/specialties      {          \"name\": \"Coronary artery disease\",          \"description\": \"Coronary artery disease\",          \"specialtyType\": \"Cardiology\"      }
     * @summary Create specialty.
     * @param {string} [specialtyTypeId]
     * @param {CreateSpecialtyCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SpecialtiesPost(specialtyTypeId?: string | undefined, body?: CreateSpecialtyCommand | undefined, options?: any): RequestArgs;
    /**
     * Sample request:        DELETE /api/v1/specialties/1
     * @summary Delete specialty.
     * @param {string} specialtyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SpecialtiesSpecialtyIdDelete(specialtyId: string, options?: any): RequestArgs;
    /**
     * Sample request:        GET /api/v1/specialties/1
     * @summary Get specialty.
     * @param {string} specialtyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SpecialtiesSpecialtyIdGet(specialtyId: string, options?: any): RequestArgs;
    /**
     * Sample request:        PUT /api/v1/specialties/1      {          \"name\": \"Dilated cardiomyopathy\",          \"description\": \"Dilated cardiomyopathy\"      }
     * @summary Update specialty
     * @param {string} specialtyId
     * @param {UpdateSpecialtyCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SpecialtiesSpecialtyIdPut(specialtyId: string, body?: UpdateSpecialtyCommand | undefined, options?: any): RequestArgs;
};
/**
 * SpecialtiesApi - functional programming interface
 * @export
 */
export declare const SpecialtiesApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Sample request:        GET /api/v1/specialties
     * @summary Get all specialties.
     * @param {string} [id]
     * @param {string} [name]
     * @param {string} [description]
     * @param {string} [specialtyTypeId]
     * @param {Date} [created]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SpecialtiesGet(id?: string | undefined, name?: string | undefined, description?: string | undefined, specialtyTypeId?: string | undefined, created?: Date | undefined, page?: number | undefined, limit?: number | undefined, lastRetrieved?: Date | undefined, current?: boolean | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<SpecialtiesViewModel>;
    /**
     * Sample request:        POST /api/v1/specialties      {          \"name\": \"Coronary artery disease\",          \"description\": \"Coronary artery disease\",          \"specialtyType\": \"Cardiology\"      }
     * @summary Create specialty.
     * @param {string} [specialtyTypeId]
     * @param {CreateSpecialtyCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SpecialtiesPost(specialtyTypeId?: string | undefined, body?: CreateSpecialtyCommand | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<string>;
    /**
     * Sample request:        DELETE /api/v1/specialties/1
     * @summary Delete specialty.
     * @param {string} specialtyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SpecialtiesSpecialtyIdDelete(specialtyId: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<boolean>;
    /**
     * Sample request:        GET /api/v1/specialties/1
     * @summary Get specialty.
     * @param {string} specialtyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SpecialtiesSpecialtyIdGet(specialtyId: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<SpecialtyViewModel>;
    /**
     * Sample request:        PUT /api/v1/specialties/1      {          \"name\": \"Dilated cardiomyopathy\",          \"description\": \"Dilated cardiomyopathy\"      }
     * @summary Update specialty
     * @param {string} specialtyId
     * @param {UpdateSpecialtyCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SpecialtiesSpecialtyIdPut(specialtyId: string, body?: UpdateSpecialtyCommand | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<boolean>;
};
/**
 * SpecialtiesApi - factory interface
 * @export
 */
export declare const SpecialtiesApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * Sample request:        GET /api/v1/specialties
     * @summary Get all specialties.
     * @param {string} [id]
     * @param {string} [name]
     * @param {string} [description]
     * @param {string} [specialtyTypeId]
     * @param {Date} [created]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SpecialtiesGet(id?: string | undefined, name?: string | undefined, description?: string | undefined, specialtyTypeId?: string | undefined, created?: Date | undefined, page?: number | undefined, limit?: number | undefined, lastRetrieved?: Date | undefined, current?: boolean | undefined, options?: any): AxiosPromise<SpecialtiesViewModel>;
    /**
     * Sample request:        POST /api/v1/specialties      {          \"name\": \"Coronary artery disease\",          \"description\": \"Coronary artery disease\",          \"specialtyType\": \"Cardiology\"      }
     * @summary Create specialty.
     * @param {string} [specialtyTypeId]
     * @param {CreateSpecialtyCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SpecialtiesPost(specialtyTypeId?: string | undefined, body?: CreateSpecialtyCommand | undefined, options?: any): AxiosPromise<string>;
    /**
     * Sample request:        DELETE /api/v1/specialties/1
     * @summary Delete specialty.
     * @param {string} specialtyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SpecialtiesSpecialtyIdDelete(specialtyId: string, options?: any): AxiosPromise<boolean>;
    /**
     * Sample request:        GET /api/v1/specialties/1
     * @summary Get specialty.
     * @param {string} specialtyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SpecialtiesSpecialtyIdGet(specialtyId: string, options?: any): AxiosPromise<SpecialtyViewModel>;
    /**
     * Sample request:        PUT /api/v1/specialties/1      {          \"name\": \"Dilated cardiomyopathy\",          \"description\": \"Dilated cardiomyopathy\"      }
     * @summary Update specialty
     * @param {string} specialtyId
     * @param {UpdateSpecialtyCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SpecialtiesSpecialtyIdPut(specialtyId: string, body?: UpdateSpecialtyCommand | undefined, options?: any): AxiosPromise<boolean>;
};
/**
 * SpecialtiesApi - object-oriented interface
 * @export
 * @class SpecialtiesApi
 * @extends {BaseAPI}
 */
export declare class SpecialtiesApi extends BaseAPI {
    /**
     * Sample request:        GET /api/v1/specialties
     * @summary Get all specialties.
     * @param {string} [id]
     * @param {string} [name]
     * @param {string} [description]
     * @param {string} [specialtyTypeId]
     * @param {Date} [created]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpecialtiesApi
     */
    apiV1SpecialtiesGet(id?: string, name?: string, description?: string, specialtyTypeId?: string, created?: Date, page?: number, limit?: number, lastRetrieved?: Date, current?: boolean, options?: any): AxiosPromise<SpecialtiesViewModel>;
    /**
     * Sample request:        POST /api/v1/specialties      {          \"name\": \"Coronary artery disease\",          \"description\": \"Coronary artery disease\",          \"specialtyType\": \"Cardiology\"      }
     * @summary Create specialty.
     * @param {string} [specialtyTypeId]
     * @param {CreateSpecialtyCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpecialtiesApi
     */
    apiV1SpecialtiesPost(specialtyTypeId?: string, body?: CreateSpecialtyCommand, options?: any): AxiosPromise<string>;
    /**
     * Sample request:        DELETE /api/v1/specialties/1
     * @summary Delete specialty.
     * @param {string} specialtyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpecialtiesApi
     */
    apiV1SpecialtiesSpecialtyIdDelete(specialtyId: string, options?: any): AxiosPromise<boolean>;
    /**
     * Sample request:        GET /api/v1/specialties/1
     * @summary Get specialty.
     * @param {string} specialtyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpecialtiesApi
     */
    apiV1SpecialtiesSpecialtyIdGet(specialtyId: string, options?: any): AxiosPromise<SpecialtyViewModel>;
    /**
     * Sample request:        PUT /api/v1/specialties/1      {          \"name\": \"Dilated cardiomyopathy\",          \"description\": \"Dilated cardiomyopathy\"      }
     * @summary Update specialty
     * @param {string} specialtyId
     * @param {UpdateSpecialtyCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpecialtiesApi
     */
    apiV1SpecialtiesSpecialtyIdPut(specialtyId: string, body?: UpdateSpecialtyCommand, options?: any): AxiosPromise<boolean>;
}
/**
 * SpecialtyTypeCategoriesApi - axios parameter creator
 * @export
 */
export declare const SpecialtyTypeCategoriesApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Sample request:        GET /api/v1/SpecialtyTypeCategories
     * @summary Get all SpecialtyTypeCategories.
     * @param {string} [id]
     * @param {string} [name]
     * @param {string} [description]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SpecialtytypecategoriesGet(id?: string | undefined, name?: string | undefined, description?: string | undefined, page?: number | undefined, limit?: number | undefined, lastRetrieved?: Date | undefined, current?: boolean | undefined, options?: any): RequestArgs;
    /**
     * Sample request:        POST /api/v1/SpecialtyTypeCategories      {          \"name\": \"Adults\",          \"description\": \"There are so many “-ologists“ that they can be hard to keep straight. However, this list could be a handy reference. This is not meant to be an exhaustive and all-inclusive list of what a specialist does, but it should provide you with a basic overview.\"      }
     * @summary Create specialtyTypeCategory.
     * @param {CreateSpecialtyTypeCategoryCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SpecialtytypecategoriesPost(body?: CreateSpecialtyTypeCategoryCommand | undefined, options?: any): RequestArgs;
    /**
     * Sample request:        DELETE /api/v1/SpecialtyTypeCategories/1
     * @summary Delete specialtyTypeCategory.
     * @param {string} specialtyTypeCategoryId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SpecialtytypecategoriesSpecialtyTypeCategoryIdDelete(specialtyTypeCategoryId: string, options?: any): RequestArgs;
    /**
     * Sample request:        GET /api/v1/SpecialtyTypeCategories/1
     * @summary Get specialtyTypeCategory.
     * @param {string} specialtyTypeCategoryId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SpecialtytypecategoriesSpecialtyTypeCategoryIdGet(specialtyTypeCategoryId: string, options?: any): RequestArgs;
    /**
     * Sample request:        PUT /api/v1/SpecialtyTypeCategories/1      {          \"name\": \"Adults\",          \"description\": \"There are so many “-ologists“ that they can be hard to keep straight. However, this list could be a handy reference. This is not meant to be an exhaustive and all-inclusive list of what a specialist does, but it should provide you with a basic overview.\"      }
     * @summary Update specialtyTypeCategory
     * @param {string} specialtyTypeCategoryId
     * @param {UpdateSpecialtyTypeCategoryCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SpecialtytypecategoriesSpecialtyTypeCategoryIdPut(specialtyTypeCategoryId: string, body?: UpdateSpecialtyTypeCategoryCommand | undefined, options?: any): RequestArgs;
};
/**
 * SpecialtyTypeCategoriesApi - functional programming interface
 * @export
 */
export declare const SpecialtyTypeCategoriesApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Sample request:        GET /api/v1/SpecialtyTypeCategories
     * @summary Get all SpecialtyTypeCategories.
     * @param {string} [id]
     * @param {string} [name]
     * @param {string} [description]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SpecialtytypecategoriesGet(id?: string | undefined, name?: string | undefined, description?: string | undefined, page?: number | undefined, limit?: number | undefined, lastRetrieved?: Date | undefined, current?: boolean | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<SpecialtyTypeCategoriesViewModel>;
    /**
     * Sample request:        POST /api/v1/SpecialtyTypeCategories      {          \"name\": \"Adults\",          \"description\": \"There are so many “-ologists“ that they can be hard to keep straight. However, this list could be a handy reference. This is not meant to be an exhaustive and all-inclusive list of what a specialist does, but it should provide you with a basic overview.\"      }
     * @summary Create specialtyTypeCategory.
     * @param {CreateSpecialtyTypeCategoryCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SpecialtytypecategoriesPost(body?: CreateSpecialtyTypeCategoryCommand | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<string>;
    /**
     * Sample request:        DELETE /api/v1/SpecialtyTypeCategories/1
     * @summary Delete specialtyTypeCategory.
     * @param {string} specialtyTypeCategoryId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SpecialtytypecategoriesSpecialtyTypeCategoryIdDelete(specialtyTypeCategoryId: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<boolean>;
    /**
     * Sample request:        GET /api/v1/SpecialtyTypeCategories/1
     * @summary Get specialtyTypeCategory.
     * @param {string} specialtyTypeCategoryId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SpecialtytypecategoriesSpecialtyTypeCategoryIdGet(specialtyTypeCategoryId: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<SpecialtyTypeCategoryViewModel>;
    /**
     * Sample request:        PUT /api/v1/SpecialtyTypeCategories/1      {          \"name\": \"Adults\",          \"description\": \"There are so many “-ologists“ that they can be hard to keep straight. However, this list could be a handy reference. This is not meant to be an exhaustive and all-inclusive list of what a specialist does, but it should provide you with a basic overview.\"      }
     * @summary Update specialtyTypeCategory
     * @param {string} specialtyTypeCategoryId
     * @param {UpdateSpecialtyTypeCategoryCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SpecialtytypecategoriesSpecialtyTypeCategoryIdPut(specialtyTypeCategoryId: string, body?: UpdateSpecialtyTypeCategoryCommand | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<boolean>;
};
/**
 * SpecialtyTypeCategoriesApi - factory interface
 * @export
 */
export declare const SpecialtyTypeCategoriesApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * Sample request:        GET /api/v1/SpecialtyTypeCategories
     * @summary Get all SpecialtyTypeCategories.
     * @param {string} [id]
     * @param {string} [name]
     * @param {string} [description]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SpecialtytypecategoriesGet(id?: string | undefined, name?: string | undefined, description?: string | undefined, page?: number | undefined, limit?: number | undefined, lastRetrieved?: Date | undefined, current?: boolean | undefined, options?: any): AxiosPromise<SpecialtyTypeCategoriesViewModel>;
    /**
     * Sample request:        POST /api/v1/SpecialtyTypeCategories      {          \"name\": \"Adults\",          \"description\": \"There are so many “-ologists“ that they can be hard to keep straight. However, this list could be a handy reference. This is not meant to be an exhaustive and all-inclusive list of what a specialist does, but it should provide you with a basic overview.\"      }
     * @summary Create specialtyTypeCategory.
     * @param {CreateSpecialtyTypeCategoryCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SpecialtytypecategoriesPost(body?: CreateSpecialtyTypeCategoryCommand | undefined, options?: any): AxiosPromise<string>;
    /**
     * Sample request:        DELETE /api/v1/SpecialtyTypeCategories/1
     * @summary Delete specialtyTypeCategory.
     * @param {string} specialtyTypeCategoryId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SpecialtytypecategoriesSpecialtyTypeCategoryIdDelete(specialtyTypeCategoryId: string, options?: any): AxiosPromise<boolean>;
    /**
     * Sample request:        GET /api/v1/SpecialtyTypeCategories/1
     * @summary Get specialtyTypeCategory.
     * @param {string} specialtyTypeCategoryId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SpecialtytypecategoriesSpecialtyTypeCategoryIdGet(specialtyTypeCategoryId: string, options?: any): AxiosPromise<SpecialtyTypeCategoryViewModel>;
    /**
     * Sample request:        PUT /api/v1/SpecialtyTypeCategories/1      {          \"name\": \"Adults\",          \"description\": \"There are so many “-ologists“ that they can be hard to keep straight. However, this list could be a handy reference. This is not meant to be an exhaustive and all-inclusive list of what a specialist does, but it should provide you with a basic overview.\"      }
     * @summary Update specialtyTypeCategory
     * @param {string} specialtyTypeCategoryId
     * @param {UpdateSpecialtyTypeCategoryCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SpecialtytypecategoriesSpecialtyTypeCategoryIdPut(specialtyTypeCategoryId: string, body?: UpdateSpecialtyTypeCategoryCommand | undefined, options?: any): AxiosPromise<boolean>;
};
/**
 * SpecialtyTypeCategoriesApi - object-oriented interface
 * @export
 * @class SpecialtyTypeCategoriesApi
 * @extends {BaseAPI}
 */
export declare class SpecialtyTypeCategoriesApi extends BaseAPI {
    /**
     * Sample request:        GET /api/v1/SpecialtyTypeCategories
     * @summary Get all SpecialtyTypeCategories.
     * @param {string} [id]
     * @param {string} [name]
     * @param {string} [description]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpecialtyTypeCategoriesApi
     */
    apiV1SpecialtytypecategoriesGet(id?: string, name?: string, description?: string, page?: number, limit?: number, lastRetrieved?: Date, current?: boolean, options?: any): AxiosPromise<SpecialtyTypeCategoriesViewModel>;
    /**
     * Sample request:        POST /api/v1/SpecialtyTypeCategories      {          \"name\": \"Adults\",          \"description\": \"There are so many “-ologists“ that they can be hard to keep straight. However, this list could be a handy reference. This is not meant to be an exhaustive and all-inclusive list of what a specialist does, but it should provide you with a basic overview.\"      }
     * @summary Create specialtyTypeCategory.
     * @param {CreateSpecialtyTypeCategoryCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpecialtyTypeCategoriesApi
     */
    apiV1SpecialtytypecategoriesPost(body?: CreateSpecialtyTypeCategoryCommand, options?: any): AxiosPromise<string>;
    /**
     * Sample request:        DELETE /api/v1/SpecialtyTypeCategories/1
     * @summary Delete specialtyTypeCategory.
     * @param {string} specialtyTypeCategoryId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpecialtyTypeCategoriesApi
     */
    apiV1SpecialtytypecategoriesSpecialtyTypeCategoryIdDelete(specialtyTypeCategoryId: string, options?: any): AxiosPromise<boolean>;
    /**
     * Sample request:        GET /api/v1/SpecialtyTypeCategories/1
     * @summary Get specialtyTypeCategory.
     * @param {string} specialtyTypeCategoryId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpecialtyTypeCategoriesApi
     */
    apiV1SpecialtytypecategoriesSpecialtyTypeCategoryIdGet(specialtyTypeCategoryId: string, options?: any): AxiosPromise<SpecialtyTypeCategoryViewModel>;
    /**
     * Sample request:        PUT /api/v1/SpecialtyTypeCategories/1      {          \"name\": \"Adults\",          \"description\": \"There are so many “-ologists“ that they can be hard to keep straight. However, this list could be a handy reference. This is not meant to be an exhaustive and all-inclusive list of what a specialist does, but it should provide you with a basic overview.\"      }
     * @summary Update specialtyTypeCategory
     * @param {string} specialtyTypeCategoryId
     * @param {UpdateSpecialtyTypeCategoryCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpecialtyTypeCategoriesApi
     */
    apiV1SpecialtytypecategoriesSpecialtyTypeCategoryIdPut(specialtyTypeCategoryId: string, body?: UpdateSpecialtyTypeCategoryCommand, options?: any): AxiosPromise<boolean>;
}
/**
 * SpecialtyTypesApi - axios parameter creator
 * @export
 */
export declare const SpecialtyTypesApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Sample request:        GET /api/v1/SpecialtyTypes
     * @summary Get all SpecialtyTypes.
     * @param {string} [id]
     * @param {string} [name]
     * @param {string} [description]
     * @param {object} [marketingType]
     * @param {Date} [created]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SpecialtytypesGet(id?: string | undefined, name?: string | undefined, description?: string | undefined, marketingType?: object | undefined, created?: Date | undefined, page?: number | undefined, limit?: number | undefined, lastRetrieved?: Date | undefined, current?: boolean | undefined, options?: any): RequestArgs;
    /**
     * Sample request:        POST /api/v1/SpecialtyTypes      {          \"name\": \"Coronary artery disease\",          \"description\": \"Coronary artery disease\",          \"specialtyTypeType\": \"Cardiology\"      }
     * @summary Create specialtyType.
     * @param {string} [specialtyTypeId]
     * @param {CreateSpecialtyTypeCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SpecialtytypesPost(specialtyTypeId?: string | undefined, body?: CreateSpecialtyTypeCommand | undefined, options?: any): RequestArgs;
    /**
     * Sample request:        DELETE /api/v1/SpecialtyTypes/1
     * @summary Delete specialtyType.
     * @param {string} specialtyTypeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SpecialtytypesSpecialtyTypeIdDelete(specialtyTypeId: string, options?: any): RequestArgs;
    /**
     * Sample request:        GET /api/v1/SpecialtyTypes/1
     * @summary Get specialtyType.
     * @param {string} specialtyTypeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SpecialtytypesSpecialtyTypeIdGet(specialtyTypeId: string, options?: any): RequestArgs;
    /**
     * Sample request:        PUT /api/v1/SpecialtyTypes/1      {          \"name\": \"Dilated cardiomyopathy\",          \"description\": \"Dilated cardiomyopathy\"      }
     * @summary Update specialtyType
     * @param {string} specialtyTypeId
     * @param {UpdateSpecialtyTypeCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SpecialtytypesSpecialtyTypeIdPut(specialtyTypeId: string, body?: UpdateSpecialtyTypeCommand | undefined, options?: any): RequestArgs;
};
/**
 * SpecialtyTypesApi - functional programming interface
 * @export
 */
export declare const SpecialtyTypesApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Sample request:        GET /api/v1/SpecialtyTypes
     * @summary Get all SpecialtyTypes.
     * @param {string} [id]
     * @param {string} [name]
     * @param {string} [description]
     * @param {object} [marketingType]
     * @param {Date} [created]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SpecialtytypesGet(id?: string | undefined, name?: string | undefined, description?: string | undefined, marketingType?: object | undefined, created?: Date | undefined, page?: number | undefined, limit?: number | undefined, lastRetrieved?: Date | undefined, current?: boolean | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<SpecialtyTypesViewModel>;
    /**
     * Sample request:        POST /api/v1/SpecialtyTypes      {          \"name\": \"Coronary artery disease\",          \"description\": \"Coronary artery disease\",          \"specialtyTypeType\": \"Cardiology\"      }
     * @summary Create specialtyType.
     * @param {string} [specialtyTypeId]
     * @param {CreateSpecialtyTypeCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SpecialtytypesPost(specialtyTypeId?: string | undefined, body?: CreateSpecialtyTypeCommand | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<string>;
    /**
     * Sample request:        DELETE /api/v1/SpecialtyTypes/1
     * @summary Delete specialtyType.
     * @param {string} specialtyTypeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SpecialtytypesSpecialtyTypeIdDelete(specialtyTypeId: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<boolean>;
    /**
     * Sample request:        GET /api/v1/SpecialtyTypes/1
     * @summary Get specialtyType.
     * @param {string} specialtyTypeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SpecialtytypesSpecialtyTypeIdGet(specialtyTypeId: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<SpecialtyTypeViewModel>;
    /**
     * Sample request:        PUT /api/v1/SpecialtyTypes/1      {          \"name\": \"Dilated cardiomyopathy\",          \"description\": \"Dilated cardiomyopathy\"      }
     * @summary Update specialtyType
     * @param {string} specialtyTypeId
     * @param {UpdateSpecialtyTypeCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SpecialtytypesSpecialtyTypeIdPut(specialtyTypeId: string, body?: UpdateSpecialtyTypeCommand | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<boolean>;
};
/**
 * SpecialtyTypesApi - factory interface
 * @export
 */
export declare const SpecialtyTypesApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * Sample request:        GET /api/v1/SpecialtyTypes
     * @summary Get all SpecialtyTypes.
     * @param {string} [id]
     * @param {string} [name]
     * @param {string} [description]
     * @param {object} [marketingType]
     * @param {Date} [created]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SpecialtytypesGet(id?: string | undefined, name?: string | undefined, description?: string | undefined, marketingType?: object | undefined, created?: Date | undefined, page?: number | undefined, limit?: number | undefined, lastRetrieved?: Date | undefined, current?: boolean | undefined, options?: any): AxiosPromise<SpecialtyTypesViewModel>;
    /**
     * Sample request:        POST /api/v1/SpecialtyTypes      {          \"name\": \"Coronary artery disease\",          \"description\": \"Coronary artery disease\",          \"specialtyTypeType\": \"Cardiology\"      }
     * @summary Create specialtyType.
     * @param {string} [specialtyTypeId]
     * @param {CreateSpecialtyTypeCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SpecialtytypesPost(specialtyTypeId?: string | undefined, body?: CreateSpecialtyTypeCommand | undefined, options?: any): AxiosPromise<string>;
    /**
     * Sample request:        DELETE /api/v1/SpecialtyTypes/1
     * @summary Delete specialtyType.
     * @param {string} specialtyTypeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SpecialtytypesSpecialtyTypeIdDelete(specialtyTypeId: string, options?: any): AxiosPromise<boolean>;
    /**
     * Sample request:        GET /api/v1/SpecialtyTypes/1
     * @summary Get specialtyType.
     * @param {string} specialtyTypeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SpecialtytypesSpecialtyTypeIdGet(specialtyTypeId: string, options?: any): AxiosPromise<SpecialtyTypeViewModel>;
    /**
     * Sample request:        PUT /api/v1/SpecialtyTypes/1      {          \"name\": \"Dilated cardiomyopathy\",          \"description\": \"Dilated cardiomyopathy\"      }
     * @summary Update specialtyType
     * @param {string} specialtyTypeId
     * @param {UpdateSpecialtyTypeCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1SpecialtytypesSpecialtyTypeIdPut(specialtyTypeId: string, body?: UpdateSpecialtyTypeCommand | undefined, options?: any): AxiosPromise<boolean>;
};
/**
 * SpecialtyTypesApi - object-oriented interface
 * @export
 * @class SpecialtyTypesApi
 * @extends {BaseAPI}
 */
export declare class SpecialtyTypesApi extends BaseAPI {
    /**
     * Sample request:        GET /api/v1/SpecialtyTypes
     * @summary Get all SpecialtyTypes.
     * @param {string} [id]
     * @param {string} [name]
     * @param {string} [description]
     * @param {object} [marketingType]
     * @param {Date} [created]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpecialtyTypesApi
     */
    apiV1SpecialtytypesGet(id?: string, name?: string, description?: string, marketingType?: object, created?: Date, page?: number, limit?: number, lastRetrieved?: Date, current?: boolean, options?: any): AxiosPromise<SpecialtyTypesViewModel>;
    /**
     * Sample request:        POST /api/v1/SpecialtyTypes      {          \"name\": \"Coronary artery disease\",          \"description\": \"Coronary artery disease\",          \"specialtyTypeType\": \"Cardiology\"      }
     * @summary Create specialtyType.
     * @param {string} [specialtyTypeId]
     * @param {CreateSpecialtyTypeCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpecialtyTypesApi
     */
    apiV1SpecialtytypesPost(specialtyTypeId?: string, body?: CreateSpecialtyTypeCommand, options?: any): AxiosPromise<string>;
    /**
     * Sample request:        DELETE /api/v1/SpecialtyTypes/1
     * @summary Delete specialtyType.
     * @param {string} specialtyTypeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpecialtyTypesApi
     */
    apiV1SpecialtytypesSpecialtyTypeIdDelete(specialtyTypeId: string, options?: any): AxiosPromise<boolean>;
    /**
     * Sample request:        GET /api/v1/SpecialtyTypes/1
     * @summary Get specialtyType.
     * @param {string} specialtyTypeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpecialtyTypesApi
     */
    apiV1SpecialtytypesSpecialtyTypeIdGet(specialtyTypeId: string, options?: any): AxiosPromise<SpecialtyTypeViewModel>;
    /**
     * Sample request:        PUT /api/v1/SpecialtyTypes/1      {          \"name\": \"Dilated cardiomyopathy\",          \"description\": \"Dilated cardiomyopathy\"      }
     * @summary Update specialtyType
     * @param {string} specialtyTypeId
     * @param {UpdateSpecialtyTypeCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpecialtyTypesApi
     */
    apiV1SpecialtytypesSpecialtyTypeIdPut(specialtyTypeId: string, body?: UpdateSpecialtyTypeCommand, options?: any): AxiosPromise<boolean>;
}
/**
 * YoutubesApi - axios parameter creator
 * @export
 */
export declare const YoutubesApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Sample request:        GET /api/v1/youtubes
     * @summary Get all youtubes.
     * @param {string} [id]
     * @param {string} [title]
     * @param {string} [normalizedTitle]
     * @param {string} [description]
     * @param {object} [marketingType]
     * @param {string} [tag]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1YoutubesGet(id?: string | undefined, title?: string | undefined, normalizedTitle?: string | undefined, description?: string | undefined, marketingType?: object | undefined, tag?: string | undefined, page?: number | undefined, limit?: number | undefined, lastRetrieved?: Date | undefined, current?: boolean | undefined, options?: any): RequestArgs;
    /**
     * Sample request:        POST /api/v1/youtubes      {          \"title\": \"Samsung Hospital Youtube\",          \"description\": \"This is an youtube.\",          \"body\": \"youtube body here\",          \"status\": \"Draft\",          \"hospitalId\": 1,          \"tags\": [            {              \"value\": \"string\",              \"order\": 0              }          ],          \"medias\": [            {              \"mediaType\": \"Photo\",              \"url\": \"string\",              \"thumbnailUrl\": \"string\",              \"description\": \"string\",              \"order\": 0            }          ]      }
     * @summary Create an youtube.
     * @param {CreateYoutubeCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1YoutubesPost(body?: CreateYoutubeCommand | undefined, options?: any): RequestArgs;
    /**
     * Sample request:        DELETE /api/v1/youtubes/1
     * @summary Delete youtube.
     * @param {string} youtubeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1YoutubesYoutubeIdDelete(youtubeId: string, options?: any): RequestArgs;
    /**
     * Sample request:        GET /api/v1/youtubes/1
     * @summary Get youtube.
     * @param {string} youtubeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1YoutubesYoutubeIdGet(youtubeId: string, options?: any): RequestArgs;
    /**
     * Sample request:        PUT /api/v1/youtubes/1      {          \"title\": \"Samsung Hospital Youtube\",          \"description\": \"This is an youtube.\",                  \"tags\": [            {              \"value\": \"youtubetag1\",              \"order\": 0            },            {              \"value\": \"youtubetag2\",              \"order\": 0            }          ],          \"medias\": [            {              \"mediaType\": \"Photo\",              \"url\": \"string\",              \"thumbnailUrl\": \"string\",              \"description\": \"string\",              \"order\": 0            }          ]      }
     * @summary Update youtube.
     * @param {string} youtubeId
     * @param {UpdateYoutubeCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1YoutubesYoutubeIdPut(youtubeId: string, body?: UpdateYoutubeCommand | undefined, options?: any): RequestArgs;
};
/**
 * YoutubesApi - functional programming interface
 * @export
 */
export declare const YoutubesApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Sample request:        GET /api/v1/youtubes
     * @summary Get all youtubes.
     * @param {string} [id]
     * @param {string} [title]
     * @param {string} [normalizedTitle]
     * @param {string} [description]
     * @param {object} [marketingType]
     * @param {string} [tag]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1YoutubesGet(id?: string | undefined, title?: string | undefined, normalizedTitle?: string | undefined, description?: string | undefined, marketingType?: object | undefined, tag?: string | undefined, page?: number | undefined, limit?: number | undefined, lastRetrieved?: Date | undefined, current?: boolean | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<YoutubesViewModel>;
    /**
     * Sample request:        POST /api/v1/youtubes      {          \"title\": \"Samsung Hospital Youtube\",          \"description\": \"This is an youtube.\",          \"body\": \"youtube body here\",          \"status\": \"Draft\",          \"hospitalId\": 1,          \"tags\": [            {              \"value\": \"string\",              \"order\": 0              }          ],          \"medias\": [            {              \"mediaType\": \"Photo\",              \"url\": \"string\",              \"thumbnailUrl\": \"string\",              \"description\": \"string\",              \"order\": 0            }          ]      }
     * @summary Create an youtube.
     * @param {CreateYoutubeCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1YoutubesPost(body?: CreateYoutubeCommand | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<string>;
    /**
     * Sample request:        DELETE /api/v1/youtubes/1
     * @summary Delete youtube.
     * @param {string} youtubeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1YoutubesYoutubeIdDelete(youtubeId: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<boolean>;
    /**
     * Sample request:        GET /api/v1/youtubes/1
     * @summary Get youtube.
     * @param {string} youtubeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1YoutubesYoutubeIdGet(youtubeId: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<YoutubeViewModel>;
    /**
     * Sample request:        PUT /api/v1/youtubes/1      {          \"title\": \"Samsung Hospital Youtube\",          \"description\": \"This is an youtube.\",                  \"tags\": [            {              \"value\": \"youtubetag1\",              \"order\": 0            },            {              \"value\": \"youtubetag2\",              \"order\": 0            }          ],          \"medias\": [            {              \"mediaType\": \"Photo\",              \"url\": \"string\",              \"thumbnailUrl\": \"string\",              \"description\": \"string\",              \"order\": 0            }          ]      }
     * @summary Update youtube.
     * @param {string} youtubeId
     * @param {UpdateYoutubeCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1YoutubesYoutubeIdPut(youtubeId: string, body?: UpdateYoutubeCommand | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<boolean>;
};
/**
 * YoutubesApi - factory interface
 * @export
 */
export declare const YoutubesApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * Sample request:        GET /api/v1/youtubes
     * @summary Get all youtubes.
     * @param {string} [id]
     * @param {string} [title]
     * @param {string} [normalizedTitle]
     * @param {string} [description]
     * @param {object} [marketingType]
     * @param {string} [tag]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1YoutubesGet(id?: string | undefined, title?: string | undefined, normalizedTitle?: string | undefined, description?: string | undefined, marketingType?: object | undefined, tag?: string | undefined, page?: number | undefined, limit?: number | undefined, lastRetrieved?: Date | undefined, current?: boolean | undefined, options?: any): AxiosPromise<YoutubesViewModel>;
    /**
     * Sample request:        POST /api/v1/youtubes      {          \"title\": \"Samsung Hospital Youtube\",          \"description\": \"This is an youtube.\",          \"body\": \"youtube body here\",          \"status\": \"Draft\",          \"hospitalId\": 1,          \"tags\": [            {              \"value\": \"string\",              \"order\": 0              }          ],          \"medias\": [            {              \"mediaType\": \"Photo\",              \"url\": \"string\",              \"thumbnailUrl\": \"string\",              \"description\": \"string\",              \"order\": 0            }          ]      }
     * @summary Create an youtube.
     * @param {CreateYoutubeCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1YoutubesPost(body?: CreateYoutubeCommand | undefined, options?: any): AxiosPromise<string>;
    /**
     * Sample request:        DELETE /api/v1/youtubes/1
     * @summary Delete youtube.
     * @param {string} youtubeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1YoutubesYoutubeIdDelete(youtubeId: string, options?: any): AxiosPromise<boolean>;
    /**
     * Sample request:        GET /api/v1/youtubes/1
     * @summary Get youtube.
     * @param {string} youtubeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1YoutubesYoutubeIdGet(youtubeId: string, options?: any): AxiosPromise<YoutubeViewModel>;
    /**
     * Sample request:        PUT /api/v1/youtubes/1      {          \"title\": \"Samsung Hospital Youtube\",          \"description\": \"This is an youtube.\",                  \"tags\": [            {              \"value\": \"youtubetag1\",              \"order\": 0            },            {              \"value\": \"youtubetag2\",              \"order\": 0            }          ],          \"medias\": [            {              \"mediaType\": \"Photo\",              \"url\": \"string\",              \"thumbnailUrl\": \"string\",              \"description\": \"string\",              \"order\": 0            }          ]      }
     * @summary Update youtube.
     * @param {string} youtubeId
     * @param {UpdateYoutubeCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1YoutubesYoutubeIdPut(youtubeId: string, body?: UpdateYoutubeCommand | undefined, options?: any): AxiosPromise<boolean>;
};
/**
 * YoutubesApi - object-oriented interface
 * @export
 * @class YoutubesApi
 * @extends {BaseAPI}
 */
export declare class YoutubesApi extends BaseAPI {
    /**
     * Sample request:        GET /api/v1/youtubes
     * @summary Get all youtubes.
     * @param {string} [id]
     * @param {string} [title]
     * @param {string} [normalizedTitle]
     * @param {string} [description]
     * @param {object} [marketingType]
     * @param {string} [tag]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof YoutubesApi
     */
    apiV1YoutubesGet(id?: string, title?: string, normalizedTitle?: string, description?: string, marketingType?: object, tag?: string, page?: number, limit?: number, lastRetrieved?: Date, current?: boolean, options?: any): AxiosPromise<YoutubesViewModel>;
    /**
     * Sample request:        POST /api/v1/youtubes      {          \"title\": \"Samsung Hospital Youtube\",          \"description\": \"This is an youtube.\",          \"body\": \"youtube body here\",          \"status\": \"Draft\",          \"hospitalId\": 1,          \"tags\": [            {              \"value\": \"string\",              \"order\": 0              }          ],          \"medias\": [            {              \"mediaType\": \"Photo\",              \"url\": \"string\",              \"thumbnailUrl\": \"string\",              \"description\": \"string\",              \"order\": 0            }          ]      }
     * @summary Create an youtube.
     * @param {CreateYoutubeCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof YoutubesApi
     */
    apiV1YoutubesPost(body?: CreateYoutubeCommand, options?: any): AxiosPromise<string>;
    /**
     * Sample request:        DELETE /api/v1/youtubes/1
     * @summary Delete youtube.
     * @param {string} youtubeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof YoutubesApi
     */
    apiV1YoutubesYoutubeIdDelete(youtubeId: string, options?: any): AxiosPromise<boolean>;
    /**
     * Sample request:        GET /api/v1/youtubes/1
     * @summary Get youtube.
     * @param {string} youtubeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof YoutubesApi
     */
    apiV1YoutubesYoutubeIdGet(youtubeId: string, options?: any): AxiosPromise<YoutubeViewModel>;
    /**
     * Sample request:        PUT /api/v1/youtubes/1      {          \"title\": \"Samsung Hospital Youtube\",          \"description\": \"This is an youtube.\",                  \"tags\": [            {              \"value\": \"youtubetag1\",              \"order\": 0            },            {              \"value\": \"youtubetag2\",              \"order\": 0            }          ],          \"medias\": [            {              \"mediaType\": \"Photo\",              \"url\": \"string\",              \"thumbnailUrl\": \"string\",              \"description\": \"string\",              \"order\": 0            }          ]      }
     * @summary Update youtube.
     * @param {string} youtubeId
     * @param {UpdateYoutubeCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof YoutubesApi
     */
    apiV1YoutubesYoutubeIdPut(youtubeId: string, body?: UpdateYoutubeCommand, options?: any): AxiosPromise<boolean>;
}
