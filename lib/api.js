"use strict";
// tslint:disable
/**
 * Swagger UI - Cloud Hospital Api-INT
 * Cloud Hospital application with Swagger, Swashbuckle, and API versioning.
 *
 * The version of the OpenAPI document: 1
 * Contact: hyounoosung@icloudhospital.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var globalImportUrl = __importStar(require("url"));
var axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
var base_1 = require("./base");
/**
 *
 * @export
 * @enum {string}
 */
var ArticleStatus;
(function (ArticleStatus) {
    ArticleStatus["Draft"] = "Draft";
    ArticleStatus["Active"] = "Active";
    ArticleStatus["Archived"] = "Archived";
})(ArticleStatus = exports.ArticleStatus || (exports.ArticleStatus = {}));
/**
 *
 * @export
 * @enum {string}
 */
var BookingStatus;
(function (BookingStatus) {
    BookingStatus["New"] = "New";
    BookingStatus["Rejected"] = "Rejected";
    BookingStatus["Approved"] = "Approved";
    BookingStatus["Paid"] = "Paid";
    BookingStatus["Canceled"] = "Canceled";
    BookingStatus["RefundRequested"] = "RefundRequested";
    BookingStatus["Refunded"] = "Refunded";
})(BookingStatus = exports.BookingStatus || (exports.BookingStatus = {}));
/**
 *
 * @export
 * @enum {string}
 */
var ChargeStatus;
(function (ChargeStatus) {
    ChargeStatus["Pending"] = "Pending";
    ChargeStatus["Succeeded"] = "Succeeded";
    ChargeStatus["Failed"] = "Failed";
})(ChargeStatus = exports.ChargeStatus || (exports.ChargeStatus = {}));
/**
 *
 * @export
 * @enum {string}
 */
var ConsultationStatus;
(function (ConsultationStatus) {
    ConsultationStatus["New"] = "New";
    ConsultationStatus["Rejected"] = "Rejected";
    ConsultationStatus["Approved"] = "Approved";
    ConsultationStatus["Paid"] = "Paid";
    ConsultationStatus["Canceled"] = "Canceled";
    ConsultationStatus["RefundRequested"] = "RefundRequested";
    ConsultationStatus["Refunded"] = "Refunded";
})(ConsultationStatus = exports.ConsultationStatus || (exports.ConsultationStatus = {}));
/**
 *
 * @export
 * @enum {string}
 */
var ConsultationType;
(function (ConsultationType) {
    ConsultationType["Hospital"] = "Hospital";
    ConsultationType["Doctor"] = "Doctor";
    ConsultationType["Deal"] = "Deal";
})(ConsultationType = exports.ConsultationType || (exports.ConsultationType = {}));
/**
 *
 * @export
 * @enum {string}
 */
var Gender;
(function (Gender) {
    Gender["NotSpecified"] = "NotSpecified";
    Gender["Male"] = "Male";
    Gender["Female"] = "Female";
    Gender["NonBinary"] = "NonBinary";
    Gender["PreferNotToSay"] = "PreferNotToSay";
})(Gender = exports.Gender || (exports.Gender = {}));
/**
 *
 * @export
 * @enum {string}
 */
var MarketingType;
(function (MarketingType) {
    MarketingType["Both"] = "Both";
    MarketingType["GeneralHealth"] = "GeneralHealth";
    MarketingType["Beauty"] = "Beauty";
})(MarketingType = exports.MarketingType || (exports.MarketingType = {}));
/**
 *
 * @export
 * @enum {string}
 */
var MediaType;
(function (MediaType) {
    MediaType["Photo"] = "Photo";
    MediaType["Video"] = "Video";
    MediaType["Youtube"] = "Youtube";
    MediaType["Document"] = "Document";
})(MediaType = exports.MediaType || (exports.MediaType = {}));
/**
 *
 * @export
 * @enum {string}
 */
var PaymentMethod;
(function (PaymentMethod) {
    PaymentMethod["Stripe"] = "Stripe";
    PaymentMethod["Paypal"] = "Paypal";
    PaymentMethod["BankTransfer"] = "BankTransfer";
})(PaymentMethod = exports.PaymentMethod || (exports.PaymentMethod = {}));
/**
 *
 * @export
 * @enum {string}
 */
var PaymentStatus;
(function (PaymentStatus) {
    PaymentStatus["Unpaid"] = "Unpaid";
    PaymentStatus["Paid"] = "Paid";
    PaymentStatus["RefundRequested"] = "RefundRequested";
    PaymentStatus["Refunded"] = "Refunded";
})(PaymentStatus = exports.PaymentStatus || (exports.PaymentStatus = {}));
/**
 *
 * @export
 * @enum {string}
 */
var Platform;
(function (Platform) {
    Platform["Web"] = "Web";
    Platform["IOS"] = "iOS";
    Platform["Android"] = "Android";
})(Platform = exports.Platform || (exports.Platform = {}));
/**
 *
 * @export
 * @enum {string}
 */
var Procedure;
(function (Procedure) {
    Procedure["Treatment"] = "Treatment";
    Procedure["Diagnostic"] = "Diagnostic";
})(Procedure = exports.Procedure || (exports.Procedure = {}));
/**
 *
 * @export
 * @enum {string}
 */
var QuestionStatus;
(function (QuestionStatus) {
    QuestionStatus["New"] = "New";
    QuestionStatus["Answered"] = "Answered";
    QuestionStatus["Replied"] = "Replied";
    QuestionStatus["Archived"] = "Archived";
})(QuestionStatus = exports.QuestionStatus || (exports.QuestionStatus = {}));
/**
 *
 * @export
 * @enum {string}
 */
var QuestionType;
(function (QuestionType) {
    QuestionType["General"] = "General";
    QuestionType["Health"] = "Health";
    QuestionType["Treatment"] = "Treatment";
    QuestionType["Travel"] = "Travel";
    QuestionType["Consult"] = "Consult";
})(QuestionType = exports.QuestionType || (exports.QuestionType = {}));
/**
 *
 * @export
 * @enum {string}
 */
var RefundPolicy;
(function (RefundPolicy) {
    RefundPolicy["NonRefundable"] = "NonRefundable";
    RefundPolicy["Refundable"] = "Refundable";
    RefundPolicy["PartialRefundable"] = "PartialRefundable";
})(RefundPolicy = exports.RefundPolicy || (exports.RefundPolicy = {}));
/**
 *
 * @export
 * @enum {string}
 */
var RefundStatus;
(function (RefundStatus) {
    RefundStatus["Pending"] = "Pending";
    RefundStatus["Succeeded"] = "Succeeded";
    RefundStatus["Failed"] = "Failed";
})(RefundStatus = exports.RefundStatus || (exports.RefundStatus = {}));
/**
 *
 * @export
 * @enum {string}
 */
var RejectReason;
(function (RejectReason) {
    RejectReason["AssessmentNotCompleted"] = "AssessmentNotCompleted";
    RejectReason["PaymentNotCompleted"] = "PaymentNotCompleted";
    RejectReason["ScheduleNotAvailable"] = "ScheduleNotAvailable";
    RejectReason["OtherReason"] = "OtherReason";
})(RejectReason = exports.RejectReason || (exports.RejectReason = {}));
/**
 *
 * @export
 * @enum {string}
 */
var ReviewCategory;
(function (ReviewCategory) {
    ReviewCategory["Services"] = "Services";
    ReviewCategory["Hospitality"] = "Hospitality";
    ReviewCategory["Transfer"] = "Transfer";
    ReviewCategory["Etc"] = "Etc";
})(ReviewCategory = exports.ReviewCategory || (exports.ReviewCategory = {}));
/**
 *
 * @export
 * @enum {string}
 */
var UserLocationType;
(function (UserLocationType) {
    UserLocationType["LivesIn"] = "LivesIn";
    UserLocationType["BirthPlace"] = "BirthPlace";
})(UserLocationType = exports.UserLocationType || (exports.UserLocationType = {}));
/**
 *
 * @export
 * @enum {string}
 */
var VendorType;
(function (VendorType) {
    VendorType["Stripe"] = "Stripe";
    VendorType["WeChat"] = "WeChat";
})(VendorType = exports.VendorType || (exports.VendorType = {}));
/**
 * AffiliationsApi - axios parameter creator
 * @export
 */
exports.AffiliationsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Sample request:        DELETE /api/v1/hospitals/1/doctors/1
         * @summary Remove link between the doctor and the hospital.
         * @param {string} hospitalId
         * @param {string} doctorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdDoctorsDoctorIdDelete: function (hospitalId, doctorId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'hospitalId' is not null or undefined
            if (hospitalId === null || hospitalId === undefined) {
                throw new base_1.RequiredError('hospitalId', 'Required parameter hospitalId was null or undefined when calling apiV1HospitalsHospitalIdDoctorsDoctorIdDelete.');
            }
            // verify required parameter 'doctorId' is not null or undefined
            if (doctorId === null || doctorId === undefined) {
                throw new base_1.RequiredError('doctorId', 'Required parameter doctorId was null or undefined when calling apiV1HospitalsHospitalIdDoctorsDoctorIdDelete.');
            }
            var localVarPath = "/api/v1/hospitals/{hospitalId}/doctors/{doctorId}"
                .replace("{" + "hospitalId" + "}", encodeURIComponent(String(hospitalId)))
                .replace("{" + "doctorId" + "}", encodeURIComponent(String(doctorId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        POST /api/v1/hospitals/1/doctors/1
         * @summary Link a doctor to a hospital.
         * @param {string} hospitalId
         * @param {string} doctorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdDoctorsDoctorIdPost: function (hospitalId, doctorId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'hospitalId' is not null or undefined
            if (hospitalId === null || hospitalId === undefined) {
                throw new base_1.RequiredError('hospitalId', 'Required parameter hospitalId was null or undefined when calling apiV1HospitalsHospitalIdDoctorsDoctorIdPost.');
            }
            // verify required parameter 'doctorId' is not null or undefined
            if (doctorId === null || doctorId === undefined) {
                throw new base_1.RequiredError('doctorId', 'Required parameter doctorId was null or undefined when calling apiV1HospitalsHospitalIdDoctorsDoctorIdPost.');
            }
            var localVarPath = "/api/v1/hospitals/{hospitalId}/doctors/{doctorId}"
                .replace("{" + "hospitalId" + "}", encodeURIComponent(String(hospitalId)))
                .replace("{" + "doctorId" + "}", encodeURIComponent(String(doctorId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        DELETE /api/v1/hospitals/1/managers/1
         * @summary Remove link between the manager and the hospital.
         * @param {string} hospitalId
         * @param {string} managerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdManagersManagerIdDelete: function (hospitalId, managerId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'hospitalId' is not null or undefined
            if (hospitalId === null || hospitalId === undefined) {
                throw new base_1.RequiredError('hospitalId', 'Required parameter hospitalId was null or undefined when calling apiV1HospitalsHospitalIdManagersManagerIdDelete.');
            }
            // verify required parameter 'managerId' is not null or undefined
            if (managerId === null || managerId === undefined) {
                throw new base_1.RequiredError('managerId', 'Required parameter managerId was null or undefined when calling apiV1HospitalsHospitalIdManagersManagerIdDelete.');
            }
            var localVarPath = "/api/v1/hospitals/{hospitalId}/managers/{managerId}"
                .replace("{" + "hospitalId" + "}", encodeURIComponent(String(hospitalId)))
                .replace("{" + "managerId" + "}", encodeURIComponent(String(managerId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        POST /api/v1/hospitals/1/managers/1
         * @summary Link a manager to a hospital.
         * @param {string} hospitalId
         * @param {string} managerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdManagersManagerIdPost: function (hospitalId, managerId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'hospitalId' is not null or undefined
            if (hospitalId === null || hospitalId === undefined) {
                throw new base_1.RequiredError('hospitalId', 'Required parameter hospitalId was null or undefined when calling apiV1HospitalsHospitalIdManagersManagerIdPost.');
            }
            // verify required parameter 'managerId' is not null or undefined
            if (managerId === null || managerId === undefined) {
                throw new base_1.RequiredError('managerId', 'Required parameter managerId was null or undefined when calling apiV1HospitalsHospitalIdManagersManagerIdPost.');
            }
            var localVarPath = "/api/v1/hospitals/{hospitalId}/managers/{managerId}"
                .replace("{" + "hospitalId" + "}", encodeURIComponent(String(hospitalId)))
                .replace("{" + "managerId" + "}", encodeURIComponent(String(managerId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * AffiliationsApi - functional programming interface
 * @export
 */
exports.AffiliationsApiFp = function (configuration) {
    return {
        /**
         * Sample request:        DELETE /api/v1/hospitals/1/doctors/1
         * @summary Remove link between the doctor and the hospital.
         * @param {string} hospitalId
         * @param {string} doctorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdDoctorsDoctorIdDelete: function (hospitalId, doctorId, options) {
            var localVarAxiosArgs = exports.AffiliationsApiAxiosParamCreator(configuration).apiV1HospitalsHospitalIdDoctorsDoctorIdDelete(hospitalId, doctorId, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        POST /api/v1/hospitals/1/doctors/1
         * @summary Link a doctor to a hospital.
         * @param {string} hospitalId
         * @param {string} doctorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdDoctorsDoctorIdPost: function (hospitalId, doctorId, options) {
            var localVarAxiosArgs = exports.AffiliationsApiAxiosParamCreator(configuration).apiV1HospitalsHospitalIdDoctorsDoctorIdPost(hospitalId, doctorId, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        DELETE /api/v1/hospitals/1/managers/1
         * @summary Remove link between the manager and the hospital.
         * @param {string} hospitalId
         * @param {string} managerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdManagersManagerIdDelete: function (hospitalId, managerId, options) {
            var localVarAxiosArgs = exports.AffiliationsApiAxiosParamCreator(configuration).apiV1HospitalsHospitalIdManagersManagerIdDelete(hospitalId, managerId, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        POST /api/v1/hospitals/1/managers/1
         * @summary Link a manager to a hospital.
         * @param {string} hospitalId
         * @param {string} managerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdManagersManagerIdPost: function (hospitalId, managerId, options) {
            var localVarAxiosArgs = exports.AffiliationsApiAxiosParamCreator(configuration).apiV1HospitalsHospitalIdManagersManagerIdPost(hospitalId, managerId, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * AffiliationsApi - factory interface
 * @export
 */
exports.AffiliationsApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Sample request:        DELETE /api/v1/hospitals/1/doctors/1
         * @summary Remove link between the doctor and the hospital.
         * @param {string} hospitalId
         * @param {string} doctorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdDoctorsDoctorIdDelete: function (hospitalId, doctorId, options) {
            return exports.AffiliationsApiFp(configuration).apiV1HospitalsHospitalIdDoctorsDoctorIdDelete(hospitalId, doctorId, options)(axios, basePath);
        },
        /**
         * Sample request:        POST /api/v1/hospitals/1/doctors/1
         * @summary Link a doctor to a hospital.
         * @param {string} hospitalId
         * @param {string} doctorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdDoctorsDoctorIdPost: function (hospitalId, doctorId, options) {
            return exports.AffiliationsApiFp(configuration).apiV1HospitalsHospitalIdDoctorsDoctorIdPost(hospitalId, doctorId, options)(axios, basePath);
        },
        /**
         * Sample request:        DELETE /api/v1/hospitals/1/managers/1
         * @summary Remove link between the manager and the hospital.
         * @param {string} hospitalId
         * @param {string} managerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdManagersManagerIdDelete: function (hospitalId, managerId, options) {
            return exports.AffiliationsApiFp(configuration).apiV1HospitalsHospitalIdManagersManagerIdDelete(hospitalId, managerId, options)(axios, basePath);
        },
        /**
         * Sample request:        POST /api/v1/hospitals/1/managers/1
         * @summary Link a manager to a hospital.
         * @param {string} hospitalId
         * @param {string} managerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdManagersManagerIdPost: function (hospitalId, managerId, options) {
            return exports.AffiliationsApiFp(configuration).apiV1HospitalsHospitalIdManagersManagerIdPost(hospitalId, managerId, options)(axios, basePath);
        },
    };
};
/**
 * AffiliationsApi - object-oriented interface
 * @export
 * @class AffiliationsApi
 * @extends {BaseAPI}
 */
var AffiliationsApi = /** @class */ (function (_super) {
    __extends(AffiliationsApi, _super);
    function AffiliationsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Sample request:        DELETE /api/v1/hospitals/1/doctors/1
     * @summary Remove link between the doctor and the hospital.
     * @param {string} hospitalId
     * @param {string} doctorId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AffiliationsApi
     */
    AffiliationsApi.prototype.apiV1HospitalsHospitalIdDoctorsDoctorIdDelete = function (hospitalId, doctorId, options) {
        return exports.AffiliationsApiFp(this.configuration).apiV1HospitalsHospitalIdDoctorsDoctorIdDelete(hospitalId, doctorId, options)(this.axios, this.basePath);
    };
    /**
     * Sample request:        POST /api/v1/hospitals/1/doctors/1
     * @summary Link a doctor to a hospital.
     * @param {string} hospitalId
     * @param {string} doctorId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AffiliationsApi
     */
    AffiliationsApi.prototype.apiV1HospitalsHospitalIdDoctorsDoctorIdPost = function (hospitalId, doctorId, options) {
        return exports.AffiliationsApiFp(this.configuration).apiV1HospitalsHospitalIdDoctorsDoctorIdPost(hospitalId, doctorId, options)(this.axios, this.basePath);
    };
    /**
     * Sample request:        DELETE /api/v1/hospitals/1/managers/1
     * @summary Remove link between the manager and the hospital.
     * @param {string} hospitalId
     * @param {string} managerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AffiliationsApi
     */
    AffiliationsApi.prototype.apiV1HospitalsHospitalIdManagersManagerIdDelete = function (hospitalId, managerId, options) {
        return exports.AffiliationsApiFp(this.configuration).apiV1HospitalsHospitalIdManagersManagerIdDelete(hospitalId, managerId, options)(this.axios, this.basePath);
    };
    /**
     * Sample request:        POST /api/v1/hospitals/1/managers/1
     * @summary Link a manager to a hospital.
     * @param {string} hospitalId
     * @param {string} managerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AffiliationsApi
     */
    AffiliationsApi.prototype.apiV1HospitalsHospitalIdManagersManagerIdPost = function (hospitalId, managerId, options) {
        return exports.AffiliationsApiFp(this.configuration).apiV1HospitalsHospitalIdManagersManagerIdPost(hospitalId, managerId, options)(this.axios, this.basePath);
    };
    return AffiliationsApi;
}(base_1.BaseAPI));
exports.AffiliationsApi = AffiliationsApi;
/**
 * ArticlesApi - axios parameter creator
 * @export
 */
exports.ArticlesApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Sample request:        GET /api/v1/hospitals/1/articles
         * @summary Get all articles.
         * @param {string} [id]
         * @param {string} [title]
         * @param {string} [description]
         * @param {object} [status]
         * @param {object} [marketingType]
         * @param {string} [userId]
         * @param {string} [userName]
         * @param {string} [hospitalId]
         * @param {string} [hospitalName]
         * @param {string} [countryId]
         * @param {string} [tag]
         * @param {string} [exceptHospitalId]
         * @param {number} [page]
         * @param {number} [limit]
         * @param {Date} [lastRetrieved]
         * @param {boolean} [current]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsArticlesGet: function (id, title, description, status, marketingType, userId, userName, hospitalId, hospitalName, countryId, tag, exceptHospitalId, page, limit, lastRetrieved, current, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/api/v1/hospitals/articles";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }
            if (title !== undefined) {
                localVarQueryParameter['Title'] = title;
            }
            if (description !== undefined) {
                localVarQueryParameter['Description'] = description;
            }
            if (status !== undefined) {
                localVarQueryParameter['Status'] = status;
            }
            if (marketingType !== undefined) {
                localVarQueryParameter['MarketingType'] = marketingType;
            }
            if (userId !== undefined) {
                localVarQueryParameter['UserId'] = userId;
            }
            if (userName !== undefined) {
                localVarQueryParameter['UserName'] = userName;
            }
            if (hospitalId !== undefined) {
                localVarQueryParameter['HospitalId'] = hospitalId;
            }
            if (hospitalName !== undefined) {
                localVarQueryParameter['HospitalName'] = hospitalName;
            }
            if (countryId !== undefined) {
                localVarQueryParameter['CountryId'] = countryId;
            }
            if (tag !== undefined) {
                localVarQueryParameter['Tag'] = tag;
            }
            if (exceptHospitalId !== undefined) {
                localVarQueryParameter['ExceptHospitalId'] = exceptHospitalId;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (lastRetrieved !== undefined) {
                localVarQueryParameter['lastRetrieved'] = (lastRetrieved instanceof Date) ?
                    lastRetrieved.toISOString() :
                    lastRetrieved;
            }
            if (current !== undefined) {
                localVarQueryParameter['Current'] = current;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get article by slug.
         * @param {string} slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsArticlesSlugsSlugGet: function (slug, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'slug' is not null or undefined
            if (slug === null || slug === undefined) {
                throw new base_1.RequiredError('slug', 'Required parameter slug was null or undefined when calling apiV1HospitalsArticlesSlugsSlugGet.');
            }
            var localVarPath = "/api/v1/hospitals/articles/slugs/{slug}"
                .replace("{" + "slug" + "}", encodeURIComponent(String(slug)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        DELETE /api/v1/hospitals/1/articles/1
         * @summary Delete article.
         * @param {string} hospitalId
         * @param {string} articleId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdArticlesArticleIdDelete: function (hospitalId, articleId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'hospitalId' is not null or undefined
            if (hospitalId === null || hospitalId === undefined) {
                throw new base_1.RequiredError('hospitalId', 'Required parameter hospitalId was null or undefined when calling apiV1HospitalsHospitalIdArticlesArticleIdDelete.');
            }
            // verify required parameter 'articleId' is not null or undefined
            if (articleId === null || articleId === undefined) {
                throw new base_1.RequiredError('articleId', 'Required parameter articleId was null or undefined when calling apiV1HospitalsHospitalIdArticlesArticleIdDelete.');
            }
            var localVarPath = "/api/v1/hospitals/{hospitalId}/articles/{articleId}"
                .replace("{" + "hospitalId" + "}", encodeURIComponent(String(hospitalId)))
                .replace("{" + "articleId" + "}", encodeURIComponent(String(articleId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        GET /api/v1/hospitals/1/articles/1
         * @summary Get article.
         * @param {string} hospitalId
         * @param {string} articleId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdArticlesArticleIdGet: function (hospitalId, articleId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'hospitalId' is not null or undefined
            if (hospitalId === null || hospitalId === undefined) {
                throw new base_1.RequiredError('hospitalId', 'Required parameter hospitalId was null or undefined when calling apiV1HospitalsHospitalIdArticlesArticleIdGet.');
            }
            // verify required parameter 'articleId' is not null or undefined
            if (articleId === null || articleId === undefined) {
                throw new base_1.RequiredError('articleId', 'Required parameter articleId was null or undefined when calling apiV1HospitalsHospitalIdArticlesArticleIdGet.');
            }
            var localVarPath = "/api/v1/hospitals/{hospitalId}/articles/{articleId}"
                .replace("{" + "hospitalId" + "}", encodeURIComponent(String(hospitalId)))
                .replace("{" + "articleId" + "}", encodeURIComponent(String(articleId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        PUT /api/v1/hospitals/1/articles/1      {          \"title\": \"Samsung Hospital Article\",          \"description\": \"This is an article.\",          \"body\": \"updated article body here\",          \"status\": \"Draft\",          \"hospitalId\": 1,          \"tags\": [            {              \"value\": \"articletag1\",              \"order\": 0            },            {              \"value\": \"articletag2\",              \"order\": 0            }          ],          \"medias\": [            {              \"mediaType\": \"Photo\",              \"url\": \"string\",              \"thumbnailUrl\": \"string\",              \"description\": \"string\",              \"order\": 0            }          ]      }
         * @summary Update article.
         * @param {string} hospitalId
         * @param {string} articleId
         * @param {UpdateArticleCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdArticlesArticleIdPut: function (hospitalId, articleId, body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'hospitalId' is not null or undefined
            if (hospitalId === null || hospitalId === undefined) {
                throw new base_1.RequiredError('hospitalId', 'Required parameter hospitalId was null or undefined when calling apiV1HospitalsHospitalIdArticlesArticleIdPut.');
            }
            // verify required parameter 'articleId' is not null or undefined
            if (articleId === null || articleId === undefined) {
                throw new base_1.RequiredError('articleId', 'Required parameter articleId was null or undefined when calling apiV1HospitalsHospitalIdArticlesArticleIdPut.');
            }
            var localVarPath = "/api/v1/hospitals/{hospitalId}/articles/{articleId}"
                .replace("{" + "hospitalId" + "}", encodeURIComponent(String(hospitalId)))
                .replace("{" + "articleId" + "}", encodeURIComponent(String(articleId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            var needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        POST /api/v1/hospitals/1/articles      {          \"title\": \"Samsung Hospital Article\",          \"description\": \"This is an article.\",          \"body\": \"article body here\",          \"status\": \"Draft\",          \"hospitalId\": 1,          \"tags\": [            {              \"value\": \"string\",              \"order\": 0              }          ],          \"medias\": [            {              \"mediaType\": \"Photo\",              \"url\": \"string\",              \"thumbnailUrl\": \"string\",              \"description\": \"string\",              \"order\": 0            }          ]      }
         * @summary Create an article.
         * @param {string} hospitalId
         * @param {CreateArticleCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdArticlesPost: function (hospitalId, body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'hospitalId' is not null or undefined
            if (hospitalId === null || hospitalId === undefined) {
                throw new base_1.RequiredError('hospitalId', 'Required parameter hospitalId was null or undefined when calling apiV1HospitalsHospitalIdArticlesPost.');
            }
            var localVarPath = "/api/v1/hospitals/{hospitalId}/articles"
                .replace("{" + "hospitalId" + "}", encodeURIComponent(String(hospitalId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            var needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * ArticlesApi - functional programming interface
 * @export
 */
exports.ArticlesApiFp = function (configuration) {
    return {
        /**
         * Sample request:        GET /api/v1/hospitals/1/articles
         * @summary Get all articles.
         * @param {string} [id]
         * @param {string} [title]
         * @param {string} [description]
         * @param {object} [status]
         * @param {object} [marketingType]
         * @param {string} [userId]
         * @param {string} [userName]
         * @param {string} [hospitalId]
         * @param {string} [hospitalName]
         * @param {string} [countryId]
         * @param {string} [tag]
         * @param {string} [exceptHospitalId]
         * @param {number} [page]
         * @param {number} [limit]
         * @param {Date} [lastRetrieved]
         * @param {boolean} [current]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsArticlesGet: function (id, title, description, status, marketingType, userId, userName, hospitalId, hospitalName, countryId, tag, exceptHospitalId, page, limit, lastRetrieved, current, options) {
            var localVarAxiosArgs = exports.ArticlesApiAxiosParamCreator(configuration).apiV1HospitalsArticlesGet(id, title, description, status, marketingType, userId, userName, hospitalId, hospitalName, countryId, tag, exceptHospitalId, page, limit, lastRetrieved, current, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Get article by slug.
         * @param {string} slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsArticlesSlugsSlugGet: function (slug, options) {
            var localVarAxiosArgs = exports.ArticlesApiAxiosParamCreator(configuration).apiV1HospitalsArticlesSlugsSlugGet(slug, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        DELETE /api/v1/hospitals/1/articles/1
         * @summary Delete article.
         * @param {string} hospitalId
         * @param {string} articleId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdArticlesArticleIdDelete: function (hospitalId, articleId, options) {
            var localVarAxiosArgs = exports.ArticlesApiAxiosParamCreator(configuration).apiV1HospitalsHospitalIdArticlesArticleIdDelete(hospitalId, articleId, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        GET /api/v1/hospitals/1/articles/1
         * @summary Get article.
         * @param {string} hospitalId
         * @param {string} articleId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdArticlesArticleIdGet: function (hospitalId, articleId, options) {
            var localVarAxiosArgs = exports.ArticlesApiAxiosParamCreator(configuration).apiV1HospitalsHospitalIdArticlesArticleIdGet(hospitalId, articleId, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        PUT /api/v1/hospitals/1/articles/1      {          \"title\": \"Samsung Hospital Article\",          \"description\": \"This is an article.\",          \"body\": \"updated article body here\",          \"status\": \"Draft\",          \"hospitalId\": 1,          \"tags\": [            {              \"value\": \"articletag1\",              \"order\": 0            },            {              \"value\": \"articletag2\",              \"order\": 0            }          ],          \"medias\": [            {              \"mediaType\": \"Photo\",              \"url\": \"string\",              \"thumbnailUrl\": \"string\",              \"description\": \"string\",              \"order\": 0            }          ]      }
         * @summary Update article.
         * @param {string} hospitalId
         * @param {string} articleId
         * @param {UpdateArticleCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdArticlesArticleIdPut: function (hospitalId, articleId, body, options) {
            var localVarAxiosArgs = exports.ArticlesApiAxiosParamCreator(configuration).apiV1HospitalsHospitalIdArticlesArticleIdPut(hospitalId, articleId, body, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        POST /api/v1/hospitals/1/articles      {          \"title\": \"Samsung Hospital Article\",          \"description\": \"This is an article.\",          \"body\": \"article body here\",          \"status\": \"Draft\",          \"hospitalId\": 1,          \"tags\": [            {              \"value\": \"string\",              \"order\": 0              }          ],          \"medias\": [            {              \"mediaType\": \"Photo\",              \"url\": \"string\",              \"thumbnailUrl\": \"string\",              \"description\": \"string\",              \"order\": 0            }          ]      }
         * @summary Create an article.
         * @param {string} hospitalId
         * @param {CreateArticleCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdArticlesPost: function (hospitalId, body, options) {
            var localVarAxiosArgs = exports.ArticlesApiAxiosParamCreator(configuration).apiV1HospitalsHospitalIdArticlesPost(hospitalId, body, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * ArticlesApi - factory interface
 * @export
 */
exports.ArticlesApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Sample request:        GET /api/v1/hospitals/1/articles
         * @summary Get all articles.
         * @param {string} [id]
         * @param {string} [title]
         * @param {string} [description]
         * @param {object} [status]
         * @param {object} [marketingType]
         * @param {string} [userId]
         * @param {string} [userName]
         * @param {string} [hospitalId]
         * @param {string} [hospitalName]
         * @param {string} [countryId]
         * @param {string} [tag]
         * @param {string} [exceptHospitalId]
         * @param {number} [page]
         * @param {number} [limit]
         * @param {Date} [lastRetrieved]
         * @param {boolean} [current]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsArticlesGet: function (id, title, description, status, marketingType, userId, userName, hospitalId, hospitalName, countryId, tag, exceptHospitalId, page, limit, lastRetrieved, current, options) {
            return exports.ArticlesApiFp(configuration).apiV1HospitalsArticlesGet(id, title, description, status, marketingType, userId, userName, hospitalId, hospitalName, countryId, tag, exceptHospitalId, page, limit, lastRetrieved, current, options)(axios, basePath);
        },
        /**
         *
         * @summary Get article by slug.
         * @param {string} slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsArticlesSlugsSlugGet: function (slug, options) {
            return exports.ArticlesApiFp(configuration).apiV1HospitalsArticlesSlugsSlugGet(slug, options)(axios, basePath);
        },
        /**
         * Sample request:        DELETE /api/v1/hospitals/1/articles/1
         * @summary Delete article.
         * @param {string} hospitalId
         * @param {string} articleId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdArticlesArticleIdDelete: function (hospitalId, articleId, options) {
            return exports.ArticlesApiFp(configuration).apiV1HospitalsHospitalIdArticlesArticleIdDelete(hospitalId, articleId, options)(axios, basePath);
        },
        /**
         * Sample request:        GET /api/v1/hospitals/1/articles/1
         * @summary Get article.
         * @param {string} hospitalId
         * @param {string} articleId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdArticlesArticleIdGet: function (hospitalId, articleId, options) {
            return exports.ArticlesApiFp(configuration).apiV1HospitalsHospitalIdArticlesArticleIdGet(hospitalId, articleId, options)(axios, basePath);
        },
        /**
         * Sample request:        PUT /api/v1/hospitals/1/articles/1      {          \"title\": \"Samsung Hospital Article\",          \"description\": \"This is an article.\",          \"body\": \"updated article body here\",          \"status\": \"Draft\",          \"hospitalId\": 1,          \"tags\": [            {              \"value\": \"articletag1\",              \"order\": 0            },            {              \"value\": \"articletag2\",              \"order\": 0            }          ],          \"medias\": [            {              \"mediaType\": \"Photo\",              \"url\": \"string\",              \"thumbnailUrl\": \"string\",              \"description\": \"string\",              \"order\": 0            }          ]      }
         * @summary Update article.
         * @param {string} hospitalId
         * @param {string} articleId
         * @param {UpdateArticleCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdArticlesArticleIdPut: function (hospitalId, articleId, body, options) {
            return exports.ArticlesApiFp(configuration).apiV1HospitalsHospitalIdArticlesArticleIdPut(hospitalId, articleId, body, options)(axios, basePath);
        },
        /**
         * Sample request:        POST /api/v1/hospitals/1/articles      {          \"title\": \"Samsung Hospital Article\",          \"description\": \"This is an article.\",          \"body\": \"article body here\",          \"status\": \"Draft\",          \"hospitalId\": 1,          \"tags\": [            {              \"value\": \"string\",              \"order\": 0              }          ],          \"medias\": [            {              \"mediaType\": \"Photo\",              \"url\": \"string\",              \"thumbnailUrl\": \"string\",              \"description\": \"string\",              \"order\": 0            }          ]      }
         * @summary Create an article.
         * @param {string} hospitalId
         * @param {CreateArticleCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdArticlesPost: function (hospitalId, body, options) {
            return exports.ArticlesApiFp(configuration).apiV1HospitalsHospitalIdArticlesPost(hospitalId, body, options)(axios, basePath);
        },
    };
};
/**
 * ArticlesApi - object-oriented interface
 * @export
 * @class ArticlesApi
 * @extends {BaseAPI}
 */
var ArticlesApi = /** @class */ (function (_super) {
    __extends(ArticlesApi, _super);
    function ArticlesApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Sample request:        GET /api/v1/hospitals/1/articles
     * @summary Get all articles.
     * @param {string} [id]
     * @param {string} [title]
     * @param {string} [description]
     * @param {object} [status]
     * @param {object} [marketingType]
     * @param {string} [userId]
     * @param {string} [userName]
     * @param {string} [hospitalId]
     * @param {string} [hospitalName]
     * @param {string} [countryId]
     * @param {string} [tag]
     * @param {string} [exceptHospitalId]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticlesApi
     */
    ArticlesApi.prototype.apiV1HospitalsArticlesGet = function (id, title, description, status, marketingType, userId, userName, hospitalId, hospitalName, countryId, tag, exceptHospitalId, page, limit, lastRetrieved, current, options) {
        return exports.ArticlesApiFp(this.configuration).apiV1HospitalsArticlesGet(id, title, description, status, marketingType, userId, userName, hospitalId, hospitalName, countryId, tag, exceptHospitalId, page, limit, lastRetrieved, current, options)(this.axios, this.basePath);
    };
    /**
     *
     * @summary Get article by slug.
     * @param {string} slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticlesApi
     */
    ArticlesApi.prototype.apiV1HospitalsArticlesSlugsSlugGet = function (slug, options) {
        return exports.ArticlesApiFp(this.configuration).apiV1HospitalsArticlesSlugsSlugGet(slug, options)(this.axios, this.basePath);
    };
    /**
     * Sample request:        DELETE /api/v1/hospitals/1/articles/1
     * @summary Delete article.
     * @param {string} hospitalId
     * @param {string} articleId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticlesApi
     */
    ArticlesApi.prototype.apiV1HospitalsHospitalIdArticlesArticleIdDelete = function (hospitalId, articleId, options) {
        return exports.ArticlesApiFp(this.configuration).apiV1HospitalsHospitalIdArticlesArticleIdDelete(hospitalId, articleId, options)(this.axios, this.basePath);
    };
    /**
     * Sample request:        GET /api/v1/hospitals/1/articles/1
     * @summary Get article.
     * @param {string} hospitalId
     * @param {string} articleId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticlesApi
     */
    ArticlesApi.prototype.apiV1HospitalsHospitalIdArticlesArticleIdGet = function (hospitalId, articleId, options) {
        return exports.ArticlesApiFp(this.configuration).apiV1HospitalsHospitalIdArticlesArticleIdGet(hospitalId, articleId, options)(this.axios, this.basePath);
    };
    /**
     * Sample request:        PUT /api/v1/hospitals/1/articles/1      {          \"title\": \"Samsung Hospital Article\",          \"description\": \"This is an article.\",          \"body\": \"updated article body here\",          \"status\": \"Draft\",          \"hospitalId\": 1,          \"tags\": [            {              \"value\": \"articletag1\",              \"order\": 0            },            {              \"value\": \"articletag2\",              \"order\": 0            }          ],          \"medias\": [            {              \"mediaType\": \"Photo\",              \"url\": \"string\",              \"thumbnailUrl\": \"string\",              \"description\": \"string\",              \"order\": 0            }          ]      }
     * @summary Update article.
     * @param {string} hospitalId
     * @param {string} articleId
     * @param {UpdateArticleCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticlesApi
     */
    ArticlesApi.prototype.apiV1HospitalsHospitalIdArticlesArticleIdPut = function (hospitalId, articleId, body, options) {
        return exports.ArticlesApiFp(this.configuration).apiV1HospitalsHospitalIdArticlesArticleIdPut(hospitalId, articleId, body, options)(this.axios, this.basePath);
    };
    /**
     * Sample request:        POST /api/v1/hospitals/1/articles      {          \"title\": \"Samsung Hospital Article\",          \"description\": \"This is an article.\",          \"body\": \"article body here\",          \"status\": \"Draft\",          \"hospitalId\": 1,          \"tags\": [            {              \"value\": \"string\",              \"order\": 0              }          ],          \"medias\": [            {              \"mediaType\": \"Photo\",              \"url\": \"string\",              \"thumbnailUrl\": \"string\",              \"description\": \"string\",              \"order\": 0            }          ]      }
     * @summary Create an article.
     * @param {string} hospitalId
     * @param {CreateArticleCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticlesApi
     */
    ArticlesApi.prototype.apiV1HospitalsHospitalIdArticlesPost = function (hospitalId, body, options) {
        return exports.ArticlesApiFp(this.configuration).apiV1HospitalsHospitalIdArticlesPost(hospitalId, body, options)(this.axios, this.basePath);
    };
    return ArticlesApi;
}(base_1.BaseAPI));
exports.ArticlesApi = ArticlesApi;
/**
 * BookingsApi - axios parameter creator
 * @export
 */
exports.BookingsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Approve booking.
         * @param {string} bookingId
         * @param {ApproveBookingCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1BookingsBookingIdApprovePost: function (bookingId, body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'bookingId' is not null or undefined
            if (bookingId === null || bookingId === undefined) {
                throw new base_1.RequiredError('bookingId', 'Required parameter bookingId was null or undefined when calling apiV1BookingsBookingIdApprovePost.');
            }
            var localVarPath = "/api/v1/bookings/{bookingId}/approve"
                .replace("{" + "bookingId" + "}", encodeURIComponent(String(bookingId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            var needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Cancel booking.
         * @param {string} bookingId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1BookingsBookingIdCancelPost: function (bookingId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'bookingId' is not null or undefined
            if (bookingId === null || bookingId === undefined) {
                throw new base_1.RequiredError('bookingId', 'Required parameter bookingId was null or undefined when calling apiV1BookingsBookingIdCancelPost.');
            }
            var localVarPath = "/api/v1/bookings/{bookingId}/cancel"
                .replace("{" + "bookingId" + "}", encodeURIComponent(String(bookingId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Delete booking.
         * @param {string} bookingId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1BookingsBookingIdDelete: function (bookingId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'bookingId' is not null or undefined
            if (bookingId === null || bookingId === undefined) {
                throw new base_1.RequiredError('bookingId', 'Required parameter bookingId was null or undefined when calling apiV1BookingsBookingIdDelete.');
            }
            var localVarPath = "/api/v1/bookings/{bookingId}"
                .replace("{" + "bookingId" + "}", encodeURIComponent(String(bookingId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get booking.
         * @param {string} bookingId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1BookingsBookingIdGet: function (bookingId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'bookingId' is not null or undefined
            if (bookingId === null || bookingId === undefined) {
                throw new base_1.RequiredError('bookingId', 'Required parameter bookingId was null or undefined when calling apiV1BookingsBookingIdGet.');
            }
            var localVarPath = "/api/v1/bookings/{bookingId}"
                .replace("{" + "bookingId" + "}", encodeURIComponent(String(bookingId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Mark as Paid booking.
         * @param {string} bookingId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1BookingsBookingIdPaidPost: function (bookingId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'bookingId' is not null or undefined
            if (bookingId === null || bookingId === undefined) {
                throw new base_1.RequiredError('bookingId', 'Required parameter bookingId was null or undefined when calling apiV1BookingsBookingIdPaidPost.');
            }
            var localVarPath = "/api/v1/bookings/{bookingId}/paid"
                .replace("{" + "bookingId" + "}", encodeURIComponent(String(bookingId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Pay booking.
         * @param {string} bookingId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1BookingsBookingIdPayPost: function (bookingId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'bookingId' is not null or undefined
            if (bookingId === null || bookingId === undefined) {
                throw new base_1.RequiredError('bookingId', 'Required parameter bookingId was null or undefined when calling apiV1BookingsBookingIdPayPost.');
            }
            var localVarPath = "/api/v1/bookings/{bookingId}/pay"
                .replace("{" + "bookingId" + "}", encodeURIComponent(String(bookingId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update booking.
         * @param {string} bookingId
         * @param {UpdateBookingCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1BookingsBookingIdPut: function (bookingId, body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'bookingId' is not null or undefined
            if (bookingId === null || bookingId === undefined) {
                throw new base_1.RequiredError('bookingId', 'Required parameter bookingId was null or undefined when calling apiV1BookingsBookingIdPut.');
            }
            var localVarPath = "/api/v1/bookings/{bookingId}"
                .replace("{" + "bookingId" + "}", encodeURIComponent(String(bookingId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            var needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Reject booking.
         * @param {string} bookingId
         * @param {RejectBookingCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1BookingsBookingIdRejectPost: function (bookingId, body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'bookingId' is not null or undefined
            if (bookingId === null || bookingId === undefined) {
                throw new base_1.RequiredError('bookingId', 'Required parameter bookingId was null or undefined when calling apiV1BookingsBookingIdRejectPost.');
            }
            var localVarPath = "/api/v1/bookings/{bookingId}/reject"
                .replace("{" + "bookingId" + "}", encodeURIComponent(String(bookingId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            var needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get all bookings.
         * @param {string} [searchString]
         * @param {boolean} [isOpen]
         * @param {boolean} [isCompleted]
         * @param {object} [status]
         * @param {string} [dealPackageId]
         * @param {number} [page]
         * @param {number} [limit]
         * @param {Date} [lastRetrieved]
         * @param {boolean} [current]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1BookingsGet: function (searchString, isOpen, isCompleted, status, dealPackageId, page, limit, lastRetrieved, current, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/api/v1/bookings";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (searchString !== undefined) {
                localVarQueryParameter['SearchString'] = searchString;
            }
            if (isOpen !== undefined) {
                localVarQueryParameter['IsOpen'] = isOpen;
            }
            if (isCompleted !== undefined) {
                localVarQueryParameter['IsCompleted'] = isCompleted;
            }
            if (status !== undefined) {
                localVarQueryParameter['Status'] = status;
            }
            if (dealPackageId !== undefined) {
                localVarQueryParameter['DealPackageId'] = dealPackageId;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (lastRetrieved !== undefined) {
                localVarQueryParameter['lastRetrieved'] = (lastRetrieved instanceof Date) ?
                    lastRetrieved.toISOString() :
                    lastRetrieved;
            }
            if (current !== undefined) {
                localVarQueryParameter['Current'] = current;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Create booking.
         * @param {string} requestId
         * @param {CreateBookingCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1BookingsRequestIdPost: function (requestId, body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'requestId' is not null or undefined
            if (requestId === null || requestId === undefined) {
                throw new base_1.RequiredError('requestId', 'Required parameter requestId was null or undefined when calling apiV1BookingsRequestIdPost.');
            }
            var localVarPath = "/api/v1/bookings/{requestId}"
                .replace("{" + "requestId" + "}", encodeURIComponent(String(requestId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            var needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * BookingsApi - functional programming interface
 * @export
 */
exports.BookingsApiFp = function (configuration) {
    return {
        /**
         *
         * @summary Approve booking.
         * @param {string} bookingId
         * @param {ApproveBookingCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1BookingsBookingIdApprovePost: function (bookingId, body, options) {
            var localVarAxiosArgs = exports.BookingsApiAxiosParamCreator(configuration).apiV1BookingsBookingIdApprovePost(bookingId, body, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Cancel booking.
         * @param {string} bookingId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1BookingsBookingIdCancelPost: function (bookingId, options) {
            var localVarAxiosArgs = exports.BookingsApiAxiosParamCreator(configuration).apiV1BookingsBookingIdCancelPost(bookingId, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Delete booking.
         * @param {string} bookingId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1BookingsBookingIdDelete: function (bookingId, options) {
            var localVarAxiosArgs = exports.BookingsApiAxiosParamCreator(configuration).apiV1BookingsBookingIdDelete(bookingId, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Get booking.
         * @param {string} bookingId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1BookingsBookingIdGet: function (bookingId, options) {
            var localVarAxiosArgs = exports.BookingsApiAxiosParamCreator(configuration).apiV1BookingsBookingIdGet(bookingId, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Mark as Paid booking.
         * @param {string} bookingId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1BookingsBookingIdPaidPost: function (bookingId, options) {
            var localVarAxiosArgs = exports.BookingsApiAxiosParamCreator(configuration).apiV1BookingsBookingIdPaidPost(bookingId, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Pay booking.
         * @param {string} bookingId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1BookingsBookingIdPayPost: function (bookingId, options) {
            var localVarAxiosArgs = exports.BookingsApiAxiosParamCreator(configuration).apiV1BookingsBookingIdPayPost(bookingId, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Update booking.
         * @param {string} bookingId
         * @param {UpdateBookingCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1BookingsBookingIdPut: function (bookingId, body, options) {
            var localVarAxiosArgs = exports.BookingsApiAxiosParamCreator(configuration).apiV1BookingsBookingIdPut(bookingId, body, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Reject booking.
         * @param {string} bookingId
         * @param {RejectBookingCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1BookingsBookingIdRejectPost: function (bookingId, body, options) {
            var localVarAxiosArgs = exports.BookingsApiAxiosParamCreator(configuration).apiV1BookingsBookingIdRejectPost(bookingId, body, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Get all bookings.
         * @param {string} [searchString]
         * @param {boolean} [isOpen]
         * @param {boolean} [isCompleted]
         * @param {object} [status]
         * @param {string} [dealPackageId]
         * @param {number} [page]
         * @param {number} [limit]
         * @param {Date} [lastRetrieved]
         * @param {boolean} [current]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1BookingsGet: function (searchString, isOpen, isCompleted, status, dealPackageId, page, limit, lastRetrieved, current, options) {
            var localVarAxiosArgs = exports.BookingsApiAxiosParamCreator(configuration).apiV1BookingsGet(searchString, isOpen, isCompleted, status, dealPackageId, page, limit, lastRetrieved, current, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Create booking.
         * @param {string} requestId
         * @param {CreateBookingCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1BookingsRequestIdPost: function (requestId, body, options) {
            var localVarAxiosArgs = exports.BookingsApiAxiosParamCreator(configuration).apiV1BookingsRequestIdPost(requestId, body, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * BookingsApi - factory interface
 * @export
 */
exports.BookingsApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary Approve booking.
         * @param {string} bookingId
         * @param {ApproveBookingCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1BookingsBookingIdApprovePost: function (bookingId, body, options) {
            return exports.BookingsApiFp(configuration).apiV1BookingsBookingIdApprovePost(bookingId, body, options)(axios, basePath);
        },
        /**
         *
         * @summary Cancel booking.
         * @param {string} bookingId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1BookingsBookingIdCancelPost: function (bookingId, options) {
            return exports.BookingsApiFp(configuration).apiV1BookingsBookingIdCancelPost(bookingId, options)(axios, basePath);
        },
        /**
         *
         * @summary Delete booking.
         * @param {string} bookingId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1BookingsBookingIdDelete: function (bookingId, options) {
            return exports.BookingsApiFp(configuration).apiV1BookingsBookingIdDelete(bookingId, options)(axios, basePath);
        },
        /**
         *
         * @summary Get booking.
         * @param {string} bookingId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1BookingsBookingIdGet: function (bookingId, options) {
            return exports.BookingsApiFp(configuration).apiV1BookingsBookingIdGet(bookingId, options)(axios, basePath);
        },
        /**
         *
         * @summary Mark as Paid booking.
         * @param {string} bookingId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1BookingsBookingIdPaidPost: function (bookingId, options) {
            return exports.BookingsApiFp(configuration).apiV1BookingsBookingIdPaidPost(bookingId, options)(axios, basePath);
        },
        /**
         *
         * @summary Pay booking.
         * @param {string} bookingId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1BookingsBookingIdPayPost: function (bookingId, options) {
            return exports.BookingsApiFp(configuration).apiV1BookingsBookingIdPayPost(bookingId, options)(axios, basePath);
        },
        /**
         *
         * @summary Update booking.
         * @param {string} bookingId
         * @param {UpdateBookingCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1BookingsBookingIdPut: function (bookingId, body, options) {
            return exports.BookingsApiFp(configuration).apiV1BookingsBookingIdPut(bookingId, body, options)(axios, basePath);
        },
        /**
         *
         * @summary Reject booking.
         * @param {string} bookingId
         * @param {RejectBookingCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1BookingsBookingIdRejectPost: function (bookingId, body, options) {
            return exports.BookingsApiFp(configuration).apiV1BookingsBookingIdRejectPost(bookingId, body, options)(axios, basePath);
        },
        /**
         *
         * @summary Get all bookings.
         * @param {string} [searchString]
         * @param {boolean} [isOpen]
         * @param {boolean} [isCompleted]
         * @param {object} [status]
         * @param {string} [dealPackageId]
         * @param {number} [page]
         * @param {number} [limit]
         * @param {Date} [lastRetrieved]
         * @param {boolean} [current]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1BookingsGet: function (searchString, isOpen, isCompleted, status, dealPackageId, page, limit, lastRetrieved, current, options) {
            return exports.BookingsApiFp(configuration).apiV1BookingsGet(searchString, isOpen, isCompleted, status, dealPackageId, page, limit, lastRetrieved, current, options)(axios, basePath);
        },
        /**
         *
         * @summary Create booking.
         * @param {string} requestId
         * @param {CreateBookingCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1BookingsRequestIdPost: function (requestId, body, options) {
            return exports.BookingsApiFp(configuration).apiV1BookingsRequestIdPost(requestId, body, options)(axios, basePath);
        },
    };
};
/**
 * BookingsApi - object-oriented interface
 * @export
 * @class BookingsApi
 * @extends {BaseAPI}
 */
var BookingsApi = /** @class */ (function (_super) {
    __extends(BookingsApi, _super);
    function BookingsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Approve booking.
     * @param {string} bookingId
     * @param {ApproveBookingCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookingsApi
     */
    BookingsApi.prototype.apiV1BookingsBookingIdApprovePost = function (bookingId, body, options) {
        return exports.BookingsApiFp(this.configuration).apiV1BookingsBookingIdApprovePost(bookingId, body, options)(this.axios, this.basePath);
    };
    /**
     *
     * @summary Cancel booking.
     * @param {string} bookingId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookingsApi
     */
    BookingsApi.prototype.apiV1BookingsBookingIdCancelPost = function (bookingId, options) {
        return exports.BookingsApiFp(this.configuration).apiV1BookingsBookingIdCancelPost(bookingId, options)(this.axios, this.basePath);
    };
    /**
     *
     * @summary Delete booking.
     * @param {string} bookingId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookingsApi
     */
    BookingsApi.prototype.apiV1BookingsBookingIdDelete = function (bookingId, options) {
        return exports.BookingsApiFp(this.configuration).apiV1BookingsBookingIdDelete(bookingId, options)(this.axios, this.basePath);
    };
    /**
     *
     * @summary Get booking.
     * @param {string} bookingId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookingsApi
     */
    BookingsApi.prototype.apiV1BookingsBookingIdGet = function (bookingId, options) {
        return exports.BookingsApiFp(this.configuration).apiV1BookingsBookingIdGet(bookingId, options)(this.axios, this.basePath);
    };
    /**
     *
     * @summary Mark as Paid booking.
     * @param {string} bookingId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookingsApi
     */
    BookingsApi.prototype.apiV1BookingsBookingIdPaidPost = function (bookingId, options) {
        return exports.BookingsApiFp(this.configuration).apiV1BookingsBookingIdPaidPost(bookingId, options)(this.axios, this.basePath);
    };
    /**
     *
     * @summary Pay booking.
     * @param {string} bookingId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookingsApi
     */
    BookingsApi.prototype.apiV1BookingsBookingIdPayPost = function (bookingId, options) {
        return exports.BookingsApiFp(this.configuration).apiV1BookingsBookingIdPayPost(bookingId, options)(this.axios, this.basePath);
    };
    /**
     *
     * @summary Update booking.
     * @param {string} bookingId
     * @param {UpdateBookingCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookingsApi
     */
    BookingsApi.prototype.apiV1BookingsBookingIdPut = function (bookingId, body, options) {
        return exports.BookingsApiFp(this.configuration).apiV1BookingsBookingIdPut(bookingId, body, options)(this.axios, this.basePath);
    };
    /**
     *
     * @summary Reject booking.
     * @param {string} bookingId
     * @param {RejectBookingCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookingsApi
     */
    BookingsApi.prototype.apiV1BookingsBookingIdRejectPost = function (bookingId, body, options) {
        return exports.BookingsApiFp(this.configuration).apiV1BookingsBookingIdRejectPost(bookingId, body, options)(this.axios, this.basePath);
    };
    /**
     *
     * @summary Get all bookings.
     * @param {string} [searchString]
     * @param {boolean} [isOpen]
     * @param {boolean} [isCompleted]
     * @param {object} [status]
     * @param {string} [dealPackageId]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookingsApi
     */
    BookingsApi.prototype.apiV1BookingsGet = function (searchString, isOpen, isCompleted, status, dealPackageId, page, limit, lastRetrieved, current, options) {
        return exports.BookingsApiFp(this.configuration).apiV1BookingsGet(searchString, isOpen, isCompleted, status, dealPackageId, page, limit, lastRetrieved, current, options)(this.axios, this.basePath);
    };
    /**
     *
     * @summary Create booking.
     * @param {string} requestId
     * @param {CreateBookingCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookingsApi
     */
    BookingsApi.prototype.apiV1BookingsRequestIdPost = function (requestId, body, options) {
        return exports.BookingsApiFp(this.configuration).apiV1BookingsRequestIdPost(requestId, body, options)(this.axios, this.basePath);
    };
    return BookingsApi;
}(base_1.BaseAPI));
exports.BookingsApi = BookingsApi;
/**
 * CHAdminsApi - axios parameter creator
 * @export
 */
exports.CHAdminsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Sample request:        DELETE /api/v1/chadmins/1
         * @summary Delete cloud hospital admin user.
         * @param {string} chAdminId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChadminsChAdminIdDelete: function (chAdminId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'chAdminId' is not null or undefined
            if (chAdminId === null || chAdminId === undefined) {
                throw new base_1.RequiredError('chAdminId', 'Required parameter chAdminId was null or undefined when calling apiV1ChadminsChAdminIdDelete.');
            }
            var localVarPath = "/api/v1/chadmins/{chAdminId}"
                .replace("{" + "chAdminId" + "}", encodeURIComponent(String(chAdminId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        GET /api/v1/chadmins/1
         * @summary Get cloud hospital admin user by id.
         * @param {string} chAdminId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChadminsChAdminIdGet: function (chAdminId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'chAdminId' is not null or undefined
            if (chAdminId === null || chAdminId === undefined) {
                throw new base_1.RequiredError('chAdminId', 'Required parameter chAdminId was null or undefined when calling apiV1ChadminsChAdminIdGet.');
            }
            var localVarPath = "/api/v1/chadmins/{chAdminId}"
                .replace("{" + "chAdminId" + "}", encodeURIComponent(String(chAdminId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        PUT /api/v1/chadmins/1      {          \"email\": \"adminupdate@icloudhospital.com\",          \"firstName\": \"Cloud\",          \"lastName\": \"Hospital\",          \"photo\": \"https://cloudhospitalblob.blob.core.windows.net/assets/Cloud_Hospital_Logo_blue.png\",          \"photoThumbnail\": \"https://cloudhospitalblob.blob.core.windows.net/assets/Cloud_Hospital_Logo_blue.png\",          \"gender\": \"NotSpecified\",          \"dateOfBirth\": \"2020-02-22T09:09:19.082Z\",          \"locations\": [              {                  \"locationType\": \"LivesIn\",                  \"latitude\": 0,                  \"longitude\": 0,                  \"country\": \"string\",                  \"state\": \"string\",                  \"county\": \"string\",                  \"city\": \"string\",                  \"zipCode\": \"string\",                  \"address\": \"string\"              }          ]      }
         * @summary Update cloud hospital admin user.
         * @param {string} chAdminId
         * @param {UpdateCHAdminCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChadminsChAdminIdPut: function (chAdminId, body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'chAdminId' is not null or undefined
            if (chAdminId === null || chAdminId === undefined) {
                throw new base_1.RequiredError('chAdminId', 'Required parameter chAdminId was null or undefined when calling apiV1ChadminsChAdminIdPut.');
            }
            var localVarPath = "/api/v1/chadmins/{chAdminId}"
                .replace("{" + "chAdminId" + "}", encodeURIComponent(String(chAdminId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            var needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        GET /api/v1/chadmin      {          \"pageQueryFilter\": {              \"page\": 1,              \"limit\": 20,              \"lastRetrived\": \"2020-02-05T08:40\"          },          \"searchString\": \"admin\"      }
         * @summary Get cloud hospital admin users.
         * @param {string} [id]
         * @param {string} [fullname]
         * @param {string} [email]
         * @param {object} [gender]
         * @param {Date} [dateOfBirth]
         * @param {Date} [created]
         * @param {number} [page]
         * @param {number} [limit]
         * @param {Date} [lastRetrieved]
         * @param {boolean} [current]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChadminsGet: function (id, fullname, email, gender, dateOfBirth, created, page, limit, lastRetrieved, current, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/api/v1/chadmins";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }
            if (fullname !== undefined) {
                localVarQueryParameter['Fullname'] = fullname;
            }
            if (email !== undefined) {
                localVarQueryParameter['Email'] = email;
            }
            if (gender !== undefined) {
                localVarQueryParameter['Gender'] = gender;
            }
            if (dateOfBirth !== undefined) {
                localVarQueryParameter['DateOfBirth'] = (dateOfBirth instanceof Date) ?
                    dateOfBirth.toISOString() :
                    dateOfBirth;
            }
            if (created !== undefined) {
                localVarQueryParameter['Created'] = (created instanceof Date) ?
                    created.toISOString() :
                    created;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (lastRetrieved !== undefined) {
                localVarQueryParameter['lastRetrieved'] = (lastRetrieved instanceof Date) ?
                    lastRetrieved.toISOString() :
                    lastRetrieved;
            }
            if (current !== undefined) {
                localVarQueryParameter['Current'] = current;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        POST /api/v1/chadmins      {          \"firstName\": \"Cloud\",          \"lastName\": \"Hospital\",          \"photo\": \"https://cloudhospitalblob.blob.core.windows.net/assets/Cloud_Hospital_Logo_blue.png\",          \"photoThumbnail\": \"https://cloudhospitalblob.blob.core.windows.net/assets/Cloud_Hospital_Logo_blue.png\",          \"gender\": \"NotSpecified\",          \"dateOfBirth\": \"2020-02-22T09:09:19.082Z\",          \"locations\": [              {                  \"locationType\": \"LivesIn\",                  \"latitude\": 0,                  \"longitude\": 0,                  \"country\": \"string\",                  \"state\": \"string\",                  \"county\": \"string\",                  \"city\": \"string\",                  \"zipCode\": \"string\",                  \"address\": \"string\"              }          ]      }
         * @summary Create cloud hospital admin user.
         * @param {CreateCHAdminCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChadminsPost: function (body, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/api/v1/chadmins";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            var needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * CHAdminsApi - functional programming interface
 * @export
 */
exports.CHAdminsApiFp = function (configuration) {
    return {
        /**
         * Sample request:        DELETE /api/v1/chadmins/1
         * @summary Delete cloud hospital admin user.
         * @param {string} chAdminId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChadminsChAdminIdDelete: function (chAdminId, options) {
            var localVarAxiosArgs = exports.CHAdminsApiAxiosParamCreator(configuration).apiV1ChadminsChAdminIdDelete(chAdminId, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        GET /api/v1/chadmins/1
         * @summary Get cloud hospital admin user by id.
         * @param {string} chAdminId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChadminsChAdminIdGet: function (chAdminId, options) {
            var localVarAxiosArgs = exports.CHAdminsApiAxiosParamCreator(configuration).apiV1ChadminsChAdminIdGet(chAdminId, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        PUT /api/v1/chadmins/1      {          \"email\": \"adminupdate@icloudhospital.com\",          \"firstName\": \"Cloud\",          \"lastName\": \"Hospital\",          \"photo\": \"https://cloudhospitalblob.blob.core.windows.net/assets/Cloud_Hospital_Logo_blue.png\",          \"photoThumbnail\": \"https://cloudhospitalblob.blob.core.windows.net/assets/Cloud_Hospital_Logo_blue.png\",          \"gender\": \"NotSpecified\",          \"dateOfBirth\": \"2020-02-22T09:09:19.082Z\",          \"locations\": [              {                  \"locationType\": \"LivesIn\",                  \"latitude\": 0,                  \"longitude\": 0,                  \"country\": \"string\",                  \"state\": \"string\",                  \"county\": \"string\",                  \"city\": \"string\",                  \"zipCode\": \"string\",                  \"address\": \"string\"              }          ]      }
         * @summary Update cloud hospital admin user.
         * @param {string} chAdminId
         * @param {UpdateCHAdminCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChadminsChAdminIdPut: function (chAdminId, body, options) {
            var localVarAxiosArgs = exports.CHAdminsApiAxiosParamCreator(configuration).apiV1ChadminsChAdminIdPut(chAdminId, body, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        GET /api/v1/chadmin      {          \"pageQueryFilter\": {              \"page\": 1,              \"limit\": 20,              \"lastRetrived\": \"2020-02-05T08:40\"          },          \"searchString\": \"admin\"      }
         * @summary Get cloud hospital admin users.
         * @param {string} [id]
         * @param {string} [fullname]
         * @param {string} [email]
         * @param {object} [gender]
         * @param {Date} [dateOfBirth]
         * @param {Date} [created]
         * @param {number} [page]
         * @param {number} [limit]
         * @param {Date} [lastRetrieved]
         * @param {boolean} [current]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChadminsGet: function (id, fullname, email, gender, dateOfBirth, created, page, limit, lastRetrieved, current, options) {
            var localVarAxiosArgs = exports.CHAdminsApiAxiosParamCreator(configuration).apiV1ChadminsGet(id, fullname, email, gender, dateOfBirth, created, page, limit, lastRetrieved, current, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        POST /api/v1/chadmins      {          \"firstName\": \"Cloud\",          \"lastName\": \"Hospital\",          \"photo\": \"https://cloudhospitalblob.blob.core.windows.net/assets/Cloud_Hospital_Logo_blue.png\",          \"photoThumbnail\": \"https://cloudhospitalblob.blob.core.windows.net/assets/Cloud_Hospital_Logo_blue.png\",          \"gender\": \"NotSpecified\",          \"dateOfBirth\": \"2020-02-22T09:09:19.082Z\",          \"locations\": [              {                  \"locationType\": \"LivesIn\",                  \"latitude\": 0,                  \"longitude\": 0,                  \"country\": \"string\",                  \"state\": \"string\",                  \"county\": \"string\",                  \"city\": \"string\",                  \"zipCode\": \"string\",                  \"address\": \"string\"              }          ]      }
         * @summary Create cloud hospital admin user.
         * @param {CreateCHAdminCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChadminsPost: function (body, options) {
            var localVarAxiosArgs = exports.CHAdminsApiAxiosParamCreator(configuration).apiV1ChadminsPost(body, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * CHAdminsApi - factory interface
 * @export
 */
exports.CHAdminsApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Sample request:        DELETE /api/v1/chadmins/1
         * @summary Delete cloud hospital admin user.
         * @param {string} chAdminId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChadminsChAdminIdDelete: function (chAdminId, options) {
            return exports.CHAdminsApiFp(configuration).apiV1ChadminsChAdminIdDelete(chAdminId, options)(axios, basePath);
        },
        /**
         * Sample request:        GET /api/v1/chadmins/1
         * @summary Get cloud hospital admin user by id.
         * @param {string} chAdminId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChadminsChAdminIdGet: function (chAdminId, options) {
            return exports.CHAdminsApiFp(configuration).apiV1ChadminsChAdminIdGet(chAdminId, options)(axios, basePath);
        },
        /**
         * Sample request:        PUT /api/v1/chadmins/1      {          \"email\": \"adminupdate@icloudhospital.com\",          \"firstName\": \"Cloud\",          \"lastName\": \"Hospital\",          \"photo\": \"https://cloudhospitalblob.blob.core.windows.net/assets/Cloud_Hospital_Logo_blue.png\",          \"photoThumbnail\": \"https://cloudhospitalblob.blob.core.windows.net/assets/Cloud_Hospital_Logo_blue.png\",          \"gender\": \"NotSpecified\",          \"dateOfBirth\": \"2020-02-22T09:09:19.082Z\",          \"locations\": [              {                  \"locationType\": \"LivesIn\",                  \"latitude\": 0,                  \"longitude\": 0,                  \"country\": \"string\",                  \"state\": \"string\",                  \"county\": \"string\",                  \"city\": \"string\",                  \"zipCode\": \"string\",                  \"address\": \"string\"              }          ]      }
         * @summary Update cloud hospital admin user.
         * @param {string} chAdminId
         * @param {UpdateCHAdminCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChadminsChAdminIdPut: function (chAdminId, body, options) {
            return exports.CHAdminsApiFp(configuration).apiV1ChadminsChAdminIdPut(chAdminId, body, options)(axios, basePath);
        },
        /**
         * Sample request:        GET /api/v1/chadmin      {          \"pageQueryFilter\": {              \"page\": 1,              \"limit\": 20,              \"lastRetrived\": \"2020-02-05T08:40\"          },          \"searchString\": \"admin\"      }
         * @summary Get cloud hospital admin users.
         * @param {string} [id]
         * @param {string} [fullname]
         * @param {string} [email]
         * @param {object} [gender]
         * @param {Date} [dateOfBirth]
         * @param {Date} [created]
         * @param {number} [page]
         * @param {number} [limit]
         * @param {Date} [lastRetrieved]
         * @param {boolean} [current]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChadminsGet: function (id, fullname, email, gender, dateOfBirth, created, page, limit, lastRetrieved, current, options) {
            return exports.CHAdminsApiFp(configuration).apiV1ChadminsGet(id, fullname, email, gender, dateOfBirth, created, page, limit, lastRetrieved, current, options)(axios, basePath);
        },
        /**
         * Sample request:        POST /api/v1/chadmins      {          \"firstName\": \"Cloud\",          \"lastName\": \"Hospital\",          \"photo\": \"https://cloudhospitalblob.blob.core.windows.net/assets/Cloud_Hospital_Logo_blue.png\",          \"photoThumbnail\": \"https://cloudhospitalblob.blob.core.windows.net/assets/Cloud_Hospital_Logo_blue.png\",          \"gender\": \"NotSpecified\",          \"dateOfBirth\": \"2020-02-22T09:09:19.082Z\",          \"locations\": [              {                  \"locationType\": \"LivesIn\",                  \"latitude\": 0,                  \"longitude\": 0,                  \"country\": \"string\",                  \"state\": \"string\",                  \"county\": \"string\",                  \"city\": \"string\",                  \"zipCode\": \"string\",                  \"address\": \"string\"              }          ]      }
         * @summary Create cloud hospital admin user.
         * @param {CreateCHAdminCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChadminsPost: function (body, options) {
            return exports.CHAdminsApiFp(configuration).apiV1ChadminsPost(body, options)(axios, basePath);
        },
    };
};
/**
 * CHAdminsApi - object-oriented interface
 * @export
 * @class CHAdminsApi
 * @extends {BaseAPI}
 */
var CHAdminsApi = /** @class */ (function (_super) {
    __extends(CHAdminsApi, _super);
    function CHAdminsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Sample request:        DELETE /api/v1/chadmins/1
     * @summary Delete cloud hospital admin user.
     * @param {string} chAdminId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CHAdminsApi
     */
    CHAdminsApi.prototype.apiV1ChadminsChAdminIdDelete = function (chAdminId, options) {
        return exports.CHAdminsApiFp(this.configuration).apiV1ChadminsChAdminIdDelete(chAdminId, options)(this.axios, this.basePath);
    };
    /**
     * Sample request:        GET /api/v1/chadmins/1
     * @summary Get cloud hospital admin user by id.
     * @param {string} chAdminId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CHAdminsApi
     */
    CHAdminsApi.prototype.apiV1ChadminsChAdminIdGet = function (chAdminId, options) {
        return exports.CHAdminsApiFp(this.configuration).apiV1ChadminsChAdminIdGet(chAdminId, options)(this.axios, this.basePath);
    };
    /**
     * Sample request:        PUT /api/v1/chadmins/1      {          \"email\": \"adminupdate@icloudhospital.com\",          \"firstName\": \"Cloud\",          \"lastName\": \"Hospital\",          \"photo\": \"https://cloudhospitalblob.blob.core.windows.net/assets/Cloud_Hospital_Logo_blue.png\",          \"photoThumbnail\": \"https://cloudhospitalblob.blob.core.windows.net/assets/Cloud_Hospital_Logo_blue.png\",          \"gender\": \"NotSpecified\",          \"dateOfBirth\": \"2020-02-22T09:09:19.082Z\",          \"locations\": [              {                  \"locationType\": \"LivesIn\",                  \"latitude\": 0,                  \"longitude\": 0,                  \"country\": \"string\",                  \"state\": \"string\",                  \"county\": \"string\",                  \"city\": \"string\",                  \"zipCode\": \"string\",                  \"address\": \"string\"              }          ]      }
     * @summary Update cloud hospital admin user.
     * @param {string} chAdminId
     * @param {UpdateCHAdminCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CHAdminsApi
     */
    CHAdminsApi.prototype.apiV1ChadminsChAdminIdPut = function (chAdminId, body, options) {
        return exports.CHAdminsApiFp(this.configuration).apiV1ChadminsChAdminIdPut(chAdminId, body, options)(this.axios, this.basePath);
    };
    /**
     * Sample request:        GET /api/v1/chadmin      {          \"pageQueryFilter\": {              \"page\": 1,              \"limit\": 20,              \"lastRetrived\": \"2020-02-05T08:40\"          },          \"searchString\": \"admin\"      }
     * @summary Get cloud hospital admin users.
     * @param {string} [id]
     * @param {string} [fullname]
     * @param {string} [email]
     * @param {object} [gender]
     * @param {Date} [dateOfBirth]
     * @param {Date} [created]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CHAdminsApi
     */
    CHAdminsApi.prototype.apiV1ChadminsGet = function (id, fullname, email, gender, dateOfBirth, created, page, limit, lastRetrieved, current, options) {
        return exports.CHAdminsApiFp(this.configuration).apiV1ChadminsGet(id, fullname, email, gender, dateOfBirth, created, page, limit, lastRetrieved, current, options)(this.axios, this.basePath);
    };
    /**
     * Sample request:        POST /api/v1/chadmins      {          \"firstName\": \"Cloud\",          \"lastName\": \"Hospital\",          \"photo\": \"https://cloudhospitalblob.blob.core.windows.net/assets/Cloud_Hospital_Logo_blue.png\",          \"photoThumbnail\": \"https://cloudhospitalblob.blob.core.windows.net/assets/Cloud_Hospital_Logo_blue.png\",          \"gender\": \"NotSpecified\",          \"dateOfBirth\": \"2020-02-22T09:09:19.082Z\",          \"locations\": [              {                  \"locationType\": \"LivesIn\",                  \"latitude\": 0,                  \"longitude\": 0,                  \"country\": \"string\",                  \"state\": \"string\",                  \"county\": \"string\",                  \"city\": \"string\",                  \"zipCode\": \"string\",                  \"address\": \"string\"              }          ]      }
     * @summary Create cloud hospital admin user.
     * @param {CreateCHAdminCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CHAdminsApi
     */
    CHAdminsApi.prototype.apiV1ChadminsPost = function (body, options) {
        return exports.CHAdminsApiFp(this.configuration).apiV1ChadminsPost(body, options)(this.axios, this.basePath);
    };
    return CHAdminsApi;
}(base_1.BaseAPI));
exports.CHAdminsApi = CHAdminsApi;
/**
 * CHManagersApi - axios parameter creator
 * @export
 */
exports.CHManagersApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Smaple request:        DELETE /api/v1/chmanagers/1
         * @summary Delete cloud hospital manager.
         * @param {string} chManagerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChmanagersChManagerIdDelete: function (chManagerId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'chManagerId' is not null or undefined
            if (chManagerId === null || chManagerId === undefined) {
                throw new base_1.RequiredError('chManagerId', 'Required parameter chManagerId was null or undefined when calling apiV1ChmanagersChManagerIdDelete.');
            }
            var localVarPath = "/api/v1/chmanagers/{chManagerId}"
                .replace("{" + "chManagerId" + "}", encodeURIComponent(String(chManagerId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        GET /api/v1/chmanagers/1
         * @summary Get cloud hospital manager.
         * @param {string} managerId
         * @param {string} chManagerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChmanagersChManagerIdGet: function (managerId, chManagerId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'managerId' is not null or undefined
            if (managerId === null || managerId === undefined) {
                throw new base_1.RequiredError('managerId', 'Required parameter managerId was null or undefined when calling apiV1ChmanagersChManagerIdGet.');
            }
            // verify required parameter 'chManagerId' is not null or undefined
            if (chManagerId === null || chManagerId === undefined) {
                throw new base_1.RequiredError('chManagerId', 'Required parameter chManagerId was null or undefined when calling apiV1ChmanagersChManagerIdGet.');
            }
            var localVarPath = "/api/v1/chmanagers/{chManagerId}"
                .replace("{" + "managerId" + "}", encodeURIComponent(String(managerId)))
                .replace("{" + "chManagerId" + "}", encodeURIComponent(String(chManagerId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        PUT /api/v1/chmanagers/1      {          \"firstName\": \"cloud\",          \"lastName\": \"manager\",          \"photo\": \"string\",          \"locations\": [          {              \"locationType\": \"LivesIn\",              \"latitude\": 0,              \"longitude\": 0,              \"country\": \"string\",              \"state\": \"string\",              \"county\": \"string\",              \"city\": \"string\",              \"zipCode\": \"string\",              \"address\": \"string\"              }          ]      }
         * @summary Update cloud hospital manager.
         * @param {string} chManagerId
         * @param {UpdateCHManagerCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChmanagersChManagerIdPut: function (chManagerId, body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'chManagerId' is not null or undefined
            if (chManagerId === null || chManagerId === undefined) {
                throw new base_1.RequiredError('chManagerId', 'Required parameter chManagerId was null or undefined when calling apiV1ChmanagersChManagerIdPut.');
            }
            var localVarPath = "/api/v1/chmanagers/{chManagerId}"
                .replace("{" + "chManagerId" + "}", encodeURIComponent(String(chManagerId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            var needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        GET /api/v1/chmanagers      {          \"pageQueryFilter\": {              \"page\": 1,              \"limit\": 20,              \"lastRetrived\": \"2020-02-05T08:40\"          },          \"searchString\": \"chmanager\"      }
         * @summary Get cloud hospital managers.
         * @param {string} [id]
         * @param {string} [fullname]
         * @param {string} [email]
         * @param {object} [gender]
         * @param {Date} [dateOfBirth]
         * @param {Date} [created]
         * @param {number} [page]
         * @param {number} [limit]
         * @param {Date} [lastRetrieved]
         * @param {boolean} [current]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChmanagersGet: function (id, fullname, email, gender, dateOfBirth, created, page, limit, lastRetrieved, current, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/api/v1/chmanagers";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }
            if (fullname !== undefined) {
                localVarQueryParameter['Fullname'] = fullname;
            }
            if (email !== undefined) {
                localVarQueryParameter['Email'] = email;
            }
            if (gender !== undefined) {
                localVarQueryParameter['Gender'] = gender;
            }
            if (dateOfBirth !== undefined) {
                localVarQueryParameter['DateOfBirth'] = (dateOfBirth instanceof Date) ?
                    dateOfBirth.toISOString() :
                    dateOfBirth;
            }
            if (created !== undefined) {
                localVarQueryParameter['Created'] = (created instanceof Date) ?
                    created.toISOString() :
                    created;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (lastRetrieved !== undefined) {
                localVarQueryParameter['lastRetrieved'] = (lastRetrieved instanceof Date) ?
                    lastRetrieved.toISOString() :
                    lastRetrieved;
            }
            if (current !== undefined) {
                localVarQueryParameter['Current'] = current;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        POST /api/v1/chmanagers      {          \"userName\": \"chmanager\",          \"email\": \"chmanger@icloudhospital.com\",          \"firstName\": \"cloud\",          \"lastName\": \"manager\",          \"photo\": \"string\",          \"photoThumbnail\": \"string\",          \"gender\": \"NotSpecified\",          \"dateOfBirth\": \"2020-02-22T15:28:09.897Z\",          \"locations\": [             {             \"locationType\": \"LivesIn\",             \"latitude\": 0,             \"longitude\": 0,             \"country\": \"string\",             \"state\": \"string\",             \"county\": \"string\",             \"city\": \"string\",             \"zipCode\": \"string\",             \"address\": \"string\"             }          ]       }
         * @summary Create cloud hospital manager.
         * @param {CreateCHManagerCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChmanagersPost: function (body, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/api/v1/chmanagers";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            var needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * CHManagersApi - functional programming interface
 * @export
 */
exports.CHManagersApiFp = function (configuration) {
    return {
        /**
         * Smaple request:        DELETE /api/v1/chmanagers/1
         * @summary Delete cloud hospital manager.
         * @param {string} chManagerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChmanagersChManagerIdDelete: function (chManagerId, options) {
            var localVarAxiosArgs = exports.CHManagersApiAxiosParamCreator(configuration).apiV1ChmanagersChManagerIdDelete(chManagerId, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        GET /api/v1/chmanagers/1
         * @summary Get cloud hospital manager.
         * @param {string} managerId
         * @param {string} chManagerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChmanagersChManagerIdGet: function (managerId, chManagerId, options) {
            var localVarAxiosArgs = exports.CHManagersApiAxiosParamCreator(configuration).apiV1ChmanagersChManagerIdGet(managerId, chManagerId, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        PUT /api/v1/chmanagers/1      {          \"firstName\": \"cloud\",          \"lastName\": \"manager\",          \"photo\": \"string\",          \"locations\": [          {              \"locationType\": \"LivesIn\",              \"latitude\": 0,              \"longitude\": 0,              \"country\": \"string\",              \"state\": \"string\",              \"county\": \"string\",              \"city\": \"string\",              \"zipCode\": \"string\",              \"address\": \"string\"              }          ]      }
         * @summary Update cloud hospital manager.
         * @param {string} chManagerId
         * @param {UpdateCHManagerCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChmanagersChManagerIdPut: function (chManagerId, body, options) {
            var localVarAxiosArgs = exports.CHManagersApiAxiosParamCreator(configuration).apiV1ChmanagersChManagerIdPut(chManagerId, body, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        GET /api/v1/chmanagers      {          \"pageQueryFilter\": {              \"page\": 1,              \"limit\": 20,              \"lastRetrived\": \"2020-02-05T08:40\"          },          \"searchString\": \"chmanager\"      }
         * @summary Get cloud hospital managers.
         * @param {string} [id]
         * @param {string} [fullname]
         * @param {string} [email]
         * @param {object} [gender]
         * @param {Date} [dateOfBirth]
         * @param {Date} [created]
         * @param {number} [page]
         * @param {number} [limit]
         * @param {Date} [lastRetrieved]
         * @param {boolean} [current]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChmanagersGet: function (id, fullname, email, gender, dateOfBirth, created, page, limit, lastRetrieved, current, options) {
            var localVarAxiosArgs = exports.CHManagersApiAxiosParamCreator(configuration).apiV1ChmanagersGet(id, fullname, email, gender, dateOfBirth, created, page, limit, lastRetrieved, current, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        POST /api/v1/chmanagers      {          \"userName\": \"chmanager\",          \"email\": \"chmanger@icloudhospital.com\",          \"firstName\": \"cloud\",          \"lastName\": \"manager\",          \"photo\": \"string\",          \"photoThumbnail\": \"string\",          \"gender\": \"NotSpecified\",          \"dateOfBirth\": \"2020-02-22T15:28:09.897Z\",          \"locations\": [             {             \"locationType\": \"LivesIn\",             \"latitude\": 0,             \"longitude\": 0,             \"country\": \"string\",             \"state\": \"string\",             \"county\": \"string\",             \"city\": \"string\",             \"zipCode\": \"string\",             \"address\": \"string\"             }          ]       }
         * @summary Create cloud hospital manager.
         * @param {CreateCHManagerCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChmanagersPost: function (body, options) {
            var localVarAxiosArgs = exports.CHManagersApiAxiosParamCreator(configuration).apiV1ChmanagersPost(body, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * CHManagersApi - factory interface
 * @export
 */
exports.CHManagersApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Smaple request:        DELETE /api/v1/chmanagers/1
         * @summary Delete cloud hospital manager.
         * @param {string} chManagerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChmanagersChManagerIdDelete: function (chManagerId, options) {
            return exports.CHManagersApiFp(configuration).apiV1ChmanagersChManagerIdDelete(chManagerId, options)(axios, basePath);
        },
        /**
         * Sample request:        GET /api/v1/chmanagers/1
         * @summary Get cloud hospital manager.
         * @param {string} managerId
         * @param {string} chManagerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChmanagersChManagerIdGet: function (managerId, chManagerId, options) {
            return exports.CHManagersApiFp(configuration).apiV1ChmanagersChManagerIdGet(managerId, chManagerId, options)(axios, basePath);
        },
        /**
         * Sample request:        PUT /api/v1/chmanagers/1      {          \"firstName\": \"cloud\",          \"lastName\": \"manager\",          \"photo\": \"string\",          \"locations\": [          {              \"locationType\": \"LivesIn\",              \"latitude\": 0,              \"longitude\": 0,              \"country\": \"string\",              \"state\": \"string\",              \"county\": \"string\",              \"city\": \"string\",              \"zipCode\": \"string\",              \"address\": \"string\"              }          ]      }
         * @summary Update cloud hospital manager.
         * @param {string} chManagerId
         * @param {UpdateCHManagerCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChmanagersChManagerIdPut: function (chManagerId, body, options) {
            return exports.CHManagersApiFp(configuration).apiV1ChmanagersChManagerIdPut(chManagerId, body, options)(axios, basePath);
        },
        /**
         * Sample request:        GET /api/v1/chmanagers      {          \"pageQueryFilter\": {              \"page\": 1,              \"limit\": 20,              \"lastRetrived\": \"2020-02-05T08:40\"          },          \"searchString\": \"chmanager\"      }
         * @summary Get cloud hospital managers.
         * @param {string} [id]
         * @param {string} [fullname]
         * @param {string} [email]
         * @param {object} [gender]
         * @param {Date} [dateOfBirth]
         * @param {Date} [created]
         * @param {number} [page]
         * @param {number} [limit]
         * @param {Date} [lastRetrieved]
         * @param {boolean} [current]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChmanagersGet: function (id, fullname, email, gender, dateOfBirth, created, page, limit, lastRetrieved, current, options) {
            return exports.CHManagersApiFp(configuration).apiV1ChmanagersGet(id, fullname, email, gender, dateOfBirth, created, page, limit, lastRetrieved, current, options)(axios, basePath);
        },
        /**
         * Sample request:        POST /api/v1/chmanagers      {          \"userName\": \"chmanager\",          \"email\": \"chmanger@icloudhospital.com\",          \"firstName\": \"cloud\",          \"lastName\": \"manager\",          \"photo\": \"string\",          \"photoThumbnail\": \"string\",          \"gender\": \"NotSpecified\",          \"dateOfBirth\": \"2020-02-22T15:28:09.897Z\",          \"locations\": [             {             \"locationType\": \"LivesIn\",             \"latitude\": 0,             \"longitude\": 0,             \"country\": \"string\",             \"state\": \"string\",             \"county\": \"string\",             \"city\": \"string\",             \"zipCode\": \"string\",             \"address\": \"string\"             }          ]       }
         * @summary Create cloud hospital manager.
         * @param {CreateCHManagerCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ChmanagersPost: function (body, options) {
            return exports.CHManagersApiFp(configuration).apiV1ChmanagersPost(body, options)(axios, basePath);
        },
    };
};
/**
 * CHManagersApi - object-oriented interface
 * @export
 * @class CHManagersApi
 * @extends {BaseAPI}
 */
var CHManagersApi = /** @class */ (function (_super) {
    __extends(CHManagersApi, _super);
    function CHManagersApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Smaple request:        DELETE /api/v1/chmanagers/1
     * @summary Delete cloud hospital manager.
     * @param {string} chManagerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CHManagersApi
     */
    CHManagersApi.prototype.apiV1ChmanagersChManagerIdDelete = function (chManagerId, options) {
        return exports.CHManagersApiFp(this.configuration).apiV1ChmanagersChManagerIdDelete(chManagerId, options)(this.axios, this.basePath);
    };
    /**
     * Sample request:        GET /api/v1/chmanagers/1
     * @summary Get cloud hospital manager.
     * @param {string} managerId
     * @param {string} chManagerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CHManagersApi
     */
    CHManagersApi.prototype.apiV1ChmanagersChManagerIdGet = function (managerId, chManagerId, options) {
        return exports.CHManagersApiFp(this.configuration).apiV1ChmanagersChManagerIdGet(managerId, chManagerId, options)(this.axios, this.basePath);
    };
    /**
     * Sample request:        PUT /api/v1/chmanagers/1      {          \"firstName\": \"cloud\",          \"lastName\": \"manager\",          \"photo\": \"string\",          \"locations\": [          {              \"locationType\": \"LivesIn\",              \"latitude\": 0,              \"longitude\": 0,              \"country\": \"string\",              \"state\": \"string\",              \"county\": \"string\",              \"city\": \"string\",              \"zipCode\": \"string\",              \"address\": \"string\"              }          ]      }
     * @summary Update cloud hospital manager.
     * @param {string} chManagerId
     * @param {UpdateCHManagerCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CHManagersApi
     */
    CHManagersApi.prototype.apiV1ChmanagersChManagerIdPut = function (chManagerId, body, options) {
        return exports.CHManagersApiFp(this.configuration).apiV1ChmanagersChManagerIdPut(chManagerId, body, options)(this.axios, this.basePath);
    };
    /**
     * Sample request:        GET /api/v1/chmanagers      {          \"pageQueryFilter\": {              \"page\": 1,              \"limit\": 20,              \"lastRetrived\": \"2020-02-05T08:40\"          },          \"searchString\": \"chmanager\"      }
     * @summary Get cloud hospital managers.
     * @param {string} [id]
     * @param {string} [fullname]
     * @param {string} [email]
     * @param {object} [gender]
     * @param {Date} [dateOfBirth]
     * @param {Date} [created]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CHManagersApi
     */
    CHManagersApi.prototype.apiV1ChmanagersGet = function (id, fullname, email, gender, dateOfBirth, created, page, limit, lastRetrieved, current, options) {
        return exports.CHManagersApiFp(this.configuration).apiV1ChmanagersGet(id, fullname, email, gender, dateOfBirth, created, page, limit, lastRetrieved, current, options)(this.axios, this.basePath);
    };
    /**
     * Sample request:        POST /api/v1/chmanagers      {          \"userName\": \"chmanager\",          \"email\": \"chmanger@icloudhospital.com\",          \"firstName\": \"cloud\",          \"lastName\": \"manager\",          \"photo\": \"string\",          \"photoThumbnail\": \"string\",          \"gender\": \"NotSpecified\",          \"dateOfBirth\": \"2020-02-22T15:28:09.897Z\",          \"locations\": [             {             \"locationType\": \"LivesIn\",             \"latitude\": 0,             \"longitude\": 0,             \"country\": \"string\",             \"state\": \"string\",             \"county\": \"string\",             \"city\": \"string\",             \"zipCode\": \"string\",             \"address\": \"string\"             }          ]       }
     * @summary Create cloud hospital manager.
     * @param {CreateCHManagerCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CHManagersApi
     */
    CHManagersApi.prototype.apiV1ChmanagersPost = function (body, options) {
        return exports.CHManagersApiFp(this.configuration).apiV1ChmanagersPost(body, options)(this.axios, this.basePath);
    };
    return CHManagersApi;
}(base_1.BaseAPI));
exports.CHManagersApi = CHManagersApi;
/**
 * ConsultationsApi - axios parameter creator
 * @export
 */
exports.ConsultationsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Approve consultation.
         * @param {string} consultationId
         * @param {ApproveConsultationCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ConsultationsConsultationIdApprovePost: function (consultationId, body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'consultationId' is not null or undefined
            if (consultationId === null || consultationId === undefined) {
                throw new base_1.RequiredError('consultationId', 'Required parameter consultationId was null or undefined when calling apiV1ConsultationsConsultationIdApprovePost.');
            }
            var localVarPath = "/api/v1/consultations/{consultationId}/approve"
                .replace("{" + "consultationId" + "}", encodeURIComponent(String(consultationId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            var needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Cancel consultation.
         * @param {string} consultationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ConsultationsConsultationIdCancelPost: function (consultationId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'consultationId' is not null or undefined
            if (consultationId === null || consultationId === undefined) {
                throw new base_1.RequiredError('consultationId', 'Required parameter consultationId was null or undefined when calling apiV1ConsultationsConsultationIdCancelPost.');
            }
            var localVarPath = "/api/v1/consultations/{consultationId}/cancel"
                .replace("{" + "consultationId" + "}", encodeURIComponent(String(consultationId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Delete consultation.
         * @param {string} consultationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ConsultationsConsultationIdDelete: function (consultationId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'consultationId' is not null or undefined
            if (consultationId === null || consultationId === undefined) {
                throw new base_1.RequiredError('consultationId', 'Required parameter consultationId was null or undefined when calling apiV1ConsultationsConsultationIdDelete.');
            }
            var localVarPath = "/api/v1/consultations/{consultationId}"
                .replace("{" + "consultationId" + "}", encodeURIComponent(String(consultationId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get consultation.
         * @param {string} consultationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ConsultationsConsultationIdGet: function (consultationId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'consultationId' is not null or undefined
            if (consultationId === null || consultationId === undefined) {
                throw new base_1.RequiredError('consultationId', 'Required parameter consultationId was null or undefined when calling apiV1ConsultationsConsultationIdGet.');
            }
            var localVarPath = "/api/v1/consultations/{consultationId}"
                .replace("{" + "consultationId" + "}", encodeURIComponent(String(consultationId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Pay consultation.
         * @param {string} consultationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ConsultationsConsultationIdPayPost: function (consultationId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'consultationId' is not null or undefined
            if (consultationId === null || consultationId === undefined) {
                throw new base_1.RequiredError('consultationId', 'Required parameter consultationId was null or undefined when calling apiV1ConsultationsConsultationIdPayPost.');
            }
            var localVarPath = "/api/v1/consultations/{consultationId}/pay"
                .replace("{" + "consultationId" + "}", encodeURIComponent(String(consultationId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update consultation.
         * @param {string} consultationId
         * @param {UpdateConsultationCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ConsultationsConsultationIdPut: function (consultationId, body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'consultationId' is not null or undefined
            if (consultationId === null || consultationId === undefined) {
                throw new base_1.RequiredError('consultationId', 'Required parameter consultationId was null or undefined when calling apiV1ConsultationsConsultationIdPut.');
            }
            var localVarPath = "/api/v1/consultations/{consultationId}"
                .replace("{" + "consultationId" + "}", encodeURIComponent(String(consultationId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            var needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Reject consultation.
         * @param {string} consultationId
         * @param {RejectConsultationCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ConsultationsConsultationIdRejectPost: function (consultationId, body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'consultationId' is not null or undefined
            if (consultationId === null || consultationId === undefined) {
                throw new base_1.RequiredError('consultationId', 'Required parameter consultationId was null or undefined when calling apiV1ConsultationsConsultationIdRejectPost.');
            }
            var localVarPath = "/api/v1/consultations/{consultationId}/reject"
                .replace("{" + "consultationId" + "}", encodeURIComponent(String(consultationId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            var needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get all consultations.
         * @param {string} [searchString]
         * @param {boolean} [isOpen]
         * @param {boolean} [isCompleted]
         * @param {object} [status]
         * @param {number} [page]
         * @param {number} [limit]
         * @param {Date} [lastRetrieved]
         * @param {boolean} [current]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ConsultationsGet: function (searchString, isOpen, isCompleted, status, page, limit, lastRetrieved, current, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/api/v1/consultations";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (searchString !== undefined) {
                localVarQueryParameter['SearchString'] = searchString;
            }
            if (isOpen !== undefined) {
                localVarQueryParameter['IsOpen'] = isOpen;
            }
            if (isCompleted !== undefined) {
                localVarQueryParameter['IsCompleted'] = isCompleted;
            }
            if (status !== undefined) {
                localVarQueryParameter['Status'] = status;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (lastRetrieved !== undefined) {
                localVarQueryParameter['lastRetrieved'] = (lastRetrieved instanceof Date) ?
                    lastRetrieved.toISOString() :
                    lastRetrieved;
            }
            if (current !== undefined) {
                localVarQueryParameter['Current'] = current;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Create consultation.
         * @param {string} requestId
         * @param {CreateConsultationCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ConsultationsRequestIdPost: function (requestId, body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'requestId' is not null or undefined
            if (requestId === null || requestId === undefined) {
                throw new base_1.RequiredError('requestId', 'Required parameter requestId was null or undefined when calling apiV1ConsultationsRequestIdPost.');
            }
            var localVarPath = "/api/v1/consultations/{requestId}"
                .replace("{" + "requestId" + "}", encodeURIComponent(String(requestId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            var needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * ConsultationsApi - functional programming interface
 * @export
 */
exports.ConsultationsApiFp = function (configuration) {
    return {
        /**
         *
         * @summary Approve consultation.
         * @param {string} consultationId
         * @param {ApproveConsultationCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ConsultationsConsultationIdApprovePost: function (consultationId, body, options) {
            var localVarAxiosArgs = exports.ConsultationsApiAxiosParamCreator(configuration).apiV1ConsultationsConsultationIdApprovePost(consultationId, body, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Cancel consultation.
         * @param {string} consultationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ConsultationsConsultationIdCancelPost: function (consultationId, options) {
            var localVarAxiosArgs = exports.ConsultationsApiAxiosParamCreator(configuration).apiV1ConsultationsConsultationIdCancelPost(consultationId, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Delete consultation.
         * @param {string} consultationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ConsultationsConsultationIdDelete: function (consultationId, options) {
            var localVarAxiosArgs = exports.ConsultationsApiAxiosParamCreator(configuration).apiV1ConsultationsConsultationIdDelete(consultationId, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Get consultation.
         * @param {string} consultationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ConsultationsConsultationIdGet: function (consultationId, options) {
            var localVarAxiosArgs = exports.ConsultationsApiAxiosParamCreator(configuration).apiV1ConsultationsConsultationIdGet(consultationId, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Pay consultation.
         * @param {string} consultationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ConsultationsConsultationIdPayPost: function (consultationId, options) {
            var localVarAxiosArgs = exports.ConsultationsApiAxiosParamCreator(configuration).apiV1ConsultationsConsultationIdPayPost(consultationId, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Update consultation.
         * @param {string} consultationId
         * @param {UpdateConsultationCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ConsultationsConsultationIdPut: function (consultationId, body, options) {
            var localVarAxiosArgs = exports.ConsultationsApiAxiosParamCreator(configuration).apiV1ConsultationsConsultationIdPut(consultationId, body, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Reject consultation.
         * @param {string} consultationId
         * @param {RejectConsultationCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ConsultationsConsultationIdRejectPost: function (consultationId, body, options) {
            var localVarAxiosArgs = exports.ConsultationsApiAxiosParamCreator(configuration).apiV1ConsultationsConsultationIdRejectPost(consultationId, body, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Get all consultations.
         * @param {string} [searchString]
         * @param {boolean} [isOpen]
         * @param {boolean} [isCompleted]
         * @param {object} [status]
         * @param {number} [page]
         * @param {number} [limit]
         * @param {Date} [lastRetrieved]
         * @param {boolean} [current]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ConsultationsGet: function (searchString, isOpen, isCompleted, status, page, limit, lastRetrieved, current, options) {
            var localVarAxiosArgs = exports.ConsultationsApiAxiosParamCreator(configuration).apiV1ConsultationsGet(searchString, isOpen, isCompleted, status, page, limit, lastRetrieved, current, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Create consultation.
         * @param {string} requestId
         * @param {CreateConsultationCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ConsultationsRequestIdPost: function (requestId, body, options) {
            var localVarAxiosArgs = exports.ConsultationsApiAxiosParamCreator(configuration).apiV1ConsultationsRequestIdPost(requestId, body, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * ConsultationsApi - factory interface
 * @export
 */
exports.ConsultationsApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary Approve consultation.
         * @param {string} consultationId
         * @param {ApproveConsultationCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ConsultationsConsultationIdApprovePost: function (consultationId, body, options) {
            return exports.ConsultationsApiFp(configuration).apiV1ConsultationsConsultationIdApprovePost(consultationId, body, options)(axios, basePath);
        },
        /**
         *
         * @summary Cancel consultation.
         * @param {string} consultationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ConsultationsConsultationIdCancelPost: function (consultationId, options) {
            return exports.ConsultationsApiFp(configuration).apiV1ConsultationsConsultationIdCancelPost(consultationId, options)(axios, basePath);
        },
        /**
         *
         * @summary Delete consultation.
         * @param {string} consultationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ConsultationsConsultationIdDelete: function (consultationId, options) {
            return exports.ConsultationsApiFp(configuration).apiV1ConsultationsConsultationIdDelete(consultationId, options)(axios, basePath);
        },
        /**
         *
         * @summary Get consultation.
         * @param {string} consultationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ConsultationsConsultationIdGet: function (consultationId, options) {
            return exports.ConsultationsApiFp(configuration).apiV1ConsultationsConsultationIdGet(consultationId, options)(axios, basePath);
        },
        /**
         *
         * @summary Pay consultation.
         * @param {string} consultationId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ConsultationsConsultationIdPayPost: function (consultationId, options) {
            return exports.ConsultationsApiFp(configuration).apiV1ConsultationsConsultationIdPayPost(consultationId, options)(axios, basePath);
        },
        /**
         *
         * @summary Update consultation.
         * @param {string} consultationId
         * @param {UpdateConsultationCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ConsultationsConsultationIdPut: function (consultationId, body, options) {
            return exports.ConsultationsApiFp(configuration).apiV1ConsultationsConsultationIdPut(consultationId, body, options)(axios, basePath);
        },
        /**
         *
         * @summary Reject consultation.
         * @param {string} consultationId
         * @param {RejectConsultationCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ConsultationsConsultationIdRejectPost: function (consultationId, body, options) {
            return exports.ConsultationsApiFp(configuration).apiV1ConsultationsConsultationIdRejectPost(consultationId, body, options)(axios, basePath);
        },
        /**
         *
         * @summary Get all consultations.
         * @param {string} [searchString]
         * @param {boolean} [isOpen]
         * @param {boolean} [isCompleted]
         * @param {object} [status]
         * @param {number} [page]
         * @param {number} [limit]
         * @param {Date} [lastRetrieved]
         * @param {boolean} [current]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ConsultationsGet: function (searchString, isOpen, isCompleted, status, page, limit, lastRetrieved, current, options) {
            return exports.ConsultationsApiFp(configuration).apiV1ConsultationsGet(searchString, isOpen, isCompleted, status, page, limit, lastRetrieved, current, options)(axios, basePath);
        },
        /**
         *
         * @summary Create consultation.
         * @param {string} requestId
         * @param {CreateConsultationCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ConsultationsRequestIdPost: function (requestId, body, options) {
            return exports.ConsultationsApiFp(configuration).apiV1ConsultationsRequestIdPost(requestId, body, options)(axios, basePath);
        },
    };
};
/**
 * ConsultationsApi - object-oriented interface
 * @export
 * @class ConsultationsApi
 * @extends {BaseAPI}
 */
var ConsultationsApi = /** @class */ (function (_super) {
    __extends(ConsultationsApi, _super);
    function ConsultationsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Approve consultation.
     * @param {string} consultationId
     * @param {ApproveConsultationCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsultationsApi
     */
    ConsultationsApi.prototype.apiV1ConsultationsConsultationIdApprovePost = function (consultationId, body, options) {
        return exports.ConsultationsApiFp(this.configuration).apiV1ConsultationsConsultationIdApprovePost(consultationId, body, options)(this.axios, this.basePath);
    };
    /**
     *
     * @summary Cancel consultation.
     * @param {string} consultationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsultationsApi
     */
    ConsultationsApi.prototype.apiV1ConsultationsConsultationIdCancelPost = function (consultationId, options) {
        return exports.ConsultationsApiFp(this.configuration).apiV1ConsultationsConsultationIdCancelPost(consultationId, options)(this.axios, this.basePath);
    };
    /**
     *
     * @summary Delete consultation.
     * @param {string} consultationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsultationsApi
     */
    ConsultationsApi.prototype.apiV1ConsultationsConsultationIdDelete = function (consultationId, options) {
        return exports.ConsultationsApiFp(this.configuration).apiV1ConsultationsConsultationIdDelete(consultationId, options)(this.axios, this.basePath);
    };
    /**
     *
     * @summary Get consultation.
     * @param {string} consultationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsultationsApi
     */
    ConsultationsApi.prototype.apiV1ConsultationsConsultationIdGet = function (consultationId, options) {
        return exports.ConsultationsApiFp(this.configuration).apiV1ConsultationsConsultationIdGet(consultationId, options)(this.axios, this.basePath);
    };
    /**
     *
     * @summary Pay consultation.
     * @param {string} consultationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsultationsApi
     */
    ConsultationsApi.prototype.apiV1ConsultationsConsultationIdPayPost = function (consultationId, options) {
        return exports.ConsultationsApiFp(this.configuration).apiV1ConsultationsConsultationIdPayPost(consultationId, options)(this.axios, this.basePath);
    };
    /**
     *
     * @summary Update consultation.
     * @param {string} consultationId
     * @param {UpdateConsultationCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsultationsApi
     */
    ConsultationsApi.prototype.apiV1ConsultationsConsultationIdPut = function (consultationId, body, options) {
        return exports.ConsultationsApiFp(this.configuration).apiV1ConsultationsConsultationIdPut(consultationId, body, options)(this.axios, this.basePath);
    };
    /**
     *
     * @summary Reject consultation.
     * @param {string} consultationId
     * @param {RejectConsultationCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsultationsApi
     */
    ConsultationsApi.prototype.apiV1ConsultationsConsultationIdRejectPost = function (consultationId, body, options) {
        return exports.ConsultationsApiFp(this.configuration).apiV1ConsultationsConsultationIdRejectPost(consultationId, body, options)(this.axios, this.basePath);
    };
    /**
     *
     * @summary Get all consultations.
     * @param {string} [searchString]
     * @param {boolean} [isOpen]
     * @param {boolean} [isCompleted]
     * @param {object} [status]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsultationsApi
     */
    ConsultationsApi.prototype.apiV1ConsultationsGet = function (searchString, isOpen, isCompleted, status, page, limit, lastRetrieved, current, options) {
        return exports.ConsultationsApiFp(this.configuration).apiV1ConsultationsGet(searchString, isOpen, isCompleted, status, page, limit, lastRetrieved, current, options)(this.axios, this.basePath);
    };
    /**
     *
     * @summary Create consultation.
     * @param {string} requestId
     * @param {CreateConsultationCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsultationsApi
     */
    ConsultationsApi.prototype.apiV1ConsultationsRequestIdPost = function (requestId, body, options) {
        return exports.ConsultationsApiFp(this.configuration).apiV1ConsultationsRequestIdPost(requestId, body, options)(this.axios, this.basePath);
    };
    return ConsultationsApi;
}(base_1.BaseAPI));
exports.ConsultationsApi = ConsultationsApi;
/**
 * CountriesApi - axios parameter creator
 * @export
 */
exports.CountriesApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Sample request:        DELETE /api/v1/countries/1
         * @summary Delete country.
         * @param {string} countryId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CountriesCountryIdDelete: function (countryId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'countryId' is not null or undefined
            if (countryId === null || countryId === undefined) {
                throw new base_1.RequiredError('countryId', 'Required parameter countryId was null or undefined when calling apiV1CountriesCountryIdDelete.');
            }
            var localVarPath = "/api/v1/countries/{countryId}"
                .replace("{" + "countryId" + "}", encodeURIComponent(String(countryId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        GET /api/v1/countries/1
         * @summary Get country.
         * @param {string} countryId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CountriesCountryIdGet: function (countryId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'countryId' is not null or undefined
            if (countryId === null || countryId === undefined) {
                throw new base_1.RequiredError('countryId', 'Required parameter countryId was null or undefined when calling apiV1CountriesCountryIdGet.');
            }
            var localVarPath = "/api/v1/countries/{countryId}"
                .replace("{" + "countryId" + "}", encodeURIComponent(String(countryId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        PUT /api/v1/countries/1      {          \"name\": \"USA\",          \"description\": \"United States of America\"          \"medias\": [            {              \"mediaType\": 0,              \"url\": \"https://cloudhospitalblob.blob.core.windows.net/imagecontainer/SouthKorea.png\",              \"thumbnailUrl\": \"https://cloudhospitalblob.blob.core.windows.net/thumbnailcontainer/SouthKorea.png\"              \"description\": \"string\",              \"order\": 0            },            {              \"mediaType\": 1,              \"url\": \"string\",              \"description\": \"string\",              \"order\": 1            }          ],      }
         * @summary Update country.
         * @param {string} countryId
         * @param {UpdateCountryCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CountriesCountryIdPut: function (countryId, body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'countryId' is not null or undefined
            if (countryId === null || countryId === undefined) {
                throw new base_1.RequiredError('countryId', 'Required parameter countryId was null or undefined when calling apiV1CountriesCountryIdPut.');
            }
            var localVarPath = "/api/v1/countries/{countryId}"
                .replace("{" + "countryId" + "}", encodeURIComponent(String(countryId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            var needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        GET /api/v1/countries      {          \"countryPageQueryFilter\": {              \"page\": 1,              \"limit\": 20,              \"lastRetrived\": \"2020-02-05T08:40\"          }      }
         * @summary Get all countries.
         * @param {string} [id]
         * @param {string} [name]
         * @param {string} [description]
         * @param {Date} [createdDate]
         * @param {number} [page]
         * @param {number} [limit]
         * @param {Date} [lastRetrieved]
         * @param {boolean} [current]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CountriesGet: function (id, name, description, createdDate, page, limit, lastRetrieved, current, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/api/v1/countries";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }
            if (name !== undefined) {
                localVarQueryParameter['Name'] = name;
            }
            if (description !== undefined) {
                localVarQueryParameter['Description'] = description;
            }
            if (createdDate !== undefined) {
                localVarQueryParameter['CreatedDate'] = (createdDate instanceof Date) ?
                    createdDate.toISOString() :
                    createdDate;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (lastRetrieved !== undefined) {
                localVarQueryParameter['lastRetrieved'] = (lastRetrieved instanceof Date) ?
                    lastRetrieved.toISOString() :
                    lastRetrieved;
            }
            if (current !== undefined) {
                localVarQueryParameter['Current'] = current;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        POST /api/v1/countries      {          \"name\": \"Korea\",          \"description\": \"Republic of Korea\",          \"medias\": [              {                  \"mediaType\": \"Photo\",                  \"url\": \"https://cloudhospitalblob.blob.core.windows.net/imagecontainer/SouthKorea.png\",                  \"thumbnailUrl\": \"https://cloudhospitalblob.blob.core.windows.net/thumbnailcontainer/SouthKorea.png\",                  \"description\": \"string\"              }          ]      }
         * @summary Create a country.
         * @param {CreateCountryCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CountriesPost: function (body, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/api/v1/countries";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            var needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get country by slug.
         * @param {string} slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CountriesSlugsSlugGet: function (slug, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'slug' is not null or undefined
            if (slug === null || slug === undefined) {
                throw new base_1.RequiredError('slug', 'Required parameter slug was null or undefined when calling apiV1CountriesSlugsSlugGet.');
            }
            var localVarPath = "/api/v1/countries/slugs/{slug}"
                .replace("{" + "slug" + "}", encodeURIComponent(String(slug)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * CountriesApi - functional programming interface
 * @export
 */
exports.CountriesApiFp = function (configuration) {
    return {
        /**
         * Sample request:        DELETE /api/v1/countries/1
         * @summary Delete country.
         * @param {string} countryId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CountriesCountryIdDelete: function (countryId, options) {
            var localVarAxiosArgs = exports.CountriesApiAxiosParamCreator(configuration).apiV1CountriesCountryIdDelete(countryId, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        GET /api/v1/countries/1
         * @summary Get country.
         * @param {string} countryId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CountriesCountryIdGet: function (countryId, options) {
            var localVarAxiosArgs = exports.CountriesApiAxiosParamCreator(configuration).apiV1CountriesCountryIdGet(countryId, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        PUT /api/v1/countries/1      {          \"name\": \"USA\",          \"description\": \"United States of America\"          \"medias\": [            {              \"mediaType\": 0,              \"url\": \"https://cloudhospitalblob.blob.core.windows.net/imagecontainer/SouthKorea.png\",              \"thumbnailUrl\": \"https://cloudhospitalblob.blob.core.windows.net/thumbnailcontainer/SouthKorea.png\"              \"description\": \"string\",              \"order\": 0            },            {              \"mediaType\": 1,              \"url\": \"string\",              \"description\": \"string\",              \"order\": 1            }          ],      }
         * @summary Update country.
         * @param {string} countryId
         * @param {UpdateCountryCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CountriesCountryIdPut: function (countryId, body, options) {
            var localVarAxiosArgs = exports.CountriesApiAxiosParamCreator(configuration).apiV1CountriesCountryIdPut(countryId, body, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        GET /api/v1/countries      {          \"countryPageQueryFilter\": {              \"page\": 1,              \"limit\": 20,              \"lastRetrived\": \"2020-02-05T08:40\"          }      }
         * @summary Get all countries.
         * @param {string} [id]
         * @param {string} [name]
         * @param {string} [description]
         * @param {Date} [createdDate]
         * @param {number} [page]
         * @param {number} [limit]
         * @param {Date} [lastRetrieved]
         * @param {boolean} [current]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CountriesGet: function (id, name, description, createdDate, page, limit, lastRetrieved, current, options) {
            var localVarAxiosArgs = exports.CountriesApiAxiosParamCreator(configuration).apiV1CountriesGet(id, name, description, createdDate, page, limit, lastRetrieved, current, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        POST /api/v1/countries      {          \"name\": \"Korea\",          \"description\": \"Republic of Korea\",          \"medias\": [              {                  \"mediaType\": \"Photo\",                  \"url\": \"https://cloudhospitalblob.blob.core.windows.net/imagecontainer/SouthKorea.png\",                  \"thumbnailUrl\": \"https://cloudhospitalblob.blob.core.windows.net/thumbnailcontainer/SouthKorea.png\",                  \"description\": \"string\"              }          ]      }
         * @summary Create a country.
         * @param {CreateCountryCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CountriesPost: function (body, options) {
            var localVarAxiosArgs = exports.CountriesApiAxiosParamCreator(configuration).apiV1CountriesPost(body, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Get country by slug.
         * @param {string} slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CountriesSlugsSlugGet: function (slug, options) {
            var localVarAxiosArgs = exports.CountriesApiAxiosParamCreator(configuration).apiV1CountriesSlugsSlugGet(slug, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * CountriesApi - factory interface
 * @export
 */
exports.CountriesApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Sample request:        DELETE /api/v1/countries/1
         * @summary Delete country.
         * @param {string} countryId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CountriesCountryIdDelete: function (countryId, options) {
            return exports.CountriesApiFp(configuration).apiV1CountriesCountryIdDelete(countryId, options)(axios, basePath);
        },
        /**
         * Sample request:        GET /api/v1/countries/1
         * @summary Get country.
         * @param {string} countryId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CountriesCountryIdGet: function (countryId, options) {
            return exports.CountriesApiFp(configuration).apiV1CountriesCountryIdGet(countryId, options)(axios, basePath);
        },
        /**
         * Sample request:        PUT /api/v1/countries/1      {          \"name\": \"USA\",          \"description\": \"United States of America\"          \"medias\": [            {              \"mediaType\": 0,              \"url\": \"https://cloudhospitalblob.blob.core.windows.net/imagecontainer/SouthKorea.png\",              \"thumbnailUrl\": \"https://cloudhospitalblob.blob.core.windows.net/thumbnailcontainer/SouthKorea.png\"              \"description\": \"string\",              \"order\": 0            },            {              \"mediaType\": 1,              \"url\": \"string\",              \"description\": \"string\",              \"order\": 1            }          ],      }
         * @summary Update country.
         * @param {string} countryId
         * @param {UpdateCountryCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CountriesCountryIdPut: function (countryId, body, options) {
            return exports.CountriesApiFp(configuration).apiV1CountriesCountryIdPut(countryId, body, options)(axios, basePath);
        },
        /**
         * Sample request:        GET /api/v1/countries      {          \"countryPageQueryFilter\": {              \"page\": 1,              \"limit\": 20,              \"lastRetrived\": \"2020-02-05T08:40\"          }      }
         * @summary Get all countries.
         * @param {string} [id]
         * @param {string} [name]
         * @param {string} [description]
         * @param {Date} [createdDate]
         * @param {number} [page]
         * @param {number} [limit]
         * @param {Date} [lastRetrieved]
         * @param {boolean} [current]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CountriesGet: function (id, name, description, createdDate, page, limit, lastRetrieved, current, options) {
            return exports.CountriesApiFp(configuration).apiV1CountriesGet(id, name, description, createdDate, page, limit, lastRetrieved, current, options)(axios, basePath);
        },
        /**
         * Sample request:        POST /api/v1/countries      {          \"name\": \"Korea\",          \"description\": \"Republic of Korea\",          \"medias\": [              {                  \"mediaType\": \"Photo\",                  \"url\": \"https://cloudhospitalblob.blob.core.windows.net/imagecontainer/SouthKorea.png\",                  \"thumbnailUrl\": \"https://cloudhospitalblob.blob.core.windows.net/thumbnailcontainer/SouthKorea.png\",                  \"description\": \"string\"              }          ]      }
         * @summary Create a country.
         * @param {CreateCountryCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CountriesPost: function (body, options) {
            return exports.CountriesApiFp(configuration).apiV1CountriesPost(body, options)(axios, basePath);
        },
        /**
         *
         * @summary Get country by slug.
         * @param {string} slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CountriesSlugsSlugGet: function (slug, options) {
            return exports.CountriesApiFp(configuration).apiV1CountriesSlugsSlugGet(slug, options)(axios, basePath);
        },
    };
};
/**
 * CountriesApi - object-oriented interface
 * @export
 * @class CountriesApi
 * @extends {BaseAPI}
 */
var CountriesApi = /** @class */ (function (_super) {
    __extends(CountriesApi, _super);
    function CountriesApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Sample request:        DELETE /api/v1/countries/1
     * @summary Delete country.
     * @param {string} countryId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CountriesApi
     */
    CountriesApi.prototype.apiV1CountriesCountryIdDelete = function (countryId, options) {
        return exports.CountriesApiFp(this.configuration).apiV1CountriesCountryIdDelete(countryId, options)(this.axios, this.basePath);
    };
    /**
     * Sample request:        GET /api/v1/countries/1
     * @summary Get country.
     * @param {string} countryId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CountriesApi
     */
    CountriesApi.prototype.apiV1CountriesCountryIdGet = function (countryId, options) {
        return exports.CountriesApiFp(this.configuration).apiV1CountriesCountryIdGet(countryId, options)(this.axios, this.basePath);
    };
    /**
     * Sample request:        PUT /api/v1/countries/1      {          \"name\": \"USA\",          \"description\": \"United States of America\"          \"medias\": [            {              \"mediaType\": 0,              \"url\": \"https://cloudhospitalblob.blob.core.windows.net/imagecontainer/SouthKorea.png\",              \"thumbnailUrl\": \"https://cloudhospitalblob.blob.core.windows.net/thumbnailcontainer/SouthKorea.png\"              \"description\": \"string\",              \"order\": 0            },            {              \"mediaType\": 1,              \"url\": \"string\",              \"description\": \"string\",              \"order\": 1            }          ],      }
     * @summary Update country.
     * @param {string} countryId
     * @param {UpdateCountryCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CountriesApi
     */
    CountriesApi.prototype.apiV1CountriesCountryIdPut = function (countryId, body, options) {
        return exports.CountriesApiFp(this.configuration).apiV1CountriesCountryIdPut(countryId, body, options)(this.axios, this.basePath);
    };
    /**
     * Sample request:        GET /api/v1/countries      {          \"countryPageQueryFilter\": {              \"page\": 1,              \"limit\": 20,              \"lastRetrived\": \"2020-02-05T08:40\"          }      }
     * @summary Get all countries.
     * @param {string} [id]
     * @param {string} [name]
     * @param {string} [description]
     * @param {Date} [createdDate]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CountriesApi
     */
    CountriesApi.prototype.apiV1CountriesGet = function (id, name, description, createdDate, page, limit, lastRetrieved, current, options) {
        return exports.CountriesApiFp(this.configuration).apiV1CountriesGet(id, name, description, createdDate, page, limit, lastRetrieved, current, options)(this.axios, this.basePath);
    };
    /**
     * Sample request:        POST /api/v1/countries      {          \"name\": \"Korea\",          \"description\": \"Republic of Korea\",          \"medias\": [              {                  \"mediaType\": \"Photo\",                  \"url\": \"https://cloudhospitalblob.blob.core.windows.net/imagecontainer/SouthKorea.png\",                  \"thumbnailUrl\": \"https://cloudhospitalblob.blob.core.windows.net/thumbnailcontainer/SouthKorea.png\",                  \"description\": \"string\"              }          ]      }
     * @summary Create a country.
     * @param {CreateCountryCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CountriesApi
     */
    CountriesApi.prototype.apiV1CountriesPost = function (body, options) {
        return exports.CountriesApiFp(this.configuration).apiV1CountriesPost(body, options)(this.axios, this.basePath);
    };
    /**
     *
     * @summary Get country by slug.
     * @param {string} slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CountriesApi
     */
    CountriesApi.prototype.apiV1CountriesSlugsSlugGet = function (slug, options) {
        return exports.CountriesApiFp(this.configuration).apiV1CountriesSlugsSlugGet(slug, options)(this.axios, this.basePath);
    };
    return CountriesApi;
}(base_1.BaseAPI));
exports.CountriesApi = CountriesApi;
/**
 * DealPackagesApi - axios parameter creator
 * @export
 */
exports.DealPackagesApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Delete deal package.
         * @param {string} dealId
         * @param {string} packageId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DealsDealIdPackagesPackageIdDelete: function (dealId, packageId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'dealId' is not null or undefined
            if (dealId === null || dealId === undefined) {
                throw new base_1.RequiredError('dealId', 'Required parameter dealId was null or undefined when calling apiV1DealsDealIdPackagesPackageIdDelete.');
            }
            // verify required parameter 'packageId' is not null or undefined
            if (packageId === null || packageId === undefined) {
                throw new base_1.RequiredError('packageId', 'Required parameter packageId was null or undefined when calling apiV1DealsDealIdPackagesPackageIdDelete.');
            }
            var localVarPath = "/api/v1/deals/{dealId}/packages/{packageId}"
                .replace("{" + "dealId" + "}", encodeURIComponent(String(dealId)))
                .replace("{" + "packageId" + "}", encodeURIComponent(String(packageId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get deal package.
         * @param {string} dealId
         * @param {string} packageId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DealsDealIdPackagesPackageIdGet: function (dealId, packageId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'dealId' is not null or undefined
            if (dealId === null || dealId === undefined) {
                throw new base_1.RequiredError('dealId', 'Required parameter dealId was null or undefined when calling apiV1DealsDealIdPackagesPackageIdGet.');
            }
            // verify required parameter 'packageId' is not null or undefined
            if (packageId === null || packageId === undefined) {
                throw new base_1.RequiredError('packageId', 'Required parameter packageId was null or undefined when calling apiV1DealsDealIdPackagesPackageIdGet.');
            }
            var localVarPath = "/api/v1/deals/{dealId}/packages/{packageId}"
                .replace("{" + "dealId" + "}", encodeURIComponent(String(dealId)))
                .replace("{" + "packageId" + "}", encodeURIComponent(String(packageId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update deal package.
         * @param {string} dealId
         * @param {string} packageId
         * @param {UpdateDealPackageCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DealsDealIdPackagesPackageIdPut: function (dealId, packageId, body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'dealId' is not null or undefined
            if (dealId === null || dealId === undefined) {
                throw new base_1.RequiredError('dealId', 'Required parameter dealId was null or undefined when calling apiV1DealsDealIdPackagesPackageIdPut.');
            }
            // verify required parameter 'packageId' is not null or undefined
            if (packageId === null || packageId === undefined) {
                throw new base_1.RequiredError('packageId', 'Required parameter packageId was null or undefined when calling apiV1DealsDealIdPackagesPackageIdPut.');
            }
            var localVarPath = "/api/v1/deals/{dealId}/packages/{packageId}"
                .replace("{" + "dealId" + "}", encodeURIComponent(String(dealId)))
                .replace("{" + "packageId" + "}", encodeURIComponent(String(packageId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            var needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Create deal package.
         * @param {string} dealId
         * @param {CreateDealPackageCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DealsDealIdPackagesPost: function (dealId, body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'dealId' is not null or undefined
            if (dealId === null || dealId === undefined) {
                throw new base_1.RequiredError('dealId', 'Required parameter dealId was null or undefined when calling apiV1DealsDealIdPackagesPost.');
            }
            var localVarPath = "/api/v1/deals/{dealId}/packages"
                .replace("{" + "dealId" + "}", encodeURIComponent(String(dealId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            var needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * DealPackagesApi - functional programming interface
 * @export
 */
exports.DealPackagesApiFp = function (configuration) {
    return {
        /**
         *
         * @summary Delete deal package.
         * @param {string} dealId
         * @param {string} packageId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DealsDealIdPackagesPackageIdDelete: function (dealId, packageId, options) {
            var localVarAxiosArgs = exports.DealPackagesApiAxiosParamCreator(configuration).apiV1DealsDealIdPackagesPackageIdDelete(dealId, packageId, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Get deal package.
         * @param {string} dealId
         * @param {string} packageId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DealsDealIdPackagesPackageIdGet: function (dealId, packageId, options) {
            var localVarAxiosArgs = exports.DealPackagesApiAxiosParamCreator(configuration).apiV1DealsDealIdPackagesPackageIdGet(dealId, packageId, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Update deal package.
         * @param {string} dealId
         * @param {string} packageId
         * @param {UpdateDealPackageCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DealsDealIdPackagesPackageIdPut: function (dealId, packageId, body, options) {
            var localVarAxiosArgs = exports.DealPackagesApiAxiosParamCreator(configuration).apiV1DealsDealIdPackagesPackageIdPut(dealId, packageId, body, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Create deal package.
         * @param {string} dealId
         * @param {CreateDealPackageCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DealsDealIdPackagesPost: function (dealId, body, options) {
            var localVarAxiosArgs = exports.DealPackagesApiAxiosParamCreator(configuration).apiV1DealsDealIdPackagesPost(dealId, body, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * DealPackagesApi - factory interface
 * @export
 */
exports.DealPackagesApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary Delete deal package.
         * @param {string} dealId
         * @param {string} packageId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DealsDealIdPackagesPackageIdDelete: function (dealId, packageId, options) {
            return exports.DealPackagesApiFp(configuration).apiV1DealsDealIdPackagesPackageIdDelete(dealId, packageId, options)(axios, basePath);
        },
        /**
         *
         * @summary Get deal package.
         * @param {string} dealId
         * @param {string} packageId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DealsDealIdPackagesPackageIdGet: function (dealId, packageId, options) {
            return exports.DealPackagesApiFp(configuration).apiV1DealsDealIdPackagesPackageIdGet(dealId, packageId, options)(axios, basePath);
        },
        /**
         *
         * @summary Update deal package.
         * @param {string} dealId
         * @param {string} packageId
         * @param {UpdateDealPackageCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DealsDealIdPackagesPackageIdPut: function (dealId, packageId, body, options) {
            return exports.DealPackagesApiFp(configuration).apiV1DealsDealIdPackagesPackageIdPut(dealId, packageId, body, options)(axios, basePath);
        },
        /**
         *
         * @summary Create deal package.
         * @param {string} dealId
         * @param {CreateDealPackageCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DealsDealIdPackagesPost: function (dealId, body, options) {
            return exports.DealPackagesApiFp(configuration).apiV1DealsDealIdPackagesPost(dealId, body, options)(axios, basePath);
        },
    };
};
/**
 * DealPackagesApi - object-oriented interface
 * @export
 * @class DealPackagesApi
 * @extends {BaseAPI}
 */
var DealPackagesApi = /** @class */ (function (_super) {
    __extends(DealPackagesApi, _super);
    function DealPackagesApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Delete deal package.
     * @param {string} dealId
     * @param {string} packageId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DealPackagesApi
     */
    DealPackagesApi.prototype.apiV1DealsDealIdPackagesPackageIdDelete = function (dealId, packageId, options) {
        return exports.DealPackagesApiFp(this.configuration).apiV1DealsDealIdPackagesPackageIdDelete(dealId, packageId, options)(this.axios, this.basePath);
    };
    /**
     *
     * @summary Get deal package.
     * @param {string} dealId
     * @param {string} packageId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DealPackagesApi
     */
    DealPackagesApi.prototype.apiV1DealsDealIdPackagesPackageIdGet = function (dealId, packageId, options) {
        return exports.DealPackagesApiFp(this.configuration).apiV1DealsDealIdPackagesPackageIdGet(dealId, packageId, options)(this.axios, this.basePath);
    };
    /**
     *
     * @summary Update deal package.
     * @param {string} dealId
     * @param {string} packageId
     * @param {UpdateDealPackageCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DealPackagesApi
     */
    DealPackagesApi.prototype.apiV1DealsDealIdPackagesPackageIdPut = function (dealId, packageId, body, options) {
        return exports.DealPackagesApiFp(this.configuration).apiV1DealsDealIdPackagesPackageIdPut(dealId, packageId, body, options)(this.axios, this.basePath);
    };
    /**
     *
     * @summary Create deal package.
     * @param {string} dealId
     * @param {CreateDealPackageCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DealPackagesApi
     */
    DealPackagesApi.prototype.apiV1DealsDealIdPackagesPost = function (dealId, body, options) {
        return exports.DealPackagesApiFp(this.configuration).apiV1DealsDealIdPackagesPost(dealId, body, options)(this.axios, this.basePath);
    };
    return DealPackagesApi;
}(base_1.BaseAPI));
exports.DealPackagesApi = DealPackagesApi;
/**
 * DealsApi - axios parameter creator
 * @export
 */
exports.DealsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Delete deal.
         * @param {string} dealId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DealsDealIdDelete: function (dealId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'dealId' is not null or undefined
            if (dealId === null || dealId === undefined) {
                throw new base_1.RequiredError('dealId', 'Required parameter dealId was null or undefined when calling apiV1DealsDealIdDelete.');
            }
            var localVarPath = "/api/v1/deals/{dealId}"
                .replace("{" + "dealId" + "}", encodeURIComponent(String(dealId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get deal.
         * @param {string} dealId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DealsDealIdGet: function (dealId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'dealId' is not null or undefined
            if (dealId === null || dealId === undefined) {
                throw new base_1.RequiredError('dealId', 'Required parameter dealId was null or undefined when calling apiV1DealsDealIdGet.');
            }
            var localVarPath = "/api/v1/deals/{dealId}"
                .replace("{" + "dealId" + "}", encodeURIComponent(String(dealId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update deal.
         * @param {string} dealId
         * @param {UpdateDealCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DealsDealIdPut: function (dealId, body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'dealId' is not null or undefined
            if (dealId === null || dealId === undefined) {
                throw new base_1.RequiredError('dealId', 'Required parameter dealId was null or undefined when calling apiV1DealsDealIdPut.');
            }
            var localVarPath = "/api/v1/deals/{dealId}"
                .replace("{" + "dealId" + "}", encodeURIComponent(String(dealId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            var needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get all deals.
         * @param {string} [id]
         * @param {string} [name]
         * @param {object} [marketingType]
         * @param {string} [countryId]
         * @param {string} [hospitalId]
         * @param {string} [hospitalName]
         * @param {number} [page]
         * @param {number} [limit]
         * @param {Date} [lastRetrieved]
         * @param {boolean} [current]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DealsGet: function (id, name, marketingType, countryId, hospitalId, hospitalName, page, limit, lastRetrieved, current, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/api/v1/deals";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }
            if (name !== undefined) {
                localVarQueryParameter['Name'] = name;
            }
            if (marketingType !== undefined) {
                localVarQueryParameter['MarketingType'] = marketingType;
            }
            if (countryId !== undefined) {
                localVarQueryParameter['CountryId'] = countryId;
            }
            if (hospitalId !== undefined) {
                localVarQueryParameter['HospitalId'] = hospitalId;
            }
            if (hospitalName !== undefined) {
                localVarQueryParameter['HospitalName'] = hospitalName;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (lastRetrieved !== undefined) {
                localVarQueryParameter['lastRetrieved'] = (lastRetrieved instanceof Date) ?
                    lastRetrieved.toISOString() :
                    lastRetrieved;
            }
            if (current !== undefined) {
                localVarQueryParameter['Current'] = current;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Create deal.
         * @param {CreateDealCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DealsPost: function (body, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/api/v1/deals";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            var needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get deal by slug.
         * @param {string} slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DealsSlugsSlugGet: function (slug, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'slug' is not null or undefined
            if (slug === null || slug === undefined) {
                throw new base_1.RequiredError('slug', 'Required parameter slug was null or undefined when calling apiV1DealsSlugsSlugGet.');
            }
            var localVarPath = "/api/v1/deals/slugs/{slug}"
                .replace("{" + "slug" + "}", encodeURIComponent(String(slug)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * DealsApi - functional programming interface
 * @export
 */
exports.DealsApiFp = function (configuration) {
    return {
        /**
         *
         * @summary Delete deal.
         * @param {string} dealId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DealsDealIdDelete: function (dealId, options) {
            var localVarAxiosArgs = exports.DealsApiAxiosParamCreator(configuration).apiV1DealsDealIdDelete(dealId, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Get deal.
         * @param {string} dealId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DealsDealIdGet: function (dealId, options) {
            var localVarAxiosArgs = exports.DealsApiAxiosParamCreator(configuration).apiV1DealsDealIdGet(dealId, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Update deal.
         * @param {string} dealId
         * @param {UpdateDealCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DealsDealIdPut: function (dealId, body, options) {
            var localVarAxiosArgs = exports.DealsApiAxiosParamCreator(configuration).apiV1DealsDealIdPut(dealId, body, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Get all deals.
         * @param {string} [id]
         * @param {string} [name]
         * @param {object} [marketingType]
         * @param {string} [countryId]
         * @param {string} [hospitalId]
         * @param {string} [hospitalName]
         * @param {number} [page]
         * @param {number} [limit]
         * @param {Date} [lastRetrieved]
         * @param {boolean} [current]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DealsGet: function (id, name, marketingType, countryId, hospitalId, hospitalName, page, limit, lastRetrieved, current, options) {
            var localVarAxiosArgs = exports.DealsApiAxiosParamCreator(configuration).apiV1DealsGet(id, name, marketingType, countryId, hospitalId, hospitalName, page, limit, lastRetrieved, current, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Create deal.
         * @param {CreateDealCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DealsPost: function (body, options) {
            var localVarAxiosArgs = exports.DealsApiAxiosParamCreator(configuration).apiV1DealsPost(body, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Get deal by slug.
         * @param {string} slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DealsSlugsSlugGet: function (slug, options) {
            var localVarAxiosArgs = exports.DealsApiAxiosParamCreator(configuration).apiV1DealsSlugsSlugGet(slug, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * DealsApi - factory interface
 * @export
 */
exports.DealsApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary Delete deal.
         * @param {string} dealId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DealsDealIdDelete: function (dealId, options) {
            return exports.DealsApiFp(configuration).apiV1DealsDealIdDelete(dealId, options)(axios, basePath);
        },
        /**
         *
         * @summary Get deal.
         * @param {string} dealId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DealsDealIdGet: function (dealId, options) {
            return exports.DealsApiFp(configuration).apiV1DealsDealIdGet(dealId, options)(axios, basePath);
        },
        /**
         *
         * @summary Update deal.
         * @param {string} dealId
         * @param {UpdateDealCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DealsDealIdPut: function (dealId, body, options) {
            return exports.DealsApiFp(configuration).apiV1DealsDealIdPut(dealId, body, options)(axios, basePath);
        },
        /**
         *
         * @summary Get all deals.
         * @param {string} [id]
         * @param {string} [name]
         * @param {object} [marketingType]
         * @param {string} [countryId]
         * @param {string} [hospitalId]
         * @param {string} [hospitalName]
         * @param {number} [page]
         * @param {number} [limit]
         * @param {Date} [lastRetrieved]
         * @param {boolean} [current]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DealsGet: function (id, name, marketingType, countryId, hospitalId, hospitalName, page, limit, lastRetrieved, current, options) {
            return exports.DealsApiFp(configuration).apiV1DealsGet(id, name, marketingType, countryId, hospitalId, hospitalName, page, limit, lastRetrieved, current, options)(axios, basePath);
        },
        /**
         *
         * @summary Create deal.
         * @param {CreateDealCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DealsPost: function (body, options) {
            return exports.DealsApiFp(configuration).apiV1DealsPost(body, options)(axios, basePath);
        },
        /**
         *
         * @summary Get deal by slug.
         * @param {string} slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DealsSlugsSlugGet: function (slug, options) {
            return exports.DealsApiFp(configuration).apiV1DealsSlugsSlugGet(slug, options)(axios, basePath);
        },
    };
};
/**
 * DealsApi - object-oriented interface
 * @export
 * @class DealsApi
 * @extends {BaseAPI}
 */
var DealsApi = /** @class */ (function (_super) {
    __extends(DealsApi, _super);
    function DealsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Delete deal.
     * @param {string} dealId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DealsApi
     */
    DealsApi.prototype.apiV1DealsDealIdDelete = function (dealId, options) {
        return exports.DealsApiFp(this.configuration).apiV1DealsDealIdDelete(dealId, options)(this.axios, this.basePath);
    };
    /**
     *
     * @summary Get deal.
     * @param {string} dealId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DealsApi
     */
    DealsApi.prototype.apiV1DealsDealIdGet = function (dealId, options) {
        return exports.DealsApiFp(this.configuration).apiV1DealsDealIdGet(dealId, options)(this.axios, this.basePath);
    };
    /**
     *
     * @summary Update deal.
     * @param {string} dealId
     * @param {UpdateDealCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DealsApi
     */
    DealsApi.prototype.apiV1DealsDealIdPut = function (dealId, body, options) {
        return exports.DealsApiFp(this.configuration).apiV1DealsDealIdPut(dealId, body, options)(this.axios, this.basePath);
    };
    /**
     *
     * @summary Get all deals.
     * @param {string} [id]
     * @param {string} [name]
     * @param {object} [marketingType]
     * @param {string} [countryId]
     * @param {string} [hospitalId]
     * @param {string} [hospitalName]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DealsApi
     */
    DealsApi.prototype.apiV1DealsGet = function (id, name, marketingType, countryId, hospitalId, hospitalName, page, limit, lastRetrieved, current, options) {
        return exports.DealsApiFp(this.configuration).apiV1DealsGet(id, name, marketingType, countryId, hospitalId, hospitalName, page, limit, lastRetrieved, current, options)(this.axios, this.basePath);
    };
    /**
     *
     * @summary Create deal.
     * @param {CreateDealCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DealsApi
     */
    DealsApi.prototype.apiV1DealsPost = function (body, options) {
        return exports.DealsApiFp(this.configuration).apiV1DealsPost(body, options)(this.axios, this.basePath);
    };
    /**
     *
     * @summary Get deal by slug.
     * @param {string} slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DealsApi
     */
    DealsApi.prototype.apiV1DealsSlugsSlugGet = function (slug, options) {
        return exports.DealsApiFp(this.configuration).apiV1DealsSlugsSlugGet(slug, options)(this.axios, this.basePath);
    };
    return DealsApi;
}(base_1.BaseAPI));
exports.DealsApi = DealsApi;
/**
 * DepartmentApi - axios parameter creator
 * @export
 */
exports.DepartmentApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Sample request:        GET /api/v1/hospitals/departments
         * @summary Get all department.
         * @param {string} [id]
         * @param {string} [hospitalId]
         * @param {string} [hospitalName]
         * @param {string} [name]
         * @param {string} [additionalInfo]
         * @param {number} [page]
         * @param {number} [limit]
         * @param {Date} [lastRetrieved]
         * @param {boolean} [current]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsDepartmentsGet: function (id, hospitalId, hospitalName, name, additionalInfo, page, limit, lastRetrieved, current, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/api/v1/hospitals/departments";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }
            if (hospitalId !== undefined) {
                localVarQueryParameter['HospitalId'] = hospitalId;
            }
            if (hospitalName !== undefined) {
                localVarQueryParameter['HospitalName'] = hospitalName;
            }
            if (name !== undefined) {
                localVarQueryParameter['Name'] = name;
            }
            if (additionalInfo !== undefined) {
                localVarQueryParameter['AdditionalInfo'] = additionalInfo;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (lastRetrieved !== undefined) {
                localVarQueryParameter['lastRetrieved'] = (lastRetrieved instanceof Date) ?
                    lastRetrieved.toISOString() :
                    lastRetrieved;
            }
            if (current !== undefined) {
                localVarQueryParameter['Current'] = current;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        DELETE /api/v1/hospitals/1/departments/1
         * @summary Delete department.
         * @param {string} hospitalId
         * @param {string} departmentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdDepartmentsDepartmentIdDelete: function (hospitalId, departmentId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'hospitalId' is not null or undefined
            if (hospitalId === null || hospitalId === undefined) {
                throw new base_1.RequiredError('hospitalId', 'Required parameter hospitalId was null or undefined when calling apiV1HospitalsHospitalIdDepartmentsDepartmentIdDelete.');
            }
            // verify required parameter 'departmentId' is not null or undefined
            if (departmentId === null || departmentId === undefined) {
                throw new base_1.RequiredError('departmentId', 'Required parameter departmentId was null or undefined when calling apiV1HospitalsHospitalIdDepartmentsDepartmentIdDelete.');
            }
            var localVarPath = "/api/v1/hospitals/{hospitalId}/departments/{departmentId}"
                .replace("{" + "hospitalId" + "}", encodeURIComponent(String(hospitalId)))
                .replace("{" + "departmentId" + "}", encodeURIComponent(String(departmentId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        GET /api/v1/hospitals/1/departments/1
         * @summary Get department.
         * @param {string} hospitalId
         * @param {string} departmentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdDepartmentsDepartmentIdGet: function (hospitalId, departmentId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'hospitalId' is not null or undefined
            if (hospitalId === null || hospitalId === undefined) {
                throw new base_1.RequiredError('hospitalId', 'Required parameter hospitalId was null or undefined when calling apiV1HospitalsHospitalIdDepartmentsDepartmentIdGet.');
            }
            // verify required parameter 'departmentId' is not null or undefined
            if (departmentId === null || departmentId === undefined) {
                throw new base_1.RequiredError('departmentId', 'Required parameter departmentId was null or undefined when calling apiV1HospitalsHospitalIdDepartmentsDepartmentIdGet.');
            }
            var localVarPath = "/api/v1/hospitals/{hospitalId}/departments/{departmentId}"
                .replace("{" + "hospitalId" + "}", encodeURIComponent(String(hospitalId)))
                .replace("{" + "departmentId" + "}", encodeURIComponent(String(departmentId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        POST /api/v1/hospitals/1/departments/1
         * @summary Create department.
         * @param {string} hospitalId
         * @param {string} departmentId
         * @param {CreateDepartmentCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdDepartmentsDepartmentIdPost: function (hospitalId, departmentId, body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'hospitalId' is not null or undefined
            if (hospitalId === null || hospitalId === undefined) {
                throw new base_1.RequiredError('hospitalId', 'Required parameter hospitalId was null or undefined when calling apiV1HospitalsHospitalIdDepartmentsDepartmentIdPost.');
            }
            // verify required parameter 'departmentId' is not null or undefined
            if (departmentId === null || departmentId === undefined) {
                throw new base_1.RequiredError('departmentId', 'Required parameter departmentId was null or undefined when calling apiV1HospitalsHospitalIdDepartmentsDepartmentIdPost.');
            }
            var localVarPath = "/api/v1/hospitals/{hospitalId}/departments/{departmentId}"
                .replace("{" + "hospitalId" + "}", encodeURIComponent(String(hospitalId)))
                .replace("{" + "departmentId" + "}", encodeURIComponent(String(departmentId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            var needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:
         * @summary Update department.
         * @param {string} hospitalId
         * @param {string} departmentId
         * @param {UpdateDepartmentCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdDepartmentsDepartmentIdPut: function (hospitalId, departmentId, body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'hospitalId' is not null or undefined
            if (hospitalId === null || hospitalId === undefined) {
                throw new base_1.RequiredError('hospitalId', 'Required parameter hospitalId was null or undefined when calling apiV1HospitalsHospitalIdDepartmentsDepartmentIdPut.');
            }
            // verify required parameter 'departmentId' is not null or undefined
            if (departmentId === null || departmentId === undefined) {
                throw new base_1.RequiredError('departmentId', 'Required parameter departmentId was null or undefined when calling apiV1HospitalsHospitalIdDepartmentsDepartmentIdPut.');
            }
            var localVarPath = "/api/v1/hospitals/{hospitalId}/departments/{departmentId}"
                .replace("{" + "hospitalId" + "}", encodeURIComponent(String(hospitalId)))
                .replace("{" + "departmentId" + "}", encodeURIComponent(String(departmentId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            var needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * DepartmentApi - functional programming interface
 * @export
 */
exports.DepartmentApiFp = function (configuration) {
    return {
        /**
         * Sample request:        GET /api/v1/hospitals/departments
         * @summary Get all department.
         * @param {string} [id]
         * @param {string} [hospitalId]
         * @param {string} [hospitalName]
         * @param {string} [name]
         * @param {string} [additionalInfo]
         * @param {number} [page]
         * @param {number} [limit]
         * @param {Date} [lastRetrieved]
         * @param {boolean} [current]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsDepartmentsGet: function (id, hospitalId, hospitalName, name, additionalInfo, page, limit, lastRetrieved, current, options) {
            var localVarAxiosArgs = exports.DepartmentApiAxiosParamCreator(configuration).apiV1HospitalsDepartmentsGet(id, hospitalId, hospitalName, name, additionalInfo, page, limit, lastRetrieved, current, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        DELETE /api/v1/hospitals/1/departments/1
         * @summary Delete department.
         * @param {string} hospitalId
         * @param {string} departmentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdDepartmentsDepartmentIdDelete: function (hospitalId, departmentId, options) {
            var localVarAxiosArgs = exports.DepartmentApiAxiosParamCreator(configuration).apiV1HospitalsHospitalIdDepartmentsDepartmentIdDelete(hospitalId, departmentId, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        GET /api/v1/hospitals/1/departments/1
         * @summary Get department.
         * @param {string} hospitalId
         * @param {string} departmentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdDepartmentsDepartmentIdGet: function (hospitalId, departmentId, options) {
            var localVarAxiosArgs = exports.DepartmentApiAxiosParamCreator(configuration).apiV1HospitalsHospitalIdDepartmentsDepartmentIdGet(hospitalId, departmentId, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        POST /api/v1/hospitals/1/departments/1
         * @summary Create department.
         * @param {string} hospitalId
         * @param {string} departmentId
         * @param {CreateDepartmentCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdDepartmentsDepartmentIdPost: function (hospitalId, departmentId, body, options) {
            var localVarAxiosArgs = exports.DepartmentApiAxiosParamCreator(configuration).apiV1HospitalsHospitalIdDepartmentsDepartmentIdPost(hospitalId, departmentId, body, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:
         * @summary Update department.
         * @param {string} hospitalId
         * @param {string} departmentId
         * @param {UpdateDepartmentCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdDepartmentsDepartmentIdPut: function (hospitalId, departmentId, body, options) {
            var localVarAxiosArgs = exports.DepartmentApiAxiosParamCreator(configuration).apiV1HospitalsHospitalIdDepartmentsDepartmentIdPut(hospitalId, departmentId, body, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * DepartmentApi - factory interface
 * @export
 */
exports.DepartmentApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Sample request:        GET /api/v1/hospitals/departments
         * @summary Get all department.
         * @param {string} [id]
         * @param {string} [hospitalId]
         * @param {string} [hospitalName]
         * @param {string} [name]
         * @param {string} [additionalInfo]
         * @param {number} [page]
         * @param {number} [limit]
         * @param {Date} [lastRetrieved]
         * @param {boolean} [current]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsDepartmentsGet: function (id, hospitalId, hospitalName, name, additionalInfo, page, limit, lastRetrieved, current, options) {
            return exports.DepartmentApiFp(configuration).apiV1HospitalsDepartmentsGet(id, hospitalId, hospitalName, name, additionalInfo, page, limit, lastRetrieved, current, options)(axios, basePath);
        },
        /**
         * Sample request:        DELETE /api/v1/hospitals/1/departments/1
         * @summary Delete department.
         * @param {string} hospitalId
         * @param {string} departmentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdDepartmentsDepartmentIdDelete: function (hospitalId, departmentId, options) {
            return exports.DepartmentApiFp(configuration).apiV1HospitalsHospitalIdDepartmentsDepartmentIdDelete(hospitalId, departmentId, options)(axios, basePath);
        },
        /**
         * Sample request:        GET /api/v1/hospitals/1/departments/1
         * @summary Get department.
         * @param {string} hospitalId
         * @param {string} departmentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdDepartmentsDepartmentIdGet: function (hospitalId, departmentId, options) {
            return exports.DepartmentApiFp(configuration).apiV1HospitalsHospitalIdDepartmentsDepartmentIdGet(hospitalId, departmentId, options)(axios, basePath);
        },
        /**
         * Sample request:        POST /api/v1/hospitals/1/departments/1
         * @summary Create department.
         * @param {string} hospitalId
         * @param {string} departmentId
         * @param {CreateDepartmentCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdDepartmentsDepartmentIdPost: function (hospitalId, departmentId, body, options) {
            return exports.DepartmentApiFp(configuration).apiV1HospitalsHospitalIdDepartmentsDepartmentIdPost(hospitalId, departmentId, body, options)(axios, basePath);
        },
        /**
         * Sample request:
         * @summary Update department.
         * @param {string} hospitalId
         * @param {string} departmentId
         * @param {UpdateDepartmentCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdDepartmentsDepartmentIdPut: function (hospitalId, departmentId, body, options) {
            return exports.DepartmentApiFp(configuration).apiV1HospitalsHospitalIdDepartmentsDepartmentIdPut(hospitalId, departmentId, body, options)(axios, basePath);
        },
    };
};
/**
 * DepartmentApi - object-oriented interface
 * @export
 * @class DepartmentApi
 * @extends {BaseAPI}
 */
var DepartmentApi = /** @class */ (function (_super) {
    __extends(DepartmentApi, _super);
    function DepartmentApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Sample request:        GET /api/v1/hospitals/departments
     * @summary Get all department.
     * @param {string} [id]
     * @param {string} [hospitalId]
     * @param {string} [hospitalName]
     * @param {string} [name]
     * @param {string} [additionalInfo]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentApi
     */
    DepartmentApi.prototype.apiV1HospitalsDepartmentsGet = function (id, hospitalId, hospitalName, name, additionalInfo, page, limit, lastRetrieved, current, options) {
        return exports.DepartmentApiFp(this.configuration).apiV1HospitalsDepartmentsGet(id, hospitalId, hospitalName, name, additionalInfo, page, limit, lastRetrieved, current, options)(this.axios, this.basePath);
    };
    /**
     * Sample request:        DELETE /api/v1/hospitals/1/departments/1
     * @summary Delete department.
     * @param {string} hospitalId
     * @param {string} departmentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentApi
     */
    DepartmentApi.prototype.apiV1HospitalsHospitalIdDepartmentsDepartmentIdDelete = function (hospitalId, departmentId, options) {
        return exports.DepartmentApiFp(this.configuration).apiV1HospitalsHospitalIdDepartmentsDepartmentIdDelete(hospitalId, departmentId, options)(this.axios, this.basePath);
    };
    /**
     * Sample request:        GET /api/v1/hospitals/1/departments/1
     * @summary Get department.
     * @param {string} hospitalId
     * @param {string} departmentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentApi
     */
    DepartmentApi.prototype.apiV1HospitalsHospitalIdDepartmentsDepartmentIdGet = function (hospitalId, departmentId, options) {
        return exports.DepartmentApiFp(this.configuration).apiV1HospitalsHospitalIdDepartmentsDepartmentIdGet(hospitalId, departmentId, options)(this.axios, this.basePath);
    };
    /**
     * Sample request:        POST /api/v1/hospitals/1/departments/1
     * @summary Create department.
     * @param {string} hospitalId
     * @param {string} departmentId
     * @param {CreateDepartmentCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentApi
     */
    DepartmentApi.prototype.apiV1HospitalsHospitalIdDepartmentsDepartmentIdPost = function (hospitalId, departmentId, body, options) {
        return exports.DepartmentApiFp(this.configuration).apiV1HospitalsHospitalIdDepartmentsDepartmentIdPost(hospitalId, departmentId, body, options)(this.axios, this.basePath);
    };
    /**
     * Sample request:
     * @summary Update department.
     * @param {string} hospitalId
     * @param {string} departmentId
     * @param {UpdateDepartmentCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentApi
     */
    DepartmentApi.prototype.apiV1HospitalsHospitalIdDepartmentsDepartmentIdPut = function (hospitalId, departmentId, body, options) {
        return exports.DepartmentApiFp(this.configuration).apiV1HospitalsHospitalIdDepartmentsDepartmentIdPut(hospitalId, departmentId, body, options)(this.axios, this.basePath);
    };
    return DepartmentApi;
}(base_1.BaseAPI));
exports.DepartmentApi = DepartmentApi;
/**
 * DevicesApi - axios parameter creator
 * @export
 */
exports.DevicesApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Delete device.
         * @param {string} deviceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DevicesDeviceIdDelete: function (deviceId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'deviceId' is not null or undefined
            if (deviceId === null || deviceId === undefined) {
                throw new base_1.RequiredError('deviceId', 'Required parameter deviceId was null or undefined when calling apiV1DevicesDeviceIdDelete.');
            }
            var localVarPath = "/api/v1/devices/{deviceId}"
                .replace("{" + "deviceId" + "}", encodeURIComponent(String(deviceId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get device.
         * @param {string} deviceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DevicesDeviceIdGet: function (deviceId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'deviceId' is not null or undefined
            if (deviceId === null || deviceId === undefined) {
                throw new base_1.RequiredError('deviceId', 'Required parameter deviceId was null or undefined when calling apiV1DevicesDeviceIdGet.');
            }
            var localVarPath = "/api/v1/devices/{deviceId}"
                .replace("{" + "deviceId" + "}", encodeURIComponent(String(deviceId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Create device login.
         * @param {string} deviceId
         * @param {CreateDeviceLoginCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DevicesDeviceIdLoginsPost: function (deviceId, body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'deviceId' is not null or undefined
            if (deviceId === null || deviceId === undefined) {
                throw new base_1.RequiredError('deviceId', 'Required parameter deviceId was null or undefined when calling apiV1DevicesDeviceIdLoginsPost.');
            }
            var localVarPath = "/api/v1/devices/{deviceId}/logins"
                .replace("{" + "deviceId" + "}", encodeURIComponent(String(deviceId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            var needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update device.
         * @param {string} deviceId
         * @param {UpdateDeviceCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DevicesDeviceIdPut: function (deviceId, body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'deviceId' is not null or undefined
            if (deviceId === null || deviceId === undefined) {
                throw new base_1.RequiredError('deviceId', 'Required parameter deviceId was null or undefined when calling apiV1DevicesDeviceIdPut.');
            }
            var localVarPath = "/api/v1/devices/{deviceId}"
                .replace("{" + "deviceId" + "}", encodeURIComponent(String(deviceId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            var needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Create device.
         * @param {CreateDeviceCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DevicesPost: function (body, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/api/v1/devices";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            var needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * DevicesApi - functional programming interface
 * @export
 */
exports.DevicesApiFp = function (configuration) {
    return {
        /**
         *
         * @summary Delete device.
         * @param {string} deviceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DevicesDeviceIdDelete: function (deviceId, options) {
            var localVarAxiosArgs = exports.DevicesApiAxiosParamCreator(configuration).apiV1DevicesDeviceIdDelete(deviceId, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Get device.
         * @param {string} deviceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DevicesDeviceIdGet: function (deviceId, options) {
            var localVarAxiosArgs = exports.DevicesApiAxiosParamCreator(configuration).apiV1DevicesDeviceIdGet(deviceId, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Create device login.
         * @param {string} deviceId
         * @param {CreateDeviceLoginCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DevicesDeviceIdLoginsPost: function (deviceId, body, options) {
            var localVarAxiosArgs = exports.DevicesApiAxiosParamCreator(configuration).apiV1DevicesDeviceIdLoginsPost(deviceId, body, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Update device.
         * @param {string} deviceId
         * @param {UpdateDeviceCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DevicesDeviceIdPut: function (deviceId, body, options) {
            var localVarAxiosArgs = exports.DevicesApiAxiosParamCreator(configuration).apiV1DevicesDeviceIdPut(deviceId, body, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Create device.
         * @param {CreateDeviceCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DevicesPost: function (body, options) {
            var localVarAxiosArgs = exports.DevicesApiAxiosParamCreator(configuration).apiV1DevicesPost(body, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * DevicesApi - factory interface
 * @export
 */
exports.DevicesApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary Delete device.
         * @param {string} deviceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DevicesDeviceIdDelete: function (deviceId, options) {
            return exports.DevicesApiFp(configuration).apiV1DevicesDeviceIdDelete(deviceId, options)(axios, basePath);
        },
        /**
         *
         * @summary Get device.
         * @param {string} deviceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DevicesDeviceIdGet: function (deviceId, options) {
            return exports.DevicesApiFp(configuration).apiV1DevicesDeviceIdGet(deviceId, options)(axios, basePath);
        },
        /**
         *
         * @summary Create device login.
         * @param {string} deviceId
         * @param {CreateDeviceLoginCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DevicesDeviceIdLoginsPost: function (deviceId, body, options) {
            return exports.DevicesApiFp(configuration).apiV1DevicesDeviceIdLoginsPost(deviceId, body, options)(axios, basePath);
        },
        /**
         *
         * @summary Update device.
         * @param {string} deviceId
         * @param {UpdateDeviceCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DevicesDeviceIdPut: function (deviceId, body, options) {
            return exports.DevicesApiFp(configuration).apiV1DevicesDeviceIdPut(deviceId, body, options)(axios, basePath);
        },
        /**
         *
         * @summary Create device.
         * @param {CreateDeviceCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DevicesPost: function (body, options) {
            return exports.DevicesApiFp(configuration).apiV1DevicesPost(body, options)(axios, basePath);
        },
    };
};
/**
 * DevicesApi - object-oriented interface
 * @export
 * @class DevicesApi
 * @extends {BaseAPI}
 */
var DevicesApi = /** @class */ (function (_super) {
    __extends(DevicesApi, _super);
    function DevicesApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Delete device.
     * @param {string} deviceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    DevicesApi.prototype.apiV1DevicesDeviceIdDelete = function (deviceId, options) {
        return exports.DevicesApiFp(this.configuration).apiV1DevicesDeviceIdDelete(deviceId, options)(this.axios, this.basePath);
    };
    /**
     *
     * @summary Get device.
     * @param {string} deviceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    DevicesApi.prototype.apiV1DevicesDeviceIdGet = function (deviceId, options) {
        return exports.DevicesApiFp(this.configuration).apiV1DevicesDeviceIdGet(deviceId, options)(this.axios, this.basePath);
    };
    /**
     *
     * @summary Create device login.
     * @param {string} deviceId
     * @param {CreateDeviceLoginCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    DevicesApi.prototype.apiV1DevicesDeviceIdLoginsPost = function (deviceId, body, options) {
        return exports.DevicesApiFp(this.configuration).apiV1DevicesDeviceIdLoginsPost(deviceId, body, options)(this.axios, this.basePath);
    };
    /**
     *
     * @summary Update device.
     * @param {string} deviceId
     * @param {UpdateDeviceCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    DevicesApi.prototype.apiV1DevicesDeviceIdPut = function (deviceId, body, options) {
        return exports.DevicesApiFp(this.configuration).apiV1DevicesDeviceIdPut(deviceId, body, options)(this.axios, this.basePath);
    };
    /**
     *
     * @summary Create device.
     * @param {CreateDeviceCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    DevicesApi.prototype.apiV1DevicesPost = function (body, options) {
        return exports.DevicesApiFp(this.configuration).apiV1DevicesPost(body, options)(this.axios, this.basePath);
    };
    return DevicesApi;
}(base_1.BaseAPI));
exports.DevicesApi = DevicesApi;
/**
 * DoctorCertificatesApi - axios parameter creator
 * @export
 */
exports.DoctorCertificatesApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Sample request:        GET /api/v1/doctors/certificates
         * @summary Get all certificates.
         * @param {string} [id]
         * @param {string} [doctorId]
         * @param {string} [doctorName]
         * @param {string} [certificate]
         * @param {Date} [activeFrom]
         * @param {Date} [activeTo]
         * @param {number} [page]
         * @param {number} [limit]
         * @param {Date} [lastRetrieved]
         * @param {boolean} [current]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DoctorsCertificatesGet: function (id, doctorId, doctorName, certificate, activeFrom, activeTo, page, limit, lastRetrieved, current, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/api/v1/doctors/certificates";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }
            if (doctorId !== undefined) {
                localVarQueryParameter['DoctorId'] = doctorId;
            }
            if (doctorName !== undefined) {
                localVarQueryParameter['DoctorName'] = doctorName;
            }
            if (certificate !== undefined) {
                localVarQueryParameter['Certificate'] = certificate;
            }
            if (activeFrom !== undefined) {
                localVarQueryParameter['ActiveFrom'] = (activeFrom instanceof Date) ?
                    activeFrom.toISOString() :
                    activeFrom;
            }
            if (activeTo !== undefined) {
                localVarQueryParameter['ActiveTo'] = (activeTo instanceof Date) ?
                    activeTo.toISOString() :
                    activeTo;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (lastRetrieved !== undefined) {
                localVarQueryParameter['lastRetrieved'] = (lastRetrieved instanceof Date) ?
                    lastRetrieved.toISOString() :
                    lastRetrieved;
            }
            if (current !== undefined) {
                localVarQueryParameter['Current'] = current;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        DELETE /api/v1/doctors/1/certificates/1
         * @summary Delete certificate.
         * @param {string} doctorId
         * @param {string} certificateId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DoctorsDoctorIdCertificatesCertificateIdDelete: function (doctorId, certificateId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'doctorId' is not null or undefined
            if (doctorId === null || doctorId === undefined) {
                throw new base_1.RequiredError('doctorId', 'Required parameter doctorId was null or undefined when calling apiV1DoctorsDoctorIdCertificatesCertificateIdDelete.');
            }
            // verify required parameter 'certificateId' is not null or undefined
            if (certificateId === null || certificateId === undefined) {
                throw new base_1.RequiredError('certificateId', 'Required parameter certificateId was null or undefined when calling apiV1DoctorsDoctorIdCertificatesCertificateIdDelete.');
            }
            var localVarPath = "/api/v1/doctors/{doctorId}/certificates/{certificateId}"
                .replace("{" + "doctorId" + "}", encodeURIComponent(String(doctorId)))
                .replace("{" + "certificateId" + "}", encodeURIComponent(String(certificateId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        GET /api/v1/doctors/1/certificates/1
         * @summary Get certificate.
         * @param {string} doctorId
         * @param {string} certificateId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DoctorsDoctorIdCertificatesCertificateIdGet: function (doctorId, certificateId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'doctorId' is not null or undefined
            if (doctorId === null || doctorId === undefined) {
                throw new base_1.RequiredError('doctorId', 'Required parameter doctorId was null or undefined when calling apiV1DoctorsDoctorIdCertificatesCertificateIdGet.');
            }
            // verify required parameter 'certificateId' is not null or undefined
            if (certificateId === null || certificateId === undefined) {
                throw new base_1.RequiredError('certificateId', 'Required parameter certificateId was null or undefined when calling apiV1DoctorsDoctorIdCertificatesCertificateIdGet.');
            }
            var localVarPath = "/api/v1/doctors/{doctorId}/certificates/{certificateId}"
                .replace("{" + "doctorId" + "}", encodeURIComponent(String(doctorId)))
                .replace("{" + "certificateId" + "}", encodeURIComponent(String(certificateId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:
         * @summary Update department.
         * @param {string} doctorId
         * @param {string} certificateId
         * @param {UpdateDoctorCertificateCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DoctorsDoctorIdCertificatesCertificateIdPut: function (doctorId, certificateId, body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'doctorId' is not null or undefined
            if (doctorId === null || doctorId === undefined) {
                throw new base_1.RequiredError('doctorId', 'Required parameter doctorId was null or undefined when calling apiV1DoctorsDoctorIdCertificatesCertificateIdPut.');
            }
            // verify required parameter 'certificateId' is not null or undefined
            if (certificateId === null || certificateId === undefined) {
                throw new base_1.RequiredError('certificateId', 'Required parameter certificateId was null or undefined when calling apiV1DoctorsDoctorIdCertificatesCertificateIdPut.');
            }
            var localVarPath = "/api/v1/doctors/{doctorId}/certificates/{certificateId}"
                .replace("{" + "doctorId" + "}", encodeURIComponent(String(doctorId)))
                .replace("{" + "certificateId" + "}", encodeURIComponent(String(certificateId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            var needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        POST /api/v1/doctors/1/certificates/1
         * @summary Create certificate.
         * @param {string} doctorId
         * @param {CreateDoctorCertificateCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DoctorsDoctorIdCertificatesPost: function (doctorId, body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'doctorId' is not null or undefined
            if (doctorId === null || doctorId === undefined) {
                throw new base_1.RequiredError('doctorId', 'Required parameter doctorId was null or undefined when calling apiV1DoctorsDoctorIdCertificatesPost.');
            }
            var localVarPath = "/api/v1/doctors/{doctorId}/certificates"
                .replace("{" + "doctorId" + "}", encodeURIComponent(String(doctorId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            var needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * DoctorCertificatesApi - functional programming interface
 * @export
 */
exports.DoctorCertificatesApiFp = function (configuration) {
    return {
        /**
         * Sample request:        GET /api/v1/doctors/certificates
         * @summary Get all certificates.
         * @param {string} [id]
         * @param {string} [doctorId]
         * @param {string} [doctorName]
         * @param {string} [certificate]
         * @param {Date} [activeFrom]
         * @param {Date} [activeTo]
         * @param {number} [page]
         * @param {number} [limit]
         * @param {Date} [lastRetrieved]
         * @param {boolean} [current]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DoctorsCertificatesGet: function (id, doctorId, doctorName, certificate, activeFrom, activeTo, page, limit, lastRetrieved, current, options) {
            var localVarAxiosArgs = exports.DoctorCertificatesApiAxiosParamCreator(configuration).apiV1DoctorsCertificatesGet(id, doctorId, doctorName, certificate, activeFrom, activeTo, page, limit, lastRetrieved, current, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        DELETE /api/v1/doctors/1/certificates/1
         * @summary Delete certificate.
         * @param {string} doctorId
         * @param {string} certificateId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DoctorsDoctorIdCertificatesCertificateIdDelete: function (doctorId, certificateId, options) {
            var localVarAxiosArgs = exports.DoctorCertificatesApiAxiosParamCreator(configuration).apiV1DoctorsDoctorIdCertificatesCertificateIdDelete(doctorId, certificateId, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        GET /api/v1/doctors/1/certificates/1
         * @summary Get certificate.
         * @param {string} doctorId
         * @param {string} certificateId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DoctorsDoctorIdCertificatesCertificateIdGet: function (doctorId, certificateId, options) {
            var localVarAxiosArgs = exports.DoctorCertificatesApiAxiosParamCreator(configuration).apiV1DoctorsDoctorIdCertificatesCertificateIdGet(doctorId, certificateId, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:
         * @summary Update department.
         * @param {string} doctorId
         * @param {string} certificateId
         * @param {UpdateDoctorCertificateCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DoctorsDoctorIdCertificatesCertificateIdPut: function (doctorId, certificateId, body, options) {
            var localVarAxiosArgs = exports.DoctorCertificatesApiAxiosParamCreator(configuration).apiV1DoctorsDoctorIdCertificatesCertificateIdPut(doctorId, certificateId, body, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        POST /api/v1/doctors/1/certificates/1
         * @summary Create certificate.
         * @param {string} doctorId
         * @param {CreateDoctorCertificateCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DoctorsDoctorIdCertificatesPost: function (doctorId, body, options) {
            var localVarAxiosArgs = exports.DoctorCertificatesApiAxiosParamCreator(configuration).apiV1DoctorsDoctorIdCertificatesPost(doctorId, body, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * DoctorCertificatesApi - factory interface
 * @export
 */
exports.DoctorCertificatesApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Sample request:        GET /api/v1/doctors/certificates
         * @summary Get all certificates.
         * @param {string} [id]
         * @param {string} [doctorId]
         * @param {string} [doctorName]
         * @param {string} [certificate]
         * @param {Date} [activeFrom]
         * @param {Date} [activeTo]
         * @param {number} [page]
         * @param {number} [limit]
         * @param {Date} [lastRetrieved]
         * @param {boolean} [current]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DoctorsCertificatesGet: function (id, doctorId, doctorName, certificate, activeFrom, activeTo, page, limit, lastRetrieved, current, options) {
            return exports.DoctorCertificatesApiFp(configuration).apiV1DoctorsCertificatesGet(id, doctorId, doctorName, certificate, activeFrom, activeTo, page, limit, lastRetrieved, current, options)(axios, basePath);
        },
        /**
         * Sample request:        DELETE /api/v1/doctors/1/certificates/1
         * @summary Delete certificate.
         * @param {string} doctorId
         * @param {string} certificateId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DoctorsDoctorIdCertificatesCertificateIdDelete: function (doctorId, certificateId, options) {
            return exports.DoctorCertificatesApiFp(configuration).apiV1DoctorsDoctorIdCertificatesCertificateIdDelete(doctorId, certificateId, options)(axios, basePath);
        },
        /**
         * Sample request:        GET /api/v1/doctors/1/certificates/1
         * @summary Get certificate.
         * @param {string} doctorId
         * @param {string} certificateId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DoctorsDoctorIdCertificatesCertificateIdGet: function (doctorId, certificateId, options) {
            return exports.DoctorCertificatesApiFp(configuration).apiV1DoctorsDoctorIdCertificatesCertificateIdGet(doctorId, certificateId, options)(axios, basePath);
        },
        /**
         * Sample request:
         * @summary Update department.
         * @param {string} doctorId
         * @param {string} certificateId
         * @param {UpdateDoctorCertificateCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DoctorsDoctorIdCertificatesCertificateIdPut: function (doctorId, certificateId, body, options) {
            return exports.DoctorCertificatesApiFp(configuration).apiV1DoctorsDoctorIdCertificatesCertificateIdPut(doctorId, certificateId, body, options)(axios, basePath);
        },
        /**
         * Sample request:        POST /api/v1/doctors/1/certificates/1
         * @summary Create certificate.
         * @param {string} doctorId
         * @param {CreateDoctorCertificateCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DoctorsDoctorIdCertificatesPost: function (doctorId, body, options) {
            return exports.DoctorCertificatesApiFp(configuration).apiV1DoctorsDoctorIdCertificatesPost(doctorId, body, options)(axios, basePath);
        },
    };
};
/**
 * DoctorCertificatesApi - object-oriented interface
 * @export
 * @class DoctorCertificatesApi
 * @extends {BaseAPI}
 */
var DoctorCertificatesApi = /** @class */ (function (_super) {
    __extends(DoctorCertificatesApi, _super);
    function DoctorCertificatesApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Sample request:        GET /api/v1/doctors/certificates
     * @summary Get all certificates.
     * @param {string} [id]
     * @param {string} [doctorId]
     * @param {string} [doctorName]
     * @param {string} [certificate]
     * @param {Date} [activeFrom]
     * @param {Date} [activeTo]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DoctorCertificatesApi
     */
    DoctorCertificatesApi.prototype.apiV1DoctorsCertificatesGet = function (id, doctorId, doctorName, certificate, activeFrom, activeTo, page, limit, lastRetrieved, current, options) {
        return exports.DoctorCertificatesApiFp(this.configuration).apiV1DoctorsCertificatesGet(id, doctorId, doctorName, certificate, activeFrom, activeTo, page, limit, lastRetrieved, current, options)(this.axios, this.basePath);
    };
    /**
     * Sample request:        DELETE /api/v1/doctors/1/certificates/1
     * @summary Delete certificate.
     * @param {string} doctorId
     * @param {string} certificateId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DoctorCertificatesApi
     */
    DoctorCertificatesApi.prototype.apiV1DoctorsDoctorIdCertificatesCertificateIdDelete = function (doctorId, certificateId, options) {
        return exports.DoctorCertificatesApiFp(this.configuration).apiV1DoctorsDoctorIdCertificatesCertificateIdDelete(doctorId, certificateId, options)(this.axios, this.basePath);
    };
    /**
     * Sample request:        GET /api/v1/doctors/1/certificates/1
     * @summary Get certificate.
     * @param {string} doctorId
     * @param {string} certificateId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DoctorCertificatesApi
     */
    DoctorCertificatesApi.prototype.apiV1DoctorsDoctorIdCertificatesCertificateIdGet = function (doctorId, certificateId, options) {
        return exports.DoctorCertificatesApiFp(this.configuration).apiV1DoctorsDoctorIdCertificatesCertificateIdGet(doctorId, certificateId, options)(this.axios, this.basePath);
    };
    /**
     * Sample request:
     * @summary Update department.
     * @param {string} doctorId
     * @param {string} certificateId
     * @param {UpdateDoctorCertificateCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DoctorCertificatesApi
     */
    DoctorCertificatesApi.prototype.apiV1DoctorsDoctorIdCertificatesCertificateIdPut = function (doctorId, certificateId, body, options) {
        return exports.DoctorCertificatesApiFp(this.configuration).apiV1DoctorsDoctorIdCertificatesCertificateIdPut(doctorId, certificateId, body, options)(this.axios, this.basePath);
    };
    /**
     * Sample request:        POST /api/v1/doctors/1/certificates/1
     * @summary Create certificate.
     * @param {string} doctorId
     * @param {CreateDoctorCertificateCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DoctorCertificatesApi
     */
    DoctorCertificatesApi.prototype.apiV1DoctorsDoctorIdCertificatesPost = function (doctorId, body, options) {
        return exports.DoctorCertificatesApiFp(this.configuration).apiV1DoctorsDoctorIdCertificatesPost(doctorId, body, options)(this.axios, this.basePath);
    };
    return DoctorCertificatesApi;
}(base_1.BaseAPI));
exports.DoctorCertificatesApi = DoctorCertificatesApi;
/**
 * DoctorReviewsApi - axios parameter creator
 * @export
 */
exports.DoctorReviewsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Sample request:        DELETE /api/v1/doctors/1/reviews/1
         * @summary Delete review.
         * @param {string} doctorId
         * @param {string} patientId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DoctorsDoctorIdReviewsPatientIdDelete: function (doctorId, patientId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'doctorId' is not null or undefined
            if (doctorId === null || doctorId === undefined) {
                throw new base_1.RequiredError('doctorId', 'Required parameter doctorId was null or undefined when calling apiV1DoctorsDoctorIdReviewsPatientIdDelete.');
            }
            // verify required parameter 'patientId' is not null or undefined
            if (patientId === null || patientId === undefined) {
                throw new base_1.RequiredError('patientId', 'Required parameter patientId was null or undefined when calling apiV1DoctorsDoctorIdReviewsPatientIdDelete.');
            }
            var localVarPath = "/api/v1/doctors/{doctorId}/reviews/{patientId}"
                .replace("{" + "doctorId" + "}", encodeURIComponent(String(doctorId)))
                .replace("{" + "patientId" + "}", encodeURIComponent(String(patientId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        GET /api/v1/doctors/1/reviews/1
         * @summary Get review.
         * @param {string} doctorId
         * @param {string} patientId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DoctorsDoctorIdReviewsPatientIdGet: function (doctorId, patientId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'doctorId' is not null or undefined
            if (doctorId === null || doctorId === undefined) {
                throw new base_1.RequiredError('doctorId', 'Required parameter doctorId was null or undefined when calling apiV1DoctorsDoctorIdReviewsPatientIdGet.');
            }
            // verify required parameter 'patientId' is not null or undefined
            if (patientId === null || patientId === undefined) {
                throw new base_1.RequiredError('patientId', 'Required parameter patientId was null or undefined when calling apiV1DoctorsDoctorIdReviewsPatientIdGet.');
            }
            var localVarPath = "/api/v1/doctors/{doctorId}/reviews/{patientId}"
                .replace("{" + "doctorId" + "}", encodeURIComponent(String(doctorId)))
                .replace("{" + "patientId" + "}", encodeURIComponent(String(patientId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:
         * @summary Update review.
         * @param {string} doctorId
         * @param {string} patientId
         * @param {UpdateDoctorReviewCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DoctorsDoctorIdReviewsPatientIdPut: function (doctorId, patientId, body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'doctorId' is not null or undefined
            if (doctorId === null || doctorId === undefined) {
                throw new base_1.RequiredError('doctorId', 'Required parameter doctorId was null or undefined when calling apiV1DoctorsDoctorIdReviewsPatientIdPut.');
            }
            // verify required parameter 'patientId' is not null or undefined
            if (patientId === null || patientId === undefined) {
                throw new base_1.RequiredError('patientId', 'Required parameter patientId was null or undefined when calling apiV1DoctorsDoctorIdReviewsPatientIdPut.');
            }
            var localVarPath = "/api/v1/doctors/{doctorId}/reviews/{patientId}"
                .replace("{" + "doctorId" + "}", encodeURIComponent(String(doctorId)))
                .replace("{" + "patientId" + "}", encodeURIComponent(String(patientId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            var needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        POST /api/v1/doctors/1/reviews/1
         * @summary Create review.
         * @param {string} doctorId
         * @param {string} patientId
         * @param {CreateDoctorReviewCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DoctorsDoctorIdReviewsPost: function (doctorId, patientId, body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'doctorId' is not null or undefined
            if (doctorId === null || doctorId === undefined) {
                throw new base_1.RequiredError('doctorId', 'Required parameter doctorId was null or undefined when calling apiV1DoctorsDoctorIdReviewsPost.');
            }
            // verify required parameter 'patientId' is not null or undefined
            if (patientId === null || patientId === undefined) {
                throw new base_1.RequiredError('patientId', 'Required parameter patientId was null or undefined when calling apiV1DoctorsDoctorIdReviewsPost.');
            }
            var localVarPath = "/api/v1/doctors/{doctorId}/reviews"
                .replace("{" + "doctorId" + "}", encodeURIComponent(String(doctorId)))
                .replace("{" + "patientId" + "}", encodeURIComponent(String(patientId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            var needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        GET /api/v1/doctors/reviews
         * @summary Get all reviews.
         * @param {string} [doctorId]
         * @param {string} [doctorName]
         * @param {string} [patientId]
         * @param {string} [patientName]
         * @param {string} [body]
         * @param {boolean} [recommended]
         * @param {object} [reviewCategory]
         * @param {number} [rate]
         * @param {Date} [created]
         * @param {number} [page]
         * @param {number} [limit]
         * @param {Date} [lastRetrieved]
         * @param {boolean} [current]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DoctorsReviewsGet: function (doctorId, doctorName, patientId, patientName, body, recommended, reviewCategory, rate, created, page, limit, lastRetrieved, current, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/api/v1/doctors/reviews";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (doctorId !== undefined) {
                localVarQueryParameter['DoctorId'] = doctorId;
            }
            if (doctorName !== undefined) {
                localVarQueryParameter['DoctorName'] = doctorName;
            }
            if (patientId !== undefined) {
                localVarQueryParameter['PatientId'] = patientId;
            }
            if (patientName !== undefined) {
                localVarQueryParameter['PatientName'] = patientName;
            }
            if (body !== undefined) {
                localVarQueryParameter['Body'] = body;
            }
            if (recommended !== undefined) {
                localVarQueryParameter['Recommended'] = recommended;
            }
            if (reviewCategory !== undefined) {
                localVarQueryParameter['ReviewCategory'] = reviewCategory;
            }
            if (rate !== undefined) {
                localVarQueryParameter['Rate'] = rate;
            }
            if (created !== undefined) {
                localVarQueryParameter['Created'] = (created instanceof Date) ?
                    created.toISOString() :
                    created;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (lastRetrieved !== undefined) {
                localVarQueryParameter['lastRetrieved'] = (lastRetrieved instanceof Date) ?
                    lastRetrieved.toISOString() :
                    lastRetrieved;
            }
            if (current !== undefined) {
                localVarQueryParameter['Current'] = current;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * DoctorReviewsApi - functional programming interface
 * @export
 */
exports.DoctorReviewsApiFp = function (configuration) {
    return {
        /**
         * Sample request:        DELETE /api/v1/doctors/1/reviews/1
         * @summary Delete review.
         * @param {string} doctorId
         * @param {string} patientId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DoctorsDoctorIdReviewsPatientIdDelete: function (doctorId, patientId, options) {
            var localVarAxiosArgs = exports.DoctorReviewsApiAxiosParamCreator(configuration).apiV1DoctorsDoctorIdReviewsPatientIdDelete(doctorId, patientId, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        GET /api/v1/doctors/1/reviews/1
         * @summary Get review.
         * @param {string} doctorId
         * @param {string} patientId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DoctorsDoctorIdReviewsPatientIdGet: function (doctorId, patientId, options) {
            var localVarAxiosArgs = exports.DoctorReviewsApiAxiosParamCreator(configuration).apiV1DoctorsDoctorIdReviewsPatientIdGet(doctorId, patientId, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:
         * @summary Update review.
         * @param {string} doctorId
         * @param {string} patientId
         * @param {UpdateDoctorReviewCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DoctorsDoctorIdReviewsPatientIdPut: function (doctorId, patientId, body, options) {
            var localVarAxiosArgs = exports.DoctorReviewsApiAxiosParamCreator(configuration).apiV1DoctorsDoctorIdReviewsPatientIdPut(doctorId, patientId, body, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        POST /api/v1/doctors/1/reviews/1
         * @summary Create review.
         * @param {string} doctorId
         * @param {string} patientId
         * @param {CreateDoctorReviewCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DoctorsDoctorIdReviewsPost: function (doctorId, patientId, body, options) {
            var localVarAxiosArgs = exports.DoctorReviewsApiAxiosParamCreator(configuration).apiV1DoctorsDoctorIdReviewsPost(doctorId, patientId, body, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        GET /api/v1/doctors/reviews
         * @summary Get all reviews.
         * @param {string} [doctorId]
         * @param {string} [doctorName]
         * @param {string} [patientId]
         * @param {string} [patientName]
         * @param {string} [body]
         * @param {boolean} [recommended]
         * @param {object} [reviewCategory]
         * @param {number} [rate]
         * @param {Date} [created]
         * @param {number} [page]
         * @param {number} [limit]
         * @param {Date} [lastRetrieved]
         * @param {boolean} [current]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DoctorsReviewsGet: function (doctorId, doctorName, patientId, patientName, body, recommended, reviewCategory, rate, created, page, limit, lastRetrieved, current, options) {
            var localVarAxiosArgs = exports.DoctorReviewsApiAxiosParamCreator(configuration).apiV1DoctorsReviewsGet(doctorId, doctorName, patientId, patientName, body, recommended, reviewCategory, rate, created, page, limit, lastRetrieved, current, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * DoctorReviewsApi - factory interface
 * @export
 */
exports.DoctorReviewsApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Sample request:        DELETE /api/v1/doctors/1/reviews/1
         * @summary Delete review.
         * @param {string} doctorId
         * @param {string} patientId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DoctorsDoctorIdReviewsPatientIdDelete: function (doctorId, patientId, options) {
            return exports.DoctorReviewsApiFp(configuration).apiV1DoctorsDoctorIdReviewsPatientIdDelete(doctorId, patientId, options)(axios, basePath);
        },
        /**
         * Sample request:        GET /api/v1/doctors/1/reviews/1
         * @summary Get review.
         * @param {string} doctorId
         * @param {string} patientId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DoctorsDoctorIdReviewsPatientIdGet: function (doctorId, patientId, options) {
            return exports.DoctorReviewsApiFp(configuration).apiV1DoctorsDoctorIdReviewsPatientIdGet(doctorId, patientId, options)(axios, basePath);
        },
        /**
         * Sample request:
         * @summary Update review.
         * @param {string} doctorId
         * @param {string} patientId
         * @param {UpdateDoctorReviewCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DoctorsDoctorIdReviewsPatientIdPut: function (doctorId, patientId, body, options) {
            return exports.DoctorReviewsApiFp(configuration).apiV1DoctorsDoctorIdReviewsPatientIdPut(doctorId, patientId, body, options)(axios, basePath);
        },
        /**
         * Sample request:        POST /api/v1/doctors/1/reviews/1
         * @summary Create review.
         * @param {string} doctorId
         * @param {string} patientId
         * @param {CreateDoctorReviewCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DoctorsDoctorIdReviewsPost: function (doctorId, patientId, body, options) {
            return exports.DoctorReviewsApiFp(configuration).apiV1DoctorsDoctorIdReviewsPost(doctorId, patientId, body, options)(axios, basePath);
        },
        /**
         * Sample request:        GET /api/v1/doctors/reviews
         * @summary Get all reviews.
         * @param {string} [doctorId]
         * @param {string} [doctorName]
         * @param {string} [patientId]
         * @param {string} [patientName]
         * @param {string} [body]
         * @param {boolean} [recommended]
         * @param {object} [reviewCategory]
         * @param {number} [rate]
         * @param {Date} [created]
         * @param {number} [page]
         * @param {number} [limit]
         * @param {Date} [lastRetrieved]
         * @param {boolean} [current]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DoctorsReviewsGet: function (doctorId, doctorName, patientId, patientName, body, recommended, reviewCategory, rate, created, page, limit, lastRetrieved, current, options) {
            return exports.DoctorReviewsApiFp(configuration).apiV1DoctorsReviewsGet(doctorId, doctorName, patientId, patientName, body, recommended, reviewCategory, rate, created, page, limit, lastRetrieved, current, options)(axios, basePath);
        },
    };
};
/**
 * DoctorReviewsApi - object-oriented interface
 * @export
 * @class DoctorReviewsApi
 * @extends {BaseAPI}
 */
var DoctorReviewsApi = /** @class */ (function (_super) {
    __extends(DoctorReviewsApi, _super);
    function DoctorReviewsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Sample request:        DELETE /api/v1/doctors/1/reviews/1
     * @summary Delete review.
     * @param {string} doctorId
     * @param {string} patientId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DoctorReviewsApi
     */
    DoctorReviewsApi.prototype.apiV1DoctorsDoctorIdReviewsPatientIdDelete = function (doctorId, patientId, options) {
        return exports.DoctorReviewsApiFp(this.configuration).apiV1DoctorsDoctorIdReviewsPatientIdDelete(doctorId, patientId, options)(this.axios, this.basePath);
    };
    /**
     * Sample request:        GET /api/v1/doctors/1/reviews/1
     * @summary Get review.
     * @param {string} doctorId
     * @param {string} patientId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DoctorReviewsApi
     */
    DoctorReviewsApi.prototype.apiV1DoctorsDoctorIdReviewsPatientIdGet = function (doctorId, patientId, options) {
        return exports.DoctorReviewsApiFp(this.configuration).apiV1DoctorsDoctorIdReviewsPatientIdGet(doctorId, patientId, options)(this.axios, this.basePath);
    };
    /**
     * Sample request:
     * @summary Update review.
     * @param {string} doctorId
     * @param {string} patientId
     * @param {UpdateDoctorReviewCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DoctorReviewsApi
     */
    DoctorReviewsApi.prototype.apiV1DoctorsDoctorIdReviewsPatientIdPut = function (doctorId, patientId, body, options) {
        return exports.DoctorReviewsApiFp(this.configuration).apiV1DoctorsDoctorIdReviewsPatientIdPut(doctorId, patientId, body, options)(this.axios, this.basePath);
    };
    /**
     * Sample request:        POST /api/v1/doctors/1/reviews/1
     * @summary Create review.
     * @param {string} doctorId
     * @param {string} patientId
     * @param {CreateDoctorReviewCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DoctorReviewsApi
     */
    DoctorReviewsApi.prototype.apiV1DoctorsDoctorIdReviewsPost = function (doctorId, patientId, body, options) {
        return exports.DoctorReviewsApiFp(this.configuration).apiV1DoctorsDoctorIdReviewsPost(doctorId, patientId, body, options)(this.axios, this.basePath);
    };
    /**
     * Sample request:        GET /api/v1/doctors/reviews
     * @summary Get all reviews.
     * @param {string} [doctorId]
     * @param {string} [doctorName]
     * @param {string} [patientId]
     * @param {string} [patientName]
     * @param {string} [body]
     * @param {boolean} [recommended]
     * @param {object} [reviewCategory]
     * @param {number} [rate]
     * @param {Date} [created]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DoctorReviewsApi
     */
    DoctorReviewsApi.prototype.apiV1DoctorsReviewsGet = function (doctorId, doctorName, patientId, patientName, body, recommended, reviewCategory, rate, created, page, limit, lastRetrieved, current, options) {
        return exports.DoctorReviewsApiFp(this.configuration).apiV1DoctorsReviewsGet(doctorId, doctorName, patientId, patientName, body, recommended, reviewCategory, rate, created, page, limit, lastRetrieved, current, options)(this.axios, this.basePath);
    };
    return DoctorReviewsApi;
}(base_1.BaseAPI));
exports.DoctorReviewsApi = DoctorReviewsApi;
/**
 * DoctorSpecialtiesApi - axios parameter creator
 * @export
 */
exports.DoctorSpecialtiesApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Sample request:        POST /api/v1/doctors/1/specialty/1
         * @summary Link a doctor to a specialty.
         * @param {string} doctorId
         * @param {string} specialtyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DoctorsDoctorIdSpecialtySpecialtyIdPost: function (doctorId, specialtyId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'doctorId' is not null or undefined
            if (doctorId === null || doctorId === undefined) {
                throw new base_1.RequiredError('doctorId', 'Required parameter doctorId was null or undefined when calling apiV1DoctorsDoctorIdSpecialtySpecialtyIdPost.');
            }
            // verify required parameter 'specialtyId' is not null or undefined
            if (specialtyId === null || specialtyId === undefined) {
                throw new base_1.RequiredError('specialtyId', 'Required parameter specialtyId was null or undefined when calling apiV1DoctorsDoctorIdSpecialtySpecialtyIdPost.');
            }
            var localVarPath = "/api/v1/doctors/{doctorId}/specialty/{specialtyId}"
                .replace("{" + "doctorId" + "}", encodeURIComponent(String(doctorId)))
                .replace("{" + "specialtyId" + "}", encodeURIComponent(String(specialtyId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        DELETE /api/v1/doctors/1/specialty/1
         * @summary Remove link between the doctor and the specialty.
         * @param {string} doctorId
         * @param {string} specailtyId
         * @param {string} hospitalId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DoctorsHospitalIdDoctorsDoctorIdDelete: function (doctorId, specailtyId, hospitalId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'doctorId' is not null or undefined
            if (doctorId === null || doctorId === undefined) {
                throw new base_1.RequiredError('doctorId', 'Required parameter doctorId was null or undefined when calling apiV1DoctorsHospitalIdDoctorsDoctorIdDelete.');
            }
            // verify required parameter 'specailtyId' is not null or undefined
            if (specailtyId === null || specailtyId === undefined) {
                throw new base_1.RequiredError('specailtyId', 'Required parameter specailtyId was null or undefined when calling apiV1DoctorsHospitalIdDoctorsDoctorIdDelete.');
            }
            // verify required parameter 'hospitalId' is not null or undefined
            if (hospitalId === null || hospitalId === undefined) {
                throw new base_1.RequiredError('hospitalId', 'Required parameter hospitalId was null or undefined when calling apiV1DoctorsHospitalIdDoctorsDoctorIdDelete.');
            }
            var localVarPath = "/api/v1/doctors/{hospitalId}/doctors/{doctorId}"
                .replace("{" + "doctorId" + "}", encodeURIComponent(String(doctorId)))
                .replace("{" + "specailtyId" + "}", encodeURIComponent(String(specailtyId)))
                .replace("{" + "hospitalId" + "}", encodeURIComponent(String(hospitalId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * DoctorSpecialtiesApi - functional programming interface
 * @export
 */
exports.DoctorSpecialtiesApiFp = function (configuration) {
    return {
        /**
         * Sample request:        POST /api/v1/doctors/1/specialty/1
         * @summary Link a doctor to a specialty.
         * @param {string} doctorId
         * @param {string} specialtyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DoctorsDoctorIdSpecialtySpecialtyIdPost: function (doctorId, specialtyId, options) {
            var localVarAxiosArgs = exports.DoctorSpecialtiesApiAxiosParamCreator(configuration).apiV1DoctorsDoctorIdSpecialtySpecialtyIdPost(doctorId, specialtyId, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        DELETE /api/v1/doctors/1/specialty/1
         * @summary Remove link between the doctor and the specialty.
         * @param {string} doctorId
         * @param {string} specailtyId
         * @param {string} hospitalId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DoctorsHospitalIdDoctorsDoctorIdDelete: function (doctorId, specailtyId, hospitalId, options) {
            var localVarAxiosArgs = exports.DoctorSpecialtiesApiAxiosParamCreator(configuration).apiV1DoctorsHospitalIdDoctorsDoctorIdDelete(doctorId, specailtyId, hospitalId, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * DoctorSpecialtiesApi - factory interface
 * @export
 */
exports.DoctorSpecialtiesApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Sample request:        POST /api/v1/doctors/1/specialty/1
         * @summary Link a doctor to a specialty.
         * @param {string} doctorId
         * @param {string} specialtyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DoctorsDoctorIdSpecialtySpecialtyIdPost: function (doctorId, specialtyId, options) {
            return exports.DoctorSpecialtiesApiFp(configuration).apiV1DoctorsDoctorIdSpecialtySpecialtyIdPost(doctorId, specialtyId, options)(axios, basePath);
        },
        /**
         * Sample request:        DELETE /api/v1/doctors/1/specialty/1
         * @summary Remove link between the doctor and the specialty.
         * @param {string} doctorId
         * @param {string} specailtyId
         * @param {string} hospitalId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DoctorsHospitalIdDoctorsDoctorIdDelete: function (doctorId, specailtyId, hospitalId, options) {
            return exports.DoctorSpecialtiesApiFp(configuration).apiV1DoctorsHospitalIdDoctorsDoctorIdDelete(doctorId, specailtyId, hospitalId, options)(axios, basePath);
        },
    };
};
/**
 * DoctorSpecialtiesApi - object-oriented interface
 * @export
 * @class DoctorSpecialtiesApi
 * @extends {BaseAPI}
 */
var DoctorSpecialtiesApi = /** @class */ (function (_super) {
    __extends(DoctorSpecialtiesApi, _super);
    function DoctorSpecialtiesApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Sample request:        POST /api/v1/doctors/1/specialty/1
     * @summary Link a doctor to a specialty.
     * @param {string} doctorId
     * @param {string} specialtyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DoctorSpecialtiesApi
     */
    DoctorSpecialtiesApi.prototype.apiV1DoctorsDoctorIdSpecialtySpecialtyIdPost = function (doctorId, specialtyId, options) {
        return exports.DoctorSpecialtiesApiFp(this.configuration).apiV1DoctorsDoctorIdSpecialtySpecialtyIdPost(doctorId, specialtyId, options)(this.axios, this.basePath);
    };
    /**
     * Sample request:        DELETE /api/v1/doctors/1/specialty/1
     * @summary Remove link between the doctor and the specialty.
     * @param {string} doctorId
     * @param {string} specailtyId
     * @param {string} hospitalId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DoctorSpecialtiesApi
     */
    DoctorSpecialtiesApi.prototype.apiV1DoctorsHospitalIdDoctorsDoctorIdDelete = function (doctorId, specailtyId, hospitalId, options) {
        return exports.DoctorSpecialtiesApiFp(this.configuration).apiV1DoctorsHospitalIdDoctorsDoctorIdDelete(doctorId, specailtyId, hospitalId, options)(this.axios, this.basePath);
    };
    return DoctorSpecialtiesApi;
}(base_1.BaseAPI));
exports.DoctorSpecialtiesApi = DoctorSpecialtiesApi;
/**
 * DoctorsApi - axios parameter creator
 * @export
 */
exports.DoctorsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Sample request:        DELETE /api/v1/doctors/1
         * @summary Delete doctor.
         * @param {string} doctorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DoctorsDoctorIdDelete: function (doctorId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'doctorId' is not null or undefined
            if (doctorId === null || doctorId === undefined) {
                throw new base_1.RequiredError('doctorId', 'Required parameter doctorId was null or undefined when calling apiV1DoctorsDoctorIdDelete.');
            }
            var localVarPath = "/api/v1/doctors/{doctorId}"
                .replace("{" + "doctorId" + "}", encodeURIComponent(String(doctorId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        GET /api/v1/doctors/1
         * @summary Get hospital doctor.
         * @param {string} doctorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DoctorsDoctorIdGet: function (doctorId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'doctorId' is not null or undefined
            if (doctorId === null || doctorId === undefined) {
                throw new base_1.RequiredError('doctorId', 'Required parameter doctorId was null or undefined when calling apiV1DoctorsDoctorIdGet.');
            }
            var localVarPath = "/api/v1/doctors/{doctorId}"
                .replace("{" + "doctorId" + "}", encodeURIComponent(String(doctorId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        PUT /api/v1/doctors/1      {          \"firstName\": \"string\",          \"lastName\": \"string\",          \"photo\": \"string\",          \"locations\": [            {              \"locationType\": \"LivesIn\",              \"latitude\": 0,              \"longitude\": 0,              \"country\": \"string\",              \"state\": \"string\",              \"county\": \"string\",              \"city\": \"string\",              \"zipCode\": \"string\",              \"address\": \"string\"            }          ]      }
         * @summary Update hospital doctor.
         * @param {string} doctorId
         * @param {UpdateDoctorCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DoctorsDoctorIdPut: function (doctorId, body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'doctorId' is not null or undefined
            if (doctorId === null || doctorId === undefined) {
                throw new base_1.RequiredError('doctorId', 'Required parameter doctorId was null or undefined when calling apiV1DoctorsDoctorIdPut.');
            }
            var localVarPath = "/api/v1/doctors/{doctorId}"
                .replace("{" + "doctorId" + "}", encodeURIComponent(String(doctorId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            var needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get all hospital doctors.
         * @param {string} [countryId]
         * @param {string} [hospitalId]
         * @param {object} [marketingType]
         * @param {string} [specialtyId]
         * @param {string} [specialtyTypeId]
         * @param {boolean} [consultationEnabled]
         * @param {string} [exceptDoctorId]
         * @param {Array<string>} [exceptDoctorIds]
         * @param {string} [id]
         * @param {string} [fullname]
         * @param {string} [email]
         * @param {object} [gender]
         * @param {Date} [dateOfBirth]
         * @param {Date} [created]
         * @param {number} [page]
         * @param {number} [limit]
         * @param {Date} [lastRetrieved]
         * @param {boolean} [current]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DoctorsGet: function (countryId, hospitalId, marketingType, specialtyId, specialtyTypeId, consultationEnabled, exceptDoctorId, exceptDoctorIds, id, fullname, email, gender, dateOfBirth, created, page, limit, lastRetrieved, current, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/api/v1/doctors";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (countryId !== undefined) {
                localVarQueryParameter['CountryId'] = countryId;
            }
            if (hospitalId !== undefined) {
                localVarQueryParameter['HospitalId'] = hospitalId;
            }
            if (marketingType !== undefined) {
                localVarQueryParameter['MarketingType'] = marketingType;
            }
            if (specialtyId !== undefined) {
                localVarQueryParameter['SpecialtyId'] = specialtyId;
            }
            if (specialtyTypeId !== undefined) {
                localVarQueryParameter['SpecialtyTypeId'] = specialtyTypeId;
            }
            if (consultationEnabled !== undefined) {
                localVarQueryParameter['ConsultationEnabled'] = consultationEnabled;
            }
            if (exceptDoctorId !== undefined) {
                localVarQueryParameter['ExceptDoctorId'] = exceptDoctorId;
            }
            if (exceptDoctorIds) {
                localVarQueryParameter['ExceptDoctorIds'] = exceptDoctorIds.join(base_1.COLLECTION_FORMATS.csv);
            }
            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }
            if (fullname !== undefined) {
                localVarQueryParameter['Fullname'] = fullname;
            }
            if (email !== undefined) {
                localVarQueryParameter['Email'] = email;
            }
            if (gender !== undefined) {
                localVarQueryParameter['Gender'] = gender;
            }
            if (dateOfBirth !== undefined) {
                localVarQueryParameter['DateOfBirth'] = (dateOfBirth instanceof Date) ?
                    dateOfBirth.toISOString() :
                    dateOfBirth;
            }
            if (created !== undefined) {
                localVarQueryParameter['Created'] = (created instanceof Date) ?
                    created.toISOString() :
                    created;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (lastRetrieved !== undefined) {
                localVarQueryParameter['lastRetrieved'] = (lastRetrieved instanceof Date) ?
                    lastRetrieved.toISOString() :
                    lastRetrieved;
            }
            if (current !== undefined) {
                localVarQueryParameter['Current'] = current;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        POST /api/v1/doctors      {          \"userName\": \"cloudDoctor\",          \"email\": \"doctor@icloudhospital.com\",          \"hospitalId\": 1,          \"firstName\": \"cloud\",          \"lastName\": \"doctor\",          \"photo\": \"string\",          \"photoThumbnail\": \"string\",          \"gender\": \"NotSpecified\",          \"dateOfBirth\": \"2020-02-22T17:57:32.048Z\",          \"locations\": [            {              \"locationType\": \"LivesIn\",              \"latitude\": 0,              \"longitude\": 0,              \"country\": \"string\",              \"state\": \"string\",              \"county\": \"string\",              \"city\": \"string\",              \"zipCode\": \"string\",              \"address\": \"string\"            }          ]      }
         * @summary Create hospital doctor.
         * @param {CreateDoctorCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DoctorsPost: function (body, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/api/v1/doctors";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            var needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get hospital doctor by slug.
         * @param {string} slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DoctorsSlugsSlugGet: function (slug, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'slug' is not null or undefined
            if (slug === null || slug === undefined) {
                throw new base_1.RequiredError('slug', 'Required parameter slug was null or undefined when calling apiV1DoctorsSlugsSlugGet.');
            }
            var localVarPath = "/api/v1/doctors/slugs/{slug}"
                .replace("{" + "slug" + "}", encodeURIComponent(String(slug)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * DoctorsApi - functional programming interface
 * @export
 */
exports.DoctorsApiFp = function (configuration) {
    return {
        /**
         * Sample request:        DELETE /api/v1/doctors/1
         * @summary Delete doctor.
         * @param {string} doctorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DoctorsDoctorIdDelete: function (doctorId, options) {
            var localVarAxiosArgs = exports.DoctorsApiAxiosParamCreator(configuration).apiV1DoctorsDoctorIdDelete(doctorId, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        GET /api/v1/doctors/1
         * @summary Get hospital doctor.
         * @param {string} doctorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DoctorsDoctorIdGet: function (doctorId, options) {
            var localVarAxiosArgs = exports.DoctorsApiAxiosParamCreator(configuration).apiV1DoctorsDoctorIdGet(doctorId, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        PUT /api/v1/doctors/1      {          \"firstName\": \"string\",          \"lastName\": \"string\",          \"photo\": \"string\",          \"locations\": [            {              \"locationType\": \"LivesIn\",              \"latitude\": 0,              \"longitude\": 0,              \"country\": \"string\",              \"state\": \"string\",              \"county\": \"string\",              \"city\": \"string\",              \"zipCode\": \"string\",              \"address\": \"string\"            }          ]      }
         * @summary Update hospital doctor.
         * @param {string} doctorId
         * @param {UpdateDoctorCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DoctorsDoctorIdPut: function (doctorId, body, options) {
            var localVarAxiosArgs = exports.DoctorsApiAxiosParamCreator(configuration).apiV1DoctorsDoctorIdPut(doctorId, body, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Get all hospital doctors.
         * @param {string} [countryId]
         * @param {string} [hospitalId]
         * @param {object} [marketingType]
         * @param {string} [specialtyId]
         * @param {string} [specialtyTypeId]
         * @param {boolean} [consultationEnabled]
         * @param {string} [exceptDoctorId]
         * @param {Array<string>} [exceptDoctorIds]
         * @param {string} [id]
         * @param {string} [fullname]
         * @param {string} [email]
         * @param {object} [gender]
         * @param {Date} [dateOfBirth]
         * @param {Date} [created]
         * @param {number} [page]
         * @param {number} [limit]
         * @param {Date} [lastRetrieved]
         * @param {boolean} [current]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DoctorsGet: function (countryId, hospitalId, marketingType, specialtyId, specialtyTypeId, consultationEnabled, exceptDoctorId, exceptDoctorIds, id, fullname, email, gender, dateOfBirth, created, page, limit, lastRetrieved, current, options) {
            var localVarAxiosArgs = exports.DoctorsApiAxiosParamCreator(configuration).apiV1DoctorsGet(countryId, hospitalId, marketingType, specialtyId, specialtyTypeId, consultationEnabled, exceptDoctorId, exceptDoctorIds, id, fullname, email, gender, dateOfBirth, created, page, limit, lastRetrieved, current, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        POST /api/v1/doctors      {          \"userName\": \"cloudDoctor\",          \"email\": \"doctor@icloudhospital.com\",          \"hospitalId\": 1,          \"firstName\": \"cloud\",          \"lastName\": \"doctor\",          \"photo\": \"string\",          \"photoThumbnail\": \"string\",          \"gender\": \"NotSpecified\",          \"dateOfBirth\": \"2020-02-22T17:57:32.048Z\",          \"locations\": [            {              \"locationType\": \"LivesIn\",              \"latitude\": 0,              \"longitude\": 0,              \"country\": \"string\",              \"state\": \"string\",              \"county\": \"string\",              \"city\": \"string\",              \"zipCode\": \"string\",              \"address\": \"string\"            }          ]      }
         * @summary Create hospital doctor.
         * @param {CreateDoctorCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DoctorsPost: function (body, options) {
            var localVarAxiosArgs = exports.DoctorsApiAxiosParamCreator(configuration).apiV1DoctorsPost(body, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Get hospital doctor by slug.
         * @param {string} slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DoctorsSlugsSlugGet: function (slug, options) {
            var localVarAxiosArgs = exports.DoctorsApiAxiosParamCreator(configuration).apiV1DoctorsSlugsSlugGet(slug, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * DoctorsApi - factory interface
 * @export
 */
exports.DoctorsApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Sample request:        DELETE /api/v1/doctors/1
         * @summary Delete doctor.
         * @param {string} doctorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DoctorsDoctorIdDelete: function (doctorId, options) {
            return exports.DoctorsApiFp(configuration).apiV1DoctorsDoctorIdDelete(doctorId, options)(axios, basePath);
        },
        /**
         * Sample request:        GET /api/v1/doctors/1
         * @summary Get hospital doctor.
         * @param {string} doctorId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DoctorsDoctorIdGet: function (doctorId, options) {
            return exports.DoctorsApiFp(configuration).apiV1DoctorsDoctorIdGet(doctorId, options)(axios, basePath);
        },
        /**
         * Sample request:        PUT /api/v1/doctors/1      {          \"firstName\": \"string\",          \"lastName\": \"string\",          \"photo\": \"string\",          \"locations\": [            {              \"locationType\": \"LivesIn\",              \"latitude\": 0,              \"longitude\": 0,              \"country\": \"string\",              \"state\": \"string\",              \"county\": \"string\",              \"city\": \"string\",              \"zipCode\": \"string\",              \"address\": \"string\"            }          ]      }
         * @summary Update hospital doctor.
         * @param {string} doctorId
         * @param {UpdateDoctorCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DoctorsDoctorIdPut: function (doctorId, body, options) {
            return exports.DoctorsApiFp(configuration).apiV1DoctorsDoctorIdPut(doctorId, body, options)(axios, basePath);
        },
        /**
         *
         * @summary Get all hospital doctors.
         * @param {string} [countryId]
         * @param {string} [hospitalId]
         * @param {object} [marketingType]
         * @param {string} [specialtyId]
         * @param {string} [specialtyTypeId]
         * @param {boolean} [consultationEnabled]
         * @param {string} [exceptDoctorId]
         * @param {Array<string>} [exceptDoctorIds]
         * @param {string} [id]
         * @param {string} [fullname]
         * @param {string} [email]
         * @param {object} [gender]
         * @param {Date} [dateOfBirth]
         * @param {Date} [created]
         * @param {number} [page]
         * @param {number} [limit]
         * @param {Date} [lastRetrieved]
         * @param {boolean} [current]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DoctorsGet: function (countryId, hospitalId, marketingType, specialtyId, specialtyTypeId, consultationEnabled, exceptDoctorId, exceptDoctorIds, id, fullname, email, gender, dateOfBirth, created, page, limit, lastRetrieved, current, options) {
            return exports.DoctorsApiFp(configuration).apiV1DoctorsGet(countryId, hospitalId, marketingType, specialtyId, specialtyTypeId, consultationEnabled, exceptDoctorId, exceptDoctorIds, id, fullname, email, gender, dateOfBirth, created, page, limit, lastRetrieved, current, options)(axios, basePath);
        },
        /**
         * Sample request:        POST /api/v1/doctors      {          \"userName\": \"cloudDoctor\",          \"email\": \"doctor@icloudhospital.com\",          \"hospitalId\": 1,          \"firstName\": \"cloud\",          \"lastName\": \"doctor\",          \"photo\": \"string\",          \"photoThumbnail\": \"string\",          \"gender\": \"NotSpecified\",          \"dateOfBirth\": \"2020-02-22T17:57:32.048Z\",          \"locations\": [            {              \"locationType\": \"LivesIn\",              \"latitude\": 0,              \"longitude\": 0,              \"country\": \"string\",              \"state\": \"string\",              \"county\": \"string\",              \"city\": \"string\",              \"zipCode\": \"string\",              \"address\": \"string\"            }          ]      }
         * @summary Create hospital doctor.
         * @param {CreateDoctorCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DoctorsPost: function (body, options) {
            return exports.DoctorsApiFp(configuration).apiV1DoctorsPost(body, options)(axios, basePath);
        },
        /**
         *
         * @summary Get hospital doctor by slug.
         * @param {string} slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DoctorsSlugsSlugGet: function (slug, options) {
            return exports.DoctorsApiFp(configuration).apiV1DoctorsSlugsSlugGet(slug, options)(axios, basePath);
        },
    };
};
/**
 * DoctorsApi - object-oriented interface
 * @export
 * @class DoctorsApi
 * @extends {BaseAPI}
 */
var DoctorsApi = /** @class */ (function (_super) {
    __extends(DoctorsApi, _super);
    function DoctorsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Sample request:        DELETE /api/v1/doctors/1
     * @summary Delete doctor.
     * @param {string} doctorId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DoctorsApi
     */
    DoctorsApi.prototype.apiV1DoctorsDoctorIdDelete = function (doctorId, options) {
        return exports.DoctorsApiFp(this.configuration).apiV1DoctorsDoctorIdDelete(doctorId, options)(this.axios, this.basePath);
    };
    /**
     * Sample request:        GET /api/v1/doctors/1
     * @summary Get hospital doctor.
     * @param {string} doctorId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DoctorsApi
     */
    DoctorsApi.prototype.apiV1DoctorsDoctorIdGet = function (doctorId, options) {
        return exports.DoctorsApiFp(this.configuration).apiV1DoctorsDoctorIdGet(doctorId, options)(this.axios, this.basePath);
    };
    /**
     * Sample request:        PUT /api/v1/doctors/1      {          \"firstName\": \"string\",          \"lastName\": \"string\",          \"photo\": \"string\",          \"locations\": [            {              \"locationType\": \"LivesIn\",              \"latitude\": 0,              \"longitude\": 0,              \"country\": \"string\",              \"state\": \"string\",              \"county\": \"string\",              \"city\": \"string\",              \"zipCode\": \"string\",              \"address\": \"string\"            }          ]      }
     * @summary Update hospital doctor.
     * @param {string} doctorId
     * @param {UpdateDoctorCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DoctorsApi
     */
    DoctorsApi.prototype.apiV1DoctorsDoctorIdPut = function (doctorId, body, options) {
        return exports.DoctorsApiFp(this.configuration).apiV1DoctorsDoctorIdPut(doctorId, body, options)(this.axios, this.basePath);
    };
    /**
     *
     * @summary Get all hospital doctors.
     * @param {string} [countryId]
     * @param {string} [hospitalId]
     * @param {object} [marketingType]
     * @param {string} [specialtyId]
     * @param {string} [specialtyTypeId]
     * @param {boolean} [consultationEnabled]
     * @param {string} [exceptDoctorId]
     * @param {Array<string>} [exceptDoctorIds]
     * @param {string} [id]
     * @param {string} [fullname]
     * @param {string} [email]
     * @param {object} [gender]
     * @param {Date} [dateOfBirth]
     * @param {Date} [created]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DoctorsApi
     */
    DoctorsApi.prototype.apiV1DoctorsGet = function (countryId, hospitalId, marketingType, specialtyId, specialtyTypeId, consultationEnabled, exceptDoctorId, exceptDoctorIds, id, fullname, email, gender, dateOfBirth, created, page, limit, lastRetrieved, current, options) {
        return exports.DoctorsApiFp(this.configuration).apiV1DoctorsGet(countryId, hospitalId, marketingType, specialtyId, specialtyTypeId, consultationEnabled, exceptDoctorId, exceptDoctorIds, id, fullname, email, gender, dateOfBirth, created, page, limit, lastRetrieved, current, options)(this.axios, this.basePath);
    };
    /**
     * Sample request:        POST /api/v1/doctors      {          \"userName\": \"cloudDoctor\",          \"email\": \"doctor@icloudhospital.com\",          \"hospitalId\": 1,          \"firstName\": \"cloud\",          \"lastName\": \"doctor\",          \"photo\": \"string\",          \"photoThumbnail\": \"string\",          \"gender\": \"NotSpecified\",          \"dateOfBirth\": \"2020-02-22T17:57:32.048Z\",          \"locations\": [            {              \"locationType\": \"LivesIn\",              \"latitude\": 0,              \"longitude\": 0,              \"country\": \"string\",              \"state\": \"string\",              \"county\": \"string\",              \"city\": \"string\",              \"zipCode\": \"string\",              \"address\": \"string\"            }          ]      }
     * @summary Create hospital doctor.
     * @param {CreateDoctorCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DoctorsApi
     */
    DoctorsApi.prototype.apiV1DoctorsPost = function (body, options) {
        return exports.DoctorsApiFp(this.configuration).apiV1DoctorsPost(body, options)(this.axios, this.basePath);
    };
    /**
     *
     * @summary Get hospital doctor by slug.
     * @param {string} slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DoctorsApi
     */
    DoctorsApi.prototype.apiV1DoctorsSlugsSlugGet = function (slug, options) {
        return exports.DoctorsApiFp(this.configuration).apiV1DoctorsSlugsSlugGet(slug, options)(this.axios, this.basePath);
    };
    return DoctorsApi;
}(base_1.BaseAPI));
exports.DoctorsApi = DoctorsApi;
/**
 * EquipmentsApi - axios parameter creator
 * @export
 */
exports.EquipmentsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Sample request:        GET /api/v1/hospitals/1/equipments      {          \"pageQueryFilter\": {              \"page\": 1,              \"limit\": 20,              \"lastRetrived\": \"2020-02-05T08:40\"          },          \"searchString\": \"Medical\"      }
         * @summary Get all equipments.
         * @param {string} [id]
         * @param {string} [name]
         * @param {string} [description]
         * @param {string} [hospitalId]
         * @param {string} [hospitalName]
         * @param {Date} [created]
         * @param {number} [page]
         * @param {number} [limit]
         * @param {Date} [lastRetrieved]
         * @param {boolean} [current]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsEquipmentsGet: function (id, name, description, hospitalId, hospitalName, created, page, limit, lastRetrieved, current, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/api/v1/hospitals/equipments";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }
            if (name !== undefined) {
                localVarQueryParameter['Name'] = name;
            }
            if (description !== undefined) {
                localVarQueryParameter['Description'] = description;
            }
            if (hospitalId !== undefined) {
                localVarQueryParameter['HospitalId'] = hospitalId;
            }
            if (hospitalName !== undefined) {
                localVarQueryParameter['HospitalName'] = hospitalName;
            }
            if (created !== undefined) {
                localVarQueryParameter['Created'] = (created instanceof Date) ?
                    created.toISOString() :
                    created;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (lastRetrieved !== undefined) {
                localVarQueryParameter['lastRetrieved'] = (lastRetrieved instanceof Date) ?
                    lastRetrieved.toISOString() :
                    lastRetrieved;
            }
            if (current !== undefined) {
                localVarQueryParameter['Current'] = current;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        DELETE /api/v1/hospitals/1/equipments/1
         * @summary Delete equipment.
         * @param {string} hospitalId
         * @param {string} equipmentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdEquipmentsEquipmentIdDelete: function (hospitalId, equipmentId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'hospitalId' is not null or undefined
            if (hospitalId === null || hospitalId === undefined) {
                throw new base_1.RequiredError('hospitalId', 'Required parameter hospitalId was null or undefined when calling apiV1HospitalsHospitalIdEquipmentsEquipmentIdDelete.');
            }
            // verify required parameter 'equipmentId' is not null or undefined
            if (equipmentId === null || equipmentId === undefined) {
                throw new base_1.RequiredError('equipmentId', 'Required parameter equipmentId was null or undefined when calling apiV1HospitalsHospitalIdEquipmentsEquipmentIdDelete.');
            }
            var localVarPath = "/api/v1/hospitals/{hospitalId}/equipments/{equipmentId}"
                .replace("{" + "hospitalId" + "}", encodeURIComponent(String(hospitalId)))
                .replace("{" + "equipmentId" + "}", encodeURIComponent(String(equipmentId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        GET /api/v1/hospitals/1/equipments/1
         * @summary Get equipment.
         * @param {string} hospitalId
         * @param {string} equipmentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdEquipmentsEquipmentIdGet: function (hospitalId, equipmentId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'hospitalId' is not null or undefined
            if (hospitalId === null || hospitalId === undefined) {
                throw new base_1.RequiredError('hospitalId', 'Required parameter hospitalId was null or undefined when calling apiV1HospitalsHospitalIdEquipmentsEquipmentIdGet.');
            }
            // verify required parameter 'equipmentId' is not null or undefined
            if (equipmentId === null || equipmentId === undefined) {
                throw new base_1.RequiredError('equipmentId', 'Required parameter equipmentId was null or undefined when calling apiV1HospitalsHospitalIdEquipmentsEquipmentIdGet.');
            }
            var localVarPath = "/api/v1/hospitals/{hospitalId}/equipments/{equipmentId}"
                .replace("{" + "hospitalId" + "}", encodeURIComponent(String(hospitalId)))
                .replace("{" + "equipmentId" + "}", encodeURIComponent(String(equipmentId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        PUT /api/v1/hospitals/1/equipments/1      {          \"description\": \"Upgraded medical equipment\"      }
         * @summary Update equipment.
         * @param {string} hospitalId
         * @param {string} equipmentId
         * @param {UpdateEquipmentCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdEquipmentsEquipmentIdPut: function (hospitalId, equipmentId, body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'hospitalId' is not null or undefined
            if (hospitalId === null || hospitalId === undefined) {
                throw new base_1.RequiredError('hospitalId', 'Required parameter hospitalId was null or undefined when calling apiV1HospitalsHospitalIdEquipmentsEquipmentIdPut.');
            }
            // verify required parameter 'equipmentId' is not null or undefined
            if (equipmentId === null || equipmentId === undefined) {
                throw new base_1.RequiredError('equipmentId', 'Required parameter equipmentId was null or undefined when calling apiV1HospitalsHospitalIdEquipmentsEquipmentIdPut.');
            }
            var localVarPath = "/api/v1/hospitals/{hospitalId}/equipments/{equipmentId}"
                .replace("{" + "hospitalId" + "}", encodeURIComponent(String(hospitalId)))
                .replace("{" + "equipmentId" + "}", encodeURIComponent(String(equipmentId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            var needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        POST /api/v1/hospitals/1/equipments      {          \"name\": \"Afroasia ltd\",          \"description\": \"Medical equipment\",          \"medias\": [            {              \"mediaType\": 0,              \"url\": \"imageurl\",              \"description\": \"string\",                      \"order\": 0            }          ]      }
         * @summary Create an equipment and add to a hospital.
         * @param {string} hospitalId
         * @param {CreateEquipmentCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdEquipmentsPost: function (hospitalId, body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'hospitalId' is not null or undefined
            if (hospitalId === null || hospitalId === undefined) {
                throw new base_1.RequiredError('hospitalId', 'Required parameter hospitalId was null or undefined when calling apiV1HospitalsHospitalIdEquipmentsPost.');
            }
            var localVarPath = "/api/v1/hospitals/{hospitalId}/equipments"
                .replace("{" + "hospitalId" + "}", encodeURIComponent(String(hospitalId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            var needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * EquipmentsApi - functional programming interface
 * @export
 */
exports.EquipmentsApiFp = function (configuration) {
    return {
        /**
         * Sample request:        GET /api/v1/hospitals/1/equipments      {          \"pageQueryFilter\": {              \"page\": 1,              \"limit\": 20,              \"lastRetrived\": \"2020-02-05T08:40\"          },          \"searchString\": \"Medical\"      }
         * @summary Get all equipments.
         * @param {string} [id]
         * @param {string} [name]
         * @param {string} [description]
         * @param {string} [hospitalId]
         * @param {string} [hospitalName]
         * @param {Date} [created]
         * @param {number} [page]
         * @param {number} [limit]
         * @param {Date} [lastRetrieved]
         * @param {boolean} [current]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsEquipmentsGet: function (id, name, description, hospitalId, hospitalName, created, page, limit, lastRetrieved, current, options) {
            var localVarAxiosArgs = exports.EquipmentsApiAxiosParamCreator(configuration).apiV1HospitalsEquipmentsGet(id, name, description, hospitalId, hospitalName, created, page, limit, lastRetrieved, current, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        DELETE /api/v1/hospitals/1/equipments/1
         * @summary Delete equipment.
         * @param {string} hospitalId
         * @param {string} equipmentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdEquipmentsEquipmentIdDelete: function (hospitalId, equipmentId, options) {
            var localVarAxiosArgs = exports.EquipmentsApiAxiosParamCreator(configuration).apiV1HospitalsHospitalIdEquipmentsEquipmentIdDelete(hospitalId, equipmentId, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        GET /api/v1/hospitals/1/equipments/1
         * @summary Get equipment.
         * @param {string} hospitalId
         * @param {string} equipmentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdEquipmentsEquipmentIdGet: function (hospitalId, equipmentId, options) {
            var localVarAxiosArgs = exports.EquipmentsApiAxiosParamCreator(configuration).apiV1HospitalsHospitalIdEquipmentsEquipmentIdGet(hospitalId, equipmentId, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        PUT /api/v1/hospitals/1/equipments/1      {          \"description\": \"Upgraded medical equipment\"      }
         * @summary Update equipment.
         * @param {string} hospitalId
         * @param {string} equipmentId
         * @param {UpdateEquipmentCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdEquipmentsEquipmentIdPut: function (hospitalId, equipmentId, body, options) {
            var localVarAxiosArgs = exports.EquipmentsApiAxiosParamCreator(configuration).apiV1HospitalsHospitalIdEquipmentsEquipmentIdPut(hospitalId, equipmentId, body, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        POST /api/v1/hospitals/1/equipments      {          \"name\": \"Afroasia ltd\",          \"description\": \"Medical equipment\",          \"medias\": [            {              \"mediaType\": 0,              \"url\": \"imageurl\",              \"description\": \"string\",                      \"order\": 0            }          ]      }
         * @summary Create an equipment and add to a hospital.
         * @param {string} hospitalId
         * @param {CreateEquipmentCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdEquipmentsPost: function (hospitalId, body, options) {
            var localVarAxiosArgs = exports.EquipmentsApiAxiosParamCreator(configuration).apiV1HospitalsHospitalIdEquipmentsPost(hospitalId, body, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * EquipmentsApi - factory interface
 * @export
 */
exports.EquipmentsApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Sample request:        GET /api/v1/hospitals/1/equipments      {          \"pageQueryFilter\": {              \"page\": 1,              \"limit\": 20,              \"lastRetrived\": \"2020-02-05T08:40\"          },          \"searchString\": \"Medical\"      }
         * @summary Get all equipments.
         * @param {string} [id]
         * @param {string} [name]
         * @param {string} [description]
         * @param {string} [hospitalId]
         * @param {string} [hospitalName]
         * @param {Date} [created]
         * @param {number} [page]
         * @param {number} [limit]
         * @param {Date} [lastRetrieved]
         * @param {boolean} [current]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsEquipmentsGet: function (id, name, description, hospitalId, hospitalName, created, page, limit, lastRetrieved, current, options) {
            return exports.EquipmentsApiFp(configuration).apiV1HospitalsEquipmentsGet(id, name, description, hospitalId, hospitalName, created, page, limit, lastRetrieved, current, options)(axios, basePath);
        },
        /**
         * Sample request:        DELETE /api/v1/hospitals/1/equipments/1
         * @summary Delete equipment.
         * @param {string} hospitalId
         * @param {string} equipmentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdEquipmentsEquipmentIdDelete: function (hospitalId, equipmentId, options) {
            return exports.EquipmentsApiFp(configuration).apiV1HospitalsHospitalIdEquipmentsEquipmentIdDelete(hospitalId, equipmentId, options)(axios, basePath);
        },
        /**
         * Sample request:        GET /api/v1/hospitals/1/equipments/1
         * @summary Get equipment.
         * @param {string} hospitalId
         * @param {string} equipmentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdEquipmentsEquipmentIdGet: function (hospitalId, equipmentId, options) {
            return exports.EquipmentsApiFp(configuration).apiV1HospitalsHospitalIdEquipmentsEquipmentIdGet(hospitalId, equipmentId, options)(axios, basePath);
        },
        /**
         * Sample request:        PUT /api/v1/hospitals/1/equipments/1      {          \"description\": \"Upgraded medical equipment\"      }
         * @summary Update equipment.
         * @param {string} hospitalId
         * @param {string} equipmentId
         * @param {UpdateEquipmentCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdEquipmentsEquipmentIdPut: function (hospitalId, equipmentId, body, options) {
            return exports.EquipmentsApiFp(configuration).apiV1HospitalsHospitalIdEquipmentsEquipmentIdPut(hospitalId, equipmentId, body, options)(axios, basePath);
        },
        /**
         * Sample request:        POST /api/v1/hospitals/1/equipments      {          \"name\": \"Afroasia ltd\",          \"description\": \"Medical equipment\",          \"medias\": [            {              \"mediaType\": 0,              \"url\": \"imageurl\",              \"description\": \"string\",                      \"order\": 0            }          ]      }
         * @summary Create an equipment and add to a hospital.
         * @param {string} hospitalId
         * @param {CreateEquipmentCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdEquipmentsPost: function (hospitalId, body, options) {
            return exports.EquipmentsApiFp(configuration).apiV1HospitalsHospitalIdEquipmentsPost(hospitalId, body, options)(axios, basePath);
        },
    };
};
/**
 * EquipmentsApi - object-oriented interface
 * @export
 * @class EquipmentsApi
 * @extends {BaseAPI}
 */
var EquipmentsApi = /** @class */ (function (_super) {
    __extends(EquipmentsApi, _super);
    function EquipmentsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Sample request:        GET /api/v1/hospitals/1/equipments      {          \"pageQueryFilter\": {              \"page\": 1,              \"limit\": 20,              \"lastRetrived\": \"2020-02-05T08:40\"          },          \"searchString\": \"Medical\"      }
     * @summary Get all equipments.
     * @param {string} [id]
     * @param {string} [name]
     * @param {string} [description]
     * @param {string} [hospitalId]
     * @param {string} [hospitalName]
     * @param {Date} [created]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EquipmentsApi
     */
    EquipmentsApi.prototype.apiV1HospitalsEquipmentsGet = function (id, name, description, hospitalId, hospitalName, created, page, limit, lastRetrieved, current, options) {
        return exports.EquipmentsApiFp(this.configuration).apiV1HospitalsEquipmentsGet(id, name, description, hospitalId, hospitalName, created, page, limit, lastRetrieved, current, options)(this.axios, this.basePath);
    };
    /**
     * Sample request:        DELETE /api/v1/hospitals/1/equipments/1
     * @summary Delete equipment.
     * @param {string} hospitalId
     * @param {string} equipmentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EquipmentsApi
     */
    EquipmentsApi.prototype.apiV1HospitalsHospitalIdEquipmentsEquipmentIdDelete = function (hospitalId, equipmentId, options) {
        return exports.EquipmentsApiFp(this.configuration).apiV1HospitalsHospitalIdEquipmentsEquipmentIdDelete(hospitalId, equipmentId, options)(this.axios, this.basePath);
    };
    /**
     * Sample request:        GET /api/v1/hospitals/1/equipments/1
     * @summary Get equipment.
     * @param {string} hospitalId
     * @param {string} equipmentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EquipmentsApi
     */
    EquipmentsApi.prototype.apiV1HospitalsHospitalIdEquipmentsEquipmentIdGet = function (hospitalId, equipmentId, options) {
        return exports.EquipmentsApiFp(this.configuration).apiV1HospitalsHospitalIdEquipmentsEquipmentIdGet(hospitalId, equipmentId, options)(this.axios, this.basePath);
    };
    /**
     * Sample request:        PUT /api/v1/hospitals/1/equipments/1      {          \"description\": \"Upgraded medical equipment\"      }
     * @summary Update equipment.
     * @param {string} hospitalId
     * @param {string} equipmentId
     * @param {UpdateEquipmentCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EquipmentsApi
     */
    EquipmentsApi.prototype.apiV1HospitalsHospitalIdEquipmentsEquipmentIdPut = function (hospitalId, equipmentId, body, options) {
        return exports.EquipmentsApiFp(this.configuration).apiV1HospitalsHospitalIdEquipmentsEquipmentIdPut(hospitalId, equipmentId, body, options)(this.axios, this.basePath);
    };
    /**
     * Sample request:        POST /api/v1/hospitals/1/equipments      {          \"name\": \"Afroasia ltd\",          \"description\": \"Medical equipment\",          \"medias\": [            {              \"mediaType\": 0,              \"url\": \"imageurl\",              \"description\": \"string\",                      \"order\": 0            }          ]      }
     * @summary Create an equipment and add to a hospital.
     * @param {string} hospitalId
     * @param {CreateEquipmentCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EquipmentsApi
     */
    EquipmentsApi.prototype.apiV1HospitalsHospitalIdEquipmentsPost = function (hospitalId, body, options) {
        return exports.EquipmentsApiFp(this.configuration).apiV1HospitalsHospitalIdEquipmentsPost(hospitalId, body, options)(this.axios, this.basePath);
    };
    return EquipmentsApi;
}(base_1.BaseAPI));
exports.EquipmentsApi = EquipmentsApi;
/**
 * HospitalReviewsApi - axios parameter creator
 * @export
 */
exports.HospitalReviewsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Sample request:        DELETE /api/v1/hospitals/1/reviews/1
         * @summary Delete review.
         * @param {string} hospitalId
         * @param {string} patientId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdReviewsPatientIdDelete: function (hospitalId, patientId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'hospitalId' is not null or undefined
            if (hospitalId === null || hospitalId === undefined) {
                throw new base_1.RequiredError('hospitalId', 'Required parameter hospitalId was null or undefined when calling apiV1HospitalsHospitalIdReviewsPatientIdDelete.');
            }
            // verify required parameter 'patientId' is not null or undefined
            if (patientId === null || patientId === undefined) {
                throw new base_1.RequiredError('patientId', 'Required parameter patientId was null or undefined when calling apiV1HospitalsHospitalIdReviewsPatientIdDelete.');
            }
            var localVarPath = "/api/v1/hospitals/{hospitalId}/reviews/{patientId}"
                .replace("{" + "hospitalId" + "}", encodeURIComponent(String(hospitalId)))
                .replace("{" + "patientId" + "}", encodeURIComponent(String(patientId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        GET /api/v1/hospitals/1/reviews/1
         * @summary Get review.
         * @param {string} hospitalId
         * @param {string} patientId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdReviewsPatientIdGet: function (hospitalId, patientId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'hospitalId' is not null or undefined
            if (hospitalId === null || hospitalId === undefined) {
                throw new base_1.RequiredError('hospitalId', 'Required parameter hospitalId was null or undefined when calling apiV1HospitalsHospitalIdReviewsPatientIdGet.');
            }
            // verify required parameter 'patientId' is not null or undefined
            if (patientId === null || patientId === undefined) {
                throw new base_1.RequiredError('patientId', 'Required parameter patientId was null or undefined when calling apiV1HospitalsHospitalIdReviewsPatientIdGet.');
            }
            var localVarPath = "/api/v1/hospitals/{hospitalId}/reviews/{patientId}"
                .replace("{" + "hospitalId" + "}", encodeURIComponent(String(hospitalId)))
                .replace("{" + "patientId" + "}", encodeURIComponent(String(patientId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:
         * @summary Update review.
         * @param {string} hospitalId
         * @param {string} patientId
         * @param {UpdateHospitalReviewCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdReviewsPatientIdPut: function (hospitalId, patientId, body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'hospitalId' is not null or undefined
            if (hospitalId === null || hospitalId === undefined) {
                throw new base_1.RequiredError('hospitalId', 'Required parameter hospitalId was null or undefined when calling apiV1HospitalsHospitalIdReviewsPatientIdPut.');
            }
            // verify required parameter 'patientId' is not null or undefined
            if (patientId === null || patientId === undefined) {
                throw new base_1.RequiredError('patientId', 'Required parameter patientId was null or undefined when calling apiV1HospitalsHospitalIdReviewsPatientIdPut.');
            }
            var localVarPath = "/api/v1/hospitals/{hospitalId}/reviews/{patientId}"
                .replace("{" + "hospitalId" + "}", encodeURIComponent(String(hospitalId)))
                .replace("{" + "patientId" + "}", encodeURIComponent(String(patientId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            var needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        POST /api/v1/hospitals/1/reviews/1
         * @summary Create review.
         * @param {string} hospitalId
         * @param {string} patientId
         * @param {CreateHospitalReviewCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdReviewsPost: function (hospitalId, patientId, body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'hospitalId' is not null or undefined
            if (hospitalId === null || hospitalId === undefined) {
                throw new base_1.RequiredError('hospitalId', 'Required parameter hospitalId was null or undefined when calling apiV1HospitalsHospitalIdReviewsPost.');
            }
            // verify required parameter 'patientId' is not null or undefined
            if (patientId === null || patientId === undefined) {
                throw new base_1.RequiredError('patientId', 'Required parameter patientId was null or undefined when calling apiV1HospitalsHospitalIdReviewsPost.');
            }
            var localVarPath = "/api/v1/hospitals/{hospitalId}/reviews"
                .replace("{" + "hospitalId" + "}", encodeURIComponent(String(hospitalId)))
                .replace("{" + "patientId" + "}", encodeURIComponent(String(patientId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            var needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        GET /api/v1/hospitals/reviews
         * @summary Get all reviews.
         * @param {string} [patientId]
         * @param {string} [patientName]
         * @param {string} [hospitalId]
         * @param {string} [hospitalName]
         * @param {string} [body]
         * @param {boolean} [recommended]
         * @param {object} [reviewCategory]
         * @param {number} [rate]
         * @param {Date} [created]
         * @param {number} [page]
         * @param {number} [limit]
         * @param {Date} [lastRetrieved]
         * @param {boolean} [current]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsReviewsGet: function (patientId, patientName, hospitalId, hospitalName, body, recommended, reviewCategory, rate, created, page, limit, lastRetrieved, current, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/api/v1/hospitals/reviews";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (patientId !== undefined) {
                localVarQueryParameter['PatientId'] = patientId;
            }
            if (patientName !== undefined) {
                localVarQueryParameter['PatientName'] = patientName;
            }
            if (hospitalId !== undefined) {
                localVarQueryParameter['HospitalId'] = hospitalId;
            }
            if (hospitalName !== undefined) {
                localVarQueryParameter['HospitalName'] = hospitalName;
            }
            if (body !== undefined) {
                localVarQueryParameter['Body'] = body;
            }
            if (recommended !== undefined) {
                localVarQueryParameter['Recommended'] = recommended;
            }
            if (reviewCategory !== undefined) {
                localVarQueryParameter['ReviewCategory'] = reviewCategory;
            }
            if (rate !== undefined) {
                localVarQueryParameter['Rate'] = rate;
            }
            if (created !== undefined) {
                localVarQueryParameter['Created'] = (created instanceof Date) ?
                    created.toISOString() :
                    created;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (lastRetrieved !== undefined) {
                localVarQueryParameter['lastRetrieved'] = (lastRetrieved instanceof Date) ?
                    lastRetrieved.toISOString() :
                    lastRetrieved;
            }
            if (current !== undefined) {
                localVarQueryParameter['Current'] = current;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * HospitalReviewsApi - functional programming interface
 * @export
 */
exports.HospitalReviewsApiFp = function (configuration) {
    return {
        /**
         * Sample request:        DELETE /api/v1/hospitals/1/reviews/1
         * @summary Delete review.
         * @param {string} hospitalId
         * @param {string} patientId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdReviewsPatientIdDelete: function (hospitalId, patientId, options) {
            var localVarAxiosArgs = exports.HospitalReviewsApiAxiosParamCreator(configuration).apiV1HospitalsHospitalIdReviewsPatientIdDelete(hospitalId, patientId, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        GET /api/v1/hospitals/1/reviews/1
         * @summary Get review.
         * @param {string} hospitalId
         * @param {string} patientId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdReviewsPatientIdGet: function (hospitalId, patientId, options) {
            var localVarAxiosArgs = exports.HospitalReviewsApiAxiosParamCreator(configuration).apiV1HospitalsHospitalIdReviewsPatientIdGet(hospitalId, patientId, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:
         * @summary Update review.
         * @param {string} hospitalId
         * @param {string} patientId
         * @param {UpdateHospitalReviewCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdReviewsPatientIdPut: function (hospitalId, patientId, body, options) {
            var localVarAxiosArgs = exports.HospitalReviewsApiAxiosParamCreator(configuration).apiV1HospitalsHospitalIdReviewsPatientIdPut(hospitalId, patientId, body, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        POST /api/v1/hospitals/1/reviews/1
         * @summary Create review.
         * @param {string} hospitalId
         * @param {string} patientId
         * @param {CreateHospitalReviewCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdReviewsPost: function (hospitalId, patientId, body, options) {
            var localVarAxiosArgs = exports.HospitalReviewsApiAxiosParamCreator(configuration).apiV1HospitalsHospitalIdReviewsPost(hospitalId, patientId, body, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        GET /api/v1/hospitals/reviews
         * @summary Get all reviews.
         * @param {string} [patientId]
         * @param {string} [patientName]
         * @param {string} [hospitalId]
         * @param {string} [hospitalName]
         * @param {string} [body]
         * @param {boolean} [recommended]
         * @param {object} [reviewCategory]
         * @param {number} [rate]
         * @param {Date} [created]
         * @param {number} [page]
         * @param {number} [limit]
         * @param {Date} [lastRetrieved]
         * @param {boolean} [current]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsReviewsGet: function (patientId, patientName, hospitalId, hospitalName, body, recommended, reviewCategory, rate, created, page, limit, lastRetrieved, current, options) {
            var localVarAxiosArgs = exports.HospitalReviewsApiAxiosParamCreator(configuration).apiV1HospitalsReviewsGet(patientId, patientName, hospitalId, hospitalName, body, recommended, reviewCategory, rate, created, page, limit, lastRetrieved, current, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * HospitalReviewsApi - factory interface
 * @export
 */
exports.HospitalReviewsApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Sample request:        DELETE /api/v1/hospitals/1/reviews/1
         * @summary Delete review.
         * @param {string} hospitalId
         * @param {string} patientId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdReviewsPatientIdDelete: function (hospitalId, patientId, options) {
            return exports.HospitalReviewsApiFp(configuration).apiV1HospitalsHospitalIdReviewsPatientIdDelete(hospitalId, patientId, options)(axios, basePath);
        },
        /**
         * Sample request:        GET /api/v1/hospitals/1/reviews/1
         * @summary Get review.
         * @param {string} hospitalId
         * @param {string} patientId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdReviewsPatientIdGet: function (hospitalId, patientId, options) {
            return exports.HospitalReviewsApiFp(configuration).apiV1HospitalsHospitalIdReviewsPatientIdGet(hospitalId, patientId, options)(axios, basePath);
        },
        /**
         * Sample request:
         * @summary Update review.
         * @param {string} hospitalId
         * @param {string} patientId
         * @param {UpdateHospitalReviewCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdReviewsPatientIdPut: function (hospitalId, patientId, body, options) {
            return exports.HospitalReviewsApiFp(configuration).apiV1HospitalsHospitalIdReviewsPatientIdPut(hospitalId, patientId, body, options)(axios, basePath);
        },
        /**
         * Sample request:        POST /api/v1/hospitals/1/reviews/1
         * @summary Create review.
         * @param {string} hospitalId
         * @param {string} patientId
         * @param {CreateHospitalReviewCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdReviewsPost: function (hospitalId, patientId, body, options) {
            return exports.HospitalReviewsApiFp(configuration).apiV1HospitalsHospitalIdReviewsPost(hospitalId, patientId, body, options)(axios, basePath);
        },
        /**
         * Sample request:        GET /api/v1/hospitals/reviews
         * @summary Get all reviews.
         * @param {string} [patientId]
         * @param {string} [patientName]
         * @param {string} [hospitalId]
         * @param {string} [hospitalName]
         * @param {string} [body]
         * @param {boolean} [recommended]
         * @param {object} [reviewCategory]
         * @param {number} [rate]
         * @param {Date} [created]
         * @param {number} [page]
         * @param {number} [limit]
         * @param {Date} [lastRetrieved]
         * @param {boolean} [current]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsReviewsGet: function (patientId, patientName, hospitalId, hospitalName, body, recommended, reviewCategory, rate, created, page, limit, lastRetrieved, current, options) {
            return exports.HospitalReviewsApiFp(configuration).apiV1HospitalsReviewsGet(patientId, patientName, hospitalId, hospitalName, body, recommended, reviewCategory, rate, created, page, limit, lastRetrieved, current, options)(axios, basePath);
        },
    };
};
/**
 * HospitalReviewsApi - object-oriented interface
 * @export
 * @class HospitalReviewsApi
 * @extends {BaseAPI}
 */
var HospitalReviewsApi = /** @class */ (function (_super) {
    __extends(HospitalReviewsApi, _super);
    function HospitalReviewsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Sample request:        DELETE /api/v1/hospitals/1/reviews/1
     * @summary Delete review.
     * @param {string} hospitalId
     * @param {string} patientId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HospitalReviewsApi
     */
    HospitalReviewsApi.prototype.apiV1HospitalsHospitalIdReviewsPatientIdDelete = function (hospitalId, patientId, options) {
        return exports.HospitalReviewsApiFp(this.configuration).apiV1HospitalsHospitalIdReviewsPatientIdDelete(hospitalId, patientId, options)(this.axios, this.basePath);
    };
    /**
     * Sample request:        GET /api/v1/hospitals/1/reviews/1
     * @summary Get review.
     * @param {string} hospitalId
     * @param {string} patientId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HospitalReviewsApi
     */
    HospitalReviewsApi.prototype.apiV1HospitalsHospitalIdReviewsPatientIdGet = function (hospitalId, patientId, options) {
        return exports.HospitalReviewsApiFp(this.configuration).apiV1HospitalsHospitalIdReviewsPatientIdGet(hospitalId, patientId, options)(this.axios, this.basePath);
    };
    /**
     * Sample request:
     * @summary Update review.
     * @param {string} hospitalId
     * @param {string} patientId
     * @param {UpdateHospitalReviewCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HospitalReviewsApi
     */
    HospitalReviewsApi.prototype.apiV1HospitalsHospitalIdReviewsPatientIdPut = function (hospitalId, patientId, body, options) {
        return exports.HospitalReviewsApiFp(this.configuration).apiV1HospitalsHospitalIdReviewsPatientIdPut(hospitalId, patientId, body, options)(this.axios, this.basePath);
    };
    /**
     * Sample request:        POST /api/v1/hospitals/1/reviews/1
     * @summary Create review.
     * @param {string} hospitalId
     * @param {string} patientId
     * @param {CreateHospitalReviewCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HospitalReviewsApi
     */
    HospitalReviewsApi.prototype.apiV1HospitalsHospitalIdReviewsPost = function (hospitalId, patientId, body, options) {
        return exports.HospitalReviewsApiFp(this.configuration).apiV1HospitalsHospitalIdReviewsPost(hospitalId, patientId, body, options)(this.axios, this.basePath);
    };
    /**
     * Sample request:        GET /api/v1/hospitals/reviews
     * @summary Get all reviews.
     * @param {string} [patientId]
     * @param {string} [patientName]
     * @param {string} [hospitalId]
     * @param {string} [hospitalName]
     * @param {string} [body]
     * @param {boolean} [recommended]
     * @param {object} [reviewCategory]
     * @param {number} [rate]
     * @param {Date} [created]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HospitalReviewsApi
     */
    HospitalReviewsApi.prototype.apiV1HospitalsReviewsGet = function (patientId, patientName, hospitalId, hospitalName, body, recommended, reviewCategory, rate, created, page, limit, lastRetrieved, current, options) {
        return exports.HospitalReviewsApiFp(this.configuration).apiV1HospitalsReviewsGet(patientId, patientName, hospitalId, hospitalName, body, recommended, reviewCategory, rate, created, page, limit, lastRetrieved, current, options)(this.axios, this.basePath);
    };
    return HospitalReviewsApi;
}(base_1.BaseAPI));
exports.HospitalReviewsApi = HospitalReviewsApi;
/**
 * HospitalSpecialtiesApi - axios parameter creator
 * @export
 */
exports.HospitalSpecialtiesApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Sample request:        DELETE /api/v1/hospitals/1/specialties/1
         * @summary Delete hospitalSpecialty.
         * @param {string} hospitalId
         * @param {string} specialtyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdDelete: function (hospitalId, specialtyId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'hospitalId' is not null or undefined
            if (hospitalId === null || hospitalId === undefined) {
                throw new base_1.RequiredError('hospitalId', 'Required parameter hospitalId was null or undefined when calling apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdDelete.');
            }
            // verify required parameter 'specialtyId' is not null or undefined
            if (specialtyId === null || specialtyId === undefined) {
                throw new base_1.RequiredError('specialtyId', 'Required parameter specialtyId was null or undefined when calling apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdDelete.');
            }
            var localVarPath = "/api/v1/hospitals/{hospitalId}/specialties/{specialtyId}"
                .replace("{" + "hospitalId" + "}", encodeURIComponent(String(hospitalId)))
                .replace("{" + "specialtyId" + "}", encodeURIComponent(String(specialtyId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        POST /api/v1/hospitals/1/specialties/1
         * @summary Create hospitalSpecialty.
         * @param {string} hospitalId
         * @param {string} specialtyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdPost: function (hospitalId, specialtyId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'hospitalId' is not null or undefined
            if (hospitalId === null || hospitalId === undefined) {
                throw new base_1.RequiredError('hospitalId', 'Required parameter hospitalId was null or undefined when calling apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdPost.');
            }
            // verify required parameter 'specialtyId' is not null or undefined
            if (specialtyId === null || specialtyId === undefined) {
                throw new base_1.RequiredError('specialtyId', 'Required parameter specialtyId was null or undefined when calling apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdPost.');
            }
            var localVarPath = "/api/v1/hospitals/{hospitalId}/specialties/{specialtyId}"
                .replace("{" + "hospitalId" + "}", encodeURIComponent(String(hospitalId)))
                .replace("{" + "specialtyId" + "}", encodeURIComponent(String(specialtyId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        PUT /api/v1/hospitals/1/specialtysequence      {          \"specialtyType\": \"Endocrinology\",          \"hospitalSpecialtySequence\": [14, 30, 5, 7]      }
         * @summary Update hospitalSpecialty sequence.
         * @param {string} hospitalId
         * @param {string} specialtyTypeId
         * @param {UpdateHospitalSpecialtySequenceCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdSpecialtysequencePut: function (hospitalId, specialtyTypeId, body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'hospitalId' is not null or undefined
            if (hospitalId === null || hospitalId === undefined) {
                throw new base_1.RequiredError('hospitalId', 'Required parameter hospitalId was null or undefined when calling apiV1HospitalsHospitalIdSpecialtysequencePut.');
            }
            // verify required parameter 'specialtyTypeId' is not null or undefined
            if (specialtyTypeId === null || specialtyTypeId === undefined) {
                throw new base_1.RequiredError('specialtyTypeId', 'Required parameter specialtyTypeId was null or undefined when calling apiV1HospitalsHospitalIdSpecialtysequencePut.');
            }
            var localVarPath = "/api/v1/hospitals/{hospitalId}/specialtysequence"
                .replace("{" + "hospitalId" + "}", encodeURIComponent(String(hospitalId)))
                .replace("{" + "SpecialtyTypeId" + "}", encodeURIComponent(String(specialtyTypeId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            var needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        GET /api/v1/hospitals/specialties
         * @summary Get all hospitalSpecialties.
         * @param {string} [hospitalId]
         * @param {string} [hospitalName]
         * @param {string} [specialtyId]
         * @param {string} [specialtyName]
         * @param {string} [specialtyTypeId]
         * @param {object} [marketingType]
         * @param {Date} [created]
         * @param {number} [page]
         * @param {number} [limit]
         * @param {Date} [lastRetrieved]
         * @param {boolean} [current]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsSpecialtiesGet: function (hospitalId, hospitalName, specialtyId, specialtyName, specialtyTypeId, marketingType, created, page, limit, lastRetrieved, current, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/api/v1/hospitals/specialties";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (hospitalId !== undefined) {
                localVarQueryParameter['HospitalId'] = hospitalId;
            }
            if (hospitalName !== undefined) {
                localVarQueryParameter['HospitalName'] = hospitalName;
            }
            if (specialtyId !== undefined) {
                localVarQueryParameter['SpecialtyId'] = specialtyId;
            }
            if (specialtyName !== undefined) {
                localVarQueryParameter['SpecialtyName'] = specialtyName;
            }
            if (specialtyTypeId !== undefined) {
                localVarQueryParameter['SpecialtyTypeId'] = specialtyTypeId;
            }
            if (marketingType !== undefined) {
                localVarQueryParameter['MarketingType'] = marketingType;
            }
            if (created !== undefined) {
                localVarQueryParameter['Created'] = (created instanceof Date) ?
                    created.toISOString() :
                    created;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (lastRetrieved !== undefined) {
                localVarQueryParameter['lastRetrieved'] = (lastRetrieved instanceof Date) ?
                    lastRetrieved.toISOString() :
                    lastRetrieved;
            }
            if (current !== undefined) {
                localVarQueryParameter['Current'] = current;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * HospitalSpecialtiesApi - functional programming interface
 * @export
 */
exports.HospitalSpecialtiesApiFp = function (configuration) {
    return {
        /**
         * Sample request:        DELETE /api/v1/hospitals/1/specialties/1
         * @summary Delete hospitalSpecialty.
         * @param {string} hospitalId
         * @param {string} specialtyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdDelete: function (hospitalId, specialtyId, options) {
            var localVarAxiosArgs = exports.HospitalSpecialtiesApiAxiosParamCreator(configuration).apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdDelete(hospitalId, specialtyId, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        POST /api/v1/hospitals/1/specialties/1
         * @summary Create hospitalSpecialty.
         * @param {string} hospitalId
         * @param {string} specialtyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdPost: function (hospitalId, specialtyId, options) {
            var localVarAxiosArgs = exports.HospitalSpecialtiesApiAxiosParamCreator(configuration).apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdPost(hospitalId, specialtyId, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        PUT /api/v1/hospitals/1/specialtysequence      {          \"specialtyType\": \"Endocrinology\",          \"hospitalSpecialtySequence\": [14, 30, 5, 7]      }
         * @summary Update hospitalSpecialty sequence.
         * @param {string} hospitalId
         * @param {string} specialtyTypeId
         * @param {UpdateHospitalSpecialtySequenceCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdSpecialtysequencePut: function (hospitalId, specialtyTypeId, body, options) {
            var localVarAxiosArgs = exports.HospitalSpecialtiesApiAxiosParamCreator(configuration).apiV1HospitalsHospitalIdSpecialtysequencePut(hospitalId, specialtyTypeId, body, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        GET /api/v1/hospitals/specialties
         * @summary Get all hospitalSpecialties.
         * @param {string} [hospitalId]
         * @param {string} [hospitalName]
         * @param {string} [specialtyId]
         * @param {string} [specialtyName]
         * @param {string} [specialtyTypeId]
         * @param {object} [marketingType]
         * @param {Date} [created]
         * @param {number} [page]
         * @param {number} [limit]
         * @param {Date} [lastRetrieved]
         * @param {boolean} [current]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsSpecialtiesGet: function (hospitalId, hospitalName, specialtyId, specialtyName, specialtyTypeId, marketingType, created, page, limit, lastRetrieved, current, options) {
            var localVarAxiosArgs = exports.HospitalSpecialtiesApiAxiosParamCreator(configuration).apiV1HospitalsSpecialtiesGet(hospitalId, hospitalName, specialtyId, specialtyName, specialtyTypeId, marketingType, created, page, limit, lastRetrieved, current, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * HospitalSpecialtiesApi - factory interface
 * @export
 */
exports.HospitalSpecialtiesApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Sample request:        DELETE /api/v1/hospitals/1/specialties/1
         * @summary Delete hospitalSpecialty.
         * @param {string} hospitalId
         * @param {string} specialtyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdDelete: function (hospitalId, specialtyId, options) {
            return exports.HospitalSpecialtiesApiFp(configuration).apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdDelete(hospitalId, specialtyId, options)(axios, basePath);
        },
        /**
         * Sample request:        POST /api/v1/hospitals/1/specialties/1
         * @summary Create hospitalSpecialty.
         * @param {string} hospitalId
         * @param {string} specialtyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdPost: function (hospitalId, specialtyId, options) {
            return exports.HospitalSpecialtiesApiFp(configuration).apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdPost(hospitalId, specialtyId, options)(axios, basePath);
        },
        /**
         * Sample request:        PUT /api/v1/hospitals/1/specialtysequence      {          \"specialtyType\": \"Endocrinology\",          \"hospitalSpecialtySequence\": [14, 30, 5, 7]      }
         * @summary Update hospitalSpecialty sequence.
         * @param {string} hospitalId
         * @param {string} specialtyTypeId
         * @param {UpdateHospitalSpecialtySequenceCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdSpecialtysequencePut: function (hospitalId, specialtyTypeId, body, options) {
            return exports.HospitalSpecialtiesApiFp(configuration).apiV1HospitalsHospitalIdSpecialtysequencePut(hospitalId, specialtyTypeId, body, options)(axios, basePath);
        },
        /**
         * Sample request:        GET /api/v1/hospitals/specialties
         * @summary Get all hospitalSpecialties.
         * @param {string} [hospitalId]
         * @param {string} [hospitalName]
         * @param {string} [specialtyId]
         * @param {string} [specialtyName]
         * @param {string} [specialtyTypeId]
         * @param {object} [marketingType]
         * @param {Date} [created]
         * @param {number} [page]
         * @param {number} [limit]
         * @param {Date} [lastRetrieved]
         * @param {boolean} [current]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsSpecialtiesGet: function (hospitalId, hospitalName, specialtyId, specialtyName, specialtyTypeId, marketingType, created, page, limit, lastRetrieved, current, options) {
            return exports.HospitalSpecialtiesApiFp(configuration).apiV1HospitalsSpecialtiesGet(hospitalId, hospitalName, specialtyId, specialtyName, specialtyTypeId, marketingType, created, page, limit, lastRetrieved, current, options)(axios, basePath);
        },
    };
};
/**
 * HospitalSpecialtiesApi - object-oriented interface
 * @export
 * @class HospitalSpecialtiesApi
 * @extends {BaseAPI}
 */
var HospitalSpecialtiesApi = /** @class */ (function (_super) {
    __extends(HospitalSpecialtiesApi, _super);
    function HospitalSpecialtiesApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Sample request:        DELETE /api/v1/hospitals/1/specialties/1
     * @summary Delete hospitalSpecialty.
     * @param {string} hospitalId
     * @param {string} specialtyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HospitalSpecialtiesApi
     */
    HospitalSpecialtiesApi.prototype.apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdDelete = function (hospitalId, specialtyId, options) {
        return exports.HospitalSpecialtiesApiFp(this.configuration).apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdDelete(hospitalId, specialtyId, options)(this.axios, this.basePath);
    };
    /**
     * Sample request:        POST /api/v1/hospitals/1/specialties/1
     * @summary Create hospitalSpecialty.
     * @param {string} hospitalId
     * @param {string} specialtyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HospitalSpecialtiesApi
     */
    HospitalSpecialtiesApi.prototype.apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdPost = function (hospitalId, specialtyId, options) {
        return exports.HospitalSpecialtiesApiFp(this.configuration).apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdPost(hospitalId, specialtyId, options)(this.axios, this.basePath);
    };
    /**
     * Sample request:        PUT /api/v1/hospitals/1/specialtysequence      {          \"specialtyType\": \"Endocrinology\",          \"hospitalSpecialtySequence\": [14, 30, 5, 7]      }
     * @summary Update hospitalSpecialty sequence.
     * @param {string} hospitalId
     * @param {string} specialtyTypeId
     * @param {UpdateHospitalSpecialtySequenceCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HospitalSpecialtiesApi
     */
    HospitalSpecialtiesApi.prototype.apiV1HospitalsHospitalIdSpecialtysequencePut = function (hospitalId, specialtyTypeId, body, options) {
        return exports.HospitalSpecialtiesApiFp(this.configuration).apiV1HospitalsHospitalIdSpecialtysequencePut(hospitalId, specialtyTypeId, body, options)(this.axios, this.basePath);
    };
    /**
     * Sample request:        GET /api/v1/hospitals/specialties
     * @summary Get all hospitalSpecialties.
     * @param {string} [hospitalId]
     * @param {string} [hospitalName]
     * @param {string} [specialtyId]
     * @param {string} [specialtyName]
     * @param {string} [specialtyTypeId]
     * @param {object} [marketingType]
     * @param {Date} [created]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HospitalSpecialtiesApi
     */
    HospitalSpecialtiesApi.prototype.apiV1HospitalsSpecialtiesGet = function (hospitalId, hospitalName, specialtyId, specialtyName, specialtyTypeId, marketingType, created, page, limit, lastRetrieved, current, options) {
        return exports.HospitalSpecialtiesApiFp(this.configuration).apiV1HospitalsSpecialtiesGet(hospitalId, hospitalName, specialtyId, specialtyName, specialtyTypeId, marketingType, created, page, limit, lastRetrieved, current, options)(this.axios, this.basePath);
    };
    return HospitalSpecialtiesApi;
}(base_1.BaseAPI));
exports.HospitalSpecialtiesApi = HospitalSpecialtiesApi;
/**
 * HospitalsApi - axios parameter creator
 * @export
 */
exports.HospitalsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {string} [id]
         * @param {string} [name]
         * @param {string} [description]
         * @param {string} [countryId]
         * @param {Date} [created]
         * @param {object} [marketingType]
         * @param {string} [specialtyTypeId]
         * @param {string} [specialtyId]
         * @param {string} [serviceId]
         * @param {string} [exceptHospitalId]
         * @param {boolean} [showHidden]
         * @param {number} [page]
         * @param {number} [limit]
         * @param {Date} [lastRetrieved]
         * @param {boolean} [current]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsCurrentGet: function (id, name, description, countryId, created, marketingType, specialtyTypeId, specialtyId, serviceId, exceptHospitalId, showHidden, page, limit, lastRetrieved, current, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/api/v1/hospitals/current";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }
            if (name !== undefined) {
                localVarQueryParameter['Name'] = name;
            }
            if (description !== undefined) {
                localVarQueryParameter['Description'] = description;
            }
            if (countryId !== undefined) {
                localVarQueryParameter['CountryId'] = countryId;
            }
            if (created !== undefined) {
                localVarQueryParameter['Created'] = (created instanceof Date) ?
                    created.toISOString() :
                    created;
            }
            if (marketingType !== undefined) {
                localVarQueryParameter['MarketingType'] = marketingType;
            }
            if (specialtyTypeId !== undefined) {
                localVarQueryParameter['SpecialtyTypeId'] = specialtyTypeId;
            }
            if (specialtyId !== undefined) {
                localVarQueryParameter['SpecialtyId'] = specialtyId;
            }
            if (serviceId !== undefined) {
                localVarQueryParameter['ServiceId'] = serviceId;
            }
            if (exceptHospitalId !== undefined) {
                localVarQueryParameter['ExceptHospitalId'] = exceptHospitalId;
            }
            if (showHidden !== undefined) {
                localVarQueryParameter['ShowHidden'] = showHidden;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (lastRetrieved !== undefined) {
                localVarQueryParameter['lastRetrieved'] = (lastRetrieved instanceof Date) ?
                    lastRetrieved.toISOString() :
                    lastRetrieved;
            }
            if (current !== undefined) {
                localVarQueryParameter['Current'] = current;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        GET /api/v1/hospitals      {          \"pageQueryFilter\": {              \"page\": 1,              \"limit\": 20,              \"lastRetrived\": \"2020-02-05T08:40\"          },          \"searchString\": \"Samsung\"      }
         * @summary Get all hospitals.
         * @param {string} [id]
         * @param {string} [name]
         * @param {string} [description]
         * @param {string} [countryId]
         * @param {Date} [created]
         * @param {object} [marketingType]
         * @param {string} [specialtyTypeId]
         * @param {string} [specialtyId]
         * @param {string} [serviceId]
         * @param {string} [exceptHospitalId]
         * @param {boolean} [showHidden]
         * @param {number} [page]
         * @param {number} [limit]
         * @param {Date} [lastRetrieved]
         * @param {boolean} [current]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsGet: function (id, name, description, countryId, created, marketingType, specialtyTypeId, specialtyId, serviceId, exceptHospitalId, showHidden, page, limit, lastRetrieved, current, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/api/v1/hospitals";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }
            if (name !== undefined) {
                localVarQueryParameter['Name'] = name;
            }
            if (description !== undefined) {
                localVarQueryParameter['Description'] = description;
            }
            if (countryId !== undefined) {
                localVarQueryParameter['CountryId'] = countryId;
            }
            if (created !== undefined) {
                localVarQueryParameter['Created'] = (created instanceof Date) ?
                    created.toISOString() :
                    created;
            }
            if (marketingType !== undefined) {
                localVarQueryParameter['MarketingType'] = marketingType;
            }
            if (specialtyTypeId !== undefined) {
                localVarQueryParameter['SpecialtyTypeId'] = specialtyTypeId;
            }
            if (specialtyId !== undefined) {
                localVarQueryParameter['SpecialtyId'] = specialtyId;
            }
            if (serviceId !== undefined) {
                localVarQueryParameter['ServiceId'] = serviceId;
            }
            if (exceptHospitalId !== undefined) {
                localVarQueryParameter['ExceptHospitalId'] = exceptHospitalId;
            }
            if (showHidden !== undefined) {
                localVarQueryParameter['ShowHidden'] = showHidden;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (lastRetrieved !== undefined) {
                localVarQueryParameter['lastRetrieved'] = (lastRetrieved instanceof Date) ?
                    lastRetrieved.toISOString() :
                    lastRetrieved;
            }
            if (current !== undefined) {
                localVarQueryParameter['Current'] = current;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        DELETE /api/v1/hospitals/1
         * @summary Delete hospital.
         * @param {string} hospitalId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdDelete: function (hospitalId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'hospitalId' is not null or undefined
            if (hospitalId === null || hospitalId === undefined) {
                throw new base_1.RequiredError('hospitalId', 'Required parameter hospitalId was null or undefined when calling apiV1HospitalsHospitalIdDelete.');
            }
            var localVarPath = "/api/v1/hospitals/{hospitalId}"
                .replace("{" + "hospitalId" + "}", encodeURIComponent(String(hospitalId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        GET /api/v1/hospitals/1
         * @summary Get hospita.
         * @param {string} hospitalId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdGet: function (hospitalId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'hospitalId' is not null or undefined
            if (hospitalId === null || hospitalId === undefined) {
                throw new base_1.RequiredError('hospitalId', 'Required parameter hospitalId was null or undefined when calling apiV1HospitalsHospitalIdGet.');
            }
            var localVarPath = "/api/v1/hospitals/{hospitalId}"
                .replace("{" + "hospitalId" + "}", encodeURIComponent(String(hospitalId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sameple request:        PUT /api/v1/hospitals      {          \"overview\": \"Overview of Samsung Medical Center\",          \"bedsCount\": 2436,          \"operationsPerYear\": 44,          \"foundationYear\": 2012,          \"departmentsCount\": 200,          \"medicalStaffCount\": 1200,      }
         * @summary Update hospital.
         * @param {string} hospitalId
         * @param {UpdateHospitalCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdPut: function (hospitalId, body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'hospitalId' is not null or undefined
            if (hospitalId === null || hospitalId === undefined) {
                throw new base_1.RequiredError('hospitalId', 'Required parameter hospitalId was null or undefined when calling apiV1HospitalsHospitalIdPut.');
            }
            var localVarPath = "/api/v1/hospitals/{hospitalId}"
                .replace("{" + "hospitalId" + "}", encodeURIComponent(String(hospitalId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            var needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        POST /api/v1/hospitals      {          \"name\": \"Samsung Medical Center\",          \"description\": \"Comprehensive Cancer Center in Seoul, South Korea is nationally ranked in 1 adult specialty.\",          \"logo\": \"http://www.samsunghospital.com/home/main/index.do\",          \"overview\": \"Overview of Samsung Medical Center\",          \"bedsCount\": 1436,          \"operationsPerYear\": 34,          \"foundationYear\": 2012,          \"departmentsCount\": 20,          \"medicalStaffCount\": 600,          \"countryId\": 1,          \"awards\": [            {              \"name\": \"Award1\",              \"image\": \"string\",              \"date\": \"2020-02-05T09:29:19.240Z\"            },            {              \"name\": \"Award2\",              \"image\": \"string\",              \"date\": \"2020-02-05T09:29:19.240Z\"            }          ],          \"medias\": [            {              \"mediaType\": \"Photo\",              \"url\": \"https://cloudhospitalblob.blob.core.windows.net/imagecontainer/SamsungMedicalCenter.jpg\",              \"thumbnailUrl\": \"https://cloudhospitalblob.blob.core.windows.net/thumbnailcontainer/SamsungMedicalCenter.jpg\",              \"description\": \"string\",              \"order\": 0            },            {              \"mediaType\": \"Video\",              \"url\": \"string\",              \"description\": \"string\",              \"order\": 1            }          ],          \"location\": {            \"latitude\": 37.4881568,            \"longitude\": 127.0855952,            \"country\": \"Korea\",            \"state\": \"string\",            \"county\": \"Gangnamgu\",            \"city\": \"Seoul\",            \"zipCode\": \"12345\",            \"address\": \"Il-won ro 81\"          }      }
         * @summary Create a hospital.
         * @param {CreateHospitalCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsPost: function (body, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/api/v1/hospitals";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            var needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get hospital by slug.
         * @param {string} slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsSlugsSlugGet: function (slug, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'slug' is not null or undefined
            if (slug === null || slug === undefined) {
                throw new base_1.RequiredError('slug', 'Required parameter slug was null or undefined when calling apiV1HospitalsSlugsSlugGet.');
            }
            var localVarPath = "/api/v1/hospitals/slugs/{slug}"
                .replace("{" + "slug" + "}", encodeURIComponent(String(slug)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * HospitalsApi - functional programming interface
 * @export
 */
exports.HospitalsApiFp = function (configuration) {
    return {
        /**
         *
         * @param {string} [id]
         * @param {string} [name]
         * @param {string} [description]
         * @param {string} [countryId]
         * @param {Date} [created]
         * @param {object} [marketingType]
         * @param {string} [specialtyTypeId]
         * @param {string} [specialtyId]
         * @param {string} [serviceId]
         * @param {string} [exceptHospitalId]
         * @param {boolean} [showHidden]
         * @param {number} [page]
         * @param {number} [limit]
         * @param {Date} [lastRetrieved]
         * @param {boolean} [current]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsCurrentGet: function (id, name, description, countryId, created, marketingType, specialtyTypeId, specialtyId, serviceId, exceptHospitalId, showHidden, page, limit, lastRetrieved, current, options) {
            var localVarAxiosArgs = exports.HospitalsApiAxiosParamCreator(configuration).apiV1HospitalsCurrentGet(id, name, description, countryId, created, marketingType, specialtyTypeId, specialtyId, serviceId, exceptHospitalId, showHidden, page, limit, lastRetrieved, current, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        GET /api/v1/hospitals      {          \"pageQueryFilter\": {              \"page\": 1,              \"limit\": 20,              \"lastRetrived\": \"2020-02-05T08:40\"          },          \"searchString\": \"Samsung\"      }
         * @summary Get all hospitals.
         * @param {string} [id]
         * @param {string} [name]
         * @param {string} [description]
         * @param {string} [countryId]
         * @param {Date} [created]
         * @param {object} [marketingType]
         * @param {string} [specialtyTypeId]
         * @param {string} [specialtyId]
         * @param {string} [serviceId]
         * @param {string} [exceptHospitalId]
         * @param {boolean} [showHidden]
         * @param {number} [page]
         * @param {number} [limit]
         * @param {Date} [lastRetrieved]
         * @param {boolean} [current]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsGet: function (id, name, description, countryId, created, marketingType, specialtyTypeId, specialtyId, serviceId, exceptHospitalId, showHidden, page, limit, lastRetrieved, current, options) {
            var localVarAxiosArgs = exports.HospitalsApiAxiosParamCreator(configuration).apiV1HospitalsGet(id, name, description, countryId, created, marketingType, specialtyTypeId, specialtyId, serviceId, exceptHospitalId, showHidden, page, limit, lastRetrieved, current, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        DELETE /api/v1/hospitals/1
         * @summary Delete hospital.
         * @param {string} hospitalId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdDelete: function (hospitalId, options) {
            var localVarAxiosArgs = exports.HospitalsApiAxiosParamCreator(configuration).apiV1HospitalsHospitalIdDelete(hospitalId, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        GET /api/v1/hospitals/1
         * @summary Get hospita.
         * @param {string} hospitalId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdGet: function (hospitalId, options) {
            var localVarAxiosArgs = exports.HospitalsApiAxiosParamCreator(configuration).apiV1HospitalsHospitalIdGet(hospitalId, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sameple request:        PUT /api/v1/hospitals      {          \"overview\": \"Overview of Samsung Medical Center\",          \"bedsCount\": 2436,          \"operationsPerYear\": 44,          \"foundationYear\": 2012,          \"departmentsCount\": 200,          \"medicalStaffCount\": 1200,      }
         * @summary Update hospital.
         * @param {string} hospitalId
         * @param {UpdateHospitalCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdPut: function (hospitalId, body, options) {
            var localVarAxiosArgs = exports.HospitalsApiAxiosParamCreator(configuration).apiV1HospitalsHospitalIdPut(hospitalId, body, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        POST /api/v1/hospitals      {          \"name\": \"Samsung Medical Center\",          \"description\": \"Comprehensive Cancer Center in Seoul, South Korea is nationally ranked in 1 adult specialty.\",          \"logo\": \"http://www.samsunghospital.com/home/main/index.do\",          \"overview\": \"Overview of Samsung Medical Center\",          \"bedsCount\": 1436,          \"operationsPerYear\": 34,          \"foundationYear\": 2012,          \"departmentsCount\": 20,          \"medicalStaffCount\": 600,          \"countryId\": 1,          \"awards\": [            {              \"name\": \"Award1\",              \"image\": \"string\",              \"date\": \"2020-02-05T09:29:19.240Z\"            },            {              \"name\": \"Award2\",              \"image\": \"string\",              \"date\": \"2020-02-05T09:29:19.240Z\"            }          ],          \"medias\": [            {              \"mediaType\": \"Photo\",              \"url\": \"https://cloudhospitalblob.blob.core.windows.net/imagecontainer/SamsungMedicalCenter.jpg\",              \"thumbnailUrl\": \"https://cloudhospitalblob.blob.core.windows.net/thumbnailcontainer/SamsungMedicalCenter.jpg\",              \"description\": \"string\",              \"order\": 0            },            {              \"mediaType\": \"Video\",              \"url\": \"string\",              \"description\": \"string\",              \"order\": 1            }          ],          \"location\": {            \"latitude\": 37.4881568,            \"longitude\": 127.0855952,            \"country\": \"Korea\",            \"state\": \"string\",            \"county\": \"Gangnamgu\",            \"city\": \"Seoul\",            \"zipCode\": \"12345\",            \"address\": \"Il-won ro 81\"          }      }
         * @summary Create a hospital.
         * @param {CreateHospitalCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsPost: function (body, options) {
            var localVarAxiosArgs = exports.HospitalsApiAxiosParamCreator(configuration).apiV1HospitalsPost(body, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Get hospital by slug.
         * @param {string} slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsSlugsSlugGet: function (slug, options) {
            var localVarAxiosArgs = exports.HospitalsApiAxiosParamCreator(configuration).apiV1HospitalsSlugsSlugGet(slug, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * HospitalsApi - factory interface
 * @export
 */
exports.HospitalsApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @param {string} [id]
         * @param {string} [name]
         * @param {string} [description]
         * @param {string} [countryId]
         * @param {Date} [created]
         * @param {object} [marketingType]
         * @param {string} [specialtyTypeId]
         * @param {string} [specialtyId]
         * @param {string} [serviceId]
         * @param {string} [exceptHospitalId]
         * @param {boolean} [showHidden]
         * @param {number} [page]
         * @param {number} [limit]
         * @param {Date} [lastRetrieved]
         * @param {boolean} [current]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsCurrentGet: function (id, name, description, countryId, created, marketingType, specialtyTypeId, specialtyId, serviceId, exceptHospitalId, showHidden, page, limit, lastRetrieved, current, options) {
            return exports.HospitalsApiFp(configuration).apiV1HospitalsCurrentGet(id, name, description, countryId, created, marketingType, specialtyTypeId, specialtyId, serviceId, exceptHospitalId, showHidden, page, limit, lastRetrieved, current, options)(axios, basePath);
        },
        /**
         * Sample request:        GET /api/v1/hospitals      {          \"pageQueryFilter\": {              \"page\": 1,              \"limit\": 20,              \"lastRetrived\": \"2020-02-05T08:40\"          },          \"searchString\": \"Samsung\"      }
         * @summary Get all hospitals.
         * @param {string} [id]
         * @param {string} [name]
         * @param {string} [description]
         * @param {string} [countryId]
         * @param {Date} [created]
         * @param {object} [marketingType]
         * @param {string} [specialtyTypeId]
         * @param {string} [specialtyId]
         * @param {string} [serviceId]
         * @param {string} [exceptHospitalId]
         * @param {boolean} [showHidden]
         * @param {number} [page]
         * @param {number} [limit]
         * @param {Date} [lastRetrieved]
         * @param {boolean} [current]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsGet: function (id, name, description, countryId, created, marketingType, specialtyTypeId, specialtyId, serviceId, exceptHospitalId, showHidden, page, limit, lastRetrieved, current, options) {
            return exports.HospitalsApiFp(configuration).apiV1HospitalsGet(id, name, description, countryId, created, marketingType, specialtyTypeId, specialtyId, serviceId, exceptHospitalId, showHidden, page, limit, lastRetrieved, current, options)(axios, basePath);
        },
        /**
         * Sample request:        DELETE /api/v1/hospitals/1
         * @summary Delete hospital.
         * @param {string} hospitalId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdDelete: function (hospitalId, options) {
            return exports.HospitalsApiFp(configuration).apiV1HospitalsHospitalIdDelete(hospitalId, options)(axios, basePath);
        },
        /**
         * Sample request:        GET /api/v1/hospitals/1
         * @summary Get hospita.
         * @param {string} hospitalId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdGet: function (hospitalId, options) {
            return exports.HospitalsApiFp(configuration).apiV1HospitalsHospitalIdGet(hospitalId, options)(axios, basePath);
        },
        /**
         * Sameple request:        PUT /api/v1/hospitals      {          \"overview\": \"Overview of Samsung Medical Center\",          \"bedsCount\": 2436,          \"operationsPerYear\": 44,          \"foundationYear\": 2012,          \"departmentsCount\": 200,          \"medicalStaffCount\": 1200,      }
         * @summary Update hospital.
         * @param {string} hospitalId
         * @param {UpdateHospitalCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdPut: function (hospitalId, body, options) {
            return exports.HospitalsApiFp(configuration).apiV1HospitalsHospitalIdPut(hospitalId, body, options)(axios, basePath);
        },
        /**
         * Sample request:        POST /api/v1/hospitals      {          \"name\": \"Samsung Medical Center\",          \"description\": \"Comprehensive Cancer Center in Seoul, South Korea is nationally ranked in 1 adult specialty.\",          \"logo\": \"http://www.samsunghospital.com/home/main/index.do\",          \"overview\": \"Overview of Samsung Medical Center\",          \"bedsCount\": 1436,          \"operationsPerYear\": 34,          \"foundationYear\": 2012,          \"departmentsCount\": 20,          \"medicalStaffCount\": 600,          \"countryId\": 1,          \"awards\": [            {              \"name\": \"Award1\",              \"image\": \"string\",              \"date\": \"2020-02-05T09:29:19.240Z\"            },            {              \"name\": \"Award2\",              \"image\": \"string\",              \"date\": \"2020-02-05T09:29:19.240Z\"            }          ],          \"medias\": [            {              \"mediaType\": \"Photo\",              \"url\": \"https://cloudhospitalblob.blob.core.windows.net/imagecontainer/SamsungMedicalCenter.jpg\",              \"thumbnailUrl\": \"https://cloudhospitalblob.blob.core.windows.net/thumbnailcontainer/SamsungMedicalCenter.jpg\",              \"description\": \"string\",              \"order\": 0            },            {              \"mediaType\": \"Video\",              \"url\": \"string\",              \"description\": \"string\",              \"order\": 1            }          ],          \"location\": {            \"latitude\": 37.4881568,            \"longitude\": 127.0855952,            \"country\": \"Korea\",            \"state\": \"string\",            \"county\": \"Gangnamgu\",            \"city\": \"Seoul\",            \"zipCode\": \"12345\",            \"address\": \"Il-won ro 81\"          }      }
         * @summary Create a hospital.
         * @param {CreateHospitalCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsPost: function (body, options) {
            return exports.HospitalsApiFp(configuration).apiV1HospitalsPost(body, options)(axios, basePath);
        },
        /**
         *
         * @summary Get hospital by slug.
         * @param {string} slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsSlugsSlugGet: function (slug, options) {
            return exports.HospitalsApiFp(configuration).apiV1HospitalsSlugsSlugGet(slug, options)(axios, basePath);
        },
    };
};
/**
 * HospitalsApi - object-oriented interface
 * @export
 * @class HospitalsApi
 * @extends {BaseAPI}
 */
var HospitalsApi = /** @class */ (function (_super) {
    __extends(HospitalsApi, _super);
    function HospitalsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {string} [id]
     * @param {string} [name]
     * @param {string} [description]
     * @param {string} [countryId]
     * @param {Date} [created]
     * @param {object} [marketingType]
     * @param {string} [specialtyTypeId]
     * @param {string} [specialtyId]
     * @param {string} [serviceId]
     * @param {string} [exceptHospitalId]
     * @param {boolean} [showHidden]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HospitalsApi
     */
    HospitalsApi.prototype.apiV1HospitalsCurrentGet = function (id, name, description, countryId, created, marketingType, specialtyTypeId, specialtyId, serviceId, exceptHospitalId, showHidden, page, limit, lastRetrieved, current, options) {
        return exports.HospitalsApiFp(this.configuration).apiV1HospitalsCurrentGet(id, name, description, countryId, created, marketingType, specialtyTypeId, specialtyId, serviceId, exceptHospitalId, showHidden, page, limit, lastRetrieved, current, options)(this.axios, this.basePath);
    };
    /**
     * Sample request:        GET /api/v1/hospitals      {          \"pageQueryFilter\": {              \"page\": 1,              \"limit\": 20,              \"lastRetrived\": \"2020-02-05T08:40\"          },          \"searchString\": \"Samsung\"      }
     * @summary Get all hospitals.
     * @param {string} [id]
     * @param {string} [name]
     * @param {string} [description]
     * @param {string} [countryId]
     * @param {Date} [created]
     * @param {object} [marketingType]
     * @param {string} [specialtyTypeId]
     * @param {string} [specialtyId]
     * @param {string} [serviceId]
     * @param {string} [exceptHospitalId]
     * @param {boolean} [showHidden]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HospitalsApi
     */
    HospitalsApi.prototype.apiV1HospitalsGet = function (id, name, description, countryId, created, marketingType, specialtyTypeId, specialtyId, serviceId, exceptHospitalId, showHidden, page, limit, lastRetrieved, current, options) {
        return exports.HospitalsApiFp(this.configuration).apiV1HospitalsGet(id, name, description, countryId, created, marketingType, specialtyTypeId, specialtyId, serviceId, exceptHospitalId, showHidden, page, limit, lastRetrieved, current, options)(this.axios, this.basePath);
    };
    /**
     * Sample request:        DELETE /api/v1/hospitals/1
     * @summary Delete hospital.
     * @param {string} hospitalId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HospitalsApi
     */
    HospitalsApi.prototype.apiV1HospitalsHospitalIdDelete = function (hospitalId, options) {
        return exports.HospitalsApiFp(this.configuration).apiV1HospitalsHospitalIdDelete(hospitalId, options)(this.axios, this.basePath);
    };
    /**
     * Sample request:        GET /api/v1/hospitals/1
     * @summary Get hospita.
     * @param {string} hospitalId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HospitalsApi
     */
    HospitalsApi.prototype.apiV1HospitalsHospitalIdGet = function (hospitalId, options) {
        return exports.HospitalsApiFp(this.configuration).apiV1HospitalsHospitalIdGet(hospitalId, options)(this.axios, this.basePath);
    };
    /**
     * Sameple request:        PUT /api/v1/hospitals      {          \"overview\": \"Overview of Samsung Medical Center\",          \"bedsCount\": 2436,          \"operationsPerYear\": 44,          \"foundationYear\": 2012,          \"departmentsCount\": 200,          \"medicalStaffCount\": 1200,      }
     * @summary Update hospital.
     * @param {string} hospitalId
     * @param {UpdateHospitalCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HospitalsApi
     */
    HospitalsApi.prototype.apiV1HospitalsHospitalIdPut = function (hospitalId, body, options) {
        return exports.HospitalsApiFp(this.configuration).apiV1HospitalsHospitalIdPut(hospitalId, body, options)(this.axios, this.basePath);
    };
    /**
     * Sample request:        POST /api/v1/hospitals      {          \"name\": \"Samsung Medical Center\",          \"description\": \"Comprehensive Cancer Center in Seoul, South Korea is nationally ranked in 1 adult specialty.\",          \"logo\": \"http://www.samsunghospital.com/home/main/index.do\",          \"overview\": \"Overview of Samsung Medical Center\",          \"bedsCount\": 1436,          \"operationsPerYear\": 34,          \"foundationYear\": 2012,          \"departmentsCount\": 20,          \"medicalStaffCount\": 600,          \"countryId\": 1,          \"awards\": [            {              \"name\": \"Award1\",              \"image\": \"string\",              \"date\": \"2020-02-05T09:29:19.240Z\"            },            {              \"name\": \"Award2\",              \"image\": \"string\",              \"date\": \"2020-02-05T09:29:19.240Z\"            }          ],          \"medias\": [            {              \"mediaType\": \"Photo\",              \"url\": \"https://cloudhospitalblob.blob.core.windows.net/imagecontainer/SamsungMedicalCenter.jpg\",              \"thumbnailUrl\": \"https://cloudhospitalblob.blob.core.windows.net/thumbnailcontainer/SamsungMedicalCenter.jpg\",              \"description\": \"string\",              \"order\": 0            },            {              \"mediaType\": \"Video\",              \"url\": \"string\",              \"description\": \"string\",              \"order\": 1            }          ],          \"location\": {            \"latitude\": 37.4881568,            \"longitude\": 127.0855952,            \"country\": \"Korea\",            \"state\": \"string\",            \"county\": \"Gangnamgu\",            \"city\": \"Seoul\",            \"zipCode\": \"12345\",            \"address\": \"Il-won ro 81\"          }      }
     * @summary Create a hospital.
     * @param {CreateHospitalCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HospitalsApi
     */
    HospitalsApi.prototype.apiV1HospitalsPost = function (body, options) {
        return exports.HospitalsApiFp(this.configuration).apiV1HospitalsPost(body, options)(this.axios, this.basePath);
    };
    /**
     *
     * @summary Get hospital by slug.
     * @param {string} slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HospitalsApi
     */
    HospitalsApi.prototype.apiV1HospitalsSlugsSlugGet = function (slug, options) {
        return exports.HospitalsApiFp(this.configuration).apiV1HospitalsSlugsSlugGet(slug, options)(this.axios, this.basePath);
    };
    return HospitalsApi;
}(base_1.BaseAPI));
exports.HospitalsApi = HospitalsApi;
/**
 * IdentityApi - axios parameter creator
 * @export
 */
exports.IdentityApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Smaple request:        GET /api/v1/identity
         * @summary Get current user\'s Identity claims.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IdentityGet: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/api/v1/identity";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * IdentityApi - functional programming interface
 * @export
 */
exports.IdentityApiFp = function (configuration) {
    return {
        /**
         * Smaple request:        GET /api/v1/identity
         * @summary Get current user\'s Identity claims.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IdentityGet: function (options) {
            var localVarAxiosArgs = exports.IdentityApiAxiosParamCreator(configuration).apiV1IdentityGet(options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * IdentityApi - factory interface
 * @export
 */
exports.IdentityApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Smaple request:        GET /api/v1/identity
         * @summary Get current user\'s Identity claims.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IdentityGet: function (options) {
            return exports.IdentityApiFp(configuration).apiV1IdentityGet(options)(axios, basePath);
        },
    };
};
/**
 * IdentityApi - object-oriented interface
 * @export
 * @class IdentityApi
 * @extends {BaseAPI}
 */
var IdentityApi = /** @class */ (function (_super) {
    __extends(IdentityApi, _super);
    function IdentityApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Smaple request:        GET /api/v1/identity
     * @summary Get current user\'s Identity claims.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityApi
     */
    IdentityApi.prototype.apiV1IdentityGet = function (options) {
        return exports.IdentityApiFp(this.configuration).apiV1IdentityGet(options)(this.axios, this.basePath);
    };
    return IdentityApi;
}(base_1.BaseAPI));
exports.IdentityApi = IdentityApi;
/**
 * ImagesApi - axios parameter creator
 * @export
 */
exports.ImagesApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ImagesPost: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/api/v1/images";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * ImagesApi - functional programming interface
 * @export
 */
exports.ImagesApiFp = function (configuration) {
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ImagesPost: function (options) {
            var localVarAxiosArgs = exports.ImagesApiAxiosParamCreator(configuration).apiV1ImagesPost(options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * ImagesApi - factory interface
 * @export
 */
exports.ImagesApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ImagesPost: function (options) {
            return exports.ImagesApiFp(configuration).apiV1ImagesPost(options)(axios, basePath);
        },
    };
};
/**
 * ImagesApi - object-oriented interface
 * @export
 * @class ImagesApi
 * @extends {BaseAPI}
 */
var ImagesApi = /** @class */ (function (_super) {
    __extends(ImagesApi, _super);
    function ImagesApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImagesApi
     */
    ImagesApi.prototype.apiV1ImagesPost = function (options) {
        return exports.ImagesApiFp(this.configuration).apiV1ImagesPost(options)(this.axios, this.basePath);
    };
    return ImagesApi;
}(base_1.BaseAPI));
exports.ImagesApi = ImagesApi;
/**
 * ManagersApi - axios parameter creator
 * @export
 */
exports.ManagersApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Sample request:        GET /api/v1/managers      {          \"pageQueryFilter\": {              \"page\": 1,              \"limit\": 20,              \"lastRetrived\": \"2020-02-05T08:40\"          },          \"searchString\": \"manager\"      }
         * @summary Get all hospital managers.
         * @param {string} [id]
         * @param {string} [fullname]
         * @param {string} [email]
         * @param {object} [gender]
         * @param {Date} [dateOfBirth]
         * @param {Date} [created]
         * @param {number} [page]
         * @param {number} [limit]
         * @param {Date} [lastRetrieved]
         * @param {boolean} [current]
         * @param {string} [hospitalId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagersGet: function (id, fullname, email, gender, dateOfBirth, created, page, limit, lastRetrieved, current, hospitalId, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/api/v1/managers";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }
            if (fullname !== undefined) {
                localVarQueryParameter['Fullname'] = fullname;
            }
            if (email !== undefined) {
                localVarQueryParameter['Email'] = email;
            }
            if (gender !== undefined) {
                localVarQueryParameter['Gender'] = gender;
            }
            if (dateOfBirth !== undefined) {
                localVarQueryParameter['DateOfBirth'] = (dateOfBirth instanceof Date) ?
                    dateOfBirth.toISOString() :
                    dateOfBirth;
            }
            if (created !== undefined) {
                localVarQueryParameter['Created'] = (created instanceof Date) ?
                    created.toISOString() :
                    created;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (lastRetrieved !== undefined) {
                localVarQueryParameter['lastRetrieved'] = (lastRetrieved instanceof Date) ?
                    lastRetrieved.toISOString() :
                    lastRetrieved;
            }
            if (current !== undefined) {
                localVarQueryParameter['Current'] = current;
            }
            if (hospitalId !== undefined) {
                localVarQueryParameter['hospitalId'] = hospitalId;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        DELETE /api/v1/managers/1
         * @summary Delete hospital manager.
         * @param {string} managerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagersManagerIdDelete: function (managerId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'managerId' is not null or undefined
            if (managerId === null || managerId === undefined) {
                throw new base_1.RequiredError('managerId', 'Required parameter managerId was null or undefined when calling apiV1ManagersManagerIdDelete.');
            }
            var localVarPath = "/api/v1/managers/{managerId}"
                .replace("{" + "managerId" + "}", encodeURIComponent(String(managerId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        GET /api/v1/managers/1
         * @summary Get hospital manager.
         * @param {string} managerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagersManagerIdGet: function (managerId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'managerId' is not null or undefined
            if (managerId === null || managerId === undefined) {
                throw new base_1.RequiredError('managerId', 'Required parameter managerId was null or undefined when calling apiV1ManagersManagerIdGet.');
            }
            var localVarPath = "/api/v1/managers/{managerId}"
                .replace("{" + "managerId" + "}", encodeURIComponent(String(managerId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        PUT /api/v1/managers/1      {          \"firstName\": \"string\",          \"lastName\": \"string\",          \"photo\": \"string\",          \"locations\": [            {              \"locationType\": \"LivesIn\",              \"latitude\": 0,              \"longitude\": 0,              \"country\": \"string\",              \"state\": \"string\",              \"county\": \"string\",              \"city\": \"string\",              \"zipCode\": \"string\",              \"address\": \"string\"            }          ]      }
         * @summary Update hospital manager.
         * @param {string} managerId
         * @param {UpdateManagerCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagersManagerIdPut: function (managerId, body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'managerId' is not null or undefined
            if (managerId === null || managerId === undefined) {
                throw new base_1.RequiredError('managerId', 'Required parameter managerId was null or undefined when calling apiV1ManagersManagerIdPut.');
            }
            var localVarPath = "/api/v1/managers/{managerId}"
                .replace("{" + "managerId" + "}", encodeURIComponent(String(managerId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            var needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        POST /api/v1/managers      {          \"userName\": \"manager\",          \"email\": \"manger@icloudhospital.com\",          \"hospitalId\": 1,          \"firstName\": \"cloud\",          \"lastName\": \"manager\",          \"photo\": \"string\",          \"photoThumbnail\": \"string\",          \"gender\": \"NotSpecified\",          \"dateOfBirth\": \"2020-02-22T15:28:09.897Z\",          \"locations\": [            {              \"locationType\": \"LivesIn\",              \"latitude\": 0,              \"longitude\": 0,              \"country\": \"string\",              \"state\": \"string\",              \"county\": \"string\",              \"city\": \"string\",              \"zipCode\": \"string\",              \"address\": \"string\"            }          ]      }
         * @summary Create hospital manager.
         * @param {CreateManagerCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagersPost: function (body, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/api/v1/managers";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            var needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * ManagersApi - functional programming interface
 * @export
 */
exports.ManagersApiFp = function (configuration) {
    return {
        /**
         * Sample request:        GET /api/v1/managers      {          \"pageQueryFilter\": {              \"page\": 1,              \"limit\": 20,              \"lastRetrived\": \"2020-02-05T08:40\"          },          \"searchString\": \"manager\"      }
         * @summary Get all hospital managers.
         * @param {string} [id]
         * @param {string} [fullname]
         * @param {string} [email]
         * @param {object} [gender]
         * @param {Date} [dateOfBirth]
         * @param {Date} [created]
         * @param {number} [page]
         * @param {number} [limit]
         * @param {Date} [lastRetrieved]
         * @param {boolean} [current]
         * @param {string} [hospitalId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagersGet: function (id, fullname, email, gender, dateOfBirth, created, page, limit, lastRetrieved, current, hospitalId, options) {
            var localVarAxiosArgs = exports.ManagersApiAxiosParamCreator(configuration).apiV1ManagersGet(id, fullname, email, gender, dateOfBirth, created, page, limit, lastRetrieved, current, hospitalId, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        DELETE /api/v1/managers/1
         * @summary Delete hospital manager.
         * @param {string} managerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagersManagerIdDelete: function (managerId, options) {
            var localVarAxiosArgs = exports.ManagersApiAxiosParamCreator(configuration).apiV1ManagersManagerIdDelete(managerId, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        GET /api/v1/managers/1
         * @summary Get hospital manager.
         * @param {string} managerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagersManagerIdGet: function (managerId, options) {
            var localVarAxiosArgs = exports.ManagersApiAxiosParamCreator(configuration).apiV1ManagersManagerIdGet(managerId, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        PUT /api/v1/managers/1      {          \"firstName\": \"string\",          \"lastName\": \"string\",          \"photo\": \"string\",          \"locations\": [            {              \"locationType\": \"LivesIn\",              \"latitude\": 0,              \"longitude\": 0,              \"country\": \"string\",              \"state\": \"string\",              \"county\": \"string\",              \"city\": \"string\",              \"zipCode\": \"string\",              \"address\": \"string\"            }          ]      }
         * @summary Update hospital manager.
         * @param {string} managerId
         * @param {UpdateManagerCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagersManagerIdPut: function (managerId, body, options) {
            var localVarAxiosArgs = exports.ManagersApiAxiosParamCreator(configuration).apiV1ManagersManagerIdPut(managerId, body, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        POST /api/v1/managers      {          \"userName\": \"manager\",          \"email\": \"manger@icloudhospital.com\",          \"hospitalId\": 1,          \"firstName\": \"cloud\",          \"lastName\": \"manager\",          \"photo\": \"string\",          \"photoThumbnail\": \"string\",          \"gender\": \"NotSpecified\",          \"dateOfBirth\": \"2020-02-22T15:28:09.897Z\",          \"locations\": [            {              \"locationType\": \"LivesIn\",              \"latitude\": 0,              \"longitude\": 0,              \"country\": \"string\",              \"state\": \"string\",              \"county\": \"string\",              \"city\": \"string\",              \"zipCode\": \"string\",              \"address\": \"string\"            }          ]      }
         * @summary Create hospital manager.
         * @param {CreateManagerCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagersPost: function (body, options) {
            var localVarAxiosArgs = exports.ManagersApiAxiosParamCreator(configuration).apiV1ManagersPost(body, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * ManagersApi - factory interface
 * @export
 */
exports.ManagersApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Sample request:        GET /api/v1/managers      {          \"pageQueryFilter\": {              \"page\": 1,              \"limit\": 20,              \"lastRetrived\": \"2020-02-05T08:40\"          },          \"searchString\": \"manager\"      }
         * @summary Get all hospital managers.
         * @param {string} [id]
         * @param {string} [fullname]
         * @param {string} [email]
         * @param {object} [gender]
         * @param {Date} [dateOfBirth]
         * @param {Date} [created]
         * @param {number} [page]
         * @param {number} [limit]
         * @param {Date} [lastRetrieved]
         * @param {boolean} [current]
         * @param {string} [hospitalId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagersGet: function (id, fullname, email, gender, dateOfBirth, created, page, limit, lastRetrieved, current, hospitalId, options) {
            return exports.ManagersApiFp(configuration).apiV1ManagersGet(id, fullname, email, gender, dateOfBirth, created, page, limit, lastRetrieved, current, hospitalId, options)(axios, basePath);
        },
        /**
         * Sample request:        DELETE /api/v1/managers/1
         * @summary Delete hospital manager.
         * @param {string} managerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagersManagerIdDelete: function (managerId, options) {
            return exports.ManagersApiFp(configuration).apiV1ManagersManagerIdDelete(managerId, options)(axios, basePath);
        },
        /**
         * Sample request:        GET /api/v1/managers/1
         * @summary Get hospital manager.
         * @param {string} managerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagersManagerIdGet: function (managerId, options) {
            return exports.ManagersApiFp(configuration).apiV1ManagersManagerIdGet(managerId, options)(axios, basePath);
        },
        /**
         * Sample request:        PUT /api/v1/managers/1      {          \"firstName\": \"string\",          \"lastName\": \"string\",          \"photo\": \"string\",          \"locations\": [            {              \"locationType\": \"LivesIn\",              \"latitude\": 0,              \"longitude\": 0,              \"country\": \"string\",              \"state\": \"string\",              \"county\": \"string\",              \"city\": \"string\",              \"zipCode\": \"string\",              \"address\": \"string\"            }          ]      }
         * @summary Update hospital manager.
         * @param {string} managerId
         * @param {UpdateManagerCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagersManagerIdPut: function (managerId, body, options) {
            return exports.ManagersApiFp(configuration).apiV1ManagersManagerIdPut(managerId, body, options)(axios, basePath);
        },
        /**
         * Sample request:        POST /api/v1/managers      {          \"userName\": \"manager\",          \"email\": \"manger@icloudhospital.com\",          \"hospitalId\": 1,          \"firstName\": \"cloud\",          \"lastName\": \"manager\",          \"photo\": \"string\",          \"photoThumbnail\": \"string\",          \"gender\": \"NotSpecified\",          \"dateOfBirth\": \"2020-02-22T15:28:09.897Z\",          \"locations\": [            {              \"locationType\": \"LivesIn\",              \"latitude\": 0,              \"longitude\": 0,              \"country\": \"string\",              \"state\": \"string\",              \"county\": \"string\",              \"city\": \"string\",              \"zipCode\": \"string\",              \"address\": \"string\"            }          ]      }
         * @summary Create hospital manager.
         * @param {CreateManagerCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagersPost: function (body, options) {
            return exports.ManagersApiFp(configuration).apiV1ManagersPost(body, options)(axios, basePath);
        },
    };
};
/**
 * ManagersApi - object-oriented interface
 * @export
 * @class ManagersApi
 * @extends {BaseAPI}
 */
var ManagersApi = /** @class */ (function (_super) {
    __extends(ManagersApi, _super);
    function ManagersApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Sample request:        GET /api/v1/managers      {          \"pageQueryFilter\": {              \"page\": 1,              \"limit\": 20,              \"lastRetrived\": \"2020-02-05T08:40\"          },          \"searchString\": \"manager\"      }
     * @summary Get all hospital managers.
     * @param {string} [id]
     * @param {string} [fullname]
     * @param {string} [email]
     * @param {object} [gender]
     * @param {Date} [dateOfBirth]
     * @param {Date} [created]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {string} [hospitalId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagersApi
     */
    ManagersApi.prototype.apiV1ManagersGet = function (id, fullname, email, gender, dateOfBirth, created, page, limit, lastRetrieved, current, hospitalId, options) {
        return exports.ManagersApiFp(this.configuration).apiV1ManagersGet(id, fullname, email, gender, dateOfBirth, created, page, limit, lastRetrieved, current, hospitalId, options)(this.axios, this.basePath);
    };
    /**
     * Sample request:        DELETE /api/v1/managers/1
     * @summary Delete hospital manager.
     * @param {string} managerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagersApi
     */
    ManagersApi.prototype.apiV1ManagersManagerIdDelete = function (managerId, options) {
        return exports.ManagersApiFp(this.configuration).apiV1ManagersManagerIdDelete(managerId, options)(this.axios, this.basePath);
    };
    /**
     * Sample request:        GET /api/v1/managers/1
     * @summary Get hospital manager.
     * @param {string} managerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagersApi
     */
    ManagersApi.prototype.apiV1ManagersManagerIdGet = function (managerId, options) {
        return exports.ManagersApiFp(this.configuration).apiV1ManagersManagerIdGet(managerId, options)(this.axios, this.basePath);
    };
    /**
     * Sample request:        PUT /api/v1/managers/1      {          \"firstName\": \"string\",          \"lastName\": \"string\",          \"photo\": \"string\",          \"locations\": [            {              \"locationType\": \"LivesIn\",              \"latitude\": 0,              \"longitude\": 0,              \"country\": \"string\",              \"state\": \"string\",              \"county\": \"string\",              \"city\": \"string\",              \"zipCode\": \"string\",              \"address\": \"string\"            }          ]      }
     * @summary Update hospital manager.
     * @param {string} managerId
     * @param {UpdateManagerCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagersApi
     */
    ManagersApi.prototype.apiV1ManagersManagerIdPut = function (managerId, body, options) {
        return exports.ManagersApiFp(this.configuration).apiV1ManagersManagerIdPut(managerId, body, options)(this.axios, this.basePath);
    };
    /**
     * Sample request:        POST /api/v1/managers      {          \"userName\": \"manager\",          \"email\": \"manger@icloudhospital.com\",          \"hospitalId\": 1,          \"firstName\": \"cloud\",          \"lastName\": \"manager\",          \"photo\": \"string\",          \"photoThumbnail\": \"string\",          \"gender\": \"NotSpecified\",          \"dateOfBirth\": \"2020-02-22T15:28:09.897Z\",          \"locations\": [            {              \"locationType\": \"LivesIn\",              \"latitude\": 0,              \"longitude\": 0,              \"country\": \"string\",              \"state\": \"string\",              \"county\": \"string\",              \"city\": \"string\",              \"zipCode\": \"string\",              \"address\": \"string\"            }          ]      }
     * @summary Create hospital manager.
     * @param {CreateManagerCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagersApi
     */
    ManagersApi.prototype.apiV1ManagersPost = function (body, options) {
        return exports.ManagersApiFp(this.configuration).apiV1ManagersPost(body, options)(this.axios, this.basePath);
    };
    return ManagersApi;
}(base_1.BaseAPI));
exports.ManagersApi = ManagersApi;
/**
 * MoviesApi - axios parameter creator
 * @export
 */
exports.MoviesApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1MoviesPost: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/api/v1/movies";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * MoviesApi - functional programming interface
 * @export
 */
exports.MoviesApiFp = function (configuration) {
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1MoviesPost: function (options) {
            var localVarAxiosArgs = exports.MoviesApiAxiosParamCreator(configuration).apiV1MoviesPost(options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * MoviesApi - factory interface
 * @export
 */
exports.MoviesApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1MoviesPost: function (options) {
            return exports.MoviesApiFp(configuration).apiV1MoviesPost(options)(axios, basePath);
        },
    };
};
/**
 * MoviesApi - object-oriented interface
 * @export
 * @class MoviesApi
 * @extends {BaseAPI}
 */
var MoviesApi = /** @class */ (function (_super) {
    __extends(MoviesApi, _super);
    function MoviesApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MoviesApi
     */
    MoviesApi.prototype.apiV1MoviesPost = function (options) {
        return exports.MoviesApiFp(this.configuration).apiV1MoviesPost(options)(this.axios, this.basePath);
    };
    return MoviesApi;
}(base_1.BaseAPI));
exports.MoviesApi = MoviesApi;
/**
 * PartnersApi - axios parameter creator
 * @export
 */
exports.PartnersApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Sample request:        GET /api/v1/partners      {          \"pageQueryFilter\": {              \"page\": 1,              \"limit\": 20,              \"lastRetrived\": \"2020-02-05T08:40\"          },          \"searchString\": \"patner\"      }
         * @summary Get all partners.
         * @param {string} [id]
         * @param {string} [fullname]
         * @param {string} [email]
         * @param {object} [gender]
         * @param {Date} [dateOfBirth]
         * @param {Date} [created]
         * @param {number} [page]
         * @param {number} [limit]
         * @param {Date} [lastRetrieved]
         * @param {boolean} [current]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PartnersGet: function (id, fullname, email, gender, dateOfBirth, created, page, limit, lastRetrieved, current, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/api/v1/partners";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }
            if (fullname !== undefined) {
                localVarQueryParameter['Fullname'] = fullname;
            }
            if (email !== undefined) {
                localVarQueryParameter['Email'] = email;
            }
            if (gender !== undefined) {
                localVarQueryParameter['Gender'] = gender;
            }
            if (dateOfBirth !== undefined) {
                localVarQueryParameter['DateOfBirth'] = (dateOfBirth instanceof Date) ?
                    dateOfBirth.toISOString() :
                    dateOfBirth;
            }
            if (created !== undefined) {
                localVarQueryParameter['Created'] = (created instanceof Date) ?
                    created.toISOString() :
                    created;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (lastRetrieved !== undefined) {
                localVarQueryParameter['lastRetrieved'] = (lastRetrieved instanceof Date) ?
                    lastRetrieved.toISOString() :
                    lastRetrieved;
            }
            if (current !== undefined) {
                localVarQueryParameter['Current'] = current;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        DELETE /api/v1/partners/1
         * @summary Delete patner.
         * @param {string} partnerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PartnersPartnerIdDelete: function (partnerId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'partnerId' is not null or undefined
            if (partnerId === null || partnerId === undefined) {
                throw new base_1.RequiredError('partnerId', 'Required parameter partnerId was null or undefined when calling apiV1PartnersPartnerIdDelete.');
            }
            var localVarPath = "/api/v1/partners/{partnerId}"
                .replace("{" + "partnerId" + "}", encodeURIComponent(String(partnerId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        GET /api/v1/patners/1
         * @summary Get partner.
         * @param {string} partnerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PartnersPartnerIdGet: function (partnerId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'partnerId' is not null or undefined
            if (partnerId === null || partnerId === undefined) {
                throw new base_1.RequiredError('partnerId', 'Required parameter partnerId was null or undefined when calling apiV1PartnersPartnerIdGet.');
            }
            var localVarPath = "/api/v1/partners/{partnerId}"
                .replace("{" + "partnerId" + "}", encodeURIComponent(String(partnerId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        PUT /api/v1/patners/1      {          firstName\": \"string\",          \"lastName\": \"string\",          \"photo\": \"string\",          \"locations\": [            {              \"locationType\": \"LivesIn\",              \"latitude\": 0,              \"longitude\": 0,              \"country\": \"string\",              \"state\": \"string\",              \"county\": \"string\",              \"city\": \"string\",              \"zipCode\": \"string\",              \"address\": \"string\"            }          ]      }
         * @summary Update partner.
         * @param {string} partnerId
         * @param {UpdatePartnerCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PartnersPartnerIdPut: function (partnerId, body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'partnerId' is not null or undefined
            if (partnerId === null || partnerId === undefined) {
                throw new base_1.RequiredError('partnerId', 'Required parameter partnerId was null or undefined when calling apiV1PartnersPartnerIdPut.');
            }
            var localVarPath = "/api/v1/partners/{partnerId}"
                .replace("{" + "partnerId" + "}", encodeURIComponent(String(partnerId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            var needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        POST /api/v1/partners      {          \"userName\": \"string\",          \"email\": \"string\",          \"firstName\": \"string\",          \"lastName\": \"string\",          \"photo\": \"string\",          \"photoThumbnail\": \"string\",          \"gender\": \"NotSpecified\",          \"dateOfBirth\": \"2020-02-22T18:04:18.025Z\",          \"locations\": [            {              \"locationType\": \"LivesIn\",              \"latitude\": 0,              \"longitude\": 0,              \"country\": \"string\",              \"state\": \"string\",              \"county\": \"string\",              \"city\": \"string\",              \"zipCode\": \"string\",              \"address\": \"string\"            }          ]      }
         * @summary Create partner.
         * @param {CreatePartnerCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PartnersPost: function (body, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/api/v1/partners";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            var needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * PartnersApi - functional programming interface
 * @export
 */
exports.PartnersApiFp = function (configuration) {
    return {
        /**
         * Sample request:        GET /api/v1/partners      {          \"pageQueryFilter\": {              \"page\": 1,              \"limit\": 20,              \"lastRetrived\": \"2020-02-05T08:40\"          },          \"searchString\": \"patner\"      }
         * @summary Get all partners.
         * @param {string} [id]
         * @param {string} [fullname]
         * @param {string} [email]
         * @param {object} [gender]
         * @param {Date} [dateOfBirth]
         * @param {Date} [created]
         * @param {number} [page]
         * @param {number} [limit]
         * @param {Date} [lastRetrieved]
         * @param {boolean} [current]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PartnersGet: function (id, fullname, email, gender, dateOfBirth, created, page, limit, lastRetrieved, current, options) {
            var localVarAxiosArgs = exports.PartnersApiAxiosParamCreator(configuration).apiV1PartnersGet(id, fullname, email, gender, dateOfBirth, created, page, limit, lastRetrieved, current, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        DELETE /api/v1/partners/1
         * @summary Delete patner.
         * @param {string} partnerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PartnersPartnerIdDelete: function (partnerId, options) {
            var localVarAxiosArgs = exports.PartnersApiAxiosParamCreator(configuration).apiV1PartnersPartnerIdDelete(partnerId, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        GET /api/v1/patners/1
         * @summary Get partner.
         * @param {string} partnerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PartnersPartnerIdGet: function (partnerId, options) {
            var localVarAxiosArgs = exports.PartnersApiAxiosParamCreator(configuration).apiV1PartnersPartnerIdGet(partnerId, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        PUT /api/v1/patners/1      {          firstName\": \"string\",          \"lastName\": \"string\",          \"photo\": \"string\",          \"locations\": [            {              \"locationType\": \"LivesIn\",              \"latitude\": 0,              \"longitude\": 0,              \"country\": \"string\",              \"state\": \"string\",              \"county\": \"string\",              \"city\": \"string\",              \"zipCode\": \"string\",              \"address\": \"string\"            }          ]      }
         * @summary Update partner.
         * @param {string} partnerId
         * @param {UpdatePartnerCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PartnersPartnerIdPut: function (partnerId, body, options) {
            var localVarAxiosArgs = exports.PartnersApiAxiosParamCreator(configuration).apiV1PartnersPartnerIdPut(partnerId, body, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        POST /api/v1/partners      {          \"userName\": \"string\",          \"email\": \"string\",          \"firstName\": \"string\",          \"lastName\": \"string\",          \"photo\": \"string\",          \"photoThumbnail\": \"string\",          \"gender\": \"NotSpecified\",          \"dateOfBirth\": \"2020-02-22T18:04:18.025Z\",          \"locations\": [            {              \"locationType\": \"LivesIn\",              \"latitude\": 0,              \"longitude\": 0,              \"country\": \"string\",              \"state\": \"string\",              \"county\": \"string\",              \"city\": \"string\",              \"zipCode\": \"string\",              \"address\": \"string\"            }          ]      }
         * @summary Create partner.
         * @param {CreatePartnerCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PartnersPost: function (body, options) {
            var localVarAxiosArgs = exports.PartnersApiAxiosParamCreator(configuration).apiV1PartnersPost(body, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * PartnersApi - factory interface
 * @export
 */
exports.PartnersApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Sample request:        GET /api/v1/partners      {          \"pageQueryFilter\": {              \"page\": 1,              \"limit\": 20,              \"lastRetrived\": \"2020-02-05T08:40\"          },          \"searchString\": \"patner\"      }
         * @summary Get all partners.
         * @param {string} [id]
         * @param {string} [fullname]
         * @param {string} [email]
         * @param {object} [gender]
         * @param {Date} [dateOfBirth]
         * @param {Date} [created]
         * @param {number} [page]
         * @param {number} [limit]
         * @param {Date} [lastRetrieved]
         * @param {boolean} [current]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PartnersGet: function (id, fullname, email, gender, dateOfBirth, created, page, limit, lastRetrieved, current, options) {
            return exports.PartnersApiFp(configuration).apiV1PartnersGet(id, fullname, email, gender, dateOfBirth, created, page, limit, lastRetrieved, current, options)(axios, basePath);
        },
        /**
         * Sample request:        DELETE /api/v1/partners/1
         * @summary Delete patner.
         * @param {string} partnerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PartnersPartnerIdDelete: function (partnerId, options) {
            return exports.PartnersApiFp(configuration).apiV1PartnersPartnerIdDelete(partnerId, options)(axios, basePath);
        },
        /**
         * Sample request:        GET /api/v1/patners/1
         * @summary Get partner.
         * @param {string} partnerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PartnersPartnerIdGet: function (partnerId, options) {
            return exports.PartnersApiFp(configuration).apiV1PartnersPartnerIdGet(partnerId, options)(axios, basePath);
        },
        /**
         * Sample request:        PUT /api/v1/patners/1      {          firstName\": \"string\",          \"lastName\": \"string\",          \"photo\": \"string\",          \"locations\": [            {              \"locationType\": \"LivesIn\",              \"latitude\": 0,              \"longitude\": 0,              \"country\": \"string\",              \"state\": \"string\",              \"county\": \"string\",              \"city\": \"string\",              \"zipCode\": \"string\",              \"address\": \"string\"            }          ]      }
         * @summary Update partner.
         * @param {string} partnerId
         * @param {UpdatePartnerCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PartnersPartnerIdPut: function (partnerId, body, options) {
            return exports.PartnersApiFp(configuration).apiV1PartnersPartnerIdPut(partnerId, body, options)(axios, basePath);
        },
        /**
         * Sample request:        POST /api/v1/partners      {          \"userName\": \"string\",          \"email\": \"string\",          \"firstName\": \"string\",          \"lastName\": \"string\",          \"photo\": \"string\",          \"photoThumbnail\": \"string\",          \"gender\": \"NotSpecified\",          \"dateOfBirth\": \"2020-02-22T18:04:18.025Z\",          \"locations\": [            {              \"locationType\": \"LivesIn\",              \"latitude\": 0,              \"longitude\": 0,              \"country\": \"string\",              \"state\": \"string\",              \"county\": \"string\",              \"city\": \"string\",              \"zipCode\": \"string\",              \"address\": \"string\"            }          ]      }
         * @summary Create partner.
         * @param {CreatePartnerCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PartnersPost: function (body, options) {
            return exports.PartnersApiFp(configuration).apiV1PartnersPost(body, options)(axios, basePath);
        },
    };
};
/**
 * PartnersApi - object-oriented interface
 * @export
 * @class PartnersApi
 * @extends {BaseAPI}
 */
var PartnersApi = /** @class */ (function (_super) {
    __extends(PartnersApi, _super);
    function PartnersApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Sample request:        GET /api/v1/partners      {          \"pageQueryFilter\": {              \"page\": 1,              \"limit\": 20,              \"lastRetrived\": \"2020-02-05T08:40\"          },          \"searchString\": \"patner\"      }
     * @summary Get all partners.
     * @param {string} [id]
     * @param {string} [fullname]
     * @param {string} [email]
     * @param {object} [gender]
     * @param {Date} [dateOfBirth]
     * @param {Date} [created]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartnersApi
     */
    PartnersApi.prototype.apiV1PartnersGet = function (id, fullname, email, gender, dateOfBirth, created, page, limit, lastRetrieved, current, options) {
        return exports.PartnersApiFp(this.configuration).apiV1PartnersGet(id, fullname, email, gender, dateOfBirth, created, page, limit, lastRetrieved, current, options)(this.axios, this.basePath);
    };
    /**
     * Sample request:        DELETE /api/v1/partners/1
     * @summary Delete patner.
     * @param {string} partnerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartnersApi
     */
    PartnersApi.prototype.apiV1PartnersPartnerIdDelete = function (partnerId, options) {
        return exports.PartnersApiFp(this.configuration).apiV1PartnersPartnerIdDelete(partnerId, options)(this.axios, this.basePath);
    };
    /**
     * Sample request:        GET /api/v1/patners/1
     * @summary Get partner.
     * @param {string} partnerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartnersApi
     */
    PartnersApi.prototype.apiV1PartnersPartnerIdGet = function (partnerId, options) {
        return exports.PartnersApiFp(this.configuration).apiV1PartnersPartnerIdGet(partnerId, options)(this.axios, this.basePath);
    };
    /**
     * Sample request:        PUT /api/v1/patners/1      {          firstName\": \"string\",          \"lastName\": \"string\",          \"photo\": \"string\",          \"locations\": [            {              \"locationType\": \"LivesIn\",              \"latitude\": 0,              \"longitude\": 0,              \"country\": \"string\",              \"state\": \"string\",              \"county\": \"string\",              \"city\": \"string\",              \"zipCode\": \"string\",              \"address\": \"string\"            }          ]      }
     * @summary Update partner.
     * @param {string} partnerId
     * @param {UpdatePartnerCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartnersApi
     */
    PartnersApi.prototype.apiV1PartnersPartnerIdPut = function (partnerId, body, options) {
        return exports.PartnersApiFp(this.configuration).apiV1PartnersPartnerIdPut(partnerId, body, options)(this.axios, this.basePath);
    };
    /**
     * Sample request:        POST /api/v1/partners      {          \"userName\": \"string\",          \"email\": \"string\",          \"firstName\": \"string\",          \"lastName\": \"string\",          \"photo\": \"string\",          \"photoThumbnail\": \"string\",          \"gender\": \"NotSpecified\",          \"dateOfBirth\": \"2020-02-22T18:04:18.025Z\",          \"locations\": [            {              \"locationType\": \"LivesIn\",              \"latitude\": 0,              \"longitude\": 0,              \"country\": \"string\",              \"state\": \"string\",              \"county\": \"string\",              \"city\": \"string\",              \"zipCode\": \"string\",              \"address\": \"string\"            }          ]      }
     * @summary Create partner.
     * @param {CreatePartnerCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartnersApi
     */
    PartnersApi.prototype.apiV1PartnersPost = function (body, options) {
        return exports.PartnersApiFp(this.configuration).apiV1PartnersPost(body, options)(this.axios, this.basePath);
    };
    return PartnersApi;
}(base_1.BaseAPI));
exports.PartnersApi = PartnersApi;
/**
 * PatientsApi - axios parameter creator
 * @export
 */
exports.PatientsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Sample request:        GET /api/v1/patients      {          \"pageQueryFilter\": {              \"page\": 1,              \"limit\": 20,              \"lastRetrived\": \"2020-02-05T08:40\"          },          \"searchString\": \"patient\"      }
         * @summary Get all patients.
         * @param {string} [id]
         * @param {string} [fullname]
         * @param {string} [email]
         * @param {object} [gender]
         * @param {Date} [dateOfBirth]
         * @param {Date} [created]
         * @param {number} [page]
         * @param {number} [limit]
         * @param {Date} [lastRetrieved]
         * @param {boolean} [current]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PatientsGet: function (id, fullname, email, gender, dateOfBirth, created, page, limit, lastRetrieved, current, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/api/v1/patients";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }
            if (fullname !== undefined) {
                localVarQueryParameter['Fullname'] = fullname;
            }
            if (email !== undefined) {
                localVarQueryParameter['Email'] = email;
            }
            if (gender !== undefined) {
                localVarQueryParameter['Gender'] = gender;
            }
            if (dateOfBirth !== undefined) {
                localVarQueryParameter['DateOfBirth'] = (dateOfBirth instanceof Date) ?
                    dateOfBirth.toISOString() :
                    dateOfBirth;
            }
            if (created !== undefined) {
                localVarQueryParameter['Created'] = (created instanceof Date) ?
                    created.toISOString() :
                    created;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (lastRetrieved !== undefined) {
                localVarQueryParameter['lastRetrieved'] = (lastRetrieved instanceof Date) ?
                    lastRetrieved.toISOString() :
                    lastRetrieved;
            }
            if (current !== undefined) {
                localVarQueryParameter['Current'] = current;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        DELETE /api/v1/patients/1
         * @summary Delete patient.
         * @param {string} patientId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PatientsPatientIdDelete: function (patientId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'patientId' is not null or undefined
            if (patientId === null || patientId === undefined) {
                throw new base_1.RequiredError('patientId', 'Required parameter patientId was null or undefined when calling apiV1PatientsPatientIdDelete.');
            }
            var localVarPath = "/api/v1/patients/{patientId}"
                .replace("{" + "patientId" + "}", encodeURIComponent(String(patientId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        GET /api/v1/patients/1
         * @summary Get patient.
         * @param {string} patientId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PatientsPatientIdGet: function (patientId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'patientId' is not null or undefined
            if (patientId === null || patientId === undefined) {
                throw new base_1.RequiredError('patientId', 'Required parameter patientId was null or undefined when calling apiV1PatientsPatientIdGet.');
            }
            var localVarPath = "/api/v1/patients/{patientId}"
                .replace("{" + "patientId" + "}", encodeURIComponent(String(patientId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        PUT /api/v1/patients/1      {          \"referralCode\": \"string\",          \"firstName\": \"patient\",          \"lastName\": \"cloud\",          \"photo\": \"string\",          \"locations\": [            {              \"locationType\": \"LivesIn\",              \"latitude\": 0,              \"longitude\": 0,              \"country\": \"string\",              \"state\": \"string\",              \"county\": \"string\",              \"city\": \"string\",              \"zipCode\": \"string\",              \"address\": \"string\"            }          ]      }
         * @summary Update patient.
         * @param {string} patientId
         * @param {UpdatePatientCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PatientsPatientIdPut: function (patientId, body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'patientId' is not null or undefined
            if (patientId === null || patientId === undefined) {
                throw new base_1.RequiredError('patientId', 'Required parameter patientId was null or undefined when calling apiV1PatientsPatientIdPut.');
            }
            var localVarPath = "/api/v1/patients/{patientId}"
                .replace("{" + "patientId" + "}", encodeURIComponent(String(patientId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            var needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        POST /api/v1/patients      {          \"referralCode\": \"123456\",          \"email\": \"patient@icloudhospital.com\",          \"firstName\": \"patient\",          \"lastName\": \"cloud\",          \"photo\": \"string\",          \"locations\": [            {              \"locationType\": \"LivesIn\",              \"latitude\": 0,              \"longitude\": 0,              \"country\": \"string\",              \"state\": \"string\",              \"county\": \"string\",              \"city\": \"string\",              \"zipCode\": \"string\",              \"address\": \"string\"            }          ]      }
         * @summary Create patient.
         * @param {CreatePatientCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PatientsPost: function (body, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/api/v1/patients";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            var needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * PatientsApi - functional programming interface
 * @export
 */
exports.PatientsApiFp = function (configuration) {
    return {
        /**
         * Sample request:        GET /api/v1/patients      {          \"pageQueryFilter\": {              \"page\": 1,              \"limit\": 20,              \"lastRetrived\": \"2020-02-05T08:40\"          },          \"searchString\": \"patient\"      }
         * @summary Get all patients.
         * @param {string} [id]
         * @param {string} [fullname]
         * @param {string} [email]
         * @param {object} [gender]
         * @param {Date} [dateOfBirth]
         * @param {Date} [created]
         * @param {number} [page]
         * @param {number} [limit]
         * @param {Date} [lastRetrieved]
         * @param {boolean} [current]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PatientsGet: function (id, fullname, email, gender, dateOfBirth, created, page, limit, lastRetrieved, current, options) {
            var localVarAxiosArgs = exports.PatientsApiAxiosParamCreator(configuration).apiV1PatientsGet(id, fullname, email, gender, dateOfBirth, created, page, limit, lastRetrieved, current, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        DELETE /api/v1/patients/1
         * @summary Delete patient.
         * @param {string} patientId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PatientsPatientIdDelete: function (patientId, options) {
            var localVarAxiosArgs = exports.PatientsApiAxiosParamCreator(configuration).apiV1PatientsPatientIdDelete(patientId, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        GET /api/v1/patients/1
         * @summary Get patient.
         * @param {string} patientId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PatientsPatientIdGet: function (patientId, options) {
            var localVarAxiosArgs = exports.PatientsApiAxiosParamCreator(configuration).apiV1PatientsPatientIdGet(patientId, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        PUT /api/v1/patients/1      {          \"referralCode\": \"string\",          \"firstName\": \"patient\",          \"lastName\": \"cloud\",          \"photo\": \"string\",          \"locations\": [            {              \"locationType\": \"LivesIn\",              \"latitude\": 0,              \"longitude\": 0,              \"country\": \"string\",              \"state\": \"string\",              \"county\": \"string\",              \"city\": \"string\",              \"zipCode\": \"string\",              \"address\": \"string\"            }          ]      }
         * @summary Update patient.
         * @param {string} patientId
         * @param {UpdatePatientCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PatientsPatientIdPut: function (patientId, body, options) {
            var localVarAxiosArgs = exports.PatientsApiAxiosParamCreator(configuration).apiV1PatientsPatientIdPut(patientId, body, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        POST /api/v1/patients      {          \"referralCode\": \"123456\",          \"email\": \"patient@icloudhospital.com\",          \"firstName\": \"patient\",          \"lastName\": \"cloud\",          \"photo\": \"string\",          \"locations\": [            {              \"locationType\": \"LivesIn\",              \"latitude\": 0,              \"longitude\": 0,              \"country\": \"string\",              \"state\": \"string\",              \"county\": \"string\",              \"city\": \"string\",              \"zipCode\": \"string\",              \"address\": \"string\"            }          ]      }
         * @summary Create patient.
         * @param {CreatePatientCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PatientsPost: function (body, options) {
            var localVarAxiosArgs = exports.PatientsApiAxiosParamCreator(configuration).apiV1PatientsPost(body, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * PatientsApi - factory interface
 * @export
 */
exports.PatientsApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Sample request:        GET /api/v1/patients      {          \"pageQueryFilter\": {              \"page\": 1,              \"limit\": 20,              \"lastRetrived\": \"2020-02-05T08:40\"          },          \"searchString\": \"patient\"      }
         * @summary Get all patients.
         * @param {string} [id]
         * @param {string} [fullname]
         * @param {string} [email]
         * @param {object} [gender]
         * @param {Date} [dateOfBirth]
         * @param {Date} [created]
         * @param {number} [page]
         * @param {number} [limit]
         * @param {Date} [lastRetrieved]
         * @param {boolean} [current]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PatientsGet: function (id, fullname, email, gender, dateOfBirth, created, page, limit, lastRetrieved, current, options) {
            return exports.PatientsApiFp(configuration).apiV1PatientsGet(id, fullname, email, gender, dateOfBirth, created, page, limit, lastRetrieved, current, options)(axios, basePath);
        },
        /**
         * Sample request:        DELETE /api/v1/patients/1
         * @summary Delete patient.
         * @param {string} patientId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PatientsPatientIdDelete: function (patientId, options) {
            return exports.PatientsApiFp(configuration).apiV1PatientsPatientIdDelete(patientId, options)(axios, basePath);
        },
        /**
         * Sample request:        GET /api/v1/patients/1
         * @summary Get patient.
         * @param {string} patientId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PatientsPatientIdGet: function (patientId, options) {
            return exports.PatientsApiFp(configuration).apiV1PatientsPatientIdGet(patientId, options)(axios, basePath);
        },
        /**
         * Sample request:        PUT /api/v1/patients/1      {          \"referralCode\": \"string\",          \"firstName\": \"patient\",          \"lastName\": \"cloud\",          \"photo\": \"string\",          \"locations\": [            {              \"locationType\": \"LivesIn\",              \"latitude\": 0,              \"longitude\": 0,              \"country\": \"string\",              \"state\": \"string\",              \"county\": \"string\",              \"city\": \"string\",              \"zipCode\": \"string\",              \"address\": \"string\"            }          ]      }
         * @summary Update patient.
         * @param {string} patientId
         * @param {UpdatePatientCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PatientsPatientIdPut: function (patientId, body, options) {
            return exports.PatientsApiFp(configuration).apiV1PatientsPatientIdPut(patientId, body, options)(axios, basePath);
        },
        /**
         * Sample request:        POST /api/v1/patients      {          \"referralCode\": \"123456\",          \"email\": \"patient@icloudhospital.com\",          \"firstName\": \"patient\",          \"lastName\": \"cloud\",          \"photo\": \"string\",          \"locations\": [            {              \"locationType\": \"LivesIn\",              \"latitude\": 0,              \"longitude\": 0,              \"country\": \"string\",              \"state\": \"string\",              \"county\": \"string\",              \"city\": \"string\",              \"zipCode\": \"string\",              \"address\": \"string\"            }          ]      }
         * @summary Create patient.
         * @param {CreatePatientCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PatientsPost: function (body, options) {
            return exports.PatientsApiFp(configuration).apiV1PatientsPost(body, options)(axios, basePath);
        },
    };
};
/**
 * PatientsApi - object-oriented interface
 * @export
 * @class PatientsApi
 * @extends {BaseAPI}
 */
var PatientsApi = /** @class */ (function (_super) {
    __extends(PatientsApi, _super);
    function PatientsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Sample request:        GET /api/v1/patients      {          \"pageQueryFilter\": {              \"page\": 1,              \"limit\": 20,              \"lastRetrived\": \"2020-02-05T08:40\"          },          \"searchString\": \"patient\"      }
     * @summary Get all patients.
     * @param {string} [id]
     * @param {string} [fullname]
     * @param {string} [email]
     * @param {object} [gender]
     * @param {Date} [dateOfBirth]
     * @param {Date} [created]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientsApi
     */
    PatientsApi.prototype.apiV1PatientsGet = function (id, fullname, email, gender, dateOfBirth, created, page, limit, lastRetrieved, current, options) {
        return exports.PatientsApiFp(this.configuration).apiV1PatientsGet(id, fullname, email, gender, dateOfBirth, created, page, limit, lastRetrieved, current, options)(this.axios, this.basePath);
    };
    /**
     * Sample request:        DELETE /api/v1/patients/1
     * @summary Delete patient.
     * @param {string} patientId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientsApi
     */
    PatientsApi.prototype.apiV1PatientsPatientIdDelete = function (patientId, options) {
        return exports.PatientsApiFp(this.configuration).apiV1PatientsPatientIdDelete(patientId, options)(this.axios, this.basePath);
    };
    /**
     * Sample request:        GET /api/v1/patients/1
     * @summary Get patient.
     * @param {string} patientId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientsApi
     */
    PatientsApi.prototype.apiV1PatientsPatientIdGet = function (patientId, options) {
        return exports.PatientsApiFp(this.configuration).apiV1PatientsPatientIdGet(patientId, options)(this.axios, this.basePath);
    };
    /**
     * Sample request:        PUT /api/v1/patients/1      {          \"referralCode\": \"string\",          \"firstName\": \"patient\",          \"lastName\": \"cloud\",          \"photo\": \"string\",          \"locations\": [            {              \"locationType\": \"LivesIn\",              \"latitude\": 0,              \"longitude\": 0,              \"country\": \"string\",              \"state\": \"string\",              \"county\": \"string\",              \"city\": \"string\",              \"zipCode\": \"string\",              \"address\": \"string\"            }          ]      }
     * @summary Update patient.
     * @param {string} patientId
     * @param {UpdatePatientCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientsApi
     */
    PatientsApi.prototype.apiV1PatientsPatientIdPut = function (patientId, body, options) {
        return exports.PatientsApiFp(this.configuration).apiV1PatientsPatientIdPut(patientId, body, options)(this.axios, this.basePath);
    };
    /**
     * Sample request:        POST /api/v1/patients      {          \"referralCode\": \"123456\",          \"email\": \"patient@icloudhospital.com\",          \"firstName\": \"patient\",          \"lastName\": \"cloud\",          \"photo\": \"string\",          \"locations\": [            {              \"locationType\": \"LivesIn\",              \"latitude\": 0,              \"longitude\": 0,              \"country\": \"string\",              \"state\": \"string\",              \"county\": \"string\",              \"city\": \"string\",              \"zipCode\": \"string\",              \"address\": \"string\"            }          ]      }
     * @summary Create patient.
     * @param {CreatePatientCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientsApi
     */
    PatientsApi.prototype.apiV1PatientsPost = function (body, options) {
        return exports.PatientsApiFp(this.configuration).apiV1PatientsPost(body, options)(this.axios, this.basePath);
    };
    return PatientsApi;
}(base_1.BaseAPI));
exports.PatientsApi = PatientsApi;
/**
 * ProfilesApi - axios parameter creator
 * @export
 */
exports.ProfilesApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Sample request:        POST /api/v1/profiles/changeEmail      {          \"email\": \"user@example.com\"      }
         * @summary Change user\'s email on both Identity and Api.
         * @param {ChangeEmailCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ProfilesChangeemailPost: function (body, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/api/v1/profiles/changeemail";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            var needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {ConfirmEmailCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ProfilesConfirmemailPost: function (body, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/api/v1/profiles/confirmemail";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            var needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        GET /api/v1/profiles
         * @summary Get current user\'s profile.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ProfilesGet: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/api/v1/profiles";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * ProfilesApi - functional programming interface
 * @export
 */
exports.ProfilesApiFp = function (configuration) {
    return {
        /**
         * Sample request:        POST /api/v1/profiles/changeEmail      {          \"email\": \"user@example.com\"      }
         * @summary Change user\'s email on both Identity and Api.
         * @param {ChangeEmailCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ProfilesChangeemailPost: function (body, options) {
            var localVarAxiosArgs = exports.ProfilesApiAxiosParamCreator(configuration).apiV1ProfilesChangeemailPost(body, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {ConfirmEmailCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ProfilesConfirmemailPost: function (body, options) {
            var localVarAxiosArgs = exports.ProfilesApiAxiosParamCreator(configuration).apiV1ProfilesConfirmemailPost(body, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        GET /api/v1/profiles
         * @summary Get current user\'s profile.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ProfilesGet: function (options) {
            var localVarAxiosArgs = exports.ProfilesApiAxiosParamCreator(configuration).apiV1ProfilesGet(options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * ProfilesApi - factory interface
 * @export
 */
exports.ProfilesApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Sample request:        POST /api/v1/profiles/changeEmail      {          \"email\": \"user@example.com\"      }
         * @summary Change user\'s email on both Identity and Api.
         * @param {ChangeEmailCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ProfilesChangeemailPost: function (body, options) {
            return exports.ProfilesApiFp(configuration).apiV1ProfilesChangeemailPost(body, options)(axios, basePath);
        },
        /**
         *
         * @param {ConfirmEmailCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ProfilesConfirmemailPost: function (body, options) {
            return exports.ProfilesApiFp(configuration).apiV1ProfilesConfirmemailPost(body, options)(axios, basePath);
        },
        /**
         * Sample request:        GET /api/v1/profiles
         * @summary Get current user\'s profile.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ProfilesGet: function (options) {
            return exports.ProfilesApiFp(configuration).apiV1ProfilesGet(options)(axios, basePath);
        },
    };
};
/**
 * ProfilesApi - object-oriented interface
 * @export
 * @class ProfilesApi
 * @extends {BaseAPI}
 */
var ProfilesApi = /** @class */ (function (_super) {
    __extends(ProfilesApi, _super);
    function ProfilesApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Sample request:        POST /api/v1/profiles/changeEmail      {          \"email\": \"user@example.com\"      }
     * @summary Change user\'s email on both Identity and Api.
     * @param {ChangeEmailCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApi
     */
    ProfilesApi.prototype.apiV1ProfilesChangeemailPost = function (body, options) {
        return exports.ProfilesApiFp(this.configuration).apiV1ProfilesChangeemailPost(body, options)(this.axios, this.basePath);
    };
    /**
     *
     * @param {ConfirmEmailCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApi
     */
    ProfilesApi.prototype.apiV1ProfilesConfirmemailPost = function (body, options) {
        return exports.ProfilesApiFp(this.configuration).apiV1ProfilesConfirmemailPost(body, options)(this.axios, this.basePath);
    };
    /**
     * Sample request:        GET /api/v1/profiles
     * @summary Get current user\'s profile.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApi
     */
    ProfilesApi.prototype.apiV1ProfilesGet = function (options) {
        return exports.ProfilesApiFp(this.configuration).apiV1ProfilesGet(options)(this.axios, this.basePath);
    };
    return ProfilesApi;
}(base_1.BaseAPI));
exports.ProfilesApi = ProfilesApi;
/**
 * QuestionCommentsApi - axios parameter creator
 * @export
 */
exports.QuestionCommentsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Sample request:        GET /api/v1/questionComment
         * @summary Get all questionComment.
         * @param {string} questionId
         * @param {string} [id]
         * @param {string} [userId]
         * @param {string} [questionId2]
         * @param {number} [page]
         * @param {number} [limit]
         * @param {Date} [lastRetrieved]
         * @param {boolean} [current]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1QuestionsQuestionIdQuestioncommentsGet: function (questionId, id, userId, questionId2, page, limit, lastRetrieved, current, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'questionId' is not null or undefined
            if (questionId === null || questionId === undefined) {
                throw new base_1.RequiredError('questionId', 'Required parameter questionId was null or undefined when calling apiV1QuestionsQuestionIdQuestioncommentsGet.');
            }
            var localVarPath = "/api/v1/questions/{questionId}/questioncomments"
                .replace("{" + "questionId" + "}", encodeURIComponent(String(questionId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }
            if (userId !== undefined) {
                localVarQueryParameter['UserId'] = userId;
            }
            if (questionId2 !== undefined) {
                localVarQueryParameter['QuestionId'] = questionId2;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (lastRetrieved !== undefined) {
                localVarQueryParameter['lastRetrieved'] = (lastRetrieved instanceof Date) ?
                    lastRetrieved.toISOString() :
                    lastRetrieved;
            }
            if (current !== undefined) {
                localVarQueryParameter['Current'] = current;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        POST /api/v1/questions/1/questionComment      {          \"description\": \"This is a questionComment.\",          \"body\": \"questionComment body here\",          \"status\": \"Draft\",          \"hospitalId\": 1,          \"medias\": [            {              \"mediaType\": \"Photo\",              \"url\": \"string\",              \"thumbnailUrl\": \"string\",              \"description\": \"string\",              \"order\": 0            }          ]      }
         * @summary Create an questionComment.
         * @param {string} questionId
         * @param {CreateQuestionCommentCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1QuestionsQuestionIdQuestioncommentsPost: function (questionId, body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'questionId' is not null or undefined
            if (questionId === null || questionId === undefined) {
                throw new base_1.RequiredError('questionId', 'Required parameter questionId was null or undefined when calling apiV1QuestionsQuestionIdQuestioncommentsPost.');
            }
            var localVarPath = "/api/v1/questions/{questionId}/questioncomments"
                .replace("{" + "questionId" + "}", encodeURIComponent(String(questionId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            var needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        DELETE /api/v1/questions/1/questionComments/1
         * @summary Delete questionComment.
         * @param {string} questionId
         * @param {string} questionCommentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1QuestionsQuestionIdQuestioncommentsQuestionCommentIdDelete: function (questionId, questionCommentId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'questionId' is not null or undefined
            if (questionId === null || questionId === undefined) {
                throw new base_1.RequiredError('questionId', 'Required parameter questionId was null or undefined when calling apiV1QuestionsQuestionIdQuestioncommentsQuestionCommentIdDelete.');
            }
            // verify required parameter 'questionCommentId' is not null or undefined
            if (questionCommentId === null || questionCommentId === undefined) {
                throw new base_1.RequiredError('questionCommentId', 'Required parameter questionCommentId was null or undefined when calling apiV1QuestionsQuestionIdQuestioncommentsQuestionCommentIdDelete.');
            }
            var localVarPath = "/api/v1/questions/{questionId}/questioncomments/{questionCommentId}"
                .replace("{" + "questionId" + "}", encodeURIComponent(String(questionId)))
                .replace("{" + "questionCommentId" + "}", encodeURIComponent(String(questionCommentId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        GET /api/v1/questionComment/1
         * @summary Get questionComment.
         * @param {string} questionId
         * @param {string} questionCommentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1QuestionsQuestionIdQuestioncommentsQuestionCommentIdGet: function (questionId, questionCommentId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'questionId' is not null or undefined
            if (questionId === null || questionId === undefined) {
                throw new base_1.RequiredError('questionId', 'Required parameter questionId was null or undefined when calling apiV1QuestionsQuestionIdQuestioncommentsQuestionCommentIdGet.');
            }
            // verify required parameter 'questionCommentId' is not null or undefined
            if (questionCommentId === null || questionCommentId === undefined) {
                throw new base_1.RequiredError('questionCommentId', 'Required parameter questionCommentId was null or undefined when calling apiV1QuestionsQuestionIdQuestioncommentsQuestionCommentIdGet.');
            }
            var localVarPath = "/api/v1/questions/{questionId}/questioncomments/{questionCommentId}"
                .replace("{" + "questionId" + "}", encodeURIComponent(String(questionId)))
                .replace("{" + "questionCommentId" + "}", encodeURIComponent(String(questionCommentId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        PUT /api/v1/questions/1/questionComments/1      {          \"QuestionTitle\": \"Question title\",          \"body\": \"updated questionComment body here\"      }
         * @summary Update questionComment.
         * @param {string} questionId
         * @param {string} questionCommentId
         * @param {UpdateQuestionCommentCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1QuestionsQuestionIdQuestioncommentsQuestionCommentIdPut: function (questionId, questionCommentId, body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'questionId' is not null or undefined
            if (questionId === null || questionId === undefined) {
                throw new base_1.RequiredError('questionId', 'Required parameter questionId was null or undefined when calling apiV1QuestionsQuestionIdQuestioncommentsQuestionCommentIdPut.');
            }
            // verify required parameter 'questionCommentId' is not null or undefined
            if (questionCommentId === null || questionCommentId === undefined) {
                throw new base_1.RequiredError('questionCommentId', 'Required parameter questionCommentId was null or undefined when calling apiV1QuestionsQuestionIdQuestioncommentsQuestionCommentIdPut.');
            }
            var localVarPath = "/api/v1/questions/{questionId}/questioncomments/{questionCommentId}"
                .replace("{" + "questionId" + "}", encodeURIComponent(String(questionId)))
                .replace("{" + "questionCommentId" + "}", encodeURIComponent(String(questionCommentId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            var needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * QuestionCommentsApi - functional programming interface
 * @export
 */
exports.QuestionCommentsApiFp = function (configuration) {
    return {
        /**
         * Sample request:        GET /api/v1/questionComment
         * @summary Get all questionComment.
         * @param {string} questionId
         * @param {string} [id]
         * @param {string} [userId]
         * @param {string} [questionId2]
         * @param {number} [page]
         * @param {number} [limit]
         * @param {Date} [lastRetrieved]
         * @param {boolean} [current]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1QuestionsQuestionIdQuestioncommentsGet: function (questionId, id, userId, questionId2, page, limit, lastRetrieved, current, options) {
            var localVarAxiosArgs = exports.QuestionCommentsApiAxiosParamCreator(configuration).apiV1QuestionsQuestionIdQuestioncommentsGet(questionId, id, userId, questionId2, page, limit, lastRetrieved, current, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        POST /api/v1/questions/1/questionComment      {          \"description\": \"This is a questionComment.\",          \"body\": \"questionComment body here\",          \"status\": \"Draft\",          \"hospitalId\": 1,          \"medias\": [            {              \"mediaType\": \"Photo\",              \"url\": \"string\",              \"thumbnailUrl\": \"string\",              \"description\": \"string\",              \"order\": 0            }          ]      }
         * @summary Create an questionComment.
         * @param {string} questionId
         * @param {CreateQuestionCommentCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1QuestionsQuestionIdQuestioncommentsPost: function (questionId, body, options) {
            var localVarAxiosArgs = exports.QuestionCommentsApiAxiosParamCreator(configuration).apiV1QuestionsQuestionIdQuestioncommentsPost(questionId, body, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        DELETE /api/v1/questions/1/questionComments/1
         * @summary Delete questionComment.
         * @param {string} questionId
         * @param {string} questionCommentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1QuestionsQuestionIdQuestioncommentsQuestionCommentIdDelete: function (questionId, questionCommentId, options) {
            var localVarAxiosArgs = exports.QuestionCommentsApiAxiosParamCreator(configuration).apiV1QuestionsQuestionIdQuestioncommentsQuestionCommentIdDelete(questionId, questionCommentId, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        GET /api/v1/questionComment/1
         * @summary Get questionComment.
         * @param {string} questionId
         * @param {string} questionCommentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1QuestionsQuestionIdQuestioncommentsQuestionCommentIdGet: function (questionId, questionCommentId, options) {
            var localVarAxiosArgs = exports.QuestionCommentsApiAxiosParamCreator(configuration).apiV1QuestionsQuestionIdQuestioncommentsQuestionCommentIdGet(questionId, questionCommentId, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        PUT /api/v1/questions/1/questionComments/1      {          \"QuestionTitle\": \"Question title\",          \"body\": \"updated questionComment body here\"      }
         * @summary Update questionComment.
         * @param {string} questionId
         * @param {string} questionCommentId
         * @param {UpdateQuestionCommentCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1QuestionsQuestionIdQuestioncommentsQuestionCommentIdPut: function (questionId, questionCommentId, body, options) {
            var localVarAxiosArgs = exports.QuestionCommentsApiAxiosParamCreator(configuration).apiV1QuestionsQuestionIdQuestioncommentsQuestionCommentIdPut(questionId, questionCommentId, body, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * QuestionCommentsApi - factory interface
 * @export
 */
exports.QuestionCommentsApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Sample request:        GET /api/v1/questionComment
         * @summary Get all questionComment.
         * @param {string} questionId
         * @param {string} [id]
         * @param {string} [userId]
         * @param {string} [questionId2]
         * @param {number} [page]
         * @param {number} [limit]
         * @param {Date} [lastRetrieved]
         * @param {boolean} [current]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1QuestionsQuestionIdQuestioncommentsGet: function (questionId, id, userId, questionId2, page, limit, lastRetrieved, current, options) {
            return exports.QuestionCommentsApiFp(configuration).apiV1QuestionsQuestionIdQuestioncommentsGet(questionId, id, userId, questionId2, page, limit, lastRetrieved, current, options)(axios, basePath);
        },
        /**
         * Sample request:        POST /api/v1/questions/1/questionComment      {          \"description\": \"This is a questionComment.\",          \"body\": \"questionComment body here\",          \"status\": \"Draft\",          \"hospitalId\": 1,          \"medias\": [            {              \"mediaType\": \"Photo\",              \"url\": \"string\",              \"thumbnailUrl\": \"string\",              \"description\": \"string\",              \"order\": 0            }          ]      }
         * @summary Create an questionComment.
         * @param {string} questionId
         * @param {CreateQuestionCommentCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1QuestionsQuestionIdQuestioncommentsPost: function (questionId, body, options) {
            return exports.QuestionCommentsApiFp(configuration).apiV1QuestionsQuestionIdQuestioncommentsPost(questionId, body, options)(axios, basePath);
        },
        /**
         * Sample request:        DELETE /api/v1/questions/1/questionComments/1
         * @summary Delete questionComment.
         * @param {string} questionId
         * @param {string} questionCommentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1QuestionsQuestionIdQuestioncommentsQuestionCommentIdDelete: function (questionId, questionCommentId, options) {
            return exports.QuestionCommentsApiFp(configuration).apiV1QuestionsQuestionIdQuestioncommentsQuestionCommentIdDelete(questionId, questionCommentId, options)(axios, basePath);
        },
        /**
         * Sample request:        GET /api/v1/questionComment/1
         * @summary Get questionComment.
         * @param {string} questionId
         * @param {string} questionCommentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1QuestionsQuestionIdQuestioncommentsQuestionCommentIdGet: function (questionId, questionCommentId, options) {
            return exports.QuestionCommentsApiFp(configuration).apiV1QuestionsQuestionIdQuestioncommentsQuestionCommentIdGet(questionId, questionCommentId, options)(axios, basePath);
        },
        /**
         * Sample request:        PUT /api/v1/questions/1/questionComments/1      {          \"QuestionTitle\": \"Question title\",          \"body\": \"updated questionComment body here\"      }
         * @summary Update questionComment.
         * @param {string} questionId
         * @param {string} questionCommentId
         * @param {UpdateQuestionCommentCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1QuestionsQuestionIdQuestioncommentsQuestionCommentIdPut: function (questionId, questionCommentId, body, options) {
            return exports.QuestionCommentsApiFp(configuration).apiV1QuestionsQuestionIdQuestioncommentsQuestionCommentIdPut(questionId, questionCommentId, body, options)(axios, basePath);
        },
    };
};
/**
 * QuestionCommentsApi - object-oriented interface
 * @export
 * @class QuestionCommentsApi
 * @extends {BaseAPI}
 */
var QuestionCommentsApi = /** @class */ (function (_super) {
    __extends(QuestionCommentsApi, _super);
    function QuestionCommentsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Sample request:        GET /api/v1/questionComment
     * @summary Get all questionComment.
     * @param {string} questionId
     * @param {string} [id]
     * @param {string} [userId]
     * @param {string} [questionId2]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionCommentsApi
     */
    QuestionCommentsApi.prototype.apiV1QuestionsQuestionIdQuestioncommentsGet = function (questionId, id, userId, questionId2, page, limit, lastRetrieved, current, options) {
        return exports.QuestionCommentsApiFp(this.configuration).apiV1QuestionsQuestionIdQuestioncommentsGet(questionId, id, userId, questionId2, page, limit, lastRetrieved, current, options)(this.axios, this.basePath);
    };
    /**
     * Sample request:        POST /api/v1/questions/1/questionComment      {          \"description\": \"This is a questionComment.\",          \"body\": \"questionComment body here\",          \"status\": \"Draft\",          \"hospitalId\": 1,          \"medias\": [            {              \"mediaType\": \"Photo\",              \"url\": \"string\",              \"thumbnailUrl\": \"string\",              \"description\": \"string\",              \"order\": 0            }          ]      }
     * @summary Create an questionComment.
     * @param {string} questionId
     * @param {CreateQuestionCommentCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionCommentsApi
     */
    QuestionCommentsApi.prototype.apiV1QuestionsQuestionIdQuestioncommentsPost = function (questionId, body, options) {
        return exports.QuestionCommentsApiFp(this.configuration).apiV1QuestionsQuestionIdQuestioncommentsPost(questionId, body, options)(this.axios, this.basePath);
    };
    /**
     * Sample request:        DELETE /api/v1/questions/1/questionComments/1
     * @summary Delete questionComment.
     * @param {string} questionId
     * @param {string} questionCommentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionCommentsApi
     */
    QuestionCommentsApi.prototype.apiV1QuestionsQuestionIdQuestioncommentsQuestionCommentIdDelete = function (questionId, questionCommentId, options) {
        return exports.QuestionCommentsApiFp(this.configuration).apiV1QuestionsQuestionIdQuestioncommentsQuestionCommentIdDelete(questionId, questionCommentId, options)(this.axios, this.basePath);
    };
    /**
     * Sample request:        GET /api/v1/questionComment/1
     * @summary Get questionComment.
     * @param {string} questionId
     * @param {string} questionCommentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionCommentsApi
     */
    QuestionCommentsApi.prototype.apiV1QuestionsQuestionIdQuestioncommentsQuestionCommentIdGet = function (questionId, questionCommentId, options) {
        return exports.QuestionCommentsApiFp(this.configuration).apiV1QuestionsQuestionIdQuestioncommentsQuestionCommentIdGet(questionId, questionCommentId, options)(this.axios, this.basePath);
    };
    /**
     * Sample request:        PUT /api/v1/questions/1/questionComments/1      {          \"QuestionTitle\": \"Question title\",          \"body\": \"updated questionComment body here\"      }
     * @summary Update questionComment.
     * @param {string} questionId
     * @param {string} questionCommentId
     * @param {UpdateQuestionCommentCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionCommentsApi
     */
    QuestionCommentsApi.prototype.apiV1QuestionsQuestionIdQuestioncommentsQuestionCommentIdPut = function (questionId, questionCommentId, body, options) {
        return exports.QuestionCommentsApiFp(this.configuration).apiV1QuestionsQuestionIdQuestioncommentsQuestionCommentIdPut(questionId, questionCommentId, body, options)(this.axios, this.basePath);
    };
    return QuestionCommentsApi;
}(base_1.BaseAPI));
exports.QuestionCommentsApi = QuestionCommentsApi;
/**
 * QuestionsApi - axios parameter creator
 * @export
 */
exports.QuestionsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Sample request:        POST /api/v1/hospitals/1/questions      {          \"title\": \"Hospital question\",          \"description\": \"This is a question.\",          \"body\": \"question body here\",          \"status\": \"Draft\",          \"hospitalId\": 1,          \"tags\": [            {              \"value\": \"string\",              \"order\": 0              }          ],          \"medias\": [            {              \"mediaType\": \"Photo\",              \"url\": \"string\",              \"thumbnailUrl\": \"string\",              \"description\": \"string\",              \"order\": 0            }          ]      }
         * @summary Create an question.
         * @param {string} hospitalId
         * @param {CreateQuestionCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdQuestionsPost: function (hospitalId, body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'hospitalId' is not null or undefined
            if (hospitalId === null || hospitalId === undefined) {
                throw new base_1.RequiredError('hospitalId', 'Required parameter hospitalId was null or undefined when calling apiV1HospitalsHospitalIdQuestionsPost.');
            }
            var localVarPath = "/api/v1/hospitals/{hospitalId}/questions"
                .replace("{" + "hospitalId" + "}", encodeURIComponent(String(hospitalId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            var needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        DELETE /api/v1/hospitals/1/questions/1
         * @summary Delete question.
         * @param {string} hospitalId
         * @param {string} questionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdQuestionsQuestionIdDelete: function (hospitalId, questionId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'hospitalId' is not null or undefined
            if (hospitalId === null || hospitalId === undefined) {
                throw new base_1.RequiredError('hospitalId', 'Required parameter hospitalId was null or undefined when calling apiV1HospitalsHospitalIdQuestionsQuestionIdDelete.');
            }
            // verify required parameter 'questionId' is not null or undefined
            if (questionId === null || questionId === undefined) {
                throw new base_1.RequiredError('questionId', 'Required parameter questionId was null or undefined when calling apiV1HospitalsHospitalIdQuestionsQuestionIdDelete.');
            }
            var localVarPath = "/api/v1/hospitals/{hospitalId}/questions/{questionId}"
                .replace("{" + "hospitalId" + "}", encodeURIComponent(String(hospitalId)))
                .replace("{" + "questionId" + "}", encodeURIComponent(String(questionId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        GET /api/v1/hospitals/1/questions/1
         * @summary Get question.
         * @param {string} hospitalId
         * @param {string} questionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdQuestionsQuestionIdGet: function (hospitalId, questionId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'hospitalId' is not null or undefined
            if (hospitalId === null || hospitalId === undefined) {
                throw new base_1.RequiredError('hospitalId', 'Required parameter hospitalId was null or undefined when calling apiV1HospitalsHospitalIdQuestionsQuestionIdGet.');
            }
            // verify required parameter 'questionId' is not null or undefined
            if (questionId === null || questionId === undefined) {
                throw new base_1.RequiredError('questionId', 'Required parameter questionId was null or undefined when calling apiV1HospitalsHospitalIdQuestionsQuestionIdGet.');
            }
            var localVarPath = "/api/v1/hospitals/{hospitalId}/questions/{questionId}"
                .replace("{" + "hospitalId" + "}", encodeURIComponent(String(hospitalId)))
                .replace("{" + "questionId" + "}", encodeURIComponent(String(questionId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        PUT /api/v1/hospitals/1/questions/1      {          \"title\": \"Samsung Hospital\",          \"description\": \"This is an question.\",          \"body\": \"updated question body here\",          \"status\": \"Draft\",          \"hospitalId\": 1,        ///                   \"medias\": [            {              \"mediaType\": \"Photo\",              \"url\": \"string\",              \"thumbnailUrl\": \"string\",              \"description\": \"string\",              \"order\": 0            }          ]      }
         * @summary Update question.
         * @param {string} hospitalId
         * @param {string} questionId
         * @param {UpdateQuestionCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdQuestionsQuestionIdPut: function (hospitalId, questionId, body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'hospitalId' is not null or undefined
            if (hospitalId === null || hospitalId === undefined) {
                throw new base_1.RequiredError('hospitalId', 'Required parameter hospitalId was null or undefined when calling apiV1HospitalsHospitalIdQuestionsQuestionIdPut.');
            }
            // verify required parameter 'questionId' is not null or undefined
            if (questionId === null || questionId === undefined) {
                throw new base_1.RequiredError('questionId', 'Required parameter questionId was null or undefined when calling apiV1HospitalsHospitalIdQuestionsQuestionIdPut.');
            }
            var localVarPath = "/api/v1/hospitals/{hospitalId}/questions/{questionId}"
                .replace("{" + "hospitalId" + "}", encodeURIComponent(String(hospitalId)))
                .replace("{" + "questionId" + "}", encodeURIComponent(String(questionId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            var needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        GET /api/v1/hospitals/1/questions
         * @summary Get all questions.
         * @param {string} [id]
         * @param {string} [title]
         * @param {string} [hospitalId]
         * @param {string} [patientId]
         * @param {object} [questionType]
         * @param {object} [questionStatus]
         * @param {number} [page]
         * @param {number} [limit]
         * @param {Date} [lastRetrieved]
         * @param {boolean} [current]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsQuestionsGet: function (id, title, hospitalId, patientId, questionType, questionStatus, page, limit, lastRetrieved, current, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/api/v1/hospitals/questions";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }
            if (title !== undefined) {
                localVarQueryParameter['Title'] = title;
            }
            if (hospitalId !== undefined) {
                localVarQueryParameter['HospitalId'] = hospitalId;
            }
            if (patientId !== undefined) {
                localVarQueryParameter['PatientId'] = patientId;
            }
            if (questionType !== undefined) {
                localVarQueryParameter['QuestionType'] = questionType;
            }
            if (questionStatus !== undefined) {
                localVarQueryParameter['QuestionStatus'] = questionStatus;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (lastRetrieved !== undefined) {
                localVarQueryParameter['lastRetrieved'] = (lastRetrieved instanceof Date) ?
                    lastRetrieved.toISOString() :
                    lastRetrieved;
            }
            if (current !== undefined) {
                localVarQueryParameter['Current'] = current;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * QuestionsApi - functional programming interface
 * @export
 */
exports.QuestionsApiFp = function (configuration) {
    return {
        /**
         * Sample request:        POST /api/v1/hospitals/1/questions      {          \"title\": \"Hospital question\",          \"description\": \"This is a question.\",          \"body\": \"question body here\",          \"status\": \"Draft\",          \"hospitalId\": 1,          \"tags\": [            {              \"value\": \"string\",              \"order\": 0              }          ],          \"medias\": [            {              \"mediaType\": \"Photo\",              \"url\": \"string\",              \"thumbnailUrl\": \"string\",              \"description\": \"string\",              \"order\": 0            }          ]      }
         * @summary Create an question.
         * @param {string} hospitalId
         * @param {CreateQuestionCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdQuestionsPost: function (hospitalId, body, options) {
            var localVarAxiosArgs = exports.QuestionsApiAxiosParamCreator(configuration).apiV1HospitalsHospitalIdQuestionsPost(hospitalId, body, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        DELETE /api/v1/hospitals/1/questions/1
         * @summary Delete question.
         * @param {string} hospitalId
         * @param {string} questionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdQuestionsQuestionIdDelete: function (hospitalId, questionId, options) {
            var localVarAxiosArgs = exports.QuestionsApiAxiosParamCreator(configuration).apiV1HospitalsHospitalIdQuestionsQuestionIdDelete(hospitalId, questionId, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        GET /api/v1/hospitals/1/questions/1
         * @summary Get question.
         * @param {string} hospitalId
         * @param {string} questionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdQuestionsQuestionIdGet: function (hospitalId, questionId, options) {
            var localVarAxiosArgs = exports.QuestionsApiAxiosParamCreator(configuration).apiV1HospitalsHospitalIdQuestionsQuestionIdGet(hospitalId, questionId, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        PUT /api/v1/hospitals/1/questions/1      {          \"title\": \"Samsung Hospital\",          \"description\": \"This is an question.\",          \"body\": \"updated question body here\",          \"status\": \"Draft\",          \"hospitalId\": 1,        ///                   \"medias\": [            {              \"mediaType\": \"Photo\",              \"url\": \"string\",              \"thumbnailUrl\": \"string\",              \"description\": \"string\",              \"order\": 0            }          ]      }
         * @summary Update question.
         * @param {string} hospitalId
         * @param {string} questionId
         * @param {UpdateQuestionCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdQuestionsQuestionIdPut: function (hospitalId, questionId, body, options) {
            var localVarAxiosArgs = exports.QuestionsApiAxiosParamCreator(configuration).apiV1HospitalsHospitalIdQuestionsQuestionIdPut(hospitalId, questionId, body, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        GET /api/v1/hospitals/1/questions
         * @summary Get all questions.
         * @param {string} [id]
         * @param {string} [title]
         * @param {string} [hospitalId]
         * @param {string} [patientId]
         * @param {object} [questionType]
         * @param {object} [questionStatus]
         * @param {number} [page]
         * @param {number} [limit]
         * @param {Date} [lastRetrieved]
         * @param {boolean} [current]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsQuestionsGet: function (id, title, hospitalId, patientId, questionType, questionStatus, page, limit, lastRetrieved, current, options) {
            var localVarAxiosArgs = exports.QuestionsApiAxiosParamCreator(configuration).apiV1HospitalsQuestionsGet(id, title, hospitalId, patientId, questionType, questionStatus, page, limit, lastRetrieved, current, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * QuestionsApi - factory interface
 * @export
 */
exports.QuestionsApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Sample request:        POST /api/v1/hospitals/1/questions      {          \"title\": \"Hospital question\",          \"description\": \"This is a question.\",          \"body\": \"question body here\",          \"status\": \"Draft\",          \"hospitalId\": 1,          \"tags\": [            {              \"value\": \"string\",              \"order\": 0              }          ],          \"medias\": [            {              \"mediaType\": \"Photo\",              \"url\": \"string\",              \"thumbnailUrl\": \"string\",              \"description\": \"string\",              \"order\": 0            }          ]      }
         * @summary Create an question.
         * @param {string} hospitalId
         * @param {CreateQuestionCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdQuestionsPost: function (hospitalId, body, options) {
            return exports.QuestionsApiFp(configuration).apiV1HospitalsHospitalIdQuestionsPost(hospitalId, body, options)(axios, basePath);
        },
        /**
         * Sample request:        DELETE /api/v1/hospitals/1/questions/1
         * @summary Delete question.
         * @param {string} hospitalId
         * @param {string} questionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdQuestionsQuestionIdDelete: function (hospitalId, questionId, options) {
            return exports.QuestionsApiFp(configuration).apiV1HospitalsHospitalIdQuestionsQuestionIdDelete(hospitalId, questionId, options)(axios, basePath);
        },
        /**
         * Sample request:        GET /api/v1/hospitals/1/questions/1
         * @summary Get question.
         * @param {string} hospitalId
         * @param {string} questionId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdQuestionsQuestionIdGet: function (hospitalId, questionId, options) {
            return exports.QuestionsApiFp(configuration).apiV1HospitalsHospitalIdQuestionsQuestionIdGet(hospitalId, questionId, options)(axios, basePath);
        },
        /**
         * Sample request:        PUT /api/v1/hospitals/1/questions/1      {          \"title\": \"Samsung Hospital\",          \"description\": \"This is an question.\",          \"body\": \"updated question body here\",          \"status\": \"Draft\",          \"hospitalId\": 1,        ///                   \"medias\": [            {              \"mediaType\": \"Photo\",              \"url\": \"string\",              \"thumbnailUrl\": \"string\",              \"description\": \"string\",              \"order\": 0            }          ]      }
         * @summary Update question.
         * @param {string} hospitalId
         * @param {string} questionId
         * @param {UpdateQuestionCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdQuestionsQuestionIdPut: function (hospitalId, questionId, body, options) {
            return exports.QuestionsApiFp(configuration).apiV1HospitalsHospitalIdQuestionsQuestionIdPut(hospitalId, questionId, body, options)(axios, basePath);
        },
        /**
         * Sample request:        GET /api/v1/hospitals/1/questions
         * @summary Get all questions.
         * @param {string} [id]
         * @param {string} [title]
         * @param {string} [hospitalId]
         * @param {string} [patientId]
         * @param {object} [questionType]
         * @param {object} [questionStatus]
         * @param {number} [page]
         * @param {number} [limit]
         * @param {Date} [lastRetrieved]
         * @param {boolean} [current]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsQuestionsGet: function (id, title, hospitalId, patientId, questionType, questionStatus, page, limit, lastRetrieved, current, options) {
            return exports.QuestionsApiFp(configuration).apiV1HospitalsQuestionsGet(id, title, hospitalId, patientId, questionType, questionStatus, page, limit, lastRetrieved, current, options)(axios, basePath);
        },
    };
};
/**
 * QuestionsApi - object-oriented interface
 * @export
 * @class QuestionsApi
 * @extends {BaseAPI}
 */
var QuestionsApi = /** @class */ (function (_super) {
    __extends(QuestionsApi, _super);
    function QuestionsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Sample request:        POST /api/v1/hospitals/1/questions      {          \"title\": \"Hospital question\",          \"description\": \"This is a question.\",          \"body\": \"question body here\",          \"status\": \"Draft\",          \"hospitalId\": 1,          \"tags\": [            {              \"value\": \"string\",              \"order\": 0              }          ],          \"medias\": [            {              \"mediaType\": \"Photo\",              \"url\": \"string\",              \"thumbnailUrl\": \"string\",              \"description\": \"string\",              \"order\": 0            }          ]      }
     * @summary Create an question.
     * @param {string} hospitalId
     * @param {CreateQuestionCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionsApi
     */
    QuestionsApi.prototype.apiV1HospitalsHospitalIdQuestionsPost = function (hospitalId, body, options) {
        return exports.QuestionsApiFp(this.configuration).apiV1HospitalsHospitalIdQuestionsPost(hospitalId, body, options)(this.axios, this.basePath);
    };
    /**
     * Sample request:        DELETE /api/v1/hospitals/1/questions/1
     * @summary Delete question.
     * @param {string} hospitalId
     * @param {string} questionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionsApi
     */
    QuestionsApi.prototype.apiV1HospitalsHospitalIdQuestionsQuestionIdDelete = function (hospitalId, questionId, options) {
        return exports.QuestionsApiFp(this.configuration).apiV1HospitalsHospitalIdQuestionsQuestionIdDelete(hospitalId, questionId, options)(this.axios, this.basePath);
    };
    /**
     * Sample request:        GET /api/v1/hospitals/1/questions/1
     * @summary Get question.
     * @param {string} hospitalId
     * @param {string} questionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionsApi
     */
    QuestionsApi.prototype.apiV1HospitalsHospitalIdQuestionsQuestionIdGet = function (hospitalId, questionId, options) {
        return exports.QuestionsApiFp(this.configuration).apiV1HospitalsHospitalIdQuestionsQuestionIdGet(hospitalId, questionId, options)(this.axios, this.basePath);
    };
    /**
     * Sample request:        PUT /api/v1/hospitals/1/questions/1      {          \"title\": \"Samsung Hospital\",          \"description\": \"This is an question.\",          \"body\": \"updated question body here\",          \"status\": \"Draft\",          \"hospitalId\": 1,        ///                   \"medias\": [            {              \"mediaType\": \"Photo\",              \"url\": \"string\",              \"thumbnailUrl\": \"string\",              \"description\": \"string\",              \"order\": 0            }          ]      }
     * @summary Update question.
     * @param {string} hospitalId
     * @param {string} questionId
     * @param {UpdateQuestionCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionsApi
     */
    QuestionsApi.prototype.apiV1HospitalsHospitalIdQuestionsQuestionIdPut = function (hospitalId, questionId, body, options) {
        return exports.QuestionsApiFp(this.configuration).apiV1HospitalsHospitalIdQuestionsQuestionIdPut(hospitalId, questionId, body, options)(this.axios, this.basePath);
    };
    /**
     * Sample request:        GET /api/v1/hospitals/1/questions
     * @summary Get all questions.
     * @param {string} [id]
     * @param {string} [title]
     * @param {string} [hospitalId]
     * @param {string} [patientId]
     * @param {object} [questionType]
     * @param {object} [questionStatus]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionsApi
     */
    QuestionsApi.prototype.apiV1HospitalsQuestionsGet = function (id, title, hospitalId, patientId, questionType, questionStatus, page, limit, lastRetrieved, current, options) {
        return exports.QuestionsApiFp(this.configuration).apiV1HospitalsQuestionsGet(id, title, hospitalId, patientId, questionType, questionStatus, page, limit, lastRetrieved, current, options)(this.axios, this.basePath);
    };
    return QuestionsApi;
}(base_1.BaseAPI));
exports.QuestionsApi = QuestionsApi;
/**
 * SearchApi - axios parameter creator
 * @export
 */
exports.SearchApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {string} [searchTerm]
         * @param {boolean} [countOnly]
         * @param {string} [countryId]
         * @param {string} [hospitalId]
         * @param {object} [marketingType]
         * @param {number} [page]
         * @param {number} [limit]
         * @param {Date} [lastRetrieved]
         * @param {boolean} [current]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SearchDealsGet: function (searchTerm, countOnly, countryId, hospitalId, marketingType, page, limit, lastRetrieved, current, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/api/v1/search/deals";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (searchTerm !== undefined) {
                localVarQueryParameter['SearchTerm'] = searchTerm;
            }
            if (countOnly !== undefined) {
                localVarQueryParameter['CountOnly'] = countOnly;
            }
            if (countryId !== undefined) {
                localVarQueryParameter['CountryId'] = countryId;
            }
            if (hospitalId !== undefined) {
                localVarQueryParameter['HospitalId'] = hospitalId;
            }
            if (marketingType !== undefined) {
                localVarQueryParameter['MarketingType'] = marketingType;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (lastRetrieved !== undefined) {
                localVarQueryParameter['lastRetrieved'] = (lastRetrieved instanceof Date) ?
                    lastRetrieved.toISOString() :
                    lastRetrieved;
            }
            if (current !== undefined) {
                localVarQueryParameter['Current'] = current;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} [searchTerm]
         * @param {boolean} [countOnly]
         * @param {string} [countryId]
         * @param {string} [hospitalId]
         * @param {object} [marketingType]
         * @param {number} [page]
         * @param {number} [limit]
         * @param {Date} [lastRetrieved]
         * @param {boolean} [current]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SearchDoctorsGet: function (searchTerm, countOnly, countryId, hospitalId, marketingType, page, limit, lastRetrieved, current, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/api/v1/search/doctors";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (searchTerm !== undefined) {
                localVarQueryParameter['SearchTerm'] = searchTerm;
            }
            if (countOnly !== undefined) {
                localVarQueryParameter['CountOnly'] = countOnly;
            }
            if (countryId !== undefined) {
                localVarQueryParameter['CountryId'] = countryId;
            }
            if (hospitalId !== undefined) {
                localVarQueryParameter['HospitalId'] = hospitalId;
            }
            if (marketingType !== undefined) {
                localVarQueryParameter['MarketingType'] = marketingType;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (lastRetrieved !== undefined) {
                localVarQueryParameter['lastRetrieved'] = (lastRetrieved instanceof Date) ?
                    lastRetrieved.toISOString() :
                    lastRetrieved;
            }
            if (current !== undefined) {
                localVarQueryParameter['Current'] = current;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} [searchTerm]
         * @param {boolean} [countOnly]
         * @param {string} [countryId]
         * @param {string} [hospitalId]
         * @param {object} [marketingType]
         * @param {number} [page]
         * @param {number} [limit]
         * @param {Date} [lastRetrieved]
         * @param {boolean} [current]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SearchEquipmentsGet: function (searchTerm, countOnly, countryId, hospitalId, marketingType, page, limit, lastRetrieved, current, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/api/v1/search/equipments";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (searchTerm !== undefined) {
                localVarQueryParameter['SearchTerm'] = searchTerm;
            }
            if (countOnly !== undefined) {
                localVarQueryParameter['CountOnly'] = countOnly;
            }
            if (countryId !== undefined) {
                localVarQueryParameter['CountryId'] = countryId;
            }
            if (hospitalId !== undefined) {
                localVarQueryParameter['HospitalId'] = hospitalId;
            }
            if (marketingType !== undefined) {
                localVarQueryParameter['MarketingType'] = marketingType;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (lastRetrieved !== undefined) {
                localVarQueryParameter['lastRetrieved'] = (lastRetrieved instanceof Date) ?
                    lastRetrieved.toISOString() :
                    lastRetrieved;
            }
            if (current !== undefined) {
                localVarQueryParameter['Current'] = current;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} [searchTerm]
         * @param {boolean} [countOnly]
         * @param {string} [countryId]
         * @param {string} [hospitalId]
         * @param {object} [marketingType]
         * @param {number} [page]
         * @param {number} [limit]
         * @param {Date} [lastRetrieved]
         * @param {boolean} [current]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SearchGetcountGet: function (searchTerm, countOnly, countryId, hospitalId, marketingType, page, limit, lastRetrieved, current, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/api/v1/search/getcount";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (searchTerm !== undefined) {
                localVarQueryParameter['SearchTerm'] = searchTerm;
            }
            if (countOnly !== undefined) {
                localVarQueryParameter['CountOnly'] = countOnly;
            }
            if (countryId !== undefined) {
                localVarQueryParameter['CountryId'] = countryId;
            }
            if (hospitalId !== undefined) {
                localVarQueryParameter['HospitalId'] = hospitalId;
            }
            if (marketingType !== undefined) {
                localVarQueryParameter['MarketingType'] = marketingType;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (lastRetrieved !== undefined) {
                localVarQueryParameter['lastRetrieved'] = (lastRetrieved instanceof Date) ?
                    lastRetrieved.toISOString() :
                    lastRetrieved;
            }
            if (current !== undefined) {
                localVarQueryParameter['Current'] = current;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} [searchTerm]
         * @param {boolean} [countOnly]
         * @param {string} [countryId]
         * @param {string} [hospitalId]
         * @param {object} [marketingType]
         * @param {number} [page]
         * @param {number} [limit]
         * @param {Date} [lastRetrieved]
         * @param {boolean} [current]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SearchHospitalsGet: function (searchTerm, countOnly, countryId, hospitalId, marketingType, page, limit, lastRetrieved, current, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/api/v1/search/hospitals";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (searchTerm !== undefined) {
                localVarQueryParameter['SearchTerm'] = searchTerm;
            }
            if (countOnly !== undefined) {
                localVarQueryParameter['CountOnly'] = countOnly;
            }
            if (countryId !== undefined) {
                localVarQueryParameter['CountryId'] = countryId;
            }
            if (hospitalId !== undefined) {
                localVarQueryParameter['HospitalId'] = hospitalId;
            }
            if (marketingType !== undefined) {
                localVarQueryParameter['MarketingType'] = marketingType;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (lastRetrieved !== undefined) {
                localVarQueryParameter['lastRetrieved'] = (lastRetrieved instanceof Date) ?
                    lastRetrieved.toISOString() :
                    lastRetrieved;
            }
            if (current !== undefined) {
                localVarQueryParameter['Current'] = current;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} [searchTerm]
         * @param {boolean} [countOnly]
         * @param {string} [countryId]
         * @param {string} [hospitalId]
         * @param {object} [marketingType]
         * @param {number} [page]
         * @param {number} [limit]
         * @param {Date} [lastRetrieved]
         * @param {boolean} [current]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SearchSpecialtiesGet: function (searchTerm, countOnly, countryId, hospitalId, marketingType, page, limit, lastRetrieved, current, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/api/v1/search/specialties";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (searchTerm !== undefined) {
                localVarQueryParameter['SearchTerm'] = searchTerm;
            }
            if (countOnly !== undefined) {
                localVarQueryParameter['CountOnly'] = countOnly;
            }
            if (countryId !== undefined) {
                localVarQueryParameter['CountryId'] = countryId;
            }
            if (hospitalId !== undefined) {
                localVarQueryParameter['HospitalId'] = hospitalId;
            }
            if (marketingType !== undefined) {
                localVarQueryParameter['MarketingType'] = marketingType;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (lastRetrieved !== undefined) {
                localVarQueryParameter['lastRetrieved'] = (lastRetrieved instanceof Date) ?
                    lastRetrieved.toISOString() :
                    lastRetrieved;
            }
            if (current !== undefined) {
                localVarQueryParameter['Current'] = current;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * SearchApi - functional programming interface
 * @export
 */
exports.SearchApiFp = function (configuration) {
    return {
        /**
         *
         * @param {string} [searchTerm]
         * @param {boolean} [countOnly]
         * @param {string} [countryId]
         * @param {string} [hospitalId]
         * @param {object} [marketingType]
         * @param {number} [page]
         * @param {number} [limit]
         * @param {Date} [lastRetrieved]
         * @param {boolean} [current]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SearchDealsGet: function (searchTerm, countOnly, countryId, hospitalId, marketingType, page, limit, lastRetrieved, current, options) {
            var localVarAxiosArgs = exports.SearchApiAxiosParamCreator(configuration).apiV1SearchDealsGet(searchTerm, countOnly, countryId, hospitalId, marketingType, page, limit, lastRetrieved, current, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} [searchTerm]
         * @param {boolean} [countOnly]
         * @param {string} [countryId]
         * @param {string} [hospitalId]
         * @param {object} [marketingType]
         * @param {number} [page]
         * @param {number} [limit]
         * @param {Date} [lastRetrieved]
         * @param {boolean} [current]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SearchDoctorsGet: function (searchTerm, countOnly, countryId, hospitalId, marketingType, page, limit, lastRetrieved, current, options) {
            var localVarAxiosArgs = exports.SearchApiAxiosParamCreator(configuration).apiV1SearchDoctorsGet(searchTerm, countOnly, countryId, hospitalId, marketingType, page, limit, lastRetrieved, current, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} [searchTerm]
         * @param {boolean} [countOnly]
         * @param {string} [countryId]
         * @param {string} [hospitalId]
         * @param {object} [marketingType]
         * @param {number} [page]
         * @param {number} [limit]
         * @param {Date} [lastRetrieved]
         * @param {boolean} [current]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SearchEquipmentsGet: function (searchTerm, countOnly, countryId, hospitalId, marketingType, page, limit, lastRetrieved, current, options) {
            var localVarAxiosArgs = exports.SearchApiAxiosParamCreator(configuration).apiV1SearchEquipmentsGet(searchTerm, countOnly, countryId, hospitalId, marketingType, page, limit, lastRetrieved, current, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} [searchTerm]
         * @param {boolean} [countOnly]
         * @param {string} [countryId]
         * @param {string} [hospitalId]
         * @param {object} [marketingType]
         * @param {number} [page]
         * @param {number} [limit]
         * @param {Date} [lastRetrieved]
         * @param {boolean} [current]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SearchGetcountGet: function (searchTerm, countOnly, countryId, hospitalId, marketingType, page, limit, lastRetrieved, current, options) {
            var localVarAxiosArgs = exports.SearchApiAxiosParamCreator(configuration).apiV1SearchGetcountGet(searchTerm, countOnly, countryId, hospitalId, marketingType, page, limit, lastRetrieved, current, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} [searchTerm]
         * @param {boolean} [countOnly]
         * @param {string} [countryId]
         * @param {string} [hospitalId]
         * @param {object} [marketingType]
         * @param {number} [page]
         * @param {number} [limit]
         * @param {Date} [lastRetrieved]
         * @param {boolean} [current]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SearchHospitalsGet: function (searchTerm, countOnly, countryId, hospitalId, marketingType, page, limit, lastRetrieved, current, options) {
            var localVarAxiosArgs = exports.SearchApiAxiosParamCreator(configuration).apiV1SearchHospitalsGet(searchTerm, countOnly, countryId, hospitalId, marketingType, page, limit, lastRetrieved, current, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} [searchTerm]
         * @param {boolean} [countOnly]
         * @param {string} [countryId]
         * @param {string} [hospitalId]
         * @param {object} [marketingType]
         * @param {number} [page]
         * @param {number} [limit]
         * @param {Date} [lastRetrieved]
         * @param {boolean} [current]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SearchSpecialtiesGet: function (searchTerm, countOnly, countryId, hospitalId, marketingType, page, limit, lastRetrieved, current, options) {
            var localVarAxiosArgs = exports.SearchApiAxiosParamCreator(configuration).apiV1SearchSpecialtiesGet(searchTerm, countOnly, countryId, hospitalId, marketingType, page, limit, lastRetrieved, current, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * SearchApi - factory interface
 * @export
 */
exports.SearchApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @param {string} [searchTerm]
         * @param {boolean} [countOnly]
         * @param {string} [countryId]
         * @param {string} [hospitalId]
         * @param {object} [marketingType]
         * @param {number} [page]
         * @param {number} [limit]
         * @param {Date} [lastRetrieved]
         * @param {boolean} [current]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SearchDealsGet: function (searchTerm, countOnly, countryId, hospitalId, marketingType, page, limit, lastRetrieved, current, options) {
            return exports.SearchApiFp(configuration).apiV1SearchDealsGet(searchTerm, countOnly, countryId, hospitalId, marketingType, page, limit, lastRetrieved, current, options)(axios, basePath);
        },
        /**
         *
         * @param {string} [searchTerm]
         * @param {boolean} [countOnly]
         * @param {string} [countryId]
         * @param {string} [hospitalId]
         * @param {object} [marketingType]
         * @param {number} [page]
         * @param {number} [limit]
         * @param {Date} [lastRetrieved]
         * @param {boolean} [current]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SearchDoctorsGet: function (searchTerm, countOnly, countryId, hospitalId, marketingType, page, limit, lastRetrieved, current, options) {
            return exports.SearchApiFp(configuration).apiV1SearchDoctorsGet(searchTerm, countOnly, countryId, hospitalId, marketingType, page, limit, lastRetrieved, current, options)(axios, basePath);
        },
        /**
         *
         * @param {string} [searchTerm]
         * @param {boolean} [countOnly]
         * @param {string} [countryId]
         * @param {string} [hospitalId]
         * @param {object} [marketingType]
         * @param {number} [page]
         * @param {number} [limit]
         * @param {Date} [lastRetrieved]
         * @param {boolean} [current]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SearchEquipmentsGet: function (searchTerm, countOnly, countryId, hospitalId, marketingType, page, limit, lastRetrieved, current, options) {
            return exports.SearchApiFp(configuration).apiV1SearchEquipmentsGet(searchTerm, countOnly, countryId, hospitalId, marketingType, page, limit, lastRetrieved, current, options)(axios, basePath);
        },
        /**
         *
         * @param {string} [searchTerm]
         * @param {boolean} [countOnly]
         * @param {string} [countryId]
         * @param {string} [hospitalId]
         * @param {object} [marketingType]
         * @param {number} [page]
         * @param {number} [limit]
         * @param {Date} [lastRetrieved]
         * @param {boolean} [current]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SearchGetcountGet: function (searchTerm, countOnly, countryId, hospitalId, marketingType, page, limit, lastRetrieved, current, options) {
            return exports.SearchApiFp(configuration).apiV1SearchGetcountGet(searchTerm, countOnly, countryId, hospitalId, marketingType, page, limit, lastRetrieved, current, options)(axios, basePath);
        },
        /**
         *
         * @param {string} [searchTerm]
         * @param {boolean} [countOnly]
         * @param {string} [countryId]
         * @param {string} [hospitalId]
         * @param {object} [marketingType]
         * @param {number} [page]
         * @param {number} [limit]
         * @param {Date} [lastRetrieved]
         * @param {boolean} [current]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SearchHospitalsGet: function (searchTerm, countOnly, countryId, hospitalId, marketingType, page, limit, lastRetrieved, current, options) {
            return exports.SearchApiFp(configuration).apiV1SearchHospitalsGet(searchTerm, countOnly, countryId, hospitalId, marketingType, page, limit, lastRetrieved, current, options)(axios, basePath);
        },
        /**
         *
         * @param {string} [searchTerm]
         * @param {boolean} [countOnly]
         * @param {string} [countryId]
         * @param {string} [hospitalId]
         * @param {object} [marketingType]
         * @param {number} [page]
         * @param {number} [limit]
         * @param {Date} [lastRetrieved]
         * @param {boolean} [current]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SearchSpecialtiesGet: function (searchTerm, countOnly, countryId, hospitalId, marketingType, page, limit, lastRetrieved, current, options) {
            return exports.SearchApiFp(configuration).apiV1SearchSpecialtiesGet(searchTerm, countOnly, countryId, hospitalId, marketingType, page, limit, lastRetrieved, current, options)(axios, basePath);
        },
    };
};
/**
 * SearchApi - object-oriented interface
 * @export
 * @class SearchApi
 * @extends {BaseAPI}
 */
var SearchApi = /** @class */ (function (_super) {
    __extends(SearchApi, _super);
    function SearchApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {string} [searchTerm]
     * @param {boolean} [countOnly]
     * @param {string} [countryId]
     * @param {string} [hospitalId]
     * @param {object} [marketingType]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    SearchApi.prototype.apiV1SearchDealsGet = function (searchTerm, countOnly, countryId, hospitalId, marketingType, page, limit, lastRetrieved, current, options) {
        return exports.SearchApiFp(this.configuration).apiV1SearchDealsGet(searchTerm, countOnly, countryId, hospitalId, marketingType, page, limit, lastRetrieved, current, options)(this.axios, this.basePath);
    };
    /**
     *
     * @param {string} [searchTerm]
     * @param {boolean} [countOnly]
     * @param {string} [countryId]
     * @param {string} [hospitalId]
     * @param {object} [marketingType]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    SearchApi.prototype.apiV1SearchDoctorsGet = function (searchTerm, countOnly, countryId, hospitalId, marketingType, page, limit, lastRetrieved, current, options) {
        return exports.SearchApiFp(this.configuration).apiV1SearchDoctorsGet(searchTerm, countOnly, countryId, hospitalId, marketingType, page, limit, lastRetrieved, current, options)(this.axios, this.basePath);
    };
    /**
     *
     * @param {string} [searchTerm]
     * @param {boolean} [countOnly]
     * @param {string} [countryId]
     * @param {string} [hospitalId]
     * @param {object} [marketingType]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    SearchApi.prototype.apiV1SearchEquipmentsGet = function (searchTerm, countOnly, countryId, hospitalId, marketingType, page, limit, lastRetrieved, current, options) {
        return exports.SearchApiFp(this.configuration).apiV1SearchEquipmentsGet(searchTerm, countOnly, countryId, hospitalId, marketingType, page, limit, lastRetrieved, current, options)(this.axios, this.basePath);
    };
    /**
     *
     * @param {string} [searchTerm]
     * @param {boolean} [countOnly]
     * @param {string} [countryId]
     * @param {string} [hospitalId]
     * @param {object} [marketingType]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    SearchApi.prototype.apiV1SearchGetcountGet = function (searchTerm, countOnly, countryId, hospitalId, marketingType, page, limit, lastRetrieved, current, options) {
        return exports.SearchApiFp(this.configuration).apiV1SearchGetcountGet(searchTerm, countOnly, countryId, hospitalId, marketingType, page, limit, lastRetrieved, current, options)(this.axios, this.basePath);
    };
    /**
     *
     * @param {string} [searchTerm]
     * @param {boolean} [countOnly]
     * @param {string} [countryId]
     * @param {string} [hospitalId]
     * @param {object} [marketingType]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    SearchApi.prototype.apiV1SearchHospitalsGet = function (searchTerm, countOnly, countryId, hospitalId, marketingType, page, limit, lastRetrieved, current, options) {
        return exports.SearchApiFp(this.configuration).apiV1SearchHospitalsGet(searchTerm, countOnly, countryId, hospitalId, marketingType, page, limit, lastRetrieved, current, options)(this.axios, this.basePath);
    };
    /**
     *
     * @param {string} [searchTerm]
     * @param {boolean} [countOnly]
     * @param {string} [countryId]
     * @param {string} [hospitalId]
     * @param {object} [marketingType]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    SearchApi.prototype.apiV1SearchSpecialtiesGet = function (searchTerm, countOnly, countryId, hospitalId, marketingType, page, limit, lastRetrieved, current, options) {
        return exports.SearchApiFp(this.configuration).apiV1SearchSpecialtiesGet(searchTerm, countOnly, countryId, hospitalId, marketingType, page, limit, lastRetrieved, current, options)(this.axios, this.basePath);
    };
    return SearchApi;
}(base_1.BaseAPI));
exports.SearchApi = SearchApi;
/**
 * ServiceCategoriesApi - axios parameter creator
 * @export
 */
exports.ServiceCategoriesApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Sample request:        GET /api/v1/ServiceCategories
         * @summary Get all ServiceCategories.
         * @param {string} [id]
         * @param {string} [name]
         * @param {string} [description]
         * @param {number} [page]
         * @param {number} [limit]
         * @param {Date} [lastRetrieved]
         * @param {boolean} [current]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ServicecategoriesGet: function (id, name, description, page, limit, lastRetrieved, current, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/api/v1/servicecategories";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }
            if (name !== undefined) {
                localVarQueryParameter['Name'] = name;
            }
            if (description !== undefined) {
                localVarQueryParameter['Description'] = description;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (lastRetrieved !== undefined) {
                localVarQueryParameter['lastRetrieved'] = (lastRetrieved instanceof Date) ?
                    lastRetrieved.toISOString() :
                    lastRetrieved;
            }
            if (current !== undefined) {
                localVarQueryParameter['Current'] = current;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        POST /api/v1/ServiceCategories      {          \"name\": \"Adults\",          \"description\": \"There are so many “-ologists“ that they can be hard to keep straight. However, this list could be a handy reference. This is not meant to be an exhaustive and all-inclusive list of what a specialist does, but it should provide you with a basic overview.\"      }
         * @summary Create ServiceCategory.
         * @param {CreateServiceCategoryCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ServicecategoriesPost: function (body, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/api/v1/servicecategories";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            var needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        DELETE /api/v1/ServiceCategories/1
         * @summary Delete ServiceCategory.
         * @param {string} serviceCategoryId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ServicecategoriesServiceCategoryIdDelete: function (serviceCategoryId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'serviceCategoryId' is not null or undefined
            if (serviceCategoryId === null || serviceCategoryId === undefined) {
                throw new base_1.RequiredError('serviceCategoryId', 'Required parameter serviceCategoryId was null or undefined when calling apiV1ServicecategoriesServiceCategoryIdDelete.');
            }
            var localVarPath = "/api/v1/servicecategories/{serviceCategoryId}"
                .replace("{" + "ServiceCategoryId" + "}", encodeURIComponent(String(serviceCategoryId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        GET /api/v1/ServiceCategories/1
         * @summary Get ServiceCategory.
         * @param {string} serviceCategoryId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ServicecategoriesServiceCategoryIdGet: function (serviceCategoryId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'serviceCategoryId' is not null or undefined
            if (serviceCategoryId === null || serviceCategoryId === undefined) {
                throw new base_1.RequiredError('serviceCategoryId', 'Required parameter serviceCategoryId was null or undefined when calling apiV1ServicecategoriesServiceCategoryIdGet.');
            }
            var localVarPath = "/api/v1/servicecategories/{serviceCategoryId}"
                .replace("{" + "ServiceCategoryId" + "}", encodeURIComponent(String(serviceCategoryId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        PUT /api/v1/ServiceCategories/1      {          \"name\": \"Adults\",          \"description\": \"There are so many “-ologists“ that they can be hard to keep straight. However, this list could be a handy reference. This is not meant to be an exhaustive and all-inclusive list of what a specialist does, but it should provide you with a basic overview.\"      }
         * @summary Update ServiceCategory
         * @param {string} serviceCategoryId
         * @param {UpdateServiceCategoryCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ServicecategoriesServiceCategoryIdPut: function (serviceCategoryId, body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'serviceCategoryId' is not null or undefined
            if (serviceCategoryId === null || serviceCategoryId === undefined) {
                throw new base_1.RequiredError('serviceCategoryId', 'Required parameter serviceCategoryId was null or undefined when calling apiV1ServicecategoriesServiceCategoryIdPut.');
            }
            var localVarPath = "/api/v1/servicecategories/{serviceCategoryId}"
                .replace("{" + "ServiceCategoryId" + "}", encodeURIComponent(String(serviceCategoryId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            var needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * ServiceCategoriesApi - functional programming interface
 * @export
 */
exports.ServiceCategoriesApiFp = function (configuration) {
    return {
        /**
         * Sample request:        GET /api/v1/ServiceCategories
         * @summary Get all ServiceCategories.
         * @param {string} [id]
         * @param {string} [name]
         * @param {string} [description]
         * @param {number} [page]
         * @param {number} [limit]
         * @param {Date} [lastRetrieved]
         * @param {boolean} [current]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ServicecategoriesGet: function (id, name, description, page, limit, lastRetrieved, current, options) {
            var localVarAxiosArgs = exports.ServiceCategoriesApiAxiosParamCreator(configuration).apiV1ServicecategoriesGet(id, name, description, page, limit, lastRetrieved, current, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        POST /api/v1/ServiceCategories      {          \"name\": \"Adults\",          \"description\": \"There are so many “-ologists“ that they can be hard to keep straight. However, this list could be a handy reference. This is not meant to be an exhaustive and all-inclusive list of what a specialist does, but it should provide you with a basic overview.\"      }
         * @summary Create ServiceCategory.
         * @param {CreateServiceCategoryCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ServicecategoriesPost: function (body, options) {
            var localVarAxiosArgs = exports.ServiceCategoriesApiAxiosParamCreator(configuration).apiV1ServicecategoriesPost(body, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        DELETE /api/v1/ServiceCategories/1
         * @summary Delete ServiceCategory.
         * @param {string} serviceCategoryId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ServicecategoriesServiceCategoryIdDelete: function (serviceCategoryId, options) {
            var localVarAxiosArgs = exports.ServiceCategoriesApiAxiosParamCreator(configuration).apiV1ServicecategoriesServiceCategoryIdDelete(serviceCategoryId, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        GET /api/v1/ServiceCategories/1
         * @summary Get ServiceCategory.
         * @param {string} serviceCategoryId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ServicecategoriesServiceCategoryIdGet: function (serviceCategoryId, options) {
            var localVarAxiosArgs = exports.ServiceCategoriesApiAxiosParamCreator(configuration).apiV1ServicecategoriesServiceCategoryIdGet(serviceCategoryId, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        PUT /api/v1/ServiceCategories/1      {          \"name\": \"Adults\",          \"description\": \"There are so many “-ologists“ that they can be hard to keep straight. However, this list could be a handy reference. This is not meant to be an exhaustive and all-inclusive list of what a specialist does, but it should provide you with a basic overview.\"      }
         * @summary Update ServiceCategory
         * @param {string} serviceCategoryId
         * @param {UpdateServiceCategoryCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ServicecategoriesServiceCategoryIdPut: function (serviceCategoryId, body, options) {
            var localVarAxiosArgs = exports.ServiceCategoriesApiAxiosParamCreator(configuration).apiV1ServicecategoriesServiceCategoryIdPut(serviceCategoryId, body, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * ServiceCategoriesApi - factory interface
 * @export
 */
exports.ServiceCategoriesApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Sample request:        GET /api/v1/ServiceCategories
         * @summary Get all ServiceCategories.
         * @param {string} [id]
         * @param {string} [name]
         * @param {string} [description]
         * @param {number} [page]
         * @param {number} [limit]
         * @param {Date} [lastRetrieved]
         * @param {boolean} [current]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ServicecategoriesGet: function (id, name, description, page, limit, lastRetrieved, current, options) {
            return exports.ServiceCategoriesApiFp(configuration).apiV1ServicecategoriesGet(id, name, description, page, limit, lastRetrieved, current, options)(axios, basePath);
        },
        /**
         * Sample request:        POST /api/v1/ServiceCategories      {          \"name\": \"Adults\",          \"description\": \"There are so many “-ologists“ that they can be hard to keep straight. However, this list could be a handy reference. This is not meant to be an exhaustive and all-inclusive list of what a specialist does, but it should provide you with a basic overview.\"      }
         * @summary Create ServiceCategory.
         * @param {CreateServiceCategoryCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ServicecategoriesPost: function (body, options) {
            return exports.ServiceCategoriesApiFp(configuration).apiV1ServicecategoriesPost(body, options)(axios, basePath);
        },
        /**
         * Sample request:        DELETE /api/v1/ServiceCategories/1
         * @summary Delete ServiceCategory.
         * @param {string} serviceCategoryId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ServicecategoriesServiceCategoryIdDelete: function (serviceCategoryId, options) {
            return exports.ServiceCategoriesApiFp(configuration).apiV1ServicecategoriesServiceCategoryIdDelete(serviceCategoryId, options)(axios, basePath);
        },
        /**
         * Sample request:        GET /api/v1/ServiceCategories/1
         * @summary Get ServiceCategory.
         * @param {string} serviceCategoryId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ServicecategoriesServiceCategoryIdGet: function (serviceCategoryId, options) {
            return exports.ServiceCategoriesApiFp(configuration).apiV1ServicecategoriesServiceCategoryIdGet(serviceCategoryId, options)(axios, basePath);
        },
        /**
         * Sample request:        PUT /api/v1/ServiceCategories/1      {          \"name\": \"Adults\",          \"description\": \"There are so many “-ologists“ that they can be hard to keep straight. However, this list could be a handy reference. This is not meant to be an exhaustive and all-inclusive list of what a specialist does, but it should provide you with a basic overview.\"      }
         * @summary Update ServiceCategory
         * @param {string} serviceCategoryId
         * @param {UpdateServiceCategoryCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ServicecategoriesServiceCategoryIdPut: function (serviceCategoryId, body, options) {
            return exports.ServiceCategoriesApiFp(configuration).apiV1ServicecategoriesServiceCategoryIdPut(serviceCategoryId, body, options)(axios, basePath);
        },
    };
};
/**
 * ServiceCategoriesApi - object-oriented interface
 * @export
 * @class ServiceCategoriesApi
 * @extends {BaseAPI}
 */
var ServiceCategoriesApi = /** @class */ (function (_super) {
    __extends(ServiceCategoriesApi, _super);
    function ServiceCategoriesApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Sample request:        GET /api/v1/ServiceCategories
     * @summary Get all ServiceCategories.
     * @param {string} [id]
     * @param {string} [name]
     * @param {string} [description]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceCategoriesApi
     */
    ServiceCategoriesApi.prototype.apiV1ServicecategoriesGet = function (id, name, description, page, limit, lastRetrieved, current, options) {
        return exports.ServiceCategoriesApiFp(this.configuration).apiV1ServicecategoriesGet(id, name, description, page, limit, lastRetrieved, current, options)(this.axios, this.basePath);
    };
    /**
     * Sample request:        POST /api/v1/ServiceCategories      {          \"name\": \"Adults\",          \"description\": \"There are so many “-ologists“ that they can be hard to keep straight. However, this list could be a handy reference. This is not meant to be an exhaustive and all-inclusive list of what a specialist does, but it should provide you with a basic overview.\"      }
     * @summary Create ServiceCategory.
     * @param {CreateServiceCategoryCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceCategoriesApi
     */
    ServiceCategoriesApi.prototype.apiV1ServicecategoriesPost = function (body, options) {
        return exports.ServiceCategoriesApiFp(this.configuration).apiV1ServicecategoriesPost(body, options)(this.axios, this.basePath);
    };
    /**
     * Sample request:        DELETE /api/v1/ServiceCategories/1
     * @summary Delete ServiceCategory.
     * @param {string} serviceCategoryId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceCategoriesApi
     */
    ServiceCategoriesApi.prototype.apiV1ServicecategoriesServiceCategoryIdDelete = function (serviceCategoryId, options) {
        return exports.ServiceCategoriesApiFp(this.configuration).apiV1ServicecategoriesServiceCategoryIdDelete(serviceCategoryId, options)(this.axios, this.basePath);
    };
    /**
     * Sample request:        GET /api/v1/ServiceCategories/1
     * @summary Get ServiceCategory.
     * @param {string} serviceCategoryId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceCategoriesApi
     */
    ServiceCategoriesApi.prototype.apiV1ServicecategoriesServiceCategoryIdGet = function (serviceCategoryId, options) {
        return exports.ServiceCategoriesApiFp(this.configuration).apiV1ServicecategoriesServiceCategoryIdGet(serviceCategoryId, options)(this.axios, this.basePath);
    };
    /**
     * Sample request:        PUT /api/v1/ServiceCategories/1      {          \"name\": \"Adults\",          \"description\": \"There are so many “-ologists“ that they can be hard to keep straight. However, this list could be a handy reference. This is not meant to be an exhaustive and all-inclusive list of what a specialist does, but it should provide you with a basic overview.\"      }
     * @summary Update ServiceCategory
     * @param {string} serviceCategoryId
     * @param {UpdateServiceCategoryCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceCategoriesApi
     */
    ServiceCategoriesApi.prototype.apiV1ServicecategoriesServiceCategoryIdPut = function (serviceCategoryId, body, options) {
        return exports.ServiceCategoriesApiFp(this.configuration).apiV1ServicecategoriesServiceCategoryIdPut(serviceCategoryId, body, options)(this.axios, this.basePath);
    };
    return ServiceCategoriesApi;
}(base_1.BaseAPI));
exports.ServiceCategoriesApi = ServiceCategoriesApi;
/**
 * ServicesApi - axios parameter creator
 * @export
 */
exports.ServicesApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Sample request:        POST /api/v1/hospitals/1/specialties/1/services      {          \"name\": \"Heart check up\",          \"description\": \"Asan Hospital (Asan Medical Center) is the largest multidisciplinary medical center in South Korea, which can serve 2,700 patients at once.The key specialties in the hospital are organ transplant, oncology, cardiology, and cardiac surgery.Almost half of all heart transplants in South Korea are carried out (45%) at Asan.The success of organ transplants ranges from 90%. Every day, 11,800 outpatients and 2,550 inpatients are treated in Asan Hospital. Medical tourists from the USA, China, the UAE, Russia, Kazakhstan, and Mongolia choose Asan Hospital.\",          \"minPrice\": 2235,          \"maxPrice\": 2566,          \"priceReuqest\": false,          \"procedure\": \"Treatment\"      }
         * @summary Create service.
         * @param {string} hospitalId
         * @param {string} specialtyId
         * @param {CreateServiceCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdServicesPost: function (hospitalId, specialtyId, body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'hospitalId' is not null or undefined
            if (hospitalId === null || hospitalId === undefined) {
                throw new base_1.RequiredError('hospitalId', 'Required parameter hospitalId was null or undefined when calling apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdServicesPost.');
            }
            // verify required parameter 'specialtyId' is not null or undefined
            if (specialtyId === null || specialtyId === undefined) {
                throw new base_1.RequiredError('specialtyId', 'Required parameter specialtyId was null or undefined when calling apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdServicesPost.');
            }
            var localVarPath = "/api/v1/hospitals/{hospitalId}/specialties/{specialtyId}/services"
                .replace("{" + "hospitalId" + "}", encodeURIComponent(String(hospitalId)))
                .replace("{" + "specialtyId" + "}", encodeURIComponent(String(specialtyId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            var needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        DELETE /api/v1/hospitals/1/specialties/1/services/1
         * @summary Delete service.
         * @param {string} hospitalId
         * @param {string} specialtyId
         * @param {string} serviceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdServicesServiceIdDelete: function (hospitalId, specialtyId, serviceId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'hospitalId' is not null or undefined
            if (hospitalId === null || hospitalId === undefined) {
                throw new base_1.RequiredError('hospitalId', 'Required parameter hospitalId was null or undefined when calling apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdServicesServiceIdDelete.');
            }
            // verify required parameter 'specialtyId' is not null or undefined
            if (specialtyId === null || specialtyId === undefined) {
                throw new base_1.RequiredError('specialtyId', 'Required parameter specialtyId was null or undefined when calling apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdServicesServiceIdDelete.');
            }
            // verify required parameter 'serviceId' is not null or undefined
            if (serviceId === null || serviceId === undefined) {
                throw new base_1.RequiredError('serviceId', 'Required parameter serviceId was null or undefined when calling apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdServicesServiceIdDelete.');
            }
            var localVarPath = "/api/v1/hospitals/{hospitalId}/specialties/{specialtyId}/services/{serviceId}"
                .replace("{" + "hospitalId" + "}", encodeURIComponent(String(hospitalId)))
                .replace("{" + "specialtyId" + "}", encodeURIComponent(String(specialtyId)))
                .replace("{" + "serviceId" + "}", encodeURIComponent(String(serviceId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        GET /api/v1/hospitals/1/specialties/1/services/1
         * @summary Get service.
         * @param {string} hospitalId
         * @param {string} specialtyId
         * @param {string} serviceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdServicesServiceIdGet: function (hospitalId, specialtyId, serviceId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'hospitalId' is not null or undefined
            if (hospitalId === null || hospitalId === undefined) {
                throw new base_1.RequiredError('hospitalId', 'Required parameter hospitalId was null or undefined when calling apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdServicesServiceIdGet.');
            }
            // verify required parameter 'specialtyId' is not null or undefined
            if (specialtyId === null || specialtyId === undefined) {
                throw new base_1.RequiredError('specialtyId', 'Required parameter specialtyId was null or undefined when calling apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdServicesServiceIdGet.');
            }
            // verify required parameter 'serviceId' is not null or undefined
            if (serviceId === null || serviceId === undefined) {
                throw new base_1.RequiredError('serviceId', 'Required parameter serviceId was null or undefined when calling apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdServicesServiceIdGet.');
            }
            var localVarPath = "/api/v1/hospitals/{hospitalId}/specialties/{specialtyId}/services/{serviceId}"
                .replace("{" + "hospitalId" + "}", encodeURIComponent(String(hospitalId)))
                .replace("{" + "specialtyId" + "}", encodeURIComponent(String(specialtyId)))
                .replace("{" + "serviceId" + "}", encodeURIComponent(String(serviceId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        PUT /api/v1/hospitals/1/specialties/1/services/1      {          \"name\": \"Extended analysis of blood\",          \"description\": \"Extended analysis of blood description.\",          \"minPrice\": 1000,          \"maxPrice\": 2600,          \"priceReuqest\": false      }
         * @summary Update service.
         * @param {string} hospitalId
         * @param {string} specialtyId
         * @param {string} serviceId
         * @param {UpdateServiceCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdServicesServiceIdPut: function (hospitalId, specialtyId, serviceId, body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'hospitalId' is not null or undefined
            if (hospitalId === null || hospitalId === undefined) {
                throw new base_1.RequiredError('hospitalId', 'Required parameter hospitalId was null or undefined when calling apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdServicesServiceIdPut.');
            }
            // verify required parameter 'specialtyId' is not null or undefined
            if (specialtyId === null || specialtyId === undefined) {
                throw new base_1.RequiredError('specialtyId', 'Required parameter specialtyId was null or undefined when calling apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdServicesServiceIdPut.');
            }
            // verify required parameter 'serviceId' is not null or undefined
            if (serviceId === null || serviceId === undefined) {
                throw new base_1.RequiredError('serviceId', 'Required parameter serviceId was null or undefined when calling apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdServicesServiceIdPut.');
            }
            var localVarPath = "/api/v1/hospitals/{hospitalId}/specialties/{specialtyId}/services/{serviceId}"
                .replace("{" + "hospitalId" + "}", encodeURIComponent(String(hospitalId)))
                .replace("{" + "specialtyId" + "}", encodeURIComponent(String(specialtyId)))
                .replace("{" + "serviceId" + "}", encodeURIComponent(String(serviceId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            var needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Smaple request:        PUT /api/v1/hospitals/1/specialties/1/servicesquence      {          \"serviceSequence\": [1, 3, 5]      }
         * @summary Update service sequence.
         * @param {string} hospitalId
         * @param {string} specialtyId
         * @param {UpdateServiceSequenceCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdServicesquencePut: function (hospitalId, specialtyId, body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'hospitalId' is not null or undefined
            if (hospitalId === null || hospitalId === undefined) {
                throw new base_1.RequiredError('hospitalId', 'Required parameter hospitalId was null or undefined when calling apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdServicesquencePut.');
            }
            // verify required parameter 'specialtyId' is not null or undefined
            if (specialtyId === null || specialtyId === undefined) {
                throw new base_1.RequiredError('specialtyId', 'Required parameter specialtyId was null or undefined when calling apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdServicesquencePut.');
            }
            var localVarPath = "/api/v1/hospitals/{hospitalId}/specialties/{specialtyId}/servicesquence"
                .replace("{" + "hospitalId" + "}", encodeURIComponent(String(hospitalId)))
                .replace("{" + "specialtyId" + "}", encodeURIComponent(String(specialtyId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            var needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        GET /api/v1/hospitals/services
         * @summary Get all services.
         * @param {string} [id]
         * @param {string} [name]
         * @param {string} [description]
         * @param {string} [hospitalId]
         * @param {string} [hospitalName]
         * @param {string} [specialtyId]
         * @param {string} [specialtyTypeId]
         * @param {string} [specialtyTypeName]
         * @param {object} [marketingType]
         * @param {object} [procedure]
         * @param {Date} [created]
         * @param {number} [page]
         * @param {number} [limit]
         * @param {Date} [lastRetrieved]
         * @param {boolean} [current]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsServicesGet: function (id, name, description, hospitalId, hospitalName, specialtyId, specialtyTypeId, specialtyTypeName, marketingType, procedure, created, page, limit, lastRetrieved, current, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/api/v1/hospitals/services";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }
            if (name !== undefined) {
                localVarQueryParameter['Name'] = name;
            }
            if (description !== undefined) {
                localVarQueryParameter['Description'] = description;
            }
            if (hospitalId !== undefined) {
                localVarQueryParameter['HospitalId'] = hospitalId;
            }
            if (hospitalName !== undefined) {
                localVarQueryParameter['HospitalName'] = hospitalName;
            }
            if (specialtyId !== undefined) {
                localVarQueryParameter['SpecialtyId'] = specialtyId;
            }
            if (specialtyTypeId !== undefined) {
                localVarQueryParameter['SpecialtyTypeId'] = specialtyTypeId;
            }
            if (specialtyTypeName !== undefined) {
                localVarQueryParameter['SpecialtyTypeName'] = specialtyTypeName;
            }
            if (marketingType !== undefined) {
                localVarQueryParameter['MarketingType'] = marketingType;
            }
            if (procedure !== undefined) {
                localVarQueryParameter['Procedure'] = procedure;
            }
            if (created !== undefined) {
                localVarQueryParameter['Created'] = (created instanceof Date) ?
                    created.toISOString() :
                    created;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (lastRetrieved !== undefined) {
                localVarQueryParameter['lastRetrieved'] = (lastRetrieved instanceof Date) ?
                    lastRetrieved.toISOString() :
                    lastRetrieved;
            }
            if (current !== undefined) {
                localVarQueryParameter['Current'] = current;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * ServicesApi - functional programming interface
 * @export
 */
exports.ServicesApiFp = function (configuration) {
    return {
        /**
         * Sample request:        POST /api/v1/hospitals/1/specialties/1/services      {          \"name\": \"Heart check up\",          \"description\": \"Asan Hospital (Asan Medical Center) is the largest multidisciplinary medical center in South Korea, which can serve 2,700 patients at once.The key specialties in the hospital are organ transplant, oncology, cardiology, and cardiac surgery.Almost half of all heart transplants in South Korea are carried out (45%) at Asan.The success of organ transplants ranges from 90%. Every day, 11,800 outpatients and 2,550 inpatients are treated in Asan Hospital. Medical tourists from the USA, China, the UAE, Russia, Kazakhstan, and Mongolia choose Asan Hospital.\",          \"minPrice\": 2235,          \"maxPrice\": 2566,          \"priceReuqest\": false,          \"procedure\": \"Treatment\"      }
         * @summary Create service.
         * @param {string} hospitalId
         * @param {string} specialtyId
         * @param {CreateServiceCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdServicesPost: function (hospitalId, specialtyId, body, options) {
            var localVarAxiosArgs = exports.ServicesApiAxiosParamCreator(configuration).apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdServicesPost(hospitalId, specialtyId, body, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        DELETE /api/v1/hospitals/1/specialties/1/services/1
         * @summary Delete service.
         * @param {string} hospitalId
         * @param {string} specialtyId
         * @param {string} serviceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdServicesServiceIdDelete: function (hospitalId, specialtyId, serviceId, options) {
            var localVarAxiosArgs = exports.ServicesApiAxiosParamCreator(configuration).apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdServicesServiceIdDelete(hospitalId, specialtyId, serviceId, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        GET /api/v1/hospitals/1/specialties/1/services/1
         * @summary Get service.
         * @param {string} hospitalId
         * @param {string} specialtyId
         * @param {string} serviceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdServicesServiceIdGet: function (hospitalId, specialtyId, serviceId, options) {
            var localVarAxiosArgs = exports.ServicesApiAxiosParamCreator(configuration).apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdServicesServiceIdGet(hospitalId, specialtyId, serviceId, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        PUT /api/v1/hospitals/1/specialties/1/services/1      {          \"name\": \"Extended analysis of blood\",          \"description\": \"Extended analysis of blood description.\",          \"minPrice\": 1000,          \"maxPrice\": 2600,          \"priceReuqest\": false      }
         * @summary Update service.
         * @param {string} hospitalId
         * @param {string} specialtyId
         * @param {string} serviceId
         * @param {UpdateServiceCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdServicesServiceIdPut: function (hospitalId, specialtyId, serviceId, body, options) {
            var localVarAxiosArgs = exports.ServicesApiAxiosParamCreator(configuration).apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdServicesServiceIdPut(hospitalId, specialtyId, serviceId, body, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Smaple request:        PUT /api/v1/hospitals/1/specialties/1/servicesquence      {          \"serviceSequence\": [1, 3, 5]      }
         * @summary Update service sequence.
         * @param {string} hospitalId
         * @param {string} specialtyId
         * @param {UpdateServiceSequenceCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdServicesquencePut: function (hospitalId, specialtyId, body, options) {
            var localVarAxiosArgs = exports.ServicesApiAxiosParamCreator(configuration).apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdServicesquencePut(hospitalId, specialtyId, body, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        GET /api/v1/hospitals/services
         * @summary Get all services.
         * @param {string} [id]
         * @param {string} [name]
         * @param {string} [description]
         * @param {string} [hospitalId]
         * @param {string} [hospitalName]
         * @param {string} [specialtyId]
         * @param {string} [specialtyTypeId]
         * @param {string} [specialtyTypeName]
         * @param {object} [marketingType]
         * @param {object} [procedure]
         * @param {Date} [created]
         * @param {number} [page]
         * @param {number} [limit]
         * @param {Date} [lastRetrieved]
         * @param {boolean} [current]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsServicesGet: function (id, name, description, hospitalId, hospitalName, specialtyId, specialtyTypeId, specialtyTypeName, marketingType, procedure, created, page, limit, lastRetrieved, current, options) {
            var localVarAxiosArgs = exports.ServicesApiAxiosParamCreator(configuration).apiV1HospitalsServicesGet(id, name, description, hospitalId, hospitalName, specialtyId, specialtyTypeId, specialtyTypeName, marketingType, procedure, created, page, limit, lastRetrieved, current, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * ServicesApi - factory interface
 * @export
 */
exports.ServicesApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Sample request:        POST /api/v1/hospitals/1/specialties/1/services      {          \"name\": \"Heart check up\",          \"description\": \"Asan Hospital (Asan Medical Center) is the largest multidisciplinary medical center in South Korea, which can serve 2,700 patients at once.The key specialties in the hospital are organ transplant, oncology, cardiology, and cardiac surgery.Almost half of all heart transplants in South Korea are carried out (45%) at Asan.The success of organ transplants ranges from 90%. Every day, 11,800 outpatients and 2,550 inpatients are treated in Asan Hospital. Medical tourists from the USA, China, the UAE, Russia, Kazakhstan, and Mongolia choose Asan Hospital.\",          \"minPrice\": 2235,          \"maxPrice\": 2566,          \"priceReuqest\": false,          \"procedure\": \"Treatment\"      }
         * @summary Create service.
         * @param {string} hospitalId
         * @param {string} specialtyId
         * @param {CreateServiceCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdServicesPost: function (hospitalId, specialtyId, body, options) {
            return exports.ServicesApiFp(configuration).apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdServicesPost(hospitalId, specialtyId, body, options)(axios, basePath);
        },
        /**
         * Sample request:        DELETE /api/v1/hospitals/1/specialties/1/services/1
         * @summary Delete service.
         * @param {string} hospitalId
         * @param {string} specialtyId
         * @param {string} serviceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdServicesServiceIdDelete: function (hospitalId, specialtyId, serviceId, options) {
            return exports.ServicesApiFp(configuration).apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdServicesServiceIdDelete(hospitalId, specialtyId, serviceId, options)(axios, basePath);
        },
        /**
         * Sample request:        GET /api/v1/hospitals/1/specialties/1/services/1
         * @summary Get service.
         * @param {string} hospitalId
         * @param {string} specialtyId
         * @param {string} serviceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdServicesServiceIdGet: function (hospitalId, specialtyId, serviceId, options) {
            return exports.ServicesApiFp(configuration).apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdServicesServiceIdGet(hospitalId, specialtyId, serviceId, options)(axios, basePath);
        },
        /**
         * Sample request:        PUT /api/v1/hospitals/1/specialties/1/services/1      {          \"name\": \"Extended analysis of blood\",          \"description\": \"Extended analysis of blood description.\",          \"minPrice\": 1000,          \"maxPrice\": 2600,          \"priceReuqest\": false      }
         * @summary Update service.
         * @param {string} hospitalId
         * @param {string} specialtyId
         * @param {string} serviceId
         * @param {UpdateServiceCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdServicesServiceIdPut: function (hospitalId, specialtyId, serviceId, body, options) {
            return exports.ServicesApiFp(configuration).apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdServicesServiceIdPut(hospitalId, specialtyId, serviceId, body, options)(axios, basePath);
        },
        /**
         * Smaple request:        PUT /api/v1/hospitals/1/specialties/1/servicesquence      {          \"serviceSequence\": [1, 3, 5]      }
         * @summary Update service sequence.
         * @param {string} hospitalId
         * @param {string} specialtyId
         * @param {UpdateServiceSequenceCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdServicesquencePut: function (hospitalId, specialtyId, body, options) {
            return exports.ServicesApiFp(configuration).apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdServicesquencePut(hospitalId, specialtyId, body, options)(axios, basePath);
        },
        /**
         * Sample request:        GET /api/v1/hospitals/services
         * @summary Get all services.
         * @param {string} [id]
         * @param {string} [name]
         * @param {string} [description]
         * @param {string} [hospitalId]
         * @param {string} [hospitalName]
         * @param {string} [specialtyId]
         * @param {string} [specialtyTypeId]
         * @param {string} [specialtyTypeName]
         * @param {object} [marketingType]
         * @param {object} [procedure]
         * @param {Date} [created]
         * @param {number} [page]
         * @param {number} [limit]
         * @param {Date} [lastRetrieved]
         * @param {boolean} [current]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1HospitalsServicesGet: function (id, name, description, hospitalId, hospitalName, specialtyId, specialtyTypeId, specialtyTypeName, marketingType, procedure, created, page, limit, lastRetrieved, current, options) {
            return exports.ServicesApiFp(configuration).apiV1HospitalsServicesGet(id, name, description, hospitalId, hospitalName, specialtyId, specialtyTypeId, specialtyTypeName, marketingType, procedure, created, page, limit, lastRetrieved, current, options)(axios, basePath);
        },
    };
};
/**
 * ServicesApi - object-oriented interface
 * @export
 * @class ServicesApi
 * @extends {BaseAPI}
 */
var ServicesApi = /** @class */ (function (_super) {
    __extends(ServicesApi, _super);
    function ServicesApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Sample request:        POST /api/v1/hospitals/1/specialties/1/services      {          \"name\": \"Heart check up\",          \"description\": \"Asan Hospital (Asan Medical Center) is the largest multidisciplinary medical center in South Korea, which can serve 2,700 patients at once.The key specialties in the hospital are organ transplant, oncology, cardiology, and cardiac surgery.Almost half of all heart transplants in South Korea are carried out (45%) at Asan.The success of organ transplants ranges from 90%. Every day, 11,800 outpatients and 2,550 inpatients are treated in Asan Hospital. Medical tourists from the USA, China, the UAE, Russia, Kazakhstan, and Mongolia choose Asan Hospital.\",          \"minPrice\": 2235,          \"maxPrice\": 2566,          \"priceReuqest\": false,          \"procedure\": \"Treatment\"      }
     * @summary Create service.
     * @param {string} hospitalId
     * @param {string} specialtyId
     * @param {CreateServiceCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServicesApi
     */
    ServicesApi.prototype.apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdServicesPost = function (hospitalId, specialtyId, body, options) {
        return exports.ServicesApiFp(this.configuration).apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdServicesPost(hospitalId, specialtyId, body, options)(this.axios, this.basePath);
    };
    /**
     * Sample request:        DELETE /api/v1/hospitals/1/specialties/1/services/1
     * @summary Delete service.
     * @param {string} hospitalId
     * @param {string} specialtyId
     * @param {string} serviceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServicesApi
     */
    ServicesApi.prototype.apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdServicesServiceIdDelete = function (hospitalId, specialtyId, serviceId, options) {
        return exports.ServicesApiFp(this.configuration).apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdServicesServiceIdDelete(hospitalId, specialtyId, serviceId, options)(this.axios, this.basePath);
    };
    /**
     * Sample request:        GET /api/v1/hospitals/1/specialties/1/services/1
     * @summary Get service.
     * @param {string} hospitalId
     * @param {string} specialtyId
     * @param {string} serviceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServicesApi
     */
    ServicesApi.prototype.apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdServicesServiceIdGet = function (hospitalId, specialtyId, serviceId, options) {
        return exports.ServicesApiFp(this.configuration).apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdServicesServiceIdGet(hospitalId, specialtyId, serviceId, options)(this.axios, this.basePath);
    };
    /**
     * Sample request:        PUT /api/v1/hospitals/1/specialties/1/services/1      {          \"name\": \"Extended analysis of blood\",          \"description\": \"Extended analysis of blood description.\",          \"minPrice\": 1000,          \"maxPrice\": 2600,          \"priceReuqest\": false      }
     * @summary Update service.
     * @param {string} hospitalId
     * @param {string} specialtyId
     * @param {string} serviceId
     * @param {UpdateServiceCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServicesApi
     */
    ServicesApi.prototype.apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdServicesServiceIdPut = function (hospitalId, specialtyId, serviceId, body, options) {
        return exports.ServicesApiFp(this.configuration).apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdServicesServiceIdPut(hospitalId, specialtyId, serviceId, body, options)(this.axios, this.basePath);
    };
    /**
     * Smaple request:        PUT /api/v1/hospitals/1/specialties/1/servicesquence      {          \"serviceSequence\": [1, 3, 5]      }
     * @summary Update service sequence.
     * @param {string} hospitalId
     * @param {string} specialtyId
     * @param {UpdateServiceSequenceCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServicesApi
     */
    ServicesApi.prototype.apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdServicesquencePut = function (hospitalId, specialtyId, body, options) {
        return exports.ServicesApiFp(this.configuration).apiV1HospitalsHospitalIdSpecialtiesSpecialtyIdServicesquencePut(hospitalId, specialtyId, body, options)(this.axios, this.basePath);
    };
    /**
     * Sample request:        GET /api/v1/hospitals/services
     * @summary Get all services.
     * @param {string} [id]
     * @param {string} [name]
     * @param {string} [description]
     * @param {string} [hospitalId]
     * @param {string} [hospitalName]
     * @param {string} [specialtyId]
     * @param {string} [specialtyTypeId]
     * @param {string} [specialtyTypeName]
     * @param {object} [marketingType]
     * @param {object} [procedure]
     * @param {Date} [created]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServicesApi
     */
    ServicesApi.prototype.apiV1HospitalsServicesGet = function (id, name, description, hospitalId, hospitalName, specialtyId, specialtyTypeId, specialtyTypeName, marketingType, procedure, created, page, limit, lastRetrieved, current, options) {
        return exports.ServicesApiFp(this.configuration).apiV1HospitalsServicesGet(id, name, description, hospitalId, hospitalName, specialtyId, specialtyTypeId, specialtyTypeName, marketingType, procedure, created, page, limit, lastRetrieved, current, options)(this.axios, this.basePath);
    };
    return ServicesApi;
}(base_1.BaseAPI));
exports.ServicesApi = ServicesApi;
/**
 * SpecialtiesApi - axios parameter creator
 * @export
 */
exports.SpecialtiesApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Sample request:        GET /api/v1/specialties
         * @summary Get all specialties.
         * @param {string} [id]
         * @param {string} [name]
         * @param {string} [description]
         * @param {string} [specialtyTypeId]
         * @param {Date} [created]
         * @param {number} [page]
         * @param {number} [limit]
         * @param {Date} [lastRetrieved]
         * @param {boolean} [current]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SpecialtiesGet: function (id, name, description, specialtyTypeId, created, page, limit, lastRetrieved, current, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/api/v1/specialties";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }
            if (name !== undefined) {
                localVarQueryParameter['Name'] = name;
            }
            if (description !== undefined) {
                localVarQueryParameter['Description'] = description;
            }
            if (specialtyTypeId !== undefined) {
                localVarQueryParameter['SpecialtyTypeId'] = specialtyTypeId;
            }
            if (created !== undefined) {
                localVarQueryParameter['Created'] = (created instanceof Date) ?
                    created.toISOString() :
                    created;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (lastRetrieved !== undefined) {
                localVarQueryParameter['lastRetrieved'] = (lastRetrieved instanceof Date) ?
                    lastRetrieved.toISOString() :
                    lastRetrieved;
            }
            if (current !== undefined) {
                localVarQueryParameter['Current'] = current;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        POST /api/v1/specialties      {          \"name\": \"Coronary artery disease\",          \"description\": \"Coronary artery disease\",          \"specialtyType\": \"Cardiology\"      }
         * @summary Create specialty.
         * @param {string} [specialtyTypeId]
         * @param {CreateSpecialtyCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SpecialtiesPost: function (specialtyTypeId, body, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/api/v1/specialties";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (specialtyTypeId !== undefined) {
                localVarQueryParameter['specialtyTypeId'] = specialtyTypeId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            var needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        DELETE /api/v1/specialties/1
         * @summary Delete specialty.
         * @param {string} specialtyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SpecialtiesSpecialtyIdDelete: function (specialtyId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'specialtyId' is not null or undefined
            if (specialtyId === null || specialtyId === undefined) {
                throw new base_1.RequiredError('specialtyId', 'Required parameter specialtyId was null or undefined when calling apiV1SpecialtiesSpecialtyIdDelete.');
            }
            var localVarPath = "/api/v1/specialties/{specialtyId}"
                .replace("{" + "specialtyId" + "}", encodeURIComponent(String(specialtyId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        GET /api/v1/specialties/1
         * @summary Get specialty.
         * @param {string} specialtyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SpecialtiesSpecialtyIdGet: function (specialtyId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'specialtyId' is not null or undefined
            if (specialtyId === null || specialtyId === undefined) {
                throw new base_1.RequiredError('specialtyId', 'Required parameter specialtyId was null or undefined when calling apiV1SpecialtiesSpecialtyIdGet.');
            }
            var localVarPath = "/api/v1/specialties/{specialtyId}"
                .replace("{" + "specialtyId" + "}", encodeURIComponent(String(specialtyId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        PUT /api/v1/specialties/1      {          \"name\": \"Dilated cardiomyopathy\",          \"description\": \"Dilated cardiomyopathy\"      }
         * @summary Update specialty
         * @param {string} specialtyId
         * @param {UpdateSpecialtyCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SpecialtiesSpecialtyIdPut: function (specialtyId, body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'specialtyId' is not null or undefined
            if (specialtyId === null || specialtyId === undefined) {
                throw new base_1.RequiredError('specialtyId', 'Required parameter specialtyId was null or undefined when calling apiV1SpecialtiesSpecialtyIdPut.');
            }
            var localVarPath = "/api/v1/specialties/{specialtyId}"
                .replace("{" + "specialtyId" + "}", encodeURIComponent(String(specialtyId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            var needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * SpecialtiesApi - functional programming interface
 * @export
 */
exports.SpecialtiesApiFp = function (configuration) {
    return {
        /**
         * Sample request:        GET /api/v1/specialties
         * @summary Get all specialties.
         * @param {string} [id]
         * @param {string} [name]
         * @param {string} [description]
         * @param {string} [specialtyTypeId]
         * @param {Date} [created]
         * @param {number} [page]
         * @param {number} [limit]
         * @param {Date} [lastRetrieved]
         * @param {boolean} [current]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SpecialtiesGet: function (id, name, description, specialtyTypeId, created, page, limit, lastRetrieved, current, options) {
            var localVarAxiosArgs = exports.SpecialtiesApiAxiosParamCreator(configuration).apiV1SpecialtiesGet(id, name, description, specialtyTypeId, created, page, limit, lastRetrieved, current, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        POST /api/v1/specialties      {          \"name\": \"Coronary artery disease\",          \"description\": \"Coronary artery disease\",          \"specialtyType\": \"Cardiology\"      }
         * @summary Create specialty.
         * @param {string} [specialtyTypeId]
         * @param {CreateSpecialtyCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SpecialtiesPost: function (specialtyTypeId, body, options) {
            var localVarAxiosArgs = exports.SpecialtiesApiAxiosParamCreator(configuration).apiV1SpecialtiesPost(specialtyTypeId, body, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        DELETE /api/v1/specialties/1
         * @summary Delete specialty.
         * @param {string} specialtyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SpecialtiesSpecialtyIdDelete: function (specialtyId, options) {
            var localVarAxiosArgs = exports.SpecialtiesApiAxiosParamCreator(configuration).apiV1SpecialtiesSpecialtyIdDelete(specialtyId, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        GET /api/v1/specialties/1
         * @summary Get specialty.
         * @param {string} specialtyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SpecialtiesSpecialtyIdGet: function (specialtyId, options) {
            var localVarAxiosArgs = exports.SpecialtiesApiAxiosParamCreator(configuration).apiV1SpecialtiesSpecialtyIdGet(specialtyId, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        PUT /api/v1/specialties/1      {          \"name\": \"Dilated cardiomyopathy\",          \"description\": \"Dilated cardiomyopathy\"      }
         * @summary Update specialty
         * @param {string} specialtyId
         * @param {UpdateSpecialtyCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SpecialtiesSpecialtyIdPut: function (specialtyId, body, options) {
            var localVarAxiosArgs = exports.SpecialtiesApiAxiosParamCreator(configuration).apiV1SpecialtiesSpecialtyIdPut(specialtyId, body, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * SpecialtiesApi - factory interface
 * @export
 */
exports.SpecialtiesApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Sample request:        GET /api/v1/specialties
         * @summary Get all specialties.
         * @param {string} [id]
         * @param {string} [name]
         * @param {string} [description]
         * @param {string} [specialtyTypeId]
         * @param {Date} [created]
         * @param {number} [page]
         * @param {number} [limit]
         * @param {Date} [lastRetrieved]
         * @param {boolean} [current]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SpecialtiesGet: function (id, name, description, specialtyTypeId, created, page, limit, lastRetrieved, current, options) {
            return exports.SpecialtiesApiFp(configuration).apiV1SpecialtiesGet(id, name, description, specialtyTypeId, created, page, limit, lastRetrieved, current, options)(axios, basePath);
        },
        /**
         * Sample request:        POST /api/v1/specialties      {          \"name\": \"Coronary artery disease\",          \"description\": \"Coronary artery disease\",          \"specialtyType\": \"Cardiology\"      }
         * @summary Create specialty.
         * @param {string} [specialtyTypeId]
         * @param {CreateSpecialtyCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SpecialtiesPost: function (specialtyTypeId, body, options) {
            return exports.SpecialtiesApiFp(configuration).apiV1SpecialtiesPost(specialtyTypeId, body, options)(axios, basePath);
        },
        /**
         * Sample request:        DELETE /api/v1/specialties/1
         * @summary Delete specialty.
         * @param {string} specialtyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SpecialtiesSpecialtyIdDelete: function (specialtyId, options) {
            return exports.SpecialtiesApiFp(configuration).apiV1SpecialtiesSpecialtyIdDelete(specialtyId, options)(axios, basePath);
        },
        /**
         * Sample request:        GET /api/v1/specialties/1
         * @summary Get specialty.
         * @param {string} specialtyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SpecialtiesSpecialtyIdGet: function (specialtyId, options) {
            return exports.SpecialtiesApiFp(configuration).apiV1SpecialtiesSpecialtyIdGet(specialtyId, options)(axios, basePath);
        },
        /**
         * Sample request:        PUT /api/v1/specialties/1      {          \"name\": \"Dilated cardiomyopathy\",          \"description\": \"Dilated cardiomyopathy\"      }
         * @summary Update specialty
         * @param {string} specialtyId
         * @param {UpdateSpecialtyCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SpecialtiesSpecialtyIdPut: function (specialtyId, body, options) {
            return exports.SpecialtiesApiFp(configuration).apiV1SpecialtiesSpecialtyIdPut(specialtyId, body, options)(axios, basePath);
        },
    };
};
/**
 * SpecialtiesApi - object-oriented interface
 * @export
 * @class SpecialtiesApi
 * @extends {BaseAPI}
 */
var SpecialtiesApi = /** @class */ (function (_super) {
    __extends(SpecialtiesApi, _super);
    function SpecialtiesApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Sample request:        GET /api/v1/specialties
     * @summary Get all specialties.
     * @param {string} [id]
     * @param {string} [name]
     * @param {string} [description]
     * @param {string} [specialtyTypeId]
     * @param {Date} [created]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpecialtiesApi
     */
    SpecialtiesApi.prototype.apiV1SpecialtiesGet = function (id, name, description, specialtyTypeId, created, page, limit, lastRetrieved, current, options) {
        return exports.SpecialtiesApiFp(this.configuration).apiV1SpecialtiesGet(id, name, description, specialtyTypeId, created, page, limit, lastRetrieved, current, options)(this.axios, this.basePath);
    };
    /**
     * Sample request:        POST /api/v1/specialties      {          \"name\": \"Coronary artery disease\",          \"description\": \"Coronary artery disease\",          \"specialtyType\": \"Cardiology\"      }
     * @summary Create specialty.
     * @param {string} [specialtyTypeId]
     * @param {CreateSpecialtyCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpecialtiesApi
     */
    SpecialtiesApi.prototype.apiV1SpecialtiesPost = function (specialtyTypeId, body, options) {
        return exports.SpecialtiesApiFp(this.configuration).apiV1SpecialtiesPost(specialtyTypeId, body, options)(this.axios, this.basePath);
    };
    /**
     * Sample request:        DELETE /api/v1/specialties/1
     * @summary Delete specialty.
     * @param {string} specialtyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpecialtiesApi
     */
    SpecialtiesApi.prototype.apiV1SpecialtiesSpecialtyIdDelete = function (specialtyId, options) {
        return exports.SpecialtiesApiFp(this.configuration).apiV1SpecialtiesSpecialtyIdDelete(specialtyId, options)(this.axios, this.basePath);
    };
    /**
     * Sample request:        GET /api/v1/specialties/1
     * @summary Get specialty.
     * @param {string} specialtyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpecialtiesApi
     */
    SpecialtiesApi.prototype.apiV1SpecialtiesSpecialtyIdGet = function (specialtyId, options) {
        return exports.SpecialtiesApiFp(this.configuration).apiV1SpecialtiesSpecialtyIdGet(specialtyId, options)(this.axios, this.basePath);
    };
    /**
     * Sample request:        PUT /api/v1/specialties/1      {          \"name\": \"Dilated cardiomyopathy\",          \"description\": \"Dilated cardiomyopathy\"      }
     * @summary Update specialty
     * @param {string} specialtyId
     * @param {UpdateSpecialtyCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpecialtiesApi
     */
    SpecialtiesApi.prototype.apiV1SpecialtiesSpecialtyIdPut = function (specialtyId, body, options) {
        return exports.SpecialtiesApiFp(this.configuration).apiV1SpecialtiesSpecialtyIdPut(specialtyId, body, options)(this.axios, this.basePath);
    };
    return SpecialtiesApi;
}(base_1.BaseAPI));
exports.SpecialtiesApi = SpecialtiesApi;
/**
 * SpecialtyTypeCategoriesApi - axios parameter creator
 * @export
 */
exports.SpecialtyTypeCategoriesApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Sample request:        GET /api/v1/SpecialtyTypeCategories
         * @summary Get all SpecialtyTypeCategories.
         * @param {string} [id]
         * @param {string} [name]
         * @param {string} [description]
         * @param {number} [page]
         * @param {number} [limit]
         * @param {Date} [lastRetrieved]
         * @param {boolean} [current]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SpecialtytypecategoriesGet: function (id, name, description, page, limit, lastRetrieved, current, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/api/v1/specialtytypecategories";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }
            if (name !== undefined) {
                localVarQueryParameter['Name'] = name;
            }
            if (description !== undefined) {
                localVarQueryParameter['Description'] = description;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (lastRetrieved !== undefined) {
                localVarQueryParameter['lastRetrieved'] = (lastRetrieved instanceof Date) ?
                    lastRetrieved.toISOString() :
                    lastRetrieved;
            }
            if (current !== undefined) {
                localVarQueryParameter['Current'] = current;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        POST /api/v1/SpecialtyTypeCategories      {          \"name\": \"Adults\",          \"description\": \"There are so many “-ologists“ that they can be hard to keep straight. However, this list could be a handy reference. This is not meant to be an exhaustive and all-inclusive list of what a specialist does, but it should provide you with a basic overview.\"      }
         * @summary Create specialtyTypeCategory.
         * @param {CreateSpecialtyTypeCategoryCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SpecialtytypecategoriesPost: function (body, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/api/v1/specialtytypecategories";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            var needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        DELETE /api/v1/SpecialtyTypeCategories/1
         * @summary Delete specialtyTypeCategory.
         * @param {string} specialtyTypeCategoryId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SpecialtytypecategoriesSpecialtyTypeCategoryIdDelete: function (specialtyTypeCategoryId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'specialtyTypeCategoryId' is not null or undefined
            if (specialtyTypeCategoryId === null || specialtyTypeCategoryId === undefined) {
                throw new base_1.RequiredError('specialtyTypeCategoryId', 'Required parameter specialtyTypeCategoryId was null or undefined when calling apiV1SpecialtytypecategoriesSpecialtyTypeCategoryIdDelete.');
            }
            var localVarPath = "/api/v1/specialtytypecategories/{specialtyTypeCategoryId}"
                .replace("{" + "specialtyTypeCategoryId" + "}", encodeURIComponent(String(specialtyTypeCategoryId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        GET /api/v1/SpecialtyTypeCategories/1
         * @summary Get specialtyTypeCategory.
         * @param {string} specialtyTypeCategoryId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SpecialtytypecategoriesSpecialtyTypeCategoryIdGet: function (specialtyTypeCategoryId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'specialtyTypeCategoryId' is not null or undefined
            if (specialtyTypeCategoryId === null || specialtyTypeCategoryId === undefined) {
                throw new base_1.RequiredError('specialtyTypeCategoryId', 'Required parameter specialtyTypeCategoryId was null or undefined when calling apiV1SpecialtytypecategoriesSpecialtyTypeCategoryIdGet.');
            }
            var localVarPath = "/api/v1/specialtytypecategories/{specialtyTypeCategoryId}"
                .replace("{" + "specialtyTypeCategoryId" + "}", encodeURIComponent(String(specialtyTypeCategoryId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        PUT /api/v1/SpecialtyTypeCategories/1      {          \"name\": \"Adults\",          \"description\": \"There are so many “-ologists“ that they can be hard to keep straight. However, this list could be a handy reference. This is not meant to be an exhaustive and all-inclusive list of what a specialist does, but it should provide you with a basic overview.\"      }
         * @summary Update specialtyTypeCategory
         * @param {string} specialtyTypeCategoryId
         * @param {UpdateSpecialtyTypeCategoryCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SpecialtytypecategoriesSpecialtyTypeCategoryIdPut: function (specialtyTypeCategoryId, body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'specialtyTypeCategoryId' is not null or undefined
            if (specialtyTypeCategoryId === null || specialtyTypeCategoryId === undefined) {
                throw new base_1.RequiredError('specialtyTypeCategoryId', 'Required parameter specialtyTypeCategoryId was null or undefined when calling apiV1SpecialtytypecategoriesSpecialtyTypeCategoryIdPut.');
            }
            var localVarPath = "/api/v1/specialtytypecategories/{specialtyTypeCategoryId}"
                .replace("{" + "specialtyTypeCategoryId" + "}", encodeURIComponent(String(specialtyTypeCategoryId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            var needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * SpecialtyTypeCategoriesApi - functional programming interface
 * @export
 */
exports.SpecialtyTypeCategoriesApiFp = function (configuration) {
    return {
        /**
         * Sample request:        GET /api/v1/SpecialtyTypeCategories
         * @summary Get all SpecialtyTypeCategories.
         * @param {string} [id]
         * @param {string} [name]
         * @param {string} [description]
         * @param {number} [page]
         * @param {number} [limit]
         * @param {Date} [lastRetrieved]
         * @param {boolean} [current]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SpecialtytypecategoriesGet: function (id, name, description, page, limit, lastRetrieved, current, options) {
            var localVarAxiosArgs = exports.SpecialtyTypeCategoriesApiAxiosParamCreator(configuration).apiV1SpecialtytypecategoriesGet(id, name, description, page, limit, lastRetrieved, current, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        POST /api/v1/SpecialtyTypeCategories      {          \"name\": \"Adults\",          \"description\": \"There are so many “-ologists“ that they can be hard to keep straight. However, this list could be a handy reference. This is not meant to be an exhaustive and all-inclusive list of what a specialist does, but it should provide you with a basic overview.\"      }
         * @summary Create specialtyTypeCategory.
         * @param {CreateSpecialtyTypeCategoryCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SpecialtytypecategoriesPost: function (body, options) {
            var localVarAxiosArgs = exports.SpecialtyTypeCategoriesApiAxiosParamCreator(configuration).apiV1SpecialtytypecategoriesPost(body, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        DELETE /api/v1/SpecialtyTypeCategories/1
         * @summary Delete specialtyTypeCategory.
         * @param {string} specialtyTypeCategoryId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SpecialtytypecategoriesSpecialtyTypeCategoryIdDelete: function (specialtyTypeCategoryId, options) {
            var localVarAxiosArgs = exports.SpecialtyTypeCategoriesApiAxiosParamCreator(configuration).apiV1SpecialtytypecategoriesSpecialtyTypeCategoryIdDelete(specialtyTypeCategoryId, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        GET /api/v1/SpecialtyTypeCategories/1
         * @summary Get specialtyTypeCategory.
         * @param {string} specialtyTypeCategoryId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SpecialtytypecategoriesSpecialtyTypeCategoryIdGet: function (specialtyTypeCategoryId, options) {
            var localVarAxiosArgs = exports.SpecialtyTypeCategoriesApiAxiosParamCreator(configuration).apiV1SpecialtytypecategoriesSpecialtyTypeCategoryIdGet(specialtyTypeCategoryId, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        PUT /api/v1/SpecialtyTypeCategories/1      {          \"name\": \"Adults\",          \"description\": \"There are so many “-ologists“ that they can be hard to keep straight. However, this list could be a handy reference. This is not meant to be an exhaustive and all-inclusive list of what a specialist does, but it should provide you with a basic overview.\"      }
         * @summary Update specialtyTypeCategory
         * @param {string} specialtyTypeCategoryId
         * @param {UpdateSpecialtyTypeCategoryCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SpecialtytypecategoriesSpecialtyTypeCategoryIdPut: function (specialtyTypeCategoryId, body, options) {
            var localVarAxiosArgs = exports.SpecialtyTypeCategoriesApiAxiosParamCreator(configuration).apiV1SpecialtytypecategoriesSpecialtyTypeCategoryIdPut(specialtyTypeCategoryId, body, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * SpecialtyTypeCategoriesApi - factory interface
 * @export
 */
exports.SpecialtyTypeCategoriesApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Sample request:        GET /api/v1/SpecialtyTypeCategories
         * @summary Get all SpecialtyTypeCategories.
         * @param {string} [id]
         * @param {string} [name]
         * @param {string} [description]
         * @param {number} [page]
         * @param {number} [limit]
         * @param {Date} [lastRetrieved]
         * @param {boolean} [current]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SpecialtytypecategoriesGet: function (id, name, description, page, limit, lastRetrieved, current, options) {
            return exports.SpecialtyTypeCategoriesApiFp(configuration).apiV1SpecialtytypecategoriesGet(id, name, description, page, limit, lastRetrieved, current, options)(axios, basePath);
        },
        /**
         * Sample request:        POST /api/v1/SpecialtyTypeCategories      {          \"name\": \"Adults\",          \"description\": \"There are so many “-ologists“ that they can be hard to keep straight. However, this list could be a handy reference. This is not meant to be an exhaustive and all-inclusive list of what a specialist does, but it should provide you with a basic overview.\"      }
         * @summary Create specialtyTypeCategory.
         * @param {CreateSpecialtyTypeCategoryCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SpecialtytypecategoriesPost: function (body, options) {
            return exports.SpecialtyTypeCategoriesApiFp(configuration).apiV1SpecialtytypecategoriesPost(body, options)(axios, basePath);
        },
        /**
         * Sample request:        DELETE /api/v1/SpecialtyTypeCategories/1
         * @summary Delete specialtyTypeCategory.
         * @param {string} specialtyTypeCategoryId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SpecialtytypecategoriesSpecialtyTypeCategoryIdDelete: function (specialtyTypeCategoryId, options) {
            return exports.SpecialtyTypeCategoriesApiFp(configuration).apiV1SpecialtytypecategoriesSpecialtyTypeCategoryIdDelete(specialtyTypeCategoryId, options)(axios, basePath);
        },
        /**
         * Sample request:        GET /api/v1/SpecialtyTypeCategories/1
         * @summary Get specialtyTypeCategory.
         * @param {string} specialtyTypeCategoryId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SpecialtytypecategoriesSpecialtyTypeCategoryIdGet: function (specialtyTypeCategoryId, options) {
            return exports.SpecialtyTypeCategoriesApiFp(configuration).apiV1SpecialtytypecategoriesSpecialtyTypeCategoryIdGet(specialtyTypeCategoryId, options)(axios, basePath);
        },
        /**
         * Sample request:        PUT /api/v1/SpecialtyTypeCategories/1      {          \"name\": \"Adults\",          \"description\": \"There are so many “-ologists“ that they can be hard to keep straight. However, this list could be a handy reference. This is not meant to be an exhaustive and all-inclusive list of what a specialist does, but it should provide you with a basic overview.\"      }
         * @summary Update specialtyTypeCategory
         * @param {string} specialtyTypeCategoryId
         * @param {UpdateSpecialtyTypeCategoryCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SpecialtytypecategoriesSpecialtyTypeCategoryIdPut: function (specialtyTypeCategoryId, body, options) {
            return exports.SpecialtyTypeCategoriesApiFp(configuration).apiV1SpecialtytypecategoriesSpecialtyTypeCategoryIdPut(specialtyTypeCategoryId, body, options)(axios, basePath);
        },
    };
};
/**
 * SpecialtyTypeCategoriesApi - object-oriented interface
 * @export
 * @class SpecialtyTypeCategoriesApi
 * @extends {BaseAPI}
 */
var SpecialtyTypeCategoriesApi = /** @class */ (function (_super) {
    __extends(SpecialtyTypeCategoriesApi, _super);
    function SpecialtyTypeCategoriesApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Sample request:        GET /api/v1/SpecialtyTypeCategories
     * @summary Get all SpecialtyTypeCategories.
     * @param {string} [id]
     * @param {string} [name]
     * @param {string} [description]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpecialtyTypeCategoriesApi
     */
    SpecialtyTypeCategoriesApi.prototype.apiV1SpecialtytypecategoriesGet = function (id, name, description, page, limit, lastRetrieved, current, options) {
        return exports.SpecialtyTypeCategoriesApiFp(this.configuration).apiV1SpecialtytypecategoriesGet(id, name, description, page, limit, lastRetrieved, current, options)(this.axios, this.basePath);
    };
    /**
     * Sample request:        POST /api/v1/SpecialtyTypeCategories      {          \"name\": \"Adults\",          \"description\": \"There are so many “-ologists“ that they can be hard to keep straight. However, this list could be a handy reference. This is not meant to be an exhaustive and all-inclusive list of what a specialist does, but it should provide you with a basic overview.\"      }
     * @summary Create specialtyTypeCategory.
     * @param {CreateSpecialtyTypeCategoryCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpecialtyTypeCategoriesApi
     */
    SpecialtyTypeCategoriesApi.prototype.apiV1SpecialtytypecategoriesPost = function (body, options) {
        return exports.SpecialtyTypeCategoriesApiFp(this.configuration).apiV1SpecialtytypecategoriesPost(body, options)(this.axios, this.basePath);
    };
    /**
     * Sample request:        DELETE /api/v1/SpecialtyTypeCategories/1
     * @summary Delete specialtyTypeCategory.
     * @param {string} specialtyTypeCategoryId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpecialtyTypeCategoriesApi
     */
    SpecialtyTypeCategoriesApi.prototype.apiV1SpecialtytypecategoriesSpecialtyTypeCategoryIdDelete = function (specialtyTypeCategoryId, options) {
        return exports.SpecialtyTypeCategoriesApiFp(this.configuration).apiV1SpecialtytypecategoriesSpecialtyTypeCategoryIdDelete(specialtyTypeCategoryId, options)(this.axios, this.basePath);
    };
    /**
     * Sample request:        GET /api/v1/SpecialtyTypeCategories/1
     * @summary Get specialtyTypeCategory.
     * @param {string} specialtyTypeCategoryId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpecialtyTypeCategoriesApi
     */
    SpecialtyTypeCategoriesApi.prototype.apiV1SpecialtytypecategoriesSpecialtyTypeCategoryIdGet = function (specialtyTypeCategoryId, options) {
        return exports.SpecialtyTypeCategoriesApiFp(this.configuration).apiV1SpecialtytypecategoriesSpecialtyTypeCategoryIdGet(specialtyTypeCategoryId, options)(this.axios, this.basePath);
    };
    /**
     * Sample request:        PUT /api/v1/SpecialtyTypeCategories/1      {          \"name\": \"Adults\",          \"description\": \"There are so many “-ologists“ that they can be hard to keep straight. However, this list could be a handy reference. This is not meant to be an exhaustive and all-inclusive list of what a specialist does, but it should provide you with a basic overview.\"      }
     * @summary Update specialtyTypeCategory
     * @param {string} specialtyTypeCategoryId
     * @param {UpdateSpecialtyTypeCategoryCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpecialtyTypeCategoriesApi
     */
    SpecialtyTypeCategoriesApi.prototype.apiV1SpecialtytypecategoriesSpecialtyTypeCategoryIdPut = function (specialtyTypeCategoryId, body, options) {
        return exports.SpecialtyTypeCategoriesApiFp(this.configuration).apiV1SpecialtytypecategoriesSpecialtyTypeCategoryIdPut(specialtyTypeCategoryId, body, options)(this.axios, this.basePath);
    };
    return SpecialtyTypeCategoriesApi;
}(base_1.BaseAPI));
exports.SpecialtyTypeCategoriesApi = SpecialtyTypeCategoriesApi;
/**
 * SpecialtyTypesApi - axios parameter creator
 * @export
 */
exports.SpecialtyTypesApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Sample request:        GET /api/v1/SpecialtyTypes
         * @summary Get all SpecialtyTypes.
         * @param {string} [id]
         * @param {string} [name]
         * @param {string} [description]
         * @param {object} [marketingType]
         * @param {Date} [created]
         * @param {number} [page]
         * @param {number} [limit]
         * @param {Date} [lastRetrieved]
         * @param {boolean} [current]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SpecialtytypesGet: function (id, name, description, marketingType, created, page, limit, lastRetrieved, current, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/api/v1/specialtytypes";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }
            if (name !== undefined) {
                localVarQueryParameter['Name'] = name;
            }
            if (description !== undefined) {
                localVarQueryParameter['Description'] = description;
            }
            if (marketingType !== undefined) {
                localVarQueryParameter['MarketingType'] = marketingType;
            }
            if (created !== undefined) {
                localVarQueryParameter['Created'] = (created instanceof Date) ?
                    created.toISOString() :
                    created;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (lastRetrieved !== undefined) {
                localVarQueryParameter['lastRetrieved'] = (lastRetrieved instanceof Date) ?
                    lastRetrieved.toISOString() :
                    lastRetrieved;
            }
            if (current !== undefined) {
                localVarQueryParameter['Current'] = current;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        POST /api/v1/SpecialtyTypes      {          \"name\": \"Coronary artery disease\",          \"description\": \"Coronary artery disease\",          \"specialtyTypeType\": \"Cardiology\"      }
         * @summary Create specialtyType.
         * @param {string} [specialtyTypeId]
         * @param {CreateSpecialtyTypeCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SpecialtytypesPost: function (specialtyTypeId, body, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/api/v1/specialtytypes";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (specialtyTypeId !== undefined) {
                localVarQueryParameter['specialtyTypeId'] = specialtyTypeId;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            var needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get specialtyType by slug.
         * @param {string} slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SpecialtytypesSlugsSlugGet: function (slug, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'slug' is not null or undefined
            if (slug === null || slug === undefined) {
                throw new base_1.RequiredError('slug', 'Required parameter slug was null or undefined when calling apiV1SpecialtytypesSlugsSlugGet.');
            }
            var localVarPath = "/api/v1/specialtytypes/slugs/{slug}"
                .replace("{" + "slug" + "}", encodeURIComponent(String(slug)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        DELETE /api/v1/SpecialtyTypes/1
         * @summary Delete specialtyType.
         * @param {string} specialtyTypeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SpecialtytypesSpecialtyTypeIdDelete: function (specialtyTypeId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'specialtyTypeId' is not null or undefined
            if (specialtyTypeId === null || specialtyTypeId === undefined) {
                throw new base_1.RequiredError('specialtyTypeId', 'Required parameter specialtyTypeId was null or undefined when calling apiV1SpecialtytypesSpecialtyTypeIdDelete.');
            }
            var localVarPath = "/api/v1/specialtytypes/{specialtyTypeId}"
                .replace("{" + "specialtyTypeId" + "}", encodeURIComponent(String(specialtyTypeId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        GET /api/v1/SpecialtyTypes/1
         * @summary Get specialtyType.
         * @param {string} specialtyTypeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SpecialtytypesSpecialtyTypeIdGet: function (specialtyTypeId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'specialtyTypeId' is not null or undefined
            if (specialtyTypeId === null || specialtyTypeId === undefined) {
                throw new base_1.RequiredError('specialtyTypeId', 'Required parameter specialtyTypeId was null or undefined when calling apiV1SpecialtytypesSpecialtyTypeIdGet.');
            }
            var localVarPath = "/api/v1/specialtytypes/{specialtyTypeId}"
                .replace("{" + "specialtyTypeId" + "}", encodeURIComponent(String(specialtyTypeId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        PUT /api/v1/SpecialtyTypes/1      {          \"name\": \"Dilated cardiomyopathy\",          \"description\": \"Dilated cardiomyopathy\"      }
         * @summary Update specialtyType
         * @param {string} specialtyTypeId
         * @param {UpdateSpecialtyTypeCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SpecialtytypesSpecialtyTypeIdPut: function (specialtyTypeId, body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'specialtyTypeId' is not null or undefined
            if (specialtyTypeId === null || specialtyTypeId === undefined) {
                throw new base_1.RequiredError('specialtyTypeId', 'Required parameter specialtyTypeId was null or undefined when calling apiV1SpecialtytypesSpecialtyTypeIdPut.');
            }
            var localVarPath = "/api/v1/specialtytypes/{specialtyTypeId}"
                .replace("{" + "specialtyTypeId" + "}", encodeURIComponent(String(specialtyTypeId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            var needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * SpecialtyTypesApi - functional programming interface
 * @export
 */
exports.SpecialtyTypesApiFp = function (configuration) {
    return {
        /**
         * Sample request:        GET /api/v1/SpecialtyTypes
         * @summary Get all SpecialtyTypes.
         * @param {string} [id]
         * @param {string} [name]
         * @param {string} [description]
         * @param {object} [marketingType]
         * @param {Date} [created]
         * @param {number} [page]
         * @param {number} [limit]
         * @param {Date} [lastRetrieved]
         * @param {boolean} [current]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SpecialtytypesGet: function (id, name, description, marketingType, created, page, limit, lastRetrieved, current, options) {
            var localVarAxiosArgs = exports.SpecialtyTypesApiAxiosParamCreator(configuration).apiV1SpecialtytypesGet(id, name, description, marketingType, created, page, limit, lastRetrieved, current, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        POST /api/v1/SpecialtyTypes      {          \"name\": \"Coronary artery disease\",          \"description\": \"Coronary artery disease\",          \"specialtyTypeType\": \"Cardiology\"      }
         * @summary Create specialtyType.
         * @param {string} [specialtyTypeId]
         * @param {CreateSpecialtyTypeCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SpecialtytypesPost: function (specialtyTypeId, body, options) {
            var localVarAxiosArgs = exports.SpecialtyTypesApiAxiosParamCreator(configuration).apiV1SpecialtytypesPost(specialtyTypeId, body, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Get specialtyType by slug.
         * @param {string} slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SpecialtytypesSlugsSlugGet: function (slug, options) {
            var localVarAxiosArgs = exports.SpecialtyTypesApiAxiosParamCreator(configuration).apiV1SpecialtytypesSlugsSlugGet(slug, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        DELETE /api/v1/SpecialtyTypes/1
         * @summary Delete specialtyType.
         * @param {string} specialtyTypeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SpecialtytypesSpecialtyTypeIdDelete: function (specialtyTypeId, options) {
            var localVarAxiosArgs = exports.SpecialtyTypesApiAxiosParamCreator(configuration).apiV1SpecialtytypesSpecialtyTypeIdDelete(specialtyTypeId, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        GET /api/v1/SpecialtyTypes/1
         * @summary Get specialtyType.
         * @param {string} specialtyTypeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SpecialtytypesSpecialtyTypeIdGet: function (specialtyTypeId, options) {
            var localVarAxiosArgs = exports.SpecialtyTypesApiAxiosParamCreator(configuration).apiV1SpecialtytypesSpecialtyTypeIdGet(specialtyTypeId, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        PUT /api/v1/SpecialtyTypes/1      {          \"name\": \"Dilated cardiomyopathy\",          \"description\": \"Dilated cardiomyopathy\"      }
         * @summary Update specialtyType
         * @param {string} specialtyTypeId
         * @param {UpdateSpecialtyTypeCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SpecialtytypesSpecialtyTypeIdPut: function (specialtyTypeId, body, options) {
            var localVarAxiosArgs = exports.SpecialtyTypesApiAxiosParamCreator(configuration).apiV1SpecialtytypesSpecialtyTypeIdPut(specialtyTypeId, body, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * SpecialtyTypesApi - factory interface
 * @export
 */
exports.SpecialtyTypesApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Sample request:        GET /api/v1/SpecialtyTypes
         * @summary Get all SpecialtyTypes.
         * @param {string} [id]
         * @param {string} [name]
         * @param {string} [description]
         * @param {object} [marketingType]
         * @param {Date} [created]
         * @param {number} [page]
         * @param {number} [limit]
         * @param {Date} [lastRetrieved]
         * @param {boolean} [current]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SpecialtytypesGet: function (id, name, description, marketingType, created, page, limit, lastRetrieved, current, options) {
            return exports.SpecialtyTypesApiFp(configuration).apiV1SpecialtytypesGet(id, name, description, marketingType, created, page, limit, lastRetrieved, current, options)(axios, basePath);
        },
        /**
         * Sample request:        POST /api/v1/SpecialtyTypes      {          \"name\": \"Coronary artery disease\",          \"description\": \"Coronary artery disease\",          \"specialtyTypeType\": \"Cardiology\"      }
         * @summary Create specialtyType.
         * @param {string} [specialtyTypeId]
         * @param {CreateSpecialtyTypeCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SpecialtytypesPost: function (specialtyTypeId, body, options) {
            return exports.SpecialtyTypesApiFp(configuration).apiV1SpecialtytypesPost(specialtyTypeId, body, options)(axios, basePath);
        },
        /**
         *
         * @summary Get specialtyType by slug.
         * @param {string} slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SpecialtytypesSlugsSlugGet: function (slug, options) {
            return exports.SpecialtyTypesApiFp(configuration).apiV1SpecialtytypesSlugsSlugGet(slug, options)(axios, basePath);
        },
        /**
         * Sample request:        DELETE /api/v1/SpecialtyTypes/1
         * @summary Delete specialtyType.
         * @param {string} specialtyTypeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SpecialtytypesSpecialtyTypeIdDelete: function (specialtyTypeId, options) {
            return exports.SpecialtyTypesApiFp(configuration).apiV1SpecialtytypesSpecialtyTypeIdDelete(specialtyTypeId, options)(axios, basePath);
        },
        /**
         * Sample request:        GET /api/v1/SpecialtyTypes/1
         * @summary Get specialtyType.
         * @param {string} specialtyTypeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SpecialtytypesSpecialtyTypeIdGet: function (specialtyTypeId, options) {
            return exports.SpecialtyTypesApiFp(configuration).apiV1SpecialtytypesSpecialtyTypeIdGet(specialtyTypeId, options)(axios, basePath);
        },
        /**
         * Sample request:        PUT /api/v1/SpecialtyTypes/1      {          \"name\": \"Dilated cardiomyopathy\",          \"description\": \"Dilated cardiomyopathy\"      }
         * @summary Update specialtyType
         * @param {string} specialtyTypeId
         * @param {UpdateSpecialtyTypeCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SpecialtytypesSpecialtyTypeIdPut: function (specialtyTypeId, body, options) {
            return exports.SpecialtyTypesApiFp(configuration).apiV1SpecialtytypesSpecialtyTypeIdPut(specialtyTypeId, body, options)(axios, basePath);
        },
    };
};
/**
 * SpecialtyTypesApi - object-oriented interface
 * @export
 * @class SpecialtyTypesApi
 * @extends {BaseAPI}
 */
var SpecialtyTypesApi = /** @class */ (function (_super) {
    __extends(SpecialtyTypesApi, _super);
    function SpecialtyTypesApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Sample request:        GET /api/v1/SpecialtyTypes
     * @summary Get all SpecialtyTypes.
     * @param {string} [id]
     * @param {string} [name]
     * @param {string} [description]
     * @param {object} [marketingType]
     * @param {Date} [created]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpecialtyTypesApi
     */
    SpecialtyTypesApi.prototype.apiV1SpecialtytypesGet = function (id, name, description, marketingType, created, page, limit, lastRetrieved, current, options) {
        return exports.SpecialtyTypesApiFp(this.configuration).apiV1SpecialtytypesGet(id, name, description, marketingType, created, page, limit, lastRetrieved, current, options)(this.axios, this.basePath);
    };
    /**
     * Sample request:        POST /api/v1/SpecialtyTypes      {          \"name\": \"Coronary artery disease\",          \"description\": \"Coronary artery disease\",          \"specialtyTypeType\": \"Cardiology\"      }
     * @summary Create specialtyType.
     * @param {string} [specialtyTypeId]
     * @param {CreateSpecialtyTypeCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpecialtyTypesApi
     */
    SpecialtyTypesApi.prototype.apiV1SpecialtytypesPost = function (specialtyTypeId, body, options) {
        return exports.SpecialtyTypesApiFp(this.configuration).apiV1SpecialtytypesPost(specialtyTypeId, body, options)(this.axios, this.basePath);
    };
    /**
     *
     * @summary Get specialtyType by slug.
     * @param {string} slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpecialtyTypesApi
     */
    SpecialtyTypesApi.prototype.apiV1SpecialtytypesSlugsSlugGet = function (slug, options) {
        return exports.SpecialtyTypesApiFp(this.configuration).apiV1SpecialtytypesSlugsSlugGet(slug, options)(this.axios, this.basePath);
    };
    /**
     * Sample request:        DELETE /api/v1/SpecialtyTypes/1
     * @summary Delete specialtyType.
     * @param {string} specialtyTypeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpecialtyTypesApi
     */
    SpecialtyTypesApi.prototype.apiV1SpecialtytypesSpecialtyTypeIdDelete = function (specialtyTypeId, options) {
        return exports.SpecialtyTypesApiFp(this.configuration).apiV1SpecialtytypesSpecialtyTypeIdDelete(specialtyTypeId, options)(this.axios, this.basePath);
    };
    /**
     * Sample request:        GET /api/v1/SpecialtyTypes/1
     * @summary Get specialtyType.
     * @param {string} specialtyTypeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpecialtyTypesApi
     */
    SpecialtyTypesApi.prototype.apiV1SpecialtytypesSpecialtyTypeIdGet = function (specialtyTypeId, options) {
        return exports.SpecialtyTypesApiFp(this.configuration).apiV1SpecialtytypesSpecialtyTypeIdGet(specialtyTypeId, options)(this.axios, this.basePath);
    };
    /**
     * Sample request:        PUT /api/v1/SpecialtyTypes/1      {          \"name\": \"Dilated cardiomyopathy\",          \"description\": \"Dilated cardiomyopathy\"      }
     * @summary Update specialtyType
     * @param {string} specialtyTypeId
     * @param {UpdateSpecialtyTypeCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpecialtyTypesApi
     */
    SpecialtyTypesApi.prototype.apiV1SpecialtytypesSpecialtyTypeIdPut = function (specialtyTypeId, body, options) {
        return exports.SpecialtyTypesApiFp(this.configuration).apiV1SpecialtytypesSpecialtyTypeIdPut(specialtyTypeId, body, options)(this.axios, this.basePath);
    };
    return SpecialtyTypesApi;
}(base_1.BaseAPI));
exports.SpecialtyTypesApi = SpecialtyTypesApi;
/**
 * YoutubesApi - axios parameter creator
 * @export
 */
exports.YoutubesApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Sample request:        GET /api/v1/youtubes
         * @summary Get all youtubes.
         * @param {string} [id]
         * @param {string} [title]
         * @param {string} [normalizedTitle]
         * @param {string} [description]
         * @param {object} [marketingType]
         * @param {string} [tag]
         * @param {number} [page]
         * @param {number} [limit]
         * @param {Date} [lastRetrieved]
         * @param {boolean} [current]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1YoutubesGet: function (id, title, normalizedTitle, description, marketingType, tag, page, limit, lastRetrieved, current, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/api/v1/youtubes";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }
            if (title !== undefined) {
                localVarQueryParameter['Title'] = title;
            }
            if (normalizedTitle !== undefined) {
                localVarQueryParameter['NormalizedTitle'] = normalizedTitle;
            }
            if (description !== undefined) {
                localVarQueryParameter['Description'] = description;
            }
            if (marketingType !== undefined) {
                localVarQueryParameter['MarketingType'] = marketingType;
            }
            if (tag !== undefined) {
                localVarQueryParameter['Tag'] = tag;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (lastRetrieved !== undefined) {
                localVarQueryParameter['lastRetrieved'] = (lastRetrieved instanceof Date) ?
                    lastRetrieved.toISOString() :
                    lastRetrieved;
            }
            if (current !== undefined) {
                localVarQueryParameter['Current'] = current;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        POST /api/v1/youtubes      {          \"title\": \"Samsung Hospital Youtube\",          \"description\": \"This is an youtube.\",          \"body\": \"youtube body here\",          \"status\": \"Draft\",          \"hospitalId\": 1,          \"tags\": [            {              \"value\": \"string\",              \"order\": 0              }          ],          \"medias\": [            {              \"mediaType\": \"Photo\",              \"url\": \"string\",              \"thumbnailUrl\": \"string\",              \"description\": \"string\",              \"order\": 0            }          ]      }
         * @summary Create an youtube.
         * @param {CreateYoutubeCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1YoutubesPost: function (body, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/api/v1/youtubes";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            var needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get youtube by slug.
         * @param {string} slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1YoutubesSlugsSlugGet: function (slug, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'slug' is not null or undefined
            if (slug === null || slug === undefined) {
                throw new base_1.RequiredError('slug', 'Required parameter slug was null or undefined when calling apiV1YoutubesSlugsSlugGet.');
            }
            var localVarPath = "/api/v1/youtubes/slugs/{slug}"
                .replace("{" + "slug" + "}", encodeURIComponent(String(slug)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        DELETE /api/v1/youtubes/1
         * @summary Delete youtube.
         * @param {string} youtubeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1YoutubesYoutubeIdDelete: function (youtubeId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'youtubeId' is not null or undefined
            if (youtubeId === null || youtubeId === undefined) {
                throw new base_1.RequiredError('youtubeId', 'Required parameter youtubeId was null or undefined when calling apiV1YoutubesYoutubeIdDelete.');
            }
            var localVarPath = "/api/v1/youtubes/{youtubeId}"
                .replace("{" + "youtubeId" + "}", encodeURIComponent(String(youtubeId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        GET /api/v1/youtubes/1
         * @summary Get youtube.
         * @param {string} youtubeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1YoutubesYoutubeIdGet: function (youtubeId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'youtubeId' is not null or undefined
            if (youtubeId === null || youtubeId === undefined) {
                throw new base_1.RequiredError('youtubeId', 'Required parameter youtubeId was null or undefined when calling apiV1YoutubesYoutubeIdGet.');
            }
            var localVarPath = "/api/v1/youtubes/{youtubeId}"
                .replace("{" + "youtubeId" + "}", encodeURIComponent(String(youtubeId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sample request:        PUT /api/v1/youtubes/1      {          \"title\": \"Samsung Hospital Youtube\",          \"description\": \"This is an youtube.\",                  \"tags\": [            {              \"value\": \"youtubetag1\",              \"order\": 0            },            {              \"value\": \"youtubetag2\",              \"order\": 0            }          ],          \"medias\": [            {              \"mediaType\": \"Photo\",              \"url\": \"string\",              \"thumbnailUrl\": \"string\",              \"description\": \"string\",              \"order\": 0            }          ]      }
         * @summary Update youtube.
         * @param {string} youtubeId
         * @param {UpdateYoutubeCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1YoutubesYoutubeIdPut: function (youtubeId, body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'youtubeId' is not null or undefined
            if (youtubeId === null || youtubeId === undefined) {
                throw new base_1.RequiredError('youtubeId', 'Required parameter youtubeId was null or undefined when calling apiV1YoutubesYoutubeIdPut.');
            }
            var localVarPath = "/api/v1/youtubes/{youtubeId}"
                .replace("{" + "youtubeId" + "}", encodeURIComponent(String(youtubeId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["CloudHospital_api", "IdentityServerApi"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            var needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * YoutubesApi - functional programming interface
 * @export
 */
exports.YoutubesApiFp = function (configuration) {
    return {
        /**
         * Sample request:        GET /api/v1/youtubes
         * @summary Get all youtubes.
         * @param {string} [id]
         * @param {string} [title]
         * @param {string} [normalizedTitle]
         * @param {string} [description]
         * @param {object} [marketingType]
         * @param {string} [tag]
         * @param {number} [page]
         * @param {number} [limit]
         * @param {Date} [lastRetrieved]
         * @param {boolean} [current]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1YoutubesGet: function (id, title, normalizedTitle, description, marketingType, tag, page, limit, lastRetrieved, current, options) {
            var localVarAxiosArgs = exports.YoutubesApiAxiosParamCreator(configuration).apiV1YoutubesGet(id, title, normalizedTitle, description, marketingType, tag, page, limit, lastRetrieved, current, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        POST /api/v1/youtubes      {          \"title\": \"Samsung Hospital Youtube\",          \"description\": \"This is an youtube.\",          \"body\": \"youtube body here\",          \"status\": \"Draft\",          \"hospitalId\": 1,          \"tags\": [            {              \"value\": \"string\",              \"order\": 0              }          ],          \"medias\": [            {              \"mediaType\": \"Photo\",              \"url\": \"string\",              \"thumbnailUrl\": \"string\",              \"description\": \"string\",              \"order\": 0            }          ]      }
         * @summary Create an youtube.
         * @param {CreateYoutubeCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1YoutubesPost: function (body, options) {
            var localVarAxiosArgs = exports.YoutubesApiAxiosParamCreator(configuration).apiV1YoutubesPost(body, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Get youtube by slug.
         * @param {string} slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1YoutubesSlugsSlugGet: function (slug, options) {
            var localVarAxiosArgs = exports.YoutubesApiAxiosParamCreator(configuration).apiV1YoutubesSlugsSlugGet(slug, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        DELETE /api/v1/youtubes/1
         * @summary Delete youtube.
         * @param {string} youtubeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1YoutubesYoutubeIdDelete: function (youtubeId, options) {
            var localVarAxiosArgs = exports.YoutubesApiAxiosParamCreator(configuration).apiV1YoutubesYoutubeIdDelete(youtubeId, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        GET /api/v1/youtubes/1
         * @summary Get youtube.
         * @param {string} youtubeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1YoutubesYoutubeIdGet: function (youtubeId, options) {
            var localVarAxiosArgs = exports.YoutubesApiAxiosParamCreator(configuration).apiV1YoutubesYoutubeIdGet(youtubeId, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sample request:        PUT /api/v1/youtubes/1      {          \"title\": \"Samsung Hospital Youtube\",          \"description\": \"This is an youtube.\",                  \"tags\": [            {              \"value\": \"youtubetag1\",              \"order\": 0            },            {              \"value\": \"youtubetag2\",              \"order\": 0            }          ],          \"medias\": [            {              \"mediaType\": \"Photo\",              \"url\": \"string\",              \"thumbnailUrl\": \"string\",              \"description\": \"string\",              \"order\": 0            }          ]      }
         * @summary Update youtube.
         * @param {string} youtubeId
         * @param {UpdateYoutubeCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1YoutubesYoutubeIdPut: function (youtubeId, body, options) {
            var localVarAxiosArgs = exports.YoutubesApiAxiosParamCreator(configuration).apiV1YoutubesYoutubeIdPut(youtubeId, body, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * YoutubesApi - factory interface
 * @export
 */
exports.YoutubesApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Sample request:        GET /api/v1/youtubes
         * @summary Get all youtubes.
         * @param {string} [id]
         * @param {string} [title]
         * @param {string} [normalizedTitle]
         * @param {string} [description]
         * @param {object} [marketingType]
         * @param {string} [tag]
         * @param {number} [page]
         * @param {number} [limit]
         * @param {Date} [lastRetrieved]
         * @param {boolean} [current]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1YoutubesGet: function (id, title, normalizedTitle, description, marketingType, tag, page, limit, lastRetrieved, current, options) {
            return exports.YoutubesApiFp(configuration).apiV1YoutubesGet(id, title, normalizedTitle, description, marketingType, tag, page, limit, lastRetrieved, current, options)(axios, basePath);
        },
        /**
         * Sample request:        POST /api/v1/youtubes      {          \"title\": \"Samsung Hospital Youtube\",          \"description\": \"This is an youtube.\",          \"body\": \"youtube body here\",          \"status\": \"Draft\",          \"hospitalId\": 1,          \"tags\": [            {              \"value\": \"string\",              \"order\": 0              }          ],          \"medias\": [            {              \"mediaType\": \"Photo\",              \"url\": \"string\",              \"thumbnailUrl\": \"string\",              \"description\": \"string\",              \"order\": 0            }          ]      }
         * @summary Create an youtube.
         * @param {CreateYoutubeCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1YoutubesPost: function (body, options) {
            return exports.YoutubesApiFp(configuration).apiV1YoutubesPost(body, options)(axios, basePath);
        },
        /**
         *
         * @summary Get youtube by slug.
         * @param {string} slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1YoutubesSlugsSlugGet: function (slug, options) {
            return exports.YoutubesApiFp(configuration).apiV1YoutubesSlugsSlugGet(slug, options)(axios, basePath);
        },
        /**
         * Sample request:        DELETE /api/v1/youtubes/1
         * @summary Delete youtube.
         * @param {string} youtubeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1YoutubesYoutubeIdDelete: function (youtubeId, options) {
            return exports.YoutubesApiFp(configuration).apiV1YoutubesYoutubeIdDelete(youtubeId, options)(axios, basePath);
        },
        /**
         * Sample request:        GET /api/v1/youtubes/1
         * @summary Get youtube.
         * @param {string} youtubeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1YoutubesYoutubeIdGet: function (youtubeId, options) {
            return exports.YoutubesApiFp(configuration).apiV1YoutubesYoutubeIdGet(youtubeId, options)(axios, basePath);
        },
        /**
         * Sample request:        PUT /api/v1/youtubes/1      {          \"title\": \"Samsung Hospital Youtube\",          \"description\": \"This is an youtube.\",                  \"tags\": [            {              \"value\": \"youtubetag1\",              \"order\": 0            },            {              \"value\": \"youtubetag2\",              \"order\": 0            }          ],          \"medias\": [            {              \"mediaType\": \"Photo\",              \"url\": \"string\",              \"thumbnailUrl\": \"string\",              \"description\": \"string\",              \"order\": 0            }          ]      }
         * @summary Update youtube.
         * @param {string} youtubeId
         * @param {UpdateYoutubeCommand} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1YoutubesYoutubeIdPut: function (youtubeId, body, options) {
            return exports.YoutubesApiFp(configuration).apiV1YoutubesYoutubeIdPut(youtubeId, body, options)(axios, basePath);
        },
    };
};
/**
 * YoutubesApi - object-oriented interface
 * @export
 * @class YoutubesApi
 * @extends {BaseAPI}
 */
var YoutubesApi = /** @class */ (function (_super) {
    __extends(YoutubesApi, _super);
    function YoutubesApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Sample request:        GET /api/v1/youtubes
     * @summary Get all youtubes.
     * @param {string} [id]
     * @param {string} [title]
     * @param {string} [normalizedTitle]
     * @param {string} [description]
     * @param {object} [marketingType]
     * @param {string} [tag]
     * @param {number} [page]
     * @param {number} [limit]
     * @param {Date} [lastRetrieved]
     * @param {boolean} [current]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof YoutubesApi
     */
    YoutubesApi.prototype.apiV1YoutubesGet = function (id, title, normalizedTitle, description, marketingType, tag, page, limit, lastRetrieved, current, options) {
        return exports.YoutubesApiFp(this.configuration).apiV1YoutubesGet(id, title, normalizedTitle, description, marketingType, tag, page, limit, lastRetrieved, current, options)(this.axios, this.basePath);
    };
    /**
     * Sample request:        POST /api/v1/youtubes      {          \"title\": \"Samsung Hospital Youtube\",          \"description\": \"This is an youtube.\",          \"body\": \"youtube body here\",          \"status\": \"Draft\",          \"hospitalId\": 1,          \"tags\": [            {              \"value\": \"string\",              \"order\": 0              }          ],          \"medias\": [            {              \"mediaType\": \"Photo\",              \"url\": \"string\",              \"thumbnailUrl\": \"string\",              \"description\": \"string\",              \"order\": 0            }          ]      }
     * @summary Create an youtube.
     * @param {CreateYoutubeCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof YoutubesApi
     */
    YoutubesApi.prototype.apiV1YoutubesPost = function (body, options) {
        return exports.YoutubesApiFp(this.configuration).apiV1YoutubesPost(body, options)(this.axios, this.basePath);
    };
    /**
     *
     * @summary Get youtube by slug.
     * @param {string} slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof YoutubesApi
     */
    YoutubesApi.prototype.apiV1YoutubesSlugsSlugGet = function (slug, options) {
        return exports.YoutubesApiFp(this.configuration).apiV1YoutubesSlugsSlugGet(slug, options)(this.axios, this.basePath);
    };
    /**
     * Sample request:        DELETE /api/v1/youtubes/1
     * @summary Delete youtube.
     * @param {string} youtubeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof YoutubesApi
     */
    YoutubesApi.prototype.apiV1YoutubesYoutubeIdDelete = function (youtubeId, options) {
        return exports.YoutubesApiFp(this.configuration).apiV1YoutubesYoutubeIdDelete(youtubeId, options)(this.axios, this.basePath);
    };
    /**
     * Sample request:        GET /api/v1/youtubes/1
     * @summary Get youtube.
     * @param {string} youtubeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof YoutubesApi
     */
    YoutubesApi.prototype.apiV1YoutubesYoutubeIdGet = function (youtubeId, options) {
        return exports.YoutubesApiFp(this.configuration).apiV1YoutubesYoutubeIdGet(youtubeId, options)(this.axios, this.basePath);
    };
    /**
     * Sample request:        PUT /api/v1/youtubes/1      {          \"title\": \"Samsung Hospital Youtube\",          \"description\": \"This is an youtube.\",                  \"tags\": [            {              \"value\": \"youtubetag1\",              \"order\": 0            },            {              \"value\": \"youtubetag2\",              \"order\": 0            }          ],          \"medias\": [            {              \"mediaType\": \"Photo\",              \"url\": \"string\",              \"thumbnailUrl\": \"string\",              \"description\": \"string\",              \"order\": 0            }          ]      }
     * @summary Update youtube.
     * @param {string} youtubeId
     * @param {UpdateYoutubeCommand} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof YoutubesApi
     */
    YoutubesApi.prototype.apiV1YoutubesYoutubeIdPut = function (youtubeId, body, options) {
        return exports.YoutubesApiFp(this.configuration).apiV1YoutubesYoutubeIdPut(youtubeId, body, options)(this.axios, this.basePath);
    };
    return YoutubesApi;
}(base_1.BaseAPI));
exports.YoutubesApi = YoutubesApi;
